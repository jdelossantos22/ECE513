
h:/Documents/Masters/ECE513/Project/ECE513/Particle/v2/target/2.2.0-rc.2/argon/v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005010  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9030  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e498  000d9034  0001e498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002e8  2003e508  2003e508  0002e508  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d90a4  000d90a4  000290a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d90cc  000d90cc  000290cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017cbd0  00000000  00000000  000290d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001904b  00000000  00000000  001a5ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b46e  00000000  00000000  001beceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002978  00000000  00000000  001ea159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007520  00000000  00000000  001ecad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bb0c  00000000  00000000  001f3ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003df64  00000000  00000000  0022fafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105a82  00000000  00000000  0026da61  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000768c  00000000  00000000  003734e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fcad 	bl	d8990 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fccf 	bl	d89e0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e498 	.word	0x2003e498
   d404c:	000d9034 	.word	0x000d9034
   d4050:	2003e508 	.word	0x2003e508
   d4054:	2003e508 	.word	0x2003e508
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fe59 	bl	d5d18 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d8ffc 	.word	0x000d8ffc
   d4080:	000d9024 	.word	0x000d9024

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8fc 	b.w	d4280 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa1f 	bl	d44cc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bdf9 	b.w	d5c88 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bb31 	b.w	d56fc <malloc>

000d409a <_Znaj>:
   d409a:	f001 bb2f 	b.w	d56fc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bb35 	b.w	d570c <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bb33 	b.w	d570c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CToggleLedC1Ev>:
#include "toggleLed.h"


CToggleLed::CToggleLed() {
   d40b8:	b538      	push	{r3, r4, r5, lr}
   d40ba:	f100 0510 	add.w	r5, r0, #16
   d40be:	4604      	mov	r4, r0
   d40c0:	4904      	ldr	r1, [pc, #16]	; (d40d4 <_ZN10CToggleLedC1Ev+0x1c>)
   d40c2:	4628      	mov	r0, r5
   d40c4:	f001 fbef 	bl	d58a6 <_ZN6StringC1EPKc>
    statusStr = "{}";
   d40c8:	4903      	ldr	r1, [pc, #12]	; (d40d8 <_ZN10CToggleLedC1Ev+0x20>)
   d40ca:	4628      	mov	r0, r5
   d40cc:	f001 fc3e 	bl	d594c <_ZN6StringaSEPKc>
}
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	000d8eaf 	.word	0x000d8eaf
   d40d8:	000d8c54 	.word	0x000d8c54

000d40dc <_ZN10CToggleLed15createStatusStrEv>:
    }

    createStatusStr();
}

void CToggleLed::createStatusStr() {
   d40dc:	b510      	push	{r4, lr}
   d40de:	b086      	sub	sp, #24
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40e0:	68c3      	ldr	r3, [r0, #12]
   d40e2:	9301      	str	r3, [sp, #4]
   d40e4:	7803      	ldrb	r3, [r0, #0]
   d40e6:	9300      	str	r3, [sp, #0]
   d40e8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
void CToggleLed::createStatusStr() {
   d40ec:	4604      	mov	r4, r0
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40ee:	4907      	ldr	r1, [pc, #28]	; (d410c <_ZN10CToggleLed15createStatusStrEv+0x30>)
   d40f0:	a802      	add	r0, sp, #8
   d40f2:	f001 fc69 	bl	d59c8 <_ZN6String6formatEPKcz>
   d40f6:	a902      	add	r1, sp, #8
   d40f8:	f104 0010 	add.w	r0, r4, #16
   d40fc:	f001 fc1e 	bl	d593c <_ZN6StringaSEOS_>
   d4100:	a802      	add	r0, sp, #8
   d4102:	f001 fb85 	bl	d5810 <_ZN6StringD1Ev>
   d4106:	b006      	add	sp, #24
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000d8c57 	.word	0x000d8c57

000d4110 <_ZN10CToggleLed7executeEv>:
void CToggleLed::execute() {
   d4110:	b538      	push	{r3, r4, r5, lr}
    switch (state) {
   d4112:	7802      	ldrb	r2, [r0, #0]
void CToggleLed::execute() {
   d4114:	4604      	mov	r4, r0
    switch (state) {
   d4116:	b132      	cbz	r2, d4126 <_ZN10CToggleLed7executeEv+0x16>
   d4118:	2a01      	cmp	r2, #1
   d411a:	d012      	beq.n	d4142 <_ZN10CToggleLed7executeEv+0x32>
    createStatusStr();
   d411c:	4620      	mov	r0, r4
}
   d411e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4122:	f7ff bfdb 	b.w	d40dc <_ZN10CToggleLed15createStatusStrEv>
            if (++tick >= period) {
   d4126:	6843      	ldr	r3, [r0, #4]
   d4128:	6881      	ldr	r1, [r0, #8]
   d412a:	3301      	adds	r3, #1
   d412c:	428b      	cmp	r3, r1
   d412e:	6043      	str	r3, [r0, #4]
   d4130:	dbf4      	blt.n	d411c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d4132:	6042      	str	r2, [r0, #4]
                digitalWrite(LED, HIGH);
   d4134:	2101      	movs	r1, #1
   d4136:	2007      	movs	r0, #7
   d4138:	f002 fbad 	bl	d6896 <digitalWrite>
                state = CToggleLed::S_ON;
   d413c:	2301      	movs	r3, #1
   d413e:	7023      	strb	r3, [r4, #0]
   d4140:	e7ec      	b.n	d411c <_ZN10CToggleLed7executeEv+0xc>
            if (++tick >= period) {
   d4142:	6843      	ldr	r3, [r0, #4]
   d4144:	6882      	ldr	r2, [r0, #8]
   d4146:	3301      	adds	r3, #1
   d4148:	4293      	cmp	r3, r2
   d414a:	6043      	str	r3, [r0, #4]
   d414c:	dbe6      	blt.n	d411c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d414e:	2500      	movs	r5, #0
   d4150:	6045      	str	r5, [r0, #4]
                digitalWrite(LED, LOW);
   d4152:	4629      	mov	r1, r5
   d4154:	2007      	movs	r0, #7
   d4156:	f002 fb9e 	bl	d6896 <digitalWrite>
                state = CToggleLed::S_OFF;
   d415a:	7025      	strb	r5, [r4, #0]
   d415c:	e7de      	b.n	d411c <_ZN10CToggleLed7executeEv+0xc>

000d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d415e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4160:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4162:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4164:	b17c      	cbz	r4, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4166:	6863      	ldr	r3, [r4, #4]
   d4168:	3b01      	subs	r3, #1
   d416a:	6063      	str	r3, [r4, #4]
   d416c:	b95b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4620      	mov	r0, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4176:	68a3      	ldr	r3, [r4, #8]
   d4178:	3b01      	subs	r3, #1
   d417a:	60a3      	str	r3, [r4, #8]
   d417c:	b91b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	68db      	ldr	r3, [r3, #12]
   d4184:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4186:	4628      	mov	r0, r5
   d4188:	bd38      	pop	{r3, r4, r5, pc}

000d418a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d418a:	b513      	push	{r0, r1, r4, lr}
   d418c:	460b      	mov	r3, r1
   d418e:	4604      	mov	r4, r0
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4190:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d4192:	685b      	ldr	r3, [r3, #4]
    return JSONValue(v_, d_);
   d4194:	6909      	ldr	r1, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4196:	9200      	str	r2, [sp, #0]
      : _M_pi(__r._M_pi)
   d4198:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d419a:	b113      	cbz	r3, d41a2 <_ZNK5spark18JSONObjectIterator5valueEv+0x18>
    { ++_M_use_count; }
   d419c:	685a      	ldr	r2, [r3, #4]
   d419e:	3201      	adds	r2, #1
   d41a0:	605a      	str	r2, [r3, #4]
   d41a2:	466a      	mov	r2, sp
   d41a4:	4620      	mov	r0, r4
   d41a6:	f002 f8e9 	bl	d637c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41aa:	a801      	add	r0, sp, #4
   d41ac:	f7ff ffd7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	b002      	add	sp, #8
   d41b4:	bd10      	pop	{r4, pc}
	...

000d41b8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>:
void CToggleLed::cmdProcessing(JSONValue cmdJson) {
   d41b8:	b570      	push	{r4, r5, r6, lr}
   d41ba:	460b      	mov	r3, r1
   d41bc:	b08c      	sub	sp, #48	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41be:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d41c0:	685b      	ldr	r3, [r3, #4]
        JSONObjectIterator(value.t_, value.d_) {
   d41c2:	6889      	ldr	r1, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41c4:	9202      	str	r2, [sp, #8]
   d41c6:	4604      	mov	r4, r0
      : _M_pi(__r._M_pi)
   d41c8:	9303      	str	r3, [sp, #12]
	if (_M_pi != 0)
   d41ca:	b113      	cbz	r3, d41d2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x1a>
    { ++_M_use_count; }
   d41cc:	685a      	ldr	r2, [r3, #4]
   d41ce:	3201      	adds	r2, #1
   d41d0:	605a      	str	r2, [r3, #4]
   d41d2:	aa02      	add	r2, sp, #8
   d41d4:	a806      	add	r0, sp, #24
   d41d6:	f002 fa79 	bl	d66cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d41da:	a803      	add	r0, sp, #12
   d41dc:	f7ff ffbf 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d41e0:	4e1f      	ldr	r6, [pc, #124]	; (d4260 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0xa8>)
    while (iter.next()) {
   d41e2:	a806      	add	r0, sp, #24
   d41e4:	f002 fa8a 	bl	d66fc <_ZN5spark18JSONObjectIterator4nextEv>
   d41e8:	2800      	cmp	r0, #0
   d41ea:	d033      	beq.n	d4254 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x9c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41ec:	9b06      	ldr	r3, [sp, #24]
   d41ee:	9300      	str	r3, [sp, #0]
      : _M_pi(__r._M_pi)
   d41f0:	9b07      	ldr	r3, [sp, #28]
    return JSONString(k_, d_);
   d41f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d41f4:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d41f6:	b113      	cbz	r3, d41fe <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x46>
    { ++_M_use_count; }
   d41f8:	685a      	ldr	r2, [r3, #4]
   d41fa:	3201      	adds	r2, #1
   d41fc:	605a      	str	r2, [r3, #4]
   d41fe:	466a      	mov	r2, sp
   d4200:	a802      	add	r0, sp, #8
   d4202:	f002 fa3f 	bl	d6684 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4206:	a801      	add	r0, sp, #4
   d4208:	f7ff ffa9 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d420c:	9804      	ldr	r0, [sp, #16]
   d420e:	4631      	mov	r1, r6
   d4210:	f004 fc12 	bl	d8a38 <strcmp>
   d4214:	4605      	mov	r5, r0
   d4216:	a803      	add	r0, sp, #12
   d4218:	f7ff ffa1 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "frequency") {
   d421c:	2d00      	cmp	r5, #0
   d421e:	d1e0      	bne.n	d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
            hz = (int)iter.value().toInt();
   d4220:	a906      	add	r1, sp, #24
   d4222:	a802      	add	r0, sp, #8
   d4224:	f7ff ffb1 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4228:	a802      	add	r0, sp, #8
   d422a:	f002 f91b 	bl	d6464 <_ZNK5spark9JSONValue5toIntEv>
   d422e:	60e0      	str	r0, [r4, #12]
   d4230:	a803      	add	r0, sp, #12
   d4232:	f7ff ff94 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            period = (int)iter.value().toInt() * LOOP_FREQUENCY;
   d4236:	a906      	add	r1, sp, #24
   d4238:	a802      	add	r0, sp, #8
   d423a:	f7ff ffa6 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d423e:	a802      	add	r0, sp, #8
   d4240:	f002 f910 	bl	d6464 <_ZNK5spark9JSONValue5toIntEv>
   d4244:	230a      	movs	r3, #10
   d4246:	4358      	muls	r0, r3
   d4248:	60a0      	str	r0, [r4, #8]
   d424a:	a803      	add	r0, sp, #12
   d424c:	f7ff ff87 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tick = 0;
   d4250:	6065      	str	r5, [r4, #4]
   d4252:	e7c6      	b.n	d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
   d4254:	a807      	add	r0, sp, #28
   d4256:	f7ff ff82 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d425a:	b00c      	add	sp, #48	; 0x30
   d425c:	bd70      	pop	{r4, r5, r6, pc}
   d425e:	bf00      	nop
   d4260:	000d8c75 	.word	0x000d8c75

000d4264 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4264:	b40e      	push	{r1, r2, r3}
   d4266:	b503      	push	{r0, r1, lr}
   d4268:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d426a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d426c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4270:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4272:	f001 fc2e 	bl	d5ad2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4276:	b002      	add	sp, #8
   d4278:	f85d eb04 	ldr.w	lr, [sp], #4
   d427c:	b003      	add	sp, #12
   d427e:	4770      	bx	lr

000d4280 <setup>:

  }
}

// setup() runs once, when the device is first turned on.
void setup() {
   d4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(LED, OUTPUT);
   d4282:	2101      	movs	r1, #1
   d4284:	2007      	movs	r0, #7
   d4286:	f002 faf5 	bl	d6874 <pinMode>
  RGB.control(true);
   d428a:	2001      	movs	r0, #1
   d428c:	f001 fca1 	bl	d5bd2 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);   // default color white
   d4290:	22ff      	movs	r2, #255	; 0xff
   d4292:	4611      	mov	r1, r2
   d4294:	4610      	mov	r0, r2
   d4296:	f001 fcac 	bl	d5bf2 <_ZN8RGBClass5colorEiii>
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d429a:	4d27      	ldr	r5, [pc, #156]	; (d4338 <setup+0xb8>)
   d429c:	4e27      	ldr	r6, [pc, #156]	; (d433c <setup+0xbc>)
  Serial.begin(9600);
   d429e:	f001 fe3d 	bl	d5f1c <_Z16_fetch_usbserialv>
   d42a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42a6:	f001 fe2d 	bl	d5f04 <_ZN9USBSerial5beginEl>
  pinMode(DHTPIN, INPUT);
   d42aa:	2100      	movs	r1, #0
   d42ac:	2002      	movs	r0, #2
   d42ae:	f002 fae1 	bl	d6874 <pinMode>
   d42b2:	782b      	ldrb	r3, [r5, #0]
   d42b4:	f3bf 8f5b 	dmb	ish
   d42b8:	f013 0f01 	tst.w	r3, #1
   d42bc:	d109      	bne.n	d42d2 <setup+0x52>
   d42be:	4628      	mov	r0, r5
   d42c0:	f7ff fef1 	bl	d40a6 <__cxa_guard_acquire>
   d42c4:	b128      	cbz	r0, d42d2 <setup+0x52>
   d42c6:	f000 ffd5 	bl	d5274 <HAL_Pin_Map>
   d42ca:	6030      	str	r0, [r6, #0]
   d42cc:	4628      	mov	r0, r5
   d42ce:	f7ff feef 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42d2:	6833      	ldr	r3, [r6, #0]
   d42d4:	f893 4020 	ldrb.w	r4, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42d8:	782b      	ldrb	r3, [r5, #0]
   d42da:	f3bf 8f5b 	dmb	ish
   d42de:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42e0:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42e4:	d409      	bmi.n	d42fa <setup+0x7a>
   d42e6:	4814      	ldr	r0, [pc, #80]	; (d4338 <setup+0xb8>)
   d42e8:	f7ff fedd 	bl	d40a6 <__cxa_guard_acquire>
   d42ec:	b128      	cbz	r0, d42fa <setup+0x7a>
   d42ee:	f000 ffc1 	bl	d5274 <HAL_Pin_Map>
   d42f2:	6030      	str	r0, [r6, #0]
   d42f4:	4810      	ldr	r0, [pc, #64]	; (d4338 <setup+0xb8>)
   d42f6:	f7ff fedb 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42fa:	6833      	ldr	r3, [r6, #0]
   d42fc:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   d4300:	f004 041f 	and.w	r4, r4, #31
   d4304:	433c      	orrs	r4, r7
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4306:	2c2f      	cmp	r4, #47	; 0x2f
   d4308:	dd10      	ble.n	d432c <setup+0xac>
   d430a:	4a0d      	ldr	r2, [pc, #52]	; (d4340 <setup+0xc0>)
   d430c:	2100      	movs	r1, #0
   d430e:	200a      	movs	r0, #10
   d4310:	f001 f920 	bl	d5554 <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d4314:	4a0b      	ldr	r2, [pc, #44]	; (d4344 <setup+0xc4>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4316:	f004 041f 	and.w	r4, r4, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d431a:	2301      	movs	r3, #1
   d431c:	fa03 f404 	lsl.w	r4, r3, r4
	pinSetFast(DHTPIN);
  counter = 0;
   d4320:	4b09      	ldr	r3, [pc, #36]	; (d4348 <setup+0xc8>)
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4322:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   d4326:	2200      	movs	r2, #0
   d4328:	601a      	str	r2, [r3, #0]
}
   d432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d432c:	2c1f      	cmp	r4, #31
   d432e:	dcf1      	bgt.n	d4314 <setup+0x94>
        return NRF_P0;
   d4330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   d4334:	e7f1      	b.n	d431a <setup+0x9a>
   d4336:	bf00      	nop
   d4338:	2003e508 	.word	0x2003e508
   d433c:	2003e50c 	.word	0x2003e50c
   d4340:	000d5305 	.word	0x000d5305
   d4344:	50000300 	.word	0x50000300
   d4348:	2003e510 	.word	0x2003e510

000d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d434c:	680b      	ldr	r3, [r1, #0]
   d434e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4350:	b113      	cbz	r3, d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4352:	685a      	ldr	r2, [r3, #4]
   d4354:	3201      	adds	r2, #1
   d4356:	605a      	str	r2, [r3, #4]
      }
   d4358:	4770      	bx	lr
	...

000d435c <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d435c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d435e:	b097      	sub	sp, #92	; 0x5c
  if (Serial.available() <= 0) return;
   d4360:	f001 fddc 	bl	d5f1c <_Z16_fetch_usbserialv>
   d4364:	6803      	ldr	r3, [r0, #0]
   d4366:	691b      	ldr	r3, [r3, #16]
   d4368:	4798      	blx	r3
   d436a:	2800      	cmp	r0, #0
   d436c:	f340 80a1 	ble.w	d44b2 <_Z19serialCmdProcessingv+0x156>
  String cmdStr = "";
   d4370:	4951      	ldr	r1, [pc, #324]	; (d44b8 <_Z19serialCmdProcessingv+0x15c>)
   d4372:	a808      	add	r0, sp, #32
   d4374:	f001 fa97 	bl	d58a6 <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d4378:	f001 fdd0 	bl	d5f1c <_Z16_fetch_usbserialv>
   d437c:	6803      	ldr	r3, [r0, #0]
   d437e:	691b      	ldr	r3, [r3, #16]
   d4380:	4798      	blx	r3
   d4382:	b180      	cbz	r0, d43a6 <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d4384:	f001 fdca 	bl	d5f1c <_Z16_fetch_usbserialv>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	4798      	blx	r3
      cmdStr += String(c);
   d438e:	b2c1      	uxtb	r1, r0
   d4390:	a810      	add	r0, sp, #64	; 0x40
   d4392:	f001 faed 	bl	d5970 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4396:	a910      	add	r1, sp, #64	; 0x40
   d4398:	a808      	add	r0, sp, #32
   d439a:	f001 fb11 	bl	d59c0 <_ZN6String6concatERKS_>
   d439e:	a810      	add	r0, sp, #64	; 0x40
   d43a0:	f001 fa36 	bl	d5810 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d43a4:	e7e8      	b.n	d4378 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d43a6:	9908      	ldr	r1, [sp, #32]
    return parseCopy(json, strlen(json));
   d43a8:	9101      	str	r1, [sp, #4]
   d43aa:	4608      	mov	r0, r1
   d43ac:	f004 fb56 	bl	d8a5c <strlen>
   d43b0:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d43b2:	4e42      	ldr	r6, [pc, #264]	; (d44bc <_Z19serialCmdProcessingv+0x160>)
   d43b4:	4f42      	ldr	r7, [pc, #264]	; (d44c0 <_Z19serialCmdProcessingv+0x164>)
      toggleLed.cmdProcessing(iter.value());
   d43b6:	4d43      	ldr	r5, [pc, #268]	; (d44c4 <_Z19serialCmdProcessingv+0x168>)
    return parseCopy(json, strlen(json));
   d43b8:	4602      	mov	r2, r0
   d43ba:	a805      	add	r0, sp, #20
   d43bc:	f002 f9c6 	bl	d674c <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d43c0:	9c07      	ldr	r4, [sp, #28]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43c2:	9b05      	ldr	r3, [sp, #20]
   d43c4:	930c      	str	r3, [sp, #48]	; 0x30
   d43c6:	a906      	add	r1, sp, #24
   d43c8:	a80d      	add	r0, sp, #52	; 0x34
   d43ca:	f7ff ffbf 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43ce:	aa0c      	add	r2, sp, #48	; 0x30
   d43d0:	4621      	mov	r1, r4
   d43d2:	a810      	add	r0, sp, #64	; 0x40
   d43d4:	f002 f97a 	bl	d66cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43d8:	a80d      	add	r0, sp, #52	; 0x34
   d43da:	f7ff fec0 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d43de:	a810      	add	r0, sp, #64	; 0x40
   d43e0:	f002 f98c 	bl	d66fc <_ZN5spark18JSONObjectIterator4nextEv>
   d43e4:	2800      	cmp	r0, #0
   d43e6:	d05b      	beq.n	d44a0 <_Z19serialCmdProcessingv+0x144>
    return JSONString(k_, d_);
   d43e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d43ec:	9303      	str	r3, [sp, #12]
   d43ee:	a911      	add	r1, sp, #68	; 0x44
   d43f0:	a804      	add	r0, sp, #16
   d43f2:	f7ff ffab 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43f6:	4621      	mov	r1, r4
   d43f8:	aa03      	add	r2, sp, #12
   d43fa:	a80c      	add	r0, sp, #48	; 0x30
   d43fc:	f002 f942 	bl	d6684 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4400:	a804      	add	r0, sp, #16
   d4402:	f7ff feac 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4406:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4408:	4631      	mov	r1, r6
   d440a:	f004 fb15 	bl	d8a38 <strcmp>
   d440e:	4604      	mov	r4, r0
   d4410:	a80d      	add	r0, sp, #52	; 0x34
   d4412:	f7ff fea4 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (iter.name() == "smartlight") {
   d4416:	b9b4      	cbnz	r4, d4446 <_Z19serialCmdProcessingv+0xea>
    return JSONValue(v_, d_);
   d4418:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d441a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d441c:	9303      	str	r3, [sp, #12]
   d441e:	a911      	add	r1, sp, #68	; 0x44
   d4420:	a804      	add	r0, sp, #16
   d4422:	f7ff ff93 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4426:	4621      	mov	r1, r4
   d4428:	aa03      	add	r2, sp, #12
   d442a:	a80c      	add	r0, sp, #48	; 0x30
   d442c:	f001 ffa6 	bl	d637c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4430:	a804      	add	r0, sp, #16
   d4432:	f7ff fe94 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d4436:	4824      	ldr	r0, [pc, #144]	; (d44c8 <_Z19serialCmdProcessingv+0x16c>)
   d4438:	a90c      	add	r1, sp, #48	; 0x30
   d443a:	f000 fdb5 	bl	d4fa8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d443e:	a80d      	add	r0, sp, #52	; 0x34
   d4440:	f7ff fe8d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4444:	e7cb      	b.n	d43de <_Z19serialCmdProcessingv+0x82>
    return JSONString(k_, d_);
   d4446:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4448:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d444a:	9303      	str	r3, [sp, #12]
   d444c:	a911      	add	r1, sp, #68	; 0x44
   d444e:	a804      	add	r0, sp, #16
   d4450:	f7ff ff7c 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4454:	4621      	mov	r1, r4
   d4456:	aa03      	add	r2, sp, #12
   d4458:	a80c      	add	r0, sp, #48	; 0x30
   d445a:	f002 f913 	bl	d6684 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d445e:	a804      	add	r0, sp, #16
   d4460:	f7ff fe7d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4464:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4466:	4639      	mov	r1, r7
   d4468:	f004 fae6 	bl	d8a38 <strcmp>
   d446c:	4604      	mov	r4, r0
   d446e:	a80d      	add	r0, sp, #52	; 0x34
   d4470:	f7ff fe75 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    else if (iter.name() == "led") {
   d4474:	2c00      	cmp	r4, #0
   d4476:	d1b2      	bne.n	d43de <_Z19serialCmdProcessingv+0x82>
    return JSONValue(v_, d_);
   d4478:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d447a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d447c:	9303      	str	r3, [sp, #12]
   d447e:	a911      	add	r1, sp, #68	; 0x44
   d4480:	a804      	add	r0, sp, #16
   d4482:	f7ff ff63 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4486:	4621      	mov	r1, r4
   d4488:	aa03      	add	r2, sp, #12
   d448a:	a80c      	add	r0, sp, #48	; 0x30
   d448c:	f001 ff76 	bl	d637c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4490:	a804      	add	r0, sp, #16
   d4492:	f7ff fe64 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      toggleLed.cmdProcessing(iter.value());
   d4496:	a90c      	add	r1, sp, #48	; 0x30
   d4498:	4628      	mov	r0, r5
   d449a:	f7ff fe8d 	bl	d41b8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>
   d449e:	e7ce      	b.n	d443e <_Z19serialCmdProcessingv+0xe2>
   d44a0:	a811      	add	r0, sp, #68	; 0x44
   d44a2:	f7ff fe5c 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44a6:	a806      	add	r0, sp, #24
   d44a8:	f7ff fe59 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d44ac:	a808      	add	r0, sp, #32
   d44ae:	f001 f9af 	bl	d5810 <_ZN6StringD1Ev>
}
   d44b2:	b017      	add	sp, #92	; 0x5c
   d44b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44b6:	bf00      	nop
   d44b8:	000d8eaf 	.word	0x000d8eaf
   d44bc:	000d8c7f 	.word	0x000d8c7f
   d44c0:	000d8c8a 	.word	0x000d8c8a
   d44c4:	2003e574 	.word	0x2003e574
   d44c8:	2003e514 	.word	0x2003e514

000d44cc <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d44cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44d0:	b092      	sub	sp, #72	; 0x48

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44d2:	f000 ff1f 	bl	d5314 <HAL_Timer_Get_Milli_Seconds>
   d44d6:	4607      	mov	r7, r0
  unsigned long t = millis();
  //Serial.println("Starting");
  serialCmdProcessing();
   d44d8:	f7ff ff40 	bl	d435c <_Z19serialCmdProcessingv>
  smartLight.execute();
   d44dc:	4825      	ldr	r0, [pc, #148]	; (d4574 <loop+0xa8>)
  //unsigned long e = millis();
  //Serial.printf("Thermostat end: %ld\n", e);
  
  unsigned long period = millis() - t;
  //Serial.println(counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY));
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d44de:	4c26      	ldr	r4, [pc, #152]	; (d4578 <loop+0xac>)
  smartLight.execute();
   d44e0:	f000 fd16 	bl	d4f10 <_ZN11CSmartLight7executeEv>
  toggleLed.execute();
   d44e4:	4825      	ldr	r0, [pc, #148]	; (d457c <loop+0xb0>)
   d44e6:	f7ff fe13 	bl	d4110 <_ZN10CToggleLed7executeEv>
  thermostat.execute();
   d44ea:	4825      	ldr	r0, [pc, #148]	; (d4580 <loop+0xb4>)
   d44ec:	f000 fe42 	bl	d5174 <_ZN11CThermostat7executeEv>
   d44f0:	f000 ff10 	bl	d5314 <HAL_Timer_Get_Milli_Seconds>
   d44f4:	6821      	ldr	r1, [r4, #0]
   d44f6:	220a      	movs	r2, #10
   d44f8:	fb91 f3f2 	sdiv	r3, r1, r2
   d44fc:	fb02 1313 	mls	r3, r2, r3, r1
   d4500:	4605      	mov	r5, r0
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d4502:	bb73      	cbnz	r3, d4562 <loop+0x96>
    counter = 0;
   d4504:	6023      	str	r3, [r4, #0]
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"thermostat\":%s,\"ct\":%ld}", 
   d4506:	f001 fd09 	bl	d5f1c <_Z16_fetch_usbserialv>
   d450a:	4606      	mov	r6, r0
      (int)Time.now(), smartLight.getStatusStr().c_str(), toggleLed.getStatusStr().c_str(),thermostat.getStatusStr().c_str(),
   d450c:	f001 fb44 	bl	d5b98 <_ZN9TimeClass3nowEv>

    void execute();
    
    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d4510:	491c      	ldr	r1, [pc, #112]	; (d4584 <loop+0xb8>)
   d4512:	9005      	str	r0, [sp, #20]
   d4514:	a806      	add	r0, sp, #24
   d4516:	f001 fa06 	bl	d5926 <_ZN6StringC1ERKS_>
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"thermostat\":%s,\"ct\":%ld}", 
   d451a:	9b06      	ldr	r3, [sp, #24]
class CToggleLed {
public:
    CToggleLed();
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    String getStatusStr() {return statusStr;};
   d451c:	491a      	ldr	r1, [pc, #104]	; (d4588 <loop+0xbc>)
   d451e:	9304      	str	r3, [sp, #16]
   d4520:	a80a      	add	r0, sp, #40	; 0x28
   d4522:	f001 fa00 	bl	d5926 <_ZN6StringC1ERKS_>
    enum STATE { S_DELAY, S_READ };
public:
    CThermostat();
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    String getStatusStr() {return statusStr;};
   d4526:	4916      	ldr	r1, [pc, #88]	; (d4580 <loop+0xb4>)
   d4528:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d452c:	a80e      	add	r0, sp, #56	; 0x38
   d452e:	f001 f9fa 	bl	d5926 <_ZN6StringC1ERKS_>
   d4532:	990e      	ldr	r1, [sp, #56]	; 0x38
  unsigned long period = millis() - t;
   d4534:	1bed      	subs	r5, r5, r7
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"thermostat\":%s,\"ct\":%ld}", 
   d4536:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d453a:	e9cd 8100 	strd	r8, r1, [sp]
   d453e:	9502      	str	r5, [sp, #8]
   d4540:	4912      	ldr	r1, [pc, #72]	; (d458c <loop+0xc0>)
   d4542:	4630      	mov	r0, r6
   d4544:	f7ff fe8e 	bl	d4264 <_ZN5Print6printfEPKcz>
      (int)Time.now(), smartLight.getStatusStr().c_str(), toggleLed.getStatusStr().c_str(),thermostat.getStatusStr().c_str(),
   d4548:	a80e      	add	r0, sp, #56	; 0x38
   d454a:	f001 f961 	bl	d5810 <_ZN6StringD1Ev>
   d454e:	a80a      	add	r0, sp, #40	; 0x28
   d4550:	f001 f95e 	bl	d5810 <_ZN6StringD1Ev>
   d4554:	a806      	add	r0, sp, #24
   d4556:	f001 f95b 	bl	d5810 <_ZN6StringD1Ev>
      period
    );
    Serial.println();
   d455a:	f001 fcdf 	bl	d5f1c <_Z16_fetch_usbserialv>
   d455e:	f001 fa8e 	bl	d5a7e <_ZN5Print7printlnEv>
  }
  counter++;
   d4562:	6823      	ldr	r3, [r4, #0]
  Serial.println(t);
  Serial.println(period);
  if (period > 1000) delay(period);
  else delay(1000) ;
  */
  delay(150);
   d4564:	2096      	movs	r0, #150	; 0x96
  counter++;
   d4566:	3301      	adds	r3, #1
   d4568:	6023      	str	r3, [r4, #0]
  delay(150);
   d456a:	f001 fb2f 	bl	d5bcc <delay>
   d456e:	b012      	add	sp, #72	; 0x48
   d4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4574:	2003e514 	.word	0x2003e514
   d4578:	2003e510 	.word	0x2003e510
   d457c:	2003e574 	.word	0x2003e574
   d4580:	2003e544 	.word	0x2003e544
   d4584:	2003e534 	.word	0x2003e534
   d4588:	2003e584 	.word	0x2003e584
   d458c:	000d8c8e 	.word	0x000d8c8e

000d4590 <_GLOBAL__sub_I_smartLight>:
   d4590:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED); 
   d4592:	2100      	movs	r1, #0
   d4594:	2001      	movs	r0, #1
   d4596:	f001 f80d 	bl	d55b4 <system_thread_set_state>
CSmartLight smartLight;
   d459a:	4805      	ldr	r0, [pc, #20]	; (d45b0 <_GLOBAL__sub_I_smartLight+0x20>)
   d459c:	f000 fbe4 	bl	d4d68 <_ZN11CSmartLightC1Ev>
CToggleLed toggleLed;
   d45a0:	4804      	ldr	r0, [pc, #16]	; (d45b4 <_GLOBAL__sub_I_smartLight+0x24>)
   d45a2:	f7ff fd89 	bl	d40b8 <_ZN10CToggleLedC1Ev>
   d45a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
CThermostat thermostat;
   d45aa:	4803      	ldr	r0, [pc, #12]	; (d45b8 <_GLOBAL__sub_I_smartLight+0x28>)
   d45ac:	f000 bd92 	b.w	d50d4 <_ZN11CThermostatC1Ev>
   d45b0:	2003e514 	.word	0x2003e514
   d45b4:	2003e574 	.word	0x2003e574
   d45b8:	2003e544 	.word	0x2003e544

000d45bc <nrf_gpio_pin_port_decode>:
{
   d45bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45be:	6803      	ldr	r3, [r0, #0]
   d45c0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d45c2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45c4:	d904      	bls.n	d45d0 <nrf_gpio_pin_port_decode+0x14>
   d45c6:	4a07      	ldr	r2, [pc, #28]	; (d45e4 <nrf_gpio_pin_port_decode+0x28>)
   d45c8:	2100      	movs	r1, #0
   d45ca:	200a      	movs	r0, #10
   d45cc:	f000 ffc2 	bl	d5554 <panic_>
    if (*p_pin < P0_PIN_NUM)
   d45d0:	6823      	ldr	r3, [r4, #0]
   d45d2:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45d4:	bf83      	ittte	hi
   d45d6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d45da:	4803      	ldrhi	r0, [pc, #12]	; (d45e8 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45dc:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d45de:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   d45e2:	bd10      	pop	{r4, pc}
   d45e4:	000d5305 	.word	0x000d5305
   d45e8:	50000300 	.word	0x50000300

000d45ec <nrf_gpio_pin_set>:
{
   d45ec:	b507      	push	{r0, r1, r2, lr}
   d45ee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45f0:	a801      	add	r0, sp, #4
   d45f2:	f7ff ffe3 	bl	d45bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d45f6:	9a01      	ldr	r2, [sp, #4]
   d45f8:	2301      	movs	r3, #1
   d45fa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d45fc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4600:	b003      	add	sp, #12
   d4602:	f85d fb04 	ldr.w	pc, [sp], #4

000d4606 <nrf_gpio_pin_read>:
{
   d4606:	b507      	push	{r0, r1, r2, lr}
   d4608:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d460a:	a801      	add	r0, sp, #4
   d460c:	f7ff ffd6 	bl	d45bc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4610:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4612:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4616:	40d8      	lsrs	r0, r3
}
   d4618:	f000 0001 	and.w	r0, r0, #1
   d461c:	b003      	add	sp, #12
   d461e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4622 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4622:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4624:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4626:	2301      	movs	r3, #1
	_pin = pin;
   d4628:	7181      	strb	r1, [r0, #6]
	_type = type;
   d462a:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d462c:	7403      	strb	r3, [r0, #16]
}
   d462e:	bd10      	pop	{r4, pc}

000d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   d4630:	b510      	push	{r4, lr}
   d4632:	ed2d 8b02 	vpush	{d8}
   d4636:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d463a:	f003 fe11 	bl	d8260 <__aeabi_i2d>
   d463e:	ec41 0b18 	vmov	d8, r0, r1
   d4642:	4620      	mov	r0, r4
   d4644:	f003 fe1e 	bl	d8284 <__aeabi_f2d>
   d4648:	eeb0 1a48 	vmov.f32	s2, s16
   d464c:	eef0 1a68 	vmov.f32	s3, s17
    }
   d4650:	ecbd 8b02 	vpop	{d8}
      return pow(__type(__x), __type(__y));
   d4654:	ec41 0b10 	vmov	d0, r0, r1
    }
   d4658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
   d465c:	f002 b990 	b.w	d6980 <pow>

000d4660 <_ZN3DHT16computeHeatIndexEff>:
		}
	}
	return NAN;
}

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d4660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d4664:	ee10 0a10 	vmov	r0, s0
float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d4668:	ed2d 8b02 	vpush	{d8}
   d466c:	eeb0 8a60 	vmov.f32	s16, s1
   d4670:	eef0 8a40 	vmov.f32	s17, s0
		 2.04901523 * tempFahrenheit + 
   d4674:	f003 fe06 	bl	d8284 <__aeabi_f2d>
   d4678:	4604      	mov	r4, r0
		10.14333127 * percentHumidity +
   d467a:	ee18 0a10 	vmov	r0, s16
		 2.04901523 * tempFahrenheit + 
   d467e:	460d      	mov	r5, r1
		10.14333127 * percentHumidity +
   d4680:	f003 fe00 	bl	d8284 <__aeabi_f2d>
		 2.04901523 * tempFahrenheit + 
   d4684:	a354      	add	r3, pc, #336	; (adr r3, d47d8 <_ZN3DHT16computeHeatIndexEff+0x178>)
   d4686:	e9d3 2300 	ldrd	r2, r3, [r3]
		10.14333127 * percentHumidity +
   d468a:	4606      	mov	r6, r0
   d468c:	460f      	mov	r7, r1
		 2.04901523 * tempFahrenheit + 
   d468e:	4620      	mov	r0, r4
   d4690:	4629      	mov	r1, r5
   d4692:	f003 fe4f 	bl	d8334 <__aeabi_dmul>
	return -42.379 + 
   d4696:	a352      	add	r3, pc, #328	; (adr r3, d47e0 <_ZN3DHT16computeHeatIndexEff+0x180>)
   d4698:	e9d3 2300 	ldrd	r2, r3, [r3]
   d469c:	f003 fc92 	bl	d7fc4 <__aeabi_dsub>
		10.14333127 * percentHumidity +
   d46a0:	a351      	add	r3, pc, #324	; (adr r3, d47e8 <_ZN3DHT16computeHeatIndexEff+0x188>)
   d46a2:	e9d3 2300 	ldrd	r2, r3, [r3]
	return -42.379 + 
   d46a6:	4680      	mov	r8, r0
   d46a8:	4689      	mov	r9, r1
		10.14333127 * percentHumidity +
   d46aa:	4630      	mov	r0, r6
   d46ac:	4639      	mov	r1, r7
   d46ae:	f003 fe41 	bl	d8334 <__aeabi_dmul>
   d46b2:	4602      	mov	r2, r0
   d46b4:	460b      	mov	r3, r1
		 2.04901523 * tempFahrenheit + 
   d46b6:	4640      	mov	r0, r8
   d46b8:	4649      	mov	r1, r9
   d46ba:	f003 fc85 	bl	d7fc8 <__adddf3>
		-0.22475541 * tempFahrenheit * percentHumidity +
   d46be:	a34c      	add	r3, pc, #304	; (adr r3, d47f0 <_ZN3DHT16computeHeatIndexEff+0x190>)
   d46c0:	e9d3 2300 	ldrd	r2, r3, [r3]
		 2.04901523 * tempFahrenheit + 
   d46c4:	4680      	mov	r8, r0
   d46c6:	4689      	mov	r9, r1
		-0.22475541 * tempFahrenheit * percentHumidity +
   d46c8:	4620      	mov	r0, r4
   d46ca:	4629      	mov	r1, r5
   d46cc:	f003 fe32 	bl	d8334 <__aeabi_dmul>
   d46d0:	4632      	mov	r2, r6
   d46d2:	463b      	mov	r3, r7
   d46d4:	f003 fe2e 	bl	d8334 <__aeabi_dmul>
   d46d8:	4602      	mov	r2, r0
   d46da:	460b      	mov	r3, r1
		10.14333127 * percentHumidity +
   d46dc:	4640      	mov	r0, r8
   d46de:	4649      	mov	r1, r9
   d46e0:	f003 fc72 	bl	d7fc8 <__adddf3>
		-0.00683783 * pow(tempFahrenheit, 2) +
   d46e4:	eeb0 0a68 	vmov.f32	s0, s17
		10.14333127 * percentHumidity +
   d46e8:	4680      	mov	r8, r0
		-0.00683783 * pow(tempFahrenheit, 2) +
   d46ea:	2002      	movs	r0, #2
		10.14333127 * percentHumidity +
   d46ec:	4689      	mov	r9, r1
		-0.00683783 * pow(tempFahrenheit, 2) +
   d46ee:	f7ff ff9f 	bl	d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d46f2:	a341      	add	r3, pc, #260	; (adr r3, d47f8 <_ZN3DHT16computeHeatIndexEff+0x198>)
   d46f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46f8:	ec51 0b10 	vmov	r0, r1, d0
   d46fc:	f003 fe1a 	bl	d8334 <__aeabi_dmul>
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4700:	4642      	mov	r2, r8
   d4702:	464b      	mov	r3, r9
   d4704:	f003 fc60 	bl	d7fc8 <__adddf3>
		-0.05481717 * pow(percentHumidity, 2) + 
   d4708:	eeb0 0a48 	vmov.f32	s0, s16
		-0.22475541 * tempFahrenheit * percentHumidity +
   d470c:	4680      	mov	r8, r0
		-0.05481717 * pow(percentHumidity, 2) + 
   d470e:	2002      	movs	r0, #2
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4710:	4689      	mov	r9, r1
		-0.05481717 * pow(percentHumidity, 2) + 
   d4712:	f7ff ff8d 	bl	d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4716:	a33a      	add	r3, pc, #232	; (adr r3, d4800 <_ZN3DHT16computeHeatIndexEff+0x1a0>)
   d4718:	e9d3 2300 	ldrd	r2, r3, [r3]
   d471c:	ec51 0b10 	vmov	r0, r1, d0
   d4720:	f003 fe08 	bl	d8334 <__aeabi_dmul>
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4724:	4642      	mov	r2, r8
   d4726:	464b      	mov	r3, r9
   d4728:	f003 fc4e 	bl	d7fc8 <__adddf3>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d472c:	eeb0 0a68 	vmov.f32	s0, s17
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4730:	4680      	mov	r8, r0
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4732:	2002      	movs	r0, #2
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4734:	4689      	mov	r9, r1
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4736:	f7ff ff7b 	bl	d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d473a:	a333      	add	r3, pc, #204	; (adr r3, d4808 <_ZN3DHT16computeHeatIndexEff+0x1a8>)
   d473c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4740:	ec51 0b10 	vmov	r0, r1, d0
   d4744:	f003 fdf6 	bl	d8334 <__aeabi_dmul>
   d4748:	4632      	mov	r2, r6
   d474a:	463b      	mov	r3, r7
   d474c:	f003 fdf2 	bl	d8334 <__aeabi_dmul>
		-0.05481717 * pow(percentHumidity, 2) + 
   d4750:	4642      	mov	r2, r8
   d4752:	464b      	mov	r3, r9
   d4754:	f003 fc38 	bl	d7fc8 <__adddf3>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d4758:	eeb0 0a48 	vmov.f32	s0, s16
		-0.05481717 * pow(percentHumidity, 2) + 
   d475c:	4606      	mov	r6, r0
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d475e:	2002      	movs	r0, #2
		-0.05481717 * pow(percentHumidity, 2) + 
   d4760:	460f      	mov	r7, r1
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d4762:	f7ff ff65 	bl	d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4766:	ec59 8b10 	vmov	r8, r9, d0
   d476a:	a329      	add	r3, pc, #164	; (adr r3, d4810 <_ZN3DHT16computeHeatIndexEff+0x1b0>)
   d476c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4770:	4620      	mov	r0, r4
   d4772:	4629      	mov	r1, r5
   d4774:	f003 fdde 	bl	d8334 <__aeabi_dmul>
   d4778:	4642      	mov	r2, r8
   d477a:	464b      	mov	r3, r9
   d477c:	f003 fdda 	bl	d8334 <__aeabi_dmul>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4780:	4632      	mov	r2, r6
   d4782:	463b      	mov	r3, r7
   d4784:	f003 fc20 	bl	d7fc8 <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4788:	eeb0 0a68 	vmov.f32	s0, s17
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d478c:	4604      	mov	r4, r0
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d478e:	2002      	movs	r0, #2
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4790:	460d      	mov	r5, r1
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4792:	f7ff ff4d 	bl	d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4796:	2002      	movs	r0, #2
   d4798:	ec59 8b10 	vmov	r8, r9, d0
   d479c:	eeb0 0a48 	vmov.f32	s0, s16
   d47a0:	f7ff ff46 	bl	d4630 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d47a4:	ec57 6b10 	vmov	r6, r7, d0
   d47a8:	a31b      	add	r3, pc, #108	; (adr r3, d4818 <_ZN3DHT16computeHeatIndexEff+0x1b8>)
   d47aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47ae:	4640      	mov	r0, r8
   d47b0:	4649      	mov	r1, r9
   d47b2:	f003 fdbf 	bl	d8334 <__aeabi_dmul>
   d47b6:	4632      	mov	r2, r6
   d47b8:	463b      	mov	r3, r7
   d47ba:	f003 fdbb 	bl	d8334 <__aeabi_dmul>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d47be:	4622      	mov	r2, r4
   d47c0:	462b      	mov	r3, r5
   d47c2:	f003 fc01 	bl	d7fc8 <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d47c6:	f004 f88d 	bl	d88e4 <__aeabi_d2f>
}
   d47ca:	ecbd 8b02 	vpop	{d8}
   d47ce:	ee00 0a10 	vmov	s0, r0
   d47d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d47d6:	bf00      	nop
   d47d8:	18ced8ec 	.word	0x18ced8ec
   d47dc:	40006462 	.word	0x40006462
   d47e0:	126e978d 	.word	0x126e978d
   d47e4:	40453083 	.word	0x40453083
   d47e8:	b75a49cd 	.word	0xb75a49cd
   d47ec:	40244962 	.word	0x40244962
   d47f0:	07c647f8 	.word	0x07c647f8
   d47f4:	bfccc4c9 	.word	0xbfccc4c9
   d47f8:	039c16cc 	.word	0x039c16cc
   d47fc:	bf7c01fc 	.word	0xbf7c01fc
   d4800:	00d18c24 	.word	0x00d18c24
   d4804:	bfac10ff 	.word	0xbfac10ff
   d4808:	8760dce5 	.word	0x8760dce5
   d480c:	3f5421b5 	.word	0x3f5421b5
   d4810:	013330da 	.word	0x013330da
   d4814:	3f4bf1f9 	.word	0x3f4bf1f9
   d4818:	11d3bd01 	.word	0x11d3bd01
   d481c:	bec0b17e 	.word	0xbec0b17e

000d4820 <_ZN3DHT15computeDewPointEff>:

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   d4820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4824:	ee10 0a10 	vmov	r0, s0
   d4828:	ed2d 8b02 	vpush	{d8}
   d482c:	eeb0 8a60 	vmov.f32	s16, s1
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d4830:	f003 fd28 	bl	d8284 <__aeabi_f2d>
  { return __builtin_logf(__x); }
   d4834:	ed9f 0a28 	vldr	s0, [pc, #160]	; d48d8 <_ZN3DHT15computeDewPointEff+0xb8>
   d4838:	ee88 0a00 	vdiv.f32	s0, s16, s0
   d483c:	4604      	mov	r4, r0
   d483e:	460d      	mov	r5, r1
   d4840:	f002 fa54 	bl	d6cec <logf>
   d4844:	a320      	add	r3, pc, #128	; (adr r3, d48c8 <_ZN3DHT15computeDewPointEff+0xa8>)
   d4846:	e9d3 2300 	ldrd	r2, r3, [r3]
   d484a:	4620      	mov	r0, r4
   d484c:	4629      	mov	r1, r5
   d484e:	ee10 6a10 	vmov	r6, s0
   d4852:	f003 fd6f 	bl	d8334 <__aeabi_dmul>
   d4856:	a31e      	add	r3, pc, #120	; (adr r3, d48d0 <_ZN3DHT15computeDewPointEff+0xb0>)
   d4858:	e9d3 2300 	ldrd	r2, r3, [r3]
   d485c:	4680      	mov	r8, r0
   d485e:	4689      	mov	r9, r1
   d4860:	4620      	mov	r0, r4
   d4862:	4629      	mov	r1, r5
   d4864:	f003 fbb0 	bl	d7fc8 <__adddf3>
   d4868:	4602      	mov	r2, r0
   d486a:	460b      	mov	r3, r1
   d486c:	4640      	mov	r0, r8
   d486e:	4649      	mov	r1, r9
   d4870:	f003 fe8a 	bl	d8588 <__aeabi_ddiv>
   d4874:	4604      	mov	r4, r0
   d4876:	4630      	mov	r0, r6
   d4878:	460d      	mov	r5, r1
   d487a:	f003 fd03 	bl	d8284 <__aeabi_f2d>
   d487e:	4602      	mov	r2, r0
   d4880:	460b      	mov	r3, r1
   d4882:	4620      	mov	r0, r4
   d4884:	4629      	mov	r1, r5
   d4886:	f003 fb9f 	bl	d7fc8 <__adddf3>
	double Td = (b * tC) / (a - tC);
   d488a:	a311      	add	r3, pc, #68	; (adr r3, d48d0 <_ZN3DHT15computeDewPointEff+0xb0>)
   d488c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d4890:	4606      	mov	r6, r0
   d4892:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
   d4894:	f003 fd4e 	bl	d8334 <__aeabi_dmul>
   d4898:	4632      	mov	r2, r6
   d489a:	4604      	mov	r4, r0
   d489c:	460d      	mov	r5, r1
   d489e:	463b      	mov	r3, r7
   d48a0:	a109      	add	r1, pc, #36	; (adr r1, d48c8 <_ZN3DHT15computeDewPointEff+0xa8>)
   d48a2:	e9d1 0100 	ldrd	r0, r1, [r1]
   d48a6:	f003 fb8d 	bl	d7fc4 <__aeabi_dsub>
   d48aa:	4602      	mov	r2, r0
   d48ac:	460b      	mov	r3, r1
   d48ae:	4620      	mov	r0, r4
   d48b0:	4629      	mov	r1, r5
   d48b2:	f003 fe69 	bl	d8588 <__aeabi_ddiv>
	return Td;
   d48b6:	f004 f815 	bl	d88e4 <__aeabi_d2f>
}
   d48ba:	ecbd 8b02 	vpop	{d8}
   d48be:	ee00 0a10 	vmov	s0, r0
   d48c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d48c6:	bf00      	nop
   d48c8:	4189374c 	.word	0x4189374c
   d48cc:	40314560 	.word	0x40314560
   d48d0:	66666666 	.word	0x66666666
   d48d4:	406db666 	.word	0x406db666
   d48d8:	42c80000 	.word	0x42c80000

000d48dc <_ZN3DHT4readEv>:

boolean DHT::read(void) {
   d48dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48e0:	4604      	mov	r4, r0
   d48e2:	b085      	sub	sp, #20
   d48e4:	f000 fd16 	bl	d5314 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d48e8:	68e3      	ldr	r3, [r4, #12]
   d48ea:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d48ec:	bf84      	itt	hi
   d48ee:	2300      	movhi	r3, #0
   d48f0:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d48f2:	7c23      	ldrb	r3, [r4, #16]
   d48f4:	b92b      	cbnz	r3, d4902 <_ZN3DHT4readEv+0x26>
   d48f6:	68e3      	ldr	r3, [r4, #12]
   d48f8:	1ac0      	subs	r0, r0, r3
   d48fa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d48fe:	f0c0 8160 	bcc.w	d4bc2 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4902:	2500      	movs	r5, #0
   d4904:	7425      	strb	r5, [r4, #16]
   d4906:	f000 fd05 	bl	d5314 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d490a:	4eb0      	ldr	r6, [pc, #704]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d490c:	6025      	str	r5, [r4, #0]
   d490e:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4910:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4912:	79a7      	ldrb	r7, [r4, #6]
   d4914:	7833      	ldrb	r3, [r6, #0]
   d4916:	4dae      	ldr	r5, [pc, #696]	; (d4bd0 <_ZN3DHT4readEv+0x2f4>)
   d4918:	f3bf 8f5b 	dmb	ish
   d491c:	f013 0f01 	tst.w	r3, #1
   d4920:	d109      	bne.n	d4936 <_ZN3DHT4readEv+0x5a>
   d4922:	4630      	mov	r0, r6
   d4924:	f7ff fbbf 	bl	d40a6 <__cxa_guard_acquire>
   d4928:	b128      	cbz	r0, d4936 <_ZN3DHT4readEv+0x5a>
   d492a:	f000 fca3 	bl	d5274 <HAL_Pin_Map>
   d492e:	6028      	str	r0, [r5, #0]
   d4930:	4630      	mov	r0, r6
   d4932:	f7ff fbbd 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4936:	682b      	ldr	r3, [r5, #0]
   d4938:	013f      	lsls	r7, r7, #4
   d493a:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d493e:	7833      	ldrb	r3, [r6, #0]
   d4940:	f3bf 8f5b 	dmb	ish
   d4944:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4946:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d494a:	d409      	bmi.n	d4960 <_ZN3DHT4readEv+0x84>
   d494c:	489f      	ldr	r0, [pc, #636]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d494e:	f7ff fbaa 	bl	d40a6 <__cxa_guard_acquire>
   d4952:	b128      	cbz	r0, d4960 <_ZN3DHT4readEv+0x84>
   d4954:	f000 fc8e 	bl	d5274 <HAL_Pin_Map>
   d4958:	6028      	str	r0, [r5, #0]
   d495a:	489c      	ldr	r0, [pc, #624]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d495c:	f7ff fba8 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4960:	682b      	ldr	r3, [r5, #0]
   d4962:	441f      	add	r7, r3
   d4964:	7878      	ldrb	r0, [r7, #1]
   d4966:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d496a:	ea40 0008 	orr.w	r0, r0, r8
   d496e:	f7ff fe3d 	bl	d45ec <nrf_gpio_pin_set>
	delay(250);
   d4972:	20fa      	movs	r0, #250	; 0xfa
   d4974:	f001 f92a 	bl	d5bcc <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4978:	79a0      	ldrb	r0, [r4, #6]
   d497a:	2101      	movs	r1, #1
   d497c:	f001 ff7a 	bl	d6874 <pinMode>
	pinResetFast(_pin);
   d4980:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4982:	7833      	ldrb	r3, [r6, #0]
   d4984:	f3bf 8f5b 	dmb	ish
   d4988:	07da      	lsls	r2, r3, #31
   d498a:	d409      	bmi.n	d49a0 <_ZN3DHT4readEv+0xc4>
   d498c:	488f      	ldr	r0, [pc, #572]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d498e:	f7ff fb8a 	bl	d40a6 <__cxa_guard_acquire>
   d4992:	b128      	cbz	r0, d49a0 <_ZN3DHT4readEv+0xc4>
   d4994:	f000 fc6e 	bl	d5274 <HAL_Pin_Map>
   d4998:	6028      	str	r0, [r5, #0]
   d499a:	488c      	ldr	r0, [pc, #560]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d499c:	f7ff fb88 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d49a0:	682b      	ldr	r3, [r5, #0]
   d49a2:	013f      	lsls	r7, r7, #4
   d49a4:	5ddb      	ldrb	r3, [r3, r7]
   d49a6:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49aa:	7833      	ldrb	r3, [r6, #0]
   d49ac:	f3bf 8f5b 	dmb	ish
   d49b0:	07db      	lsls	r3, r3, #31
   d49b2:	d409      	bmi.n	d49c8 <_ZN3DHT4readEv+0xec>
   d49b4:	4885      	ldr	r0, [pc, #532]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d49b6:	f7ff fb76 	bl	d40a6 <__cxa_guard_acquire>
   d49ba:	b128      	cbz	r0, d49c8 <_ZN3DHT4readEv+0xec>
   d49bc:	f000 fc5a 	bl	d5274 <HAL_Pin_Map>
   d49c0:	6028      	str	r0, [r5, #0]
   d49c2:	4882      	ldr	r0, [pc, #520]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d49c4:	f7ff fb74 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d49c8:	682b      	ldr	r3, [r5, #0]
   d49ca:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d49cc:	a803      	add	r0, sp, #12
   d49ce:	787b      	ldrb	r3, [r7, #1]
   d49d0:	f003 031f 	and.w	r3, r3, #31
   d49d4:	ea43 0308 	orr.w	r3, r3, r8
   d49d8:	9303      	str	r3, [sp, #12]
   d49da:	f7ff fdef 	bl	d45bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d49de:	9a03      	ldr	r2, [sp, #12]
   d49e0:	2301      	movs	r3, #1
   d49e2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d49e4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d49e8:	2014      	movs	r0, #20
   d49ea:	f001 f8ef 	bl	d5bcc <delay>
	noInterrupts();
   d49ee:	f001 fabb 	bl	d5f68 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d49f2:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49f4:	7833      	ldrb	r3, [r6, #0]
   d49f6:	f3bf 8f5b 	dmb	ish
   d49fa:	07d8      	lsls	r0, r3, #31
   d49fc:	d409      	bmi.n	d4a12 <_ZN3DHT4readEv+0x136>
   d49fe:	4873      	ldr	r0, [pc, #460]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d4a00:	f7ff fb51 	bl	d40a6 <__cxa_guard_acquire>
   d4a04:	b128      	cbz	r0, d4a12 <_ZN3DHT4readEv+0x136>
   d4a06:	f000 fc35 	bl	d5274 <HAL_Pin_Map>
   d4a0a:	6028      	str	r0, [r5, #0]
   d4a0c:	486f      	ldr	r0, [pc, #444]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d4a0e:	f7ff fb4f 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a12:	682b      	ldr	r3, [r5, #0]
   d4a14:	013f      	lsls	r7, r7, #4
   d4a16:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a1a:	7833      	ldrb	r3, [r6, #0]
   d4a1c:	f3bf 8f5b 	dmb	ish
   d4a20:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a22:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a26:	d409      	bmi.n	d4a3c <_ZN3DHT4readEv+0x160>
   d4a28:	4868      	ldr	r0, [pc, #416]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d4a2a:	f7ff fb3c 	bl	d40a6 <__cxa_guard_acquire>
   d4a2e:	b128      	cbz	r0, d4a3c <_ZN3DHT4readEv+0x160>
   d4a30:	f000 fc20 	bl	d5274 <HAL_Pin_Map>
   d4a34:	6028      	str	r0, [r5, #0]
   d4a36:	4865      	ldr	r0, [pc, #404]	; (d4bcc <_ZN3DHT4readEv+0x2f0>)
   d4a38:	f7ff fb3a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a3c:	682b      	ldr	r3, [r5, #0]
   d4a3e:	441f      	add	r7, r3
   d4a40:	7878      	ldrb	r0, [r7, #1]
   d4a42:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4a46:	ea40 0008 	orr.w	r0, r0, r8
   d4a4a:	f7ff fdcf 	bl	d45ec <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4a4e:	2028      	movs	r0, #40	; 0x28
   d4a50:	f000 fc58 	bl	d5304 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4a54:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a56:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4bcc <_ZN3DHT4readEv+0x2f0>
   d4a5a:	2100      	movs	r1, #0
   d4a5c:	f001 ff0a 	bl	d6874 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4a60:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4a62:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4a64:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4a66:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4a68:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4a6c:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4a70:	7833      	ldrb	r3, [r6, #0]
   d4a72:	f3bf 8f5b 	dmb	ish
   d4a76:	07da      	lsls	r2, r3, #31
   d4a78:	d409      	bmi.n	d4a8e <_ZN3DHT4readEv+0x1b2>
   d4a7a:	4640      	mov	r0, r8
   d4a7c:	f7ff fb13 	bl	d40a6 <__cxa_guard_acquire>
   d4a80:	b128      	cbz	r0, d4a8e <_ZN3DHT4readEv+0x1b2>
   d4a82:	f000 fbf7 	bl	d5274 <HAL_Pin_Map>
   d4a86:	6028      	str	r0, [r5, #0]
   d4a88:	4640      	mov	r0, r8
   d4a8a:	f7ff fb11 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a8e:	682b      	ldr	r3, [r5, #0]
   d4a90:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4a94:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4a98:	015b      	lsls	r3, r3, #5
   d4a9a:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a9c:	7833      	ldrb	r3, [r6, #0]
   d4a9e:	f3bf 8f5b 	dmb	ish
   d4aa2:	07db      	lsls	r3, r3, #31
   d4aa4:	d409      	bmi.n	d4aba <_ZN3DHT4readEv+0x1de>
   d4aa6:	4640      	mov	r0, r8
   d4aa8:	f7ff fafd 	bl	d40a6 <__cxa_guard_acquire>
   d4aac:	b128      	cbz	r0, d4aba <_ZN3DHT4readEv+0x1de>
   d4aae:	f000 fbe1 	bl	d5274 <HAL_Pin_Map>
   d4ab2:	6028      	str	r0, [r5, #0]
   d4ab4:	4640      	mov	r0, r8
   d4ab6:	f7ff fafb 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4aba:	682b      	ldr	r3, [r5, #0]
   d4abc:	445b      	add	r3, fp
   d4abe:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4ac2:	9b01      	ldr	r3, [sp, #4]
   d4ac4:	f00b 0b1f 	and.w	fp, fp, #31
   d4ac8:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4acc:	4658      	mov	r0, fp
   d4ace:	f7ff fd9a 	bl	d4606 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4ad2:	4658      	mov	r0, fp
   d4ad4:	f7ff fd97 	bl	d4606 <nrf_gpio_pin_read>
   d4ad8:	9b00      	ldr	r3, [sp, #0]
   d4ada:	4283      	cmp	r3, r0
   d4adc:	d109      	bne.n	d4af2 <_ZN3DHT4readEv+0x216>
			counter++;
   d4ade:	f109 0901 	add.w	r9, r9, #1
   d4ae2:	fa5f f989 	uxtb.w	r9, r9
   d4ae6:	2001      	movs	r0, #1
   d4ae8:	f000 fc0c 	bl	d5304 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4aec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4af0:	d1bc      	bne.n	d4a6c <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4af2:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4af6:	7833      	ldrb	r3, [r6, #0]
   d4af8:	f3bf 8f5b 	dmb	ish
   d4afc:	07d8      	lsls	r0, r3, #31
   d4afe:	d409      	bmi.n	d4b14 <_ZN3DHT4readEv+0x238>
   d4b00:	4640      	mov	r0, r8
   d4b02:	f7ff fad0 	bl	d40a6 <__cxa_guard_acquire>
   d4b06:	b128      	cbz	r0, d4b14 <_ZN3DHT4readEv+0x238>
   d4b08:	f000 fbb4 	bl	d5274 <HAL_Pin_Map>
   d4b0c:	6028      	str	r0, [r5, #0]
   d4b0e:	4640      	mov	r0, r8
   d4b10:	f7ff face 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b14:	682b      	ldr	r3, [r5, #0]
   d4b16:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4b1a:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4b1e:	015b      	lsls	r3, r3, #5
   d4b20:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b22:	7833      	ldrb	r3, [r6, #0]
   d4b24:	f3bf 8f5b 	dmb	ish
   d4b28:	07d9      	lsls	r1, r3, #31
   d4b2a:	d409      	bmi.n	d4b40 <_ZN3DHT4readEv+0x264>
   d4b2c:	4640      	mov	r0, r8
   d4b2e:	f7ff faba 	bl	d40a6 <__cxa_guard_acquire>
   d4b32:	b128      	cbz	r0, d4b40 <_ZN3DHT4readEv+0x264>
   d4b34:	f000 fb9e 	bl	d5274 <HAL_Pin_Map>
   d4b38:	6028      	str	r0, [r5, #0]
   d4b3a:	4640      	mov	r0, r8
   d4b3c:	f7ff fab8 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b40:	682b      	ldr	r3, [r5, #0]
   d4b42:	445b      	add	r3, fp
   d4b44:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4b48:	9b00      	ldr	r3, [sp, #0]
   d4b4a:	f00b 0b1f 	and.w	fp, fp, #31
   d4b4e:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4b52:	4658      	mov	r0, fp
   d4b54:	f7ff fd57 	bl	d4606 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4b58:	4658      	mov	r0, fp
   d4b5a:	f7ff fd54 	bl	d4606 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4b5e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4b62:	b2c3      	uxtb	r3, r0
   d4b64:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4b66:	d018      	beq.n	d4b9a <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4b68:	2f03      	cmp	r7, #3
   d4b6a:	d911      	bls.n	d4b90 <_ZN3DHT4readEv+0x2b4>
   d4b6c:	07fa      	lsls	r2, r7, #31
   d4b6e:	d40f      	bmi.n	d4b90 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4b70:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4b74:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4b78:	5ca3      	ldrb	r3, [r4, r2]
   d4b7a:	005b      	lsls	r3, r3, #1
   d4b7c:	b2db      	uxtb	r3, r3
   d4b7e:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4b80:	7a21      	ldrb	r1, [r4, #8]
   d4b82:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4b84:	bf3c      	itt	cc
   d4b86:	f043 0301 	orrcc.w	r3, r3, #1
   d4b8a:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4b8c:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4b90:	3701      	adds	r7, #1
   d4b92:	b2ff      	uxtb	r7, r7
   d4b94:	2f55      	cmp	r7, #85	; 0x55
   d4b96:	f47f af67 	bne.w	d4a68 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4b9a:	f001 f9e7 	bl	d5f6c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4b9e:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4ba2:	d910      	bls.n	d4bc6 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4ba4:	7863      	ldrb	r3, [r4, #1]
   d4ba6:	7820      	ldrb	r0, [r4, #0]
   d4ba8:	4418      	add	r0, r3
   d4baa:	78a3      	ldrb	r3, [r4, #2]
   d4bac:	4418      	add	r0, r3
   d4bae:	78e3      	ldrb	r3, [r4, #3]
   d4bb0:	4418      	add	r0, r3
   d4bb2:	7923      	ldrb	r3, [r4, #4]
   d4bb4:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4bb6:	1ac3      	subs	r3, r0, r3
   d4bb8:	4258      	negs	r0, r3
   d4bba:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

   d4bbc:	b005      	add	sp, #20
   d4bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4bc2:	2001      	movs	r0, #1
   d4bc4:	e7fa      	b.n	d4bbc <_ZN3DHT4readEv+0x2e0>
	return false;
   d4bc6:	2000      	movs	r0, #0
   d4bc8:	e7f8      	b.n	d4bbc <_ZN3DHT4readEv+0x2e0>
   d4bca:	bf00      	nop
   d4bcc:	2003e508 	.word	0x2003e508
   d4bd0:	2003e50c 	.word	0x2003e50c

000d4bd4 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4bd4:	b510      	push	{r4, lr}
   d4bd6:	4604      	mov	r4, r0
	if (read()) {
   d4bd8:	f7ff fe80 	bl	d48dc <_ZN3DHT4readEv>
   d4bdc:	b320      	cbz	r0, d4c28 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4bde:	79e3      	ldrb	r3, [r4, #7]
   d4be0:	2b0b      	cmp	r3, #11
   d4be2:	d01b      	beq.n	d4c1c <_ZN3DHT15readTemperatureEv+0x48>
   d4be4:	3b15      	subs	r3, #21
   d4be6:	2b01      	cmp	r3, #1
   d4be8:	d81e      	bhi.n	d4c28 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4bea:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4bec:	eddf 6a10 	vldr	s13, [pc, #64]	; d4c30 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4bf4:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4bf8:	78e2      	ldrb	r2, [r4, #3]
   d4bfa:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4bfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4c06:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4c08:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4c0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4c10:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4c14:	d507      	bpl.n	d4c26 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4c16:	eeb1 0a40 	vneg.f32	s0, s0
   d4c1a:	e004      	b.n	d4c26 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4c1c:	78a3      	ldrb	r3, [r4, #2]
   d4c1e:	ee00 3a10 	vmov	s0, r3
   d4c22:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4c26:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4c28:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c34 <_ZN3DHT15readTemperatureEv+0x60>
   d4c2c:	e7fb      	b.n	d4c26 <_ZN3DHT15readTemperatureEv+0x52>
   d4c2e:	bf00      	nop
   d4c30:	43800000 	.word	0x43800000
   d4c34:	7fc00000 	.word	0x7fc00000

000d4c38 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4c38:	f7ff bfcc 	b.w	d4bd4 <_ZN3DHT15readTemperatureEv>

000d4c3c <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4c3c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4c3e:	f7ff ffc9 	bl	d4bd4 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4c42:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4c46:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4c4a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4c4e:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4c52:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c5c <_ZN3DHT16getTempFarenheitEv+0x20>
   d4c56:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	42000000 	.word	0x42000000

000d4c60 <_ZN3DHT13getTempKelvinEv>:
float DHT::getTempKelvin() {
   d4c60:	b508      	push	{r3, lr}
	return convertCtoK(readTemperature());
   d4c62:	f7ff ffb7 	bl	d4bd4 <_ZN3DHT15readTemperatureEv>
   d4c66:	ee10 0a10 	vmov	r0, s0
	return c + 273.15;
   d4c6a:	f003 fb0b 	bl	d8284 <__aeabi_f2d>
   d4c6e:	a306      	add	r3, pc, #24	; (adr r3, d4c88 <_ZN3DHT13getTempKelvinEv+0x28>)
   d4c70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c74:	f003 f9a8 	bl	d7fc8 <__adddf3>
   d4c78:	f003 fe34 	bl	d88e4 <__aeabi_d2f>
}
   d4c7c:	ee00 0a10 	vmov	s0, r0
   d4c80:	bd08      	pop	{r3, pc}
   d4c82:	bf00      	nop
   d4c84:	f3af 8000 	nop.w
   d4c88:	66666666 	.word	0x66666666
   d4c8c:	40711266 	.word	0x40711266

000d4c90 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4c90:	b510      	push	{r4, lr}
   d4c92:	4604      	mov	r4, r0
	if (read()) {
   d4c94:	f7ff fe22 	bl	d48dc <_ZN3DHT4readEv>
   d4c98:	b1f0      	cbz	r0, d4cd8 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4c9a:	79e3      	ldrb	r3, [r4, #7]
   d4c9c:	2b0b      	cmp	r3, #11
   d4c9e:	d015      	beq.n	d4ccc <_ZN3DHT12readHumidityEv+0x3c>
   d4ca0:	3b15      	subs	r3, #21
   d4ca2:	2b01      	cmp	r3, #1
   d4ca4:	d818      	bhi.n	d4cd8 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4ca6:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4ca8:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4ce0 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4cac:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4cb0:	7863      	ldrb	r3, [r4, #1]
   d4cb2:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4cb6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4cbe:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4cc2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4cc6:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4cca:	bd10      	pop	{r4, pc}
				f = data[0];
   d4ccc:	7823      	ldrb	r3, [r4, #0]
   d4cce:	ee00 3a10 	vmov	s0, r3
   d4cd2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4cd6:	e7f8      	b.n	d4cca <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4cd8:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4ce4 <_ZN3DHT12readHumidityEv+0x54>
   d4cdc:	e7f5      	b.n	d4cca <_ZN3DHT12readHumidityEv+0x3a>
   d4cde:	bf00      	nop
   d4ce0:	43800000 	.word	0x43800000
   d4ce4:	7fc00000 	.word	0x7fc00000

000d4ce8 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4ce8:	f7ff bfd2 	b.w	d4c90 <_ZN3DHT12readHumidityEv>

000d4cec <_ZN3DHT12getHeatIndexEv>:
float DHT::getHeatIndex() {
   d4cec:	b510      	push	{r4, lr}
   d4cee:	ed2d 8b04 	vpush	{d8-d9}
   d4cf2:	4604      	mov	r4, r0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4cf4:	f7ff ff6e 	bl	d4bd4 <_ZN3DHT15readTemperatureEv>
   d4cf8:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   d4cfa:	eef2 8a02 	vmov.f32	s17, #34	; 0x41100000  9.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4cfe:	eeb0 8a40 	vmov.f32	s16, s0
   d4d02:	f7ff ffc5 	bl	d4c90 <_ZN3DHT12readHumidityEv>
	return c * 9 / 5 + 32;
   d4d06:	ee28 8a28 	vmul.f32	s16, s16, s17
   d4d0a:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d0e:	eef0 0a40 	vmov.f32	s1, s0
	return c * 9 / 5 + 32;
   d4d12:	ee88 0a09 	vdiv.f32	s0, s16, s18
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d16:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   d4d18:	ed9f 8a07 	vldr	s16, [pc, #28]	; d4d38 <_ZN3DHT12getHeatIndexEv+0x4c>
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d1c:	ee30 0a08 	vadd.f32	s0, s0, s16
   d4d20:	f7ff fc9e 	bl	d4660 <_ZN3DHT16computeHeatIndexEff>
	return (f - 32) * 5 / 9;
   d4d24:	ee30 0a48 	vsub.f32	s0, s0, s16
   d4d28:	ee20 0a09 	vmul.f32	s0, s0, s18
}
   d4d2c:	ee80 0a28 	vdiv.f32	s0, s0, s17
   d4d30:	ecbd 8b04 	vpop	{d8-d9}
   d4d34:	bd10      	pop	{r4, pc}
   d4d36:	bf00      	nop
   d4d38:	42000000 	.word	0x42000000

000d4d3c <_ZN3DHT11getDewPointEv>:
float DHT::getDewPoint() {
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	ed2d 8b02 	vpush	{d8}
   d4d42:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
   d4d44:	f7ff ff46 	bl	d4bd4 <_ZN3DHT15readTemperatureEv>
   d4d48:	4620      	mov	r0, r4
   d4d4a:	eeb0 8a40 	vmov.f32	s16, s0
   d4d4e:	f7ff ff9f 	bl	d4c90 <_ZN3DHT12readHumidityEv>
   d4d52:	eef0 0a40 	vmov.f32	s1, s0
   d4d56:	eeb0 0a48 	vmov.f32	s0, s16
}
   d4d5a:	ecbd 8b02 	vpop	{d8}
	return computeDewPoint(readTemperature(), readHumidity());
   d4d5e:	4620      	mov	r0, r4
}
   d4d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return computeDewPoint(readTemperature(), readHumidity());
   d4d64:	f7ff bd5c 	b.w	d4820 <_ZN3DHT15computeDewPointEff>

000d4d68 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d4d68:	b538      	push	{r3, r4, r5, lr}
   d4d6a:	f100 0520 	add.w	r5, r0, #32
   d4d6e:	4604      	mov	r4, r0
   d4d70:	490c      	ldr	r1, [pc, #48]	; (d4da4 <_ZN11CSmartLightC1Ev+0x3c>)
   d4d72:	4628      	mov	r0, r5
   d4d74:	f000 fd97 	bl	d58a6 <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d4d78:	f240 1301 	movw	r3, #257	; 0x101
   d4d7c:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d4d7e:	2380      	movs	r3, #128	; 0x80
   d4d80:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d4d82:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4d86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4d8a:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d4d8e:	4628      	mov	r0, r5
   d4d90:	4905      	ldr	r1, [pc, #20]	; (d4da8 <_ZN11CSmartLightC1Ev+0x40>)
   d4d92:	f000 fddb 	bl	d594c <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d4d96:	4b05      	ldr	r3, [pc, #20]	; (d4dac <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d4d98:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4d9a:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d4d9e:	4620      	mov	r0, r4
   d4da0:	bd38      	pop	{r3, r4, r5, pc}
   d4da2:	bf00      	nop
   d4da4:	000d8eaf 	.word	0x000d8eaf
   d4da8:	000d8c54 	.word	0x000d8c54
   d4dac:	fffe7961 	.word	0xfffe7961

000d4db0 <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d4db0:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4db2:	f000 ff3f 	bl	d5c34 <_ZN8RGBClass10brightnessEv>
   d4db6:	b128      	cbz	r0, d4dc4 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d4db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4dbc:	2101      	movs	r1, #1
   d4dbe:	2000      	movs	r0, #0
   d4dc0:	f000 bf2a 	b.w	d5c18 <_ZN8RGBClass10brightnessEhb>
}
   d4dc4:	bd08      	pop	{r3, pc}
	...

000d4dc8 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d4dc8:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d4dca:	4b13      	ldr	r3, [pc, #76]	; (d4e18 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d4dcc:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d4dce:	4604      	mov	r4, r0
   d4dd0:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d4dd2:	d10a      	bne.n	d4dea <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d4dd4:	6865      	ldr	r5, [r4, #4]
   d4dd6:	f000 ff2d 	bl	d5c34 <_ZN8RGBClass10brightnessEv>
   d4dda:	4285      	cmp	r5, r0
   d4ddc:	d016      	beq.n	d4e0c <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d4dde:	7920      	ldrb	r0, [r4, #4]
   d4de0:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
    RGB.brightness(brightness);
}
   d4de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d4de6:	f000 bf17 	b.w	d5c18 <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d4dea:	f003 fa39 	bl	d8260 <__aeabi_i2d>
   d4dee:	a308      	add	r3, pc, #32	; (adr r3, d4e10 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d4df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4df4:	f003 fa9e 	bl	d8334 <__aeabi_dmul>
   d4df8:	4b08      	ldr	r3, [pc, #32]	; (d4e1c <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d4dfa:	2200      	movs	r2, #0
   d4dfc:	f003 fbc4 	bl	d8588 <__aeabi_ddiv>
   d4e00:	f003 fd48 	bl	d8894 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4e04:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d4e06:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d4e08:	b2c0      	uxtb	r0, r0
   d4e0a:	e7ea      	b.n	d4de2 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d4e0c:	bd38      	pop	{r3, r4, r5, pc}
   d4e0e:	bf00      	nop
   d4e10:	00000000 	.word	0x00000000
   d4e14:	406fe000 	.word	0x406fe000
   d4e18:	fffe7961 	.word	0xfffe7961
   d4e1c:	40590000 	.word	0x40590000

000d4e20 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d4e20:	b510      	push	{r4, lr}
   d4e22:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d4e24:	2013      	movs	r0, #19
   d4e26:	f001 fd4f 	bl	d68c8 <analogRead>
   d4e2a:	60a0      	str	r0, [r4, #8]
}
   d4e2c:	bd10      	pop	{r4, pc}
	...

000d4e30 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d4e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e34:	4604      	mov	r4, r0
    readSensorVal();
   d4e36:	f7ff fff3 	bl	d4e20 <_ZN11CSmartLight13readSensorValEv>
    if(curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4e3a:	6925      	ldr	r5, [r4, #16]
   d4e3c:	68a0      	ldr	r0, [r4, #8]
    if(curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4e3e:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4e42:	42a8      	cmp	r0, r5
   d4e44:	bfb8      	it	lt
   d4e46:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin)/(double)(sensorMax-sensorMin);
   d4e48:	4580      	cmp	r8, r0
   d4e4a:	bfd4      	ite	le
   d4e4c:	ebc5 0008 	rsble	r0, r5, r8
   d4e50:	ebc5 0000 	rsbgt	r0, r5, r0
   d4e54:	f003 fa04 	bl	d8260 <__aeabi_i2d>
   d4e58:	4606      	mov	r6, r0
   d4e5a:	eba8 0005 	sub.w	r0, r8, r5
   d4e5e:	460f      	mov	r7, r1
   d4e60:	f003 f9fe 	bl	d8260 <__aeabi_i2d>
   d4e64:	4602      	mov	r2, r0
   d4e66:	460b      	mov	r3, r1
   d4e68:	4630      	mov	r0, r6
   d4e6a:	4639      	mov	r1, r7
   d4e6c:	f003 fb8c 	bl	d8588 <__aeabi_ddiv>
   d4e70:	4602      	mov	r2, r0
   d4e72:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4e74:	2000      	movs	r0, #0
   d4e76:	490a      	ldr	r1, [pc, #40]	; (d4ea0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4e78:	f003 f8a4 	bl	d7fc4 <__aeabi_dsub>
   d4e7c:	a306      	add	r3, pc, #24	; (adr r3, d4e98 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e82:	f003 fa57 	bl	d8334 <__aeabi_dmul>
   d4e86:	f003 fd05 	bl	d8894 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4e8a:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4e8c:	6060      	str	r0, [r4, #4]
}
   d4e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4e92:	b2c0      	uxtb	r0, r0
   d4e94:	f000 bec0 	b.w	d5c18 <_ZN8RGBClass10brightnessEhb>
   d4e98:	00000000 	.word	0x00000000
   d4e9c:	406fe000 	.word	0x406fe000
   d4ea0:	3ff00000 	.word	0x3ff00000
   d4ea4:	00000000 	.word	0x00000000

000d4ea8 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4ea8:	b570      	push	{r4, r5, r6, lr}
   d4eaa:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4eac:	68c3      	ldr	r3, [r0, #12]
   d4eae:	7846      	ldrb	r6, [r0, #1]
   d4eb0:	7805      	ldrb	r5, [r0, #0]
   d4eb2:	9303      	str	r3, [sp, #12]
   d4eb4:	6903      	ldr	r3, [r0, #16]
   d4eb6:	9302      	str	r3, [sp, #8]
   d4eb8:	6883      	ldr	r3, [r0, #8]
   d4eba:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4ebc:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	f003 f9ce 	bl	d8260 <__aeabi_i2d>
   d4ec4:	a310      	add	r3, pc, #64	; (adr r3, d4f08 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4eca:	f003 fb5d 	bl	d8588 <__aeabi_ddiv>
   d4ece:	4b0c      	ldr	r3, [pc, #48]	; (d4f00 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4ed0:	2200      	movs	r2, #0
   d4ed2:	f003 fa2f 	bl	d8334 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4ed6:	f003 fcdd 	bl	d8894 <__aeabi_d2iz>
   d4eda:	4633      	mov	r3, r6
   d4edc:	462a      	mov	r2, r5
   d4ede:	9000      	str	r0, [sp, #0]
   d4ee0:	4908      	ldr	r1, [pc, #32]	; (d4f04 <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4ee2:	a804      	add	r0, sp, #16
   d4ee4:	f000 fd70 	bl	d59c8 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4ee8:	a904      	add	r1, sp, #16
   d4eea:	f104 0020 	add.w	r0, r4, #32
   d4eee:	f000 fd25 	bl	d593c <_ZN6StringaSEOS_>
   d4ef2:	a804      	add	r0, sp, #16
   d4ef4:	f000 fc8c 	bl	d5810 <_ZN6StringD1Ev>
   d4ef8:	b008      	add	sp, #32
   d4efa:	bd70      	pop	{r4, r5, r6, pc}
   d4efc:	f3af 8000 	nop.w
   d4f00:	40590000 	.word	0x40590000
   d4f04:	000d8cc4 	.word	0x000d8cc4
   d4f08:	00000000 	.word	0x00000000
   d4f0c:	406fe000 	.word	0x406fe000

000d4f10 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4f10:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d4f12:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d4f14:	4604      	mov	r4, r0
    switch (state_L0) {
   d4f16:	b155      	cbz	r5, d4f2e <_ZN11CSmartLight7executeEv+0x1e>
   d4f18:	2d01      	cmp	r5, #1
   d4f1a:	d013      	beq.n	d4f44 <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d4f1c:	4b17      	ldr	r3, [pc, #92]	; (d4f7c <_ZN11CSmartLight7executeEv+0x6c>)
    cmd.Brightness = INVALID_CMD;
   d4f1e:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4f20:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d4f24:	4620      	mov	r0, r4
}
   d4f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4f2a:	f7ff bfbd 	b.w	d4ea8 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d4f2e:	f7ff ff3f 	bl	d4db0 <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4f32:	6963      	ldr	r3, [r4, #20]
   d4f34:	4a11      	ldr	r2, [pc, #68]	; (d4f7c <_ZN11CSmartLight7executeEv+0x6c>)
   d4f36:	4293      	cmp	r3, r2
   d4f38:	d0f0      	beq.n	d4f1c <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) { 
   d4f3a:	2b00      	cmp	r3, #0
   d4f3c:	d0ee      	beq.n	d4f1c <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d4f3e:	2301      	movs	r3, #1
   d4f40:	8023      	strh	r3, [r4, #0]
   d4f42:	e7eb      	b.n	d4f1c <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d4f44:	7843      	ldrb	r3, [r0, #1]
   d4f46:	b133      	cbz	r3, d4f56 <_ZN11CSmartLight7executeEv+0x46>
   d4f48:	2b01      	cmp	r3, #1
   d4f4a:	d00f      	beq.n	d4f6c <_ZN11CSmartLight7executeEv+0x5c>
                if(!cmd.On) state_L0= CSmartLight::S_OFF;
   d4f4c:	6963      	ldr	r3, [r4, #20]
   d4f4e:	2b00      	cmp	r3, #0
   d4f50:	d1e4      	bne.n	d4f1c <_ZN11CSmartLight7executeEv+0xc>
   d4f52:	7023      	strb	r3, [r4, #0]
   d4f54:	e7e2      	b.n	d4f1c <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4f56:	69c1      	ldr	r1, [r0, #28]
   d4f58:	f7ff ff36 	bl	d4dc8 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4f5c:	69a3      	ldr	r3, [r4, #24]
   d4f5e:	4a07      	ldr	r2, [pc, #28]	; (d4f7c <_ZN11CSmartLight7executeEv+0x6c>)
   d4f60:	4293      	cmp	r3, r2
   d4f62:	d0f3      	beq.n	d4f4c <_ZN11CSmartLight7executeEv+0x3c>
                        if(cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4f64:	2b00      	cmp	r3, #0
   d4f66:	d0f1      	beq.n	d4f4c <_ZN11CSmartLight7executeEv+0x3c>
   d4f68:	7065      	strb	r5, [r4, #1]
   d4f6a:	e7ef      	b.n	d4f4c <_ZN11CSmartLight7executeEv+0x3c>
                    updataBrightnessAutomatically();
   d4f6c:	f7ff ff60 	bl	d4e30 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if(!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4f70:	69a3      	ldr	r3, [r4, #24]
   d4f72:	2b00      	cmp	r3, #0
   d4f74:	d1ea      	bne.n	d4f4c <_ZN11CSmartLight7executeEv+0x3c>
   d4f76:	7063      	strb	r3, [r4, #1]
   d4f78:	e7e8      	b.n	d4f4c <_ZN11CSmartLight7executeEv+0x3c>
   d4f7a:	bf00      	nop
   d4f7c:	fffe7961 	.word	0xfffe7961

000d4f80 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4f82:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f84:	f851 3b04 	ldr.w	r3, [r1], #4
   d4f88:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4f8a:	4604      	mov	r4, r0
   d4f8c:	a801      	add	r0, sp, #4
   d4f8e:	f7ff f9dd 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4f92:	466a      	mov	r2, sp
   d4f94:	4629      	mov	r1, r5
   d4f96:	4620      	mov	r0, r4
   d4f98:	f001 fb74 	bl	d6684 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4f9c:	a801      	add	r0, sp, #4
   d4f9e:	f7ff f8de 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	b003      	add	sp, #12
   d4fa6:	bd30      	pop	{r4, r5, pc}

000d4fa8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fac:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4fae:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fb0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fb4:	9300      	str	r3, [sp, #0]
   d4fb6:	4604      	mov	r4, r0
   d4fb8:	a801      	add	r0, sp, #4
   d4fba:	f7ff f9c7 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4fbe:	466a      	mov	r2, sp
   d4fc0:	4629      	mov	r1, r5
   d4fc2:	a804      	add	r0, sp, #16
   d4fc4:	f001 fb82 	bl	d66cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fc8:	a801      	add	r0, sp, #4
   d4fca:	f7ff f8c8 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4fce:	4e3c      	ldr	r6, [pc, #240]	; (d50c0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d4fd0:	4f3c      	ldr	r7, [pc, #240]	; (d50c4 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d4fd2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d50d0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d4fd6:	a804      	add	r0, sp, #16
   d4fd8:	f001 fb90 	bl	d66fc <_ZN5spark18JSONObjectIterator4nextEv>
   d4fdc:	2800      	cmp	r0, #0
   d4fde:	d069      	beq.n	d50b4 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d4fe0:	a904      	add	r1, sp, #16
   d4fe2:	4668      	mov	r0, sp
   d4fe4:	f7ff ffcc 	bl	d4f80 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4fe8:	4631      	mov	r1, r6
   d4fea:	9802      	ldr	r0, [sp, #8]
   d4fec:	f003 fd24 	bl	d8a38 <strcmp>
   d4ff0:	4605      	mov	r5, r0
   d4ff2:	a801      	add	r0, sp, #4
   d4ff4:	f7ff f8b3 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d4ff8:	a904      	add	r1, sp, #16
   d4ffa:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d4ffc:	b94d      	cbnz	r5, d5012 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d4ffe:	f7ff f8c4 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5002:	4668      	mov	r0, sp
   d5004:	f001 f9f0 	bl	d63e8 <_ZNK5spark9JSONValue6toBoolEv>
   d5008:	6160      	str	r0, [r4, #20]
   d500a:	a801      	add	r0, sp, #4
   d500c:	f7ff f8a7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5010:	e7e1      	b.n	d4fd6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d5012:	f7ff ffb5 	bl	d4f80 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5016:	4639      	mov	r1, r7
   d5018:	9802      	ldr	r0, [sp, #8]
   d501a:	f003 fd0d 	bl	d8a38 <strcmp>
   d501e:	4605      	mov	r5, r0
   d5020:	a801      	add	r0, sp, #4
   d5022:	f7ff f89c 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d5026:	a904      	add	r1, sp, #16
   d5028:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d502a:	b935      	cbnz	r5, d503a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d502c:	f7ff f8ad 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5030:	4668      	mov	r0, sp
   d5032:	f001 f9d9 	bl	d63e8 <_ZNK5spark9JSONValue6toBoolEv>
   d5036:	61a0      	str	r0, [r4, #24]
   d5038:	e7e7      	b.n	d500a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d503a:	f7ff ffa1 	bl	d4f80 <_ZNK5spark18JSONObjectIterator4nameEv>
   d503e:	4641      	mov	r1, r8
   d5040:	9802      	ldr	r0, [sp, #8]
   d5042:	f003 fcf9 	bl	d8a38 <strcmp>
   d5046:	4605      	mov	r5, r0
   d5048:	a801      	add	r0, sp, #4
   d504a:	f7ff f888 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d504e:	a904      	add	r1, sp, #16
   d5050:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d5052:	b935      	cbnz	r5, d5062 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d5054:	f7ff f899 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5058:	4668      	mov	r0, sp
   d505a:	f001 fa03 	bl	d6464 <_ZNK5spark9JSONValue5toIntEv>
   d505e:	61e0      	str	r0, [r4, #28]
   d5060:	e7d3      	b.n	d500a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d5062:	f7ff ff8d 	bl	d4f80 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5066:	4918      	ldr	r1, [pc, #96]	; (d50c8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d5068:	9802      	ldr	r0, [sp, #8]
   d506a:	f003 fce5 	bl	d8a38 <strcmp>
   d506e:	4605      	mov	r5, r0
   d5070:	a801      	add	r0, sp, #4
   d5072:	f7ff f874 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d5076:	a904      	add	r1, sp, #16
   d5078:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d507a:	b935      	cbnz	r5, d508a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d507c:	f7ff f885 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5080:	4668      	mov	r0, sp
   d5082:	f001 f9ef 	bl	d6464 <_ZNK5spark9JSONValue5toIntEv>
   d5086:	6120      	str	r0, [r4, #16]
   d5088:	e7bf      	b.n	d500a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "max") {
   d508a:	f7ff ff79 	bl	d4f80 <_ZNK5spark18JSONObjectIterator4nameEv>
   d508e:	490f      	ldr	r1, [pc, #60]	; (d50cc <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d5090:	9802      	ldr	r0, [sp, #8]
   d5092:	f003 fcd1 	bl	d8a38 <strcmp>
   d5096:	4605      	mov	r5, r0
   d5098:	a801      	add	r0, sp, #4
   d509a:	f7ff f860 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d509e:	2d00      	cmp	r5, #0
   d50a0:	d199      	bne.n	d4fd6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d50a2:	a904      	add	r1, sp, #16
   d50a4:	4668      	mov	r0, sp
   d50a6:	f7ff f870 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d50aa:	4668      	mov	r0, sp
   d50ac:	f001 f9da 	bl	d6464 <_ZNK5spark9JSONValue5toIntEv>
   d50b0:	60e0      	str	r0, [r4, #12]
   d50b2:	e7aa      	b.n	d500a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d50b4:	a805      	add	r0, sp, #20
   d50b6:	f7ff f852 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50ba:	b00a      	add	sp, #40	; 0x28
   d50bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d50c0:	000d8cf2 	.word	0x000d8cf2
   d50c4:	000d8cf5 	.word	0x000d8cf5
   d50c8:	000d8d05 	.word	0x000d8d05
   d50cc:	000d8d09 	.word	0x000d8d09
   d50d0:	000d8cfa 	.word	0x000d8cfa

000d50d4 <_ZN11CThermostatC1Ev>:
#include "thermostat.h"
#include "common.h"
DHT dht(DHTPIN, DHTTYPE);

CThermostat::CThermostat() {
   d50d4:	b510      	push	{r4, lr}
   d50d6:	490b      	ldr	r1, [pc, #44]	; (d5104 <_ZN11CThermostatC1Ev+0x30>)
   d50d8:	4604      	mov	r4, r0
   d50da:	f000 fbe4 	bl	d58a6 <_ZN6StringC1EPKc>
    celsius = 0.0;
   d50de:	2300      	movs	r3, #0
   d50e0:	6123      	str	r3, [r4, #16]
    farenheit = 0.0;
   d50e2:	6163      	str	r3, [r4, #20]
    humidity = 0.0;
   d50e4:	61a3      	str	r3, [r4, #24]
    heatIndex = 0.0;
   d50e6:	61e3      	str	r3, [r4, #28]
    dewPoint = 0.0;
   d50e8:	6223      	str	r3, [r4, #32]
    kelvin = 0.0;
   d50ea:	6263      	str	r3, [r4, #36]	; 0x24
    state = CThermostat::S_READ;
   d50ec:	2301      	movs	r3, #1
   d50ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    statusStr = "{}";
   d50f2:	4905      	ldr	r1, [pc, #20]	; (d5108 <_ZN11CThermostatC1Ev+0x34>)
   d50f4:	4620      	mov	r0, r4
   d50f6:	f000 fc29 	bl	d594c <_ZN6StringaSEPKc>
    lastRead = 0;
   d50fa:	2300      	movs	r3, #0
   d50fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    
}
   d50fe:	4620      	mov	r0, r4
   d5100:	bd10      	pop	{r4, pc}
   d5102:	bf00      	nop
   d5104:	000d8eaf 	.word	0x000d8eaf
   d5108:	000d8c54 	.word	0x000d8c54

000d510c <_ZN11CThermostat15createStatusStrEv>:
    }
    createStatusStr();
    
}

void CThermostat::createStatusStr() {
   d510c:	b510      	push	{r4, lr}
   d510e:	4604      	mov	r4, r0
   d5110:	b090      	sub	sp, #64	; 0x40
    statusStr = String::format("{\"t\":%f,\"c\":%f,\"h\":%f,\"hi\":%f,\"dp\":%f,\"k\":%f}", farenheit, celsius, humidity, heatIndex, dewPoint, kelvin);
   d5112:	6940      	ldr	r0, [r0, #20]
   d5114:	f003 f8b6 	bl	d8284 <__aeabi_f2d>
   d5118:	4602      	mov	r2, r0
   d511a:	460b      	mov	r3, r1
   d511c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d511e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d5122:	f003 f8af 	bl	d8284 <__aeabi_f2d>
   d5126:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d512a:	6a20      	ldr	r0, [r4, #32]
   d512c:	f003 f8aa 	bl	d8284 <__aeabi_f2d>
   d5130:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5134:	69e0      	ldr	r0, [r4, #28]
   d5136:	f003 f8a5 	bl	d8284 <__aeabi_f2d>
   d513a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d513e:	69a0      	ldr	r0, [r4, #24]
   d5140:	f003 f8a0 	bl	d8284 <__aeabi_f2d>
   d5144:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5148:	6920      	ldr	r0, [r4, #16]
   d514a:	f003 f89b 	bl	d8284 <__aeabi_f2d>
   d514e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5152:	e9cd 0100 	strd	r0, r1, [sp]
   d5156:	a80c      	add	r0, sp, #48	; 0x30
   d5158:	4905      	ldr	r1, [pc, #20]	; (d5170 <_ZN11CThermostat15createStatusStrEv+0x64>)
   d515a:	f000 fc35 	bl	d59c8 <_ZN6String6formatEPKcz>
   d515e:	a90c      	add	r1, sp, #48	; 0x30
   d5160:	4620      	mov	r0, r4
   d5162:	f000 fbeb 	bl	d593c <_ZN6StringaSEOS_>
   d5166:	a80c      	add	r0, sp, #48	; 0x30
   d5168:	f000 fb52 	bl	d5810 <_ZN6StringD1Ev>
   d516c:	b010      	add	sp, #64	; 0x40
   d516e:	bd10      	pop	{r4, pc}
   d5170:	000d8d0d 	.word	0x000d8d0d

000d5174 <_ZN11CThermostat7executeEv>:
void CThermostat::execute() {
   d5174:	b538      	push	{r3, r4, r5, lr}
   d5176:	4604      	mov	r4, r0
   d5178:	ed2d 8b06 	vpush	{d8-d10}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d517c:	f000 f8ca 	bl	d5314 <HAL_Timer_Get_Milli_Seconds>
    switch(state){
   d5180:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5184:	4605      	mov	r5, r0
   d5186:	b143      	cbz	r3, d519a <_ZN11CThermostat7executeEv+0x26>
   d5188:	2b01      	cmp	r3, #1
   d518a:	d00f      	beq.n	d51ac <_ZN11CThermostat7executeEv+0x38>
}
   d518c:	ecbd 8b06 	vpop	{d8-d10}
    createStatusStr();
   d5190:	4620      	mov	r0, r4
}
   d5192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d5196:	f7ff bfb9 	b.w	d510c <_ZN11CThermostat15createStatusStrEv>
            if (currentTime >= lastRead + 2000){
   d519a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d519c:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
   d51a0:	4283      	cmp	r3, r0
   d51a2:	daf3      	bge.n	d518c <_ZN11CThermostat7executeEv+0x18>
                state = CThermostat::S_READ;
   d51a4:	2301      	movs	r3, #1
            state = CThermostat::S_DELAY;
   d51a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            break;
   d51aa:	e7ef      	b.n	d518c <_ZN11CThermostat7executeEv+0x18>
            tempHumidity = dht.getHumidity();
   d51ac:	4824      	ldr	r0, [pc, #144]	; (d5240 <_ZN11CThermostat7executeEv+0xcc>)
   d51ae:	f7ff fd9b 	bl	d4ce8 <_ZN3DHT11getHumidityEv>
            tempCelsius = dht.getTempCelcius();
   d51b2:	4823      	ldr	r0, [pc, #140]	; (d5240 <_ZN11CThermostat7executeEv+0xcc>)
            tempHumidity = dht.getHumidity();
   d51b4:	eeb0 aa40 	vmov.f32	s20, s0
            tempCelsius = dht.getTempCelcius();
   d51b8:	f7ff fd3e 	bl	d4c38 <_ZN3DHT14getTempCelciusEv>
            tempFarenheit = dht.getTempFarenheit();
   d51bc:	4820      	ldr	r0, [pc, #128]	; (d5240 <_ZN11CThermostat7executeEv+0xcc>)
            tempCelsius = dht.getTempCelcius();
   d51be:	eef0 9a40 	vmov.f32	s19, s0
            tempFarenheit = dht.getTempFarenheit();
   d51c2:	f7ff fd3b 	bl	d4c3c <_ZN3DHT16getTempFarenheitEv>
            tempHeatIndex = dht.getHeatIndex();
   d51c6:	481e      	ldr	r0, [pc, #120]	; (d5240 <_ZN11CThermostat7executeEv+0xcc>)
            tempFarenheit = dht.getTempFarenheit();
   d51c8:	eeb0 9a40 	vmov.f32	s18, s0
            tempHeatIndex = dht.getHeatIndex();
   d51cc:	f7ff fd8e 	bl	d4cec <_ZN3DHT12getHeatIndexEv>
            tempDewPoint = dht.getDewPoint();
   d51d0:	481b      	ldr	r0, [pc, #108]	; (d5240 <_ZN11CThermostat7executeEv+0xcc>)
            tempHeatIndex = dht.getHeatIndex();
   d51d2:	eef0 8a40 	vmov.f32	s17, s0
            tempDewPoint = dht.getDewPoint();
   d51d6:	f7ff fdb1 	bl	d4d3c <_ZN3DHT11getDewPointEv>
            tempKelvin = dht.getTempKelvin();
   d51da:	4819      	ldr	r0, [pc, #100]	; (d5240 <_ZN11CThermostat7executeEv+0xcc>)
            tempDewPoint = dht.getDewPoint();
   d51dc:	eeb0 8a40 	vmov.f32	s16, s0
            tempKelvin = dht.getTempKelvin();
   d51e0:	f7ff fd3e 	bl	d4c60 <_ZN3DHT13getTempKelvinEv>
            if (!isnan(tempHumidity)) humidity = tempHumidity;
   d51e4:	eeb4 aa4a 	vcmp.f32	s20, s20
   d51e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempCelsius)) celsius = tempCelsius;
   d51ec:	eef4 9a69 	vcmp.f32	s19, s19
            if (!isnan(tempHumidity)) humidity = tempHumidity;
   d51f0:	bf78      	it	vc
   d51f2:	ed84 aa06 	vstrvc	s20, [r4, #24]
            if (!isnan(tempCelsius)) celsius = tempCelsius;
   d51f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempFarenheit)) farenheit = tempFarenheit;
   d51fa:	eeb4 9a49 	vcmp.f32	s18, s18
            if (!isnan(tempCelsius)) celsius = tempCelsius;
   d51fe:	bf78      	it	vc
   d5200:	edc4 9a04 	vstrvc	s19, [r4, #16]
            if (!isnan(tempFarenheit)) farenheit = tempFarenheit;
   d5204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempHeatIndex)) heatIndex = tempHeatIndex;
   d5208:	eef4 8a68 	vcmp.f32	s17, s17
            if (!isnan(tempFarenheit)) farenheit = tempFarenheit;
   d520c:	bf78      	it	vc
   d520e:	ed84 9a05 	vstrvc	s18, [r4, #20]
            if (!isnan(tempHeatIndex)) heatIndex = tempHeatIndex;
   d5212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempDewPoint)) dewPoint = tempDewPoint;
   d5216:	eeb4 8a48 	vcmp.f32	s16, s16
            if (!isnan(tempHeatIndex)) heatIndex = tempHeatIndex;
   d521a:	bf78      	it	vc
   d521c:	edc4 8a07 	vstrvc	s17, [r4, #28]
            if (!isnan(tempDewPoint)) dewPoint = tempDewPoint;
   d5220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempKelvin)) kelvin = tempKelvin;
   d5224:	eeb4 0a40 	vcmp.f32	s0, s0
            if (!isnan(tempDewPoint)) dewPoint = tempDewPoint;
   d5228:	bf78      	it	vc
   d522a:	ed84 8a08 	vstrvc	s16, [r4, #32]
            if (!isnan(tempKelvin)) kelvin = tempKelvin;
   d522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5232:	bf78      	it	vc
   d5234:	ed84 0a09 	vstrvc	s0, [r4, #36]	; 0x24
            lastRead = currentTime;
   d5238:	62e5      	str	r5, [r4, #44]	; 0x2c
            state = CThermostat::S_DELAY;
   d523a:	2300      	movs	r3, #0
   d523c:	e7b3      	b.n	d51a6 <_ZN11CThermostat7executeEv+0x32>
   d523e:	bf00      	nop
   d5240:	2003e594 	.word	0x2003e594

000d5244 <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTTYPE);
   d5244:	4802      	ldr	r0, [pc, #8]	; (d5250 <_GLOBAL__sub_I_dht+0xc>)
   d5246:	2306      	movs	r3, #6
   d5248:	220b      	movs	r2, #11
   d524a:	2102      	movs	r1, #2
   d524c:	f7ff b9e9 	b.w	d4622 <_ZN3DHTC1Ehhh>
   d5250:	2003e594 	.word	0x2003e594

000d5254 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <netdb_freeaddrinfo+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	689b      	ldr	r3, [r3, #8]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030268 	.word	0x00030268

000d5264 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <netdb_getaddrinfo+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	68db      	ldr	r3, [r3, #12]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030268 	.word	0x00030268

000d5274 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <HAL_Pin_Map+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	681b      	ldr	r3, [r3, #0]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003022c 	.word	0x0003022c

000d5284 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <HAL_Validate_Pin_Function+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	685b      	ldr	r3, [r3, #4]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	0003022c 	.word	0x0003022c

000d5294 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <HAL_Pin_Mode+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	689b      	ldr	r3, [r3, #8]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	0003022c 	.word	0x0003022c

000d52a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <HAL_Get_Pin_Mode+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	68db      	ldr	r3, [r3, #12]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	0003022c 	.word	0x0003022c

000d52b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <HAL_GPIO_Write+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	691b      	ldr	r3, [r3, #16]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	0003022c 	.word	0x0003022c

000d52c4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <HAL_Interrupts_Enable_All+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6a1b      	ldr	r3, [r3, #32]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003022c 	.word	0x0003022c

000d52d4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <HAL_Interrupts_Disable_All+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	0003022c 	.word	0x0003022c

000d52e4 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <hal_adc_read+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	0003022c 	.word	0x0003022c

000d52f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <HAL_RNG_GetRandomNumber+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	685b      	ldr	r3, [r3, #4]
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030218 	.word	0x00030218

000d5304 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <HAL_Delay_Microseconds+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	68db      	ldr	r3, [r3, #12]
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030218 	.word	0x00030218

000d5314 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	695b      	ldr	r3, [r3, #20]
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030218 	.word	0x00030218

000d5324 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <hal_rtc_time_is_valid+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030218 	.word	0x00030218

000d5334 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <hal_rtc_get_time+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030218 	.word	0x00030218

000d5344 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <os_mutex_recursive_create+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030248 	.word	0x00030248

000d5354 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <inet_inet_ntop+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	695b      	ldr	r3, [r3, #20]
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030264 	.word	0x00030264

000d5364 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <hal_usart_init+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	681b      	ldr	r3, [r3, #0]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	0003023c 	.word	0x0003023c

000d5374 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <hal_usart_write+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	68db      	ldr	r3, [r3, #12]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	0003023c 	.word	0x0003023c

000d5384 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <hal_usart_available+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	691b      	ldr	r3, [r3, #16]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	0003023c 	.word	0x0003023c

000d5394 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <hal_usart_read+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	695b      	ldr	r3, [r3, #20]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	0003023c 	.word	0x0003023c

000d53a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <hal_usart_peek+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	699b      	ldr	r3, [r3, #24]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	0003023c 	.word	0x0003023c

000d53b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <hal_usart_flush+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	69db      	ldr	r3, [r3, #28]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	0003023c 	.word	0x0003023c

000d53c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <hal_usart_is_enabled+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	6a1b      	ldr	r3, [r3, #32]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003023c 	.word	0x0003023c

000d53d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <hal_usart_available_data_for_write+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003023c 	.word	0x0003023c

000d53e4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <hal_i2c_write+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	6a1b      	ldr	r3, [r3, #32]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	00030228 	.word	0x00030228

000d53f4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <hal_i2c_available+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030228 	.word	0x00030228

000d5404 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <hal_i2c_read+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030228 	.word	0x00030228

000d5414 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <hal_i2c_peek+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030228 	.word	0x00030228

000d5424 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <hal_i2c_flush+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030228 	.word	0x00030228

000d5434 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <hal_i2c_is_enabled+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030228 	.word	0x00030228

000d5444 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <hal_i2c_init+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030228 	.word	0x00030228

000d5454 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <hal_spi_init+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	69db      	ldr	r3, [r3, #28]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030230 	.word	0x00030230

000d5464 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <hal_spi_is_enabled+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6a1b      	ldr	r3, [r3, #32]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030230 	.word	0x00030230

000d5474 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <HAL_USB_USART_Init+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	681b      	ldr	r3, [r3, #0]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	0003024c 	.word	0x0003024c

000d5484 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <HAL_USB_USART_Begin+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	685b      	ldr	r3, [r3, #4]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	0003024c 	.word	0x0003024c

000d5494 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <HAL_USB_USART_Available_Data+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	691b      	ldr	r3, [r3, #16]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003024c 	.word	0x0003024c

000d54a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	695b      	ldr	r3, [r3, #20]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	0003024c 	.word	0x0003024c

000d54b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_USB_USART_Receive_Data+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	699b      	ldr	r3, [r3, #24]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	0003024c 	.word	0x0003024c

000d54c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <HAL_USB_USART_Send_Data+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	69db      	ldr	r3, [r3, #28]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	0003024c 	.word	0x0003024c

000d54d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <HAL_USB_USART_Flush_Data+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6a1b      	ldr	r3, [r3, #32]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	0003024c 	.word	0x0003024c

000d54e4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <LED_SetSignalingColor+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	685b      	ldr	r3, [r3, #4]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030260 	.word	0x00030260

000d54f4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <LED_Signaling_Start+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	689b      	ldr	r3, [r3, #8]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030260 	.word	0x00030260

000d5504 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <LED_Signaling_Stop+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	68db      	ldr	r3, [r3, #12]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030260 	.word	0x00030260

000d5514 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <LED_SetBrightness+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	691b      	ldr	r3, [r3, #16]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030260 	.word	0x00030260

000d5524 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <LED_RGB_IsOverRidden+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	699b      	ldr	r3, [r3, #24]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030260 	.word	0x00030260

000d5534 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <LED_On+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	69db      	ldr	r3, [r3, #28]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030260 	.word	0x00030260

000d5544 <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <Get_LED_Brightness+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030260 	.word	0x00030260

000d5554 <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <panic_+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030260 	.word	0x00030260

000d5564 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <jsmn_init+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030260 	.word	0x00030260

000d5574 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <jsmn_parse_deprecated+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030260 	.word	0x00030260

000d5584 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <system_mode+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	681b      	ldr	r3, [r3, #0]
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030220 	.word	0x00030220

000d5594 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <set_system_mode+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	685b      	ldr	r3, [r3, #4]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030220 	.word	0x00030220

000d55a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <system_delay_ms+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	695b      	ldr	r3, [r3, #20]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030220 	.word	0x00030220

000d55b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <system_thread_set_state+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030220 	.word	0x00030220

000d55c4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <system_thread_get_state+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030220 	.word	0x00030220

000d55d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b03      	ldr	r3, [pc, #12]	; (d55e4 <system_ctrl_set_app_request_handler+0x10>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d55de:	9301      	str	r3, [sp, #4]
   d55e0:	bd08      	pop	{r3, pc}
   d55e2:	0000      	.short	0x0000
   d55e4:	00030220 	.word	0x00030220

000d55e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b03      	ldr	r3, [pc, #12]	; (d55f8 <system_ctrl_set_result+0x10>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55f2:	9301      	str	r3, [sp, #4]
   d55f4:	bd08      	pop	{r3, pc}
   d55f6:	0000      	.short	0x0000
   d55f8:	00030220 	.word	0x00030220

000d55fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <network_connect+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	685b      	ldr	r3, [r3, #4]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030240 	.word	0x00030240

000d560c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <network_connecting+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	689b      	ldr	r3, [r3, #8]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030240 	.word	0x00030240

000d561c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <network_disconnect+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	68db      	ldr	r3, [r3, #12]
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030240 	.word	0x00030240

000d562c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <network_ready+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	691b      	ldr	r3, [r3, #16]
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030240 	.word	0x00030240

000d563c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <network_on+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	695b      	ldr	r3, [r3, #20]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030240 	.word	0x00030240

000d564c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <network_off+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	699b      	ldr	r3, [r3, #24]
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030240 	.word	0x00030240

000d565c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <network_listen+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	69db      	ldr	r3, [r3, #28]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030240 	.word	0x00030240

000d566c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <network_listening+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	6a1b      	ldr	r3, [r3, #32]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	00030240 	.word	0x00030240

000d567c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <network_set_listen_timeout+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030240 	.word	0x00030240

000d568c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <network_get_listen_timeout+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030240 	.word	0x00030240

000d569c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <network_is_on+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	00030240 	.word	0x00030240

000d56ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <network_is_off+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030240 	.word	0x00030240

000d56bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <spark_process+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	689b      	ldr	r3, [r3, #8]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030244 	.word	0x00030244

000d56cc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <spark_cloud_flag_connected+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	695b      	ldr	r3, [r3, #20]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030244 	.word	0x00030244

000d56dc <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <spark_sync_time_pending+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030244 	.word	0x00030244

000d56ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030244 	.word	0x00030244

000d56fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <malloc+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	681b      	ldr	r3, [r3, #0]
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	0003021c 	.word	0x0003021c

000d570c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <free+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	685b      	ldr	r3, [r3, #4]
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	0003021c 	.word	0x0003021c

000d571c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <realloc+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	689b      	ldr	r3, [r3, #8]
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	0003021c 	.word	0x0003021c

000d572c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <vsnprintf+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	0003021c 	.word	0x0003021c

000d573c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <__errno+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	0003021c 	.word	0x0003021c

000d574c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <newlib_impure_ptr_callback+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	0003021c 	.word	0x0003021c

000d575c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d575c:	2200      	movs	r2, #0
   d575e:	6840      	ldr	r0, [r0, #4]
   d5760:	4611      	mov	r1, r2
   d5762:	f7ff bf83 	b.w	d566c <network_listening>

000d5766 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5766:	2200      	movs	r2, #0
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	4611      	mov	r1, r2
   d576c:	f7ff bf8e 	b.w	d568c <network_get_listen_timeout>

000d5770 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5770:	6840      	ldr	r0, [r0, #4]
   d5772:	2200      	movs	r2, #0
   d5774:	f7ff bf82 	b.w	d567c <network_set_listen_timeout>

000d5778 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5778:	6840      	ldr	r0, [r0, #4]
   d577a:	2200      	movs	r2, #0
   d577c:	f081 0101 	eor.w	r1, r1, #1
   d5780:	f7ff bf6c 	b.w	d565c <network_listen>

000d5784 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5784:	2300      	movs	r3, #0
   d5786:	6840      	ldr	r0, [r0, #4]
   d5788:	461a      	mov	r2, r3
   d578a:	4619      	mov	r1, r3
   d578c:	f7ff bf5e 	b.w	d564c <network_off>

000d5790 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5790:	2300      	movs	r3, #0
   d5792:	6840      	ldr	r0, [r0, #4]
   d5794:	461a      	mov	r2, r3
   d5796:	4619      	mov	r1, r3
   d5798:	f7ff bf50 	b.w	d563c <network_on>

000d579c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d579c:	2200      	movs	r2, #0
   d579e:	6840      	ldr	r0, [r0, #4]
   d57a0:	4611      	mov	r1, r2
   d57a2:	f7ff bf43 	b.w	d562c <network_ready>

000d57a6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d57a6:	2200      	movs	r2, #0
   d57a8:	6840      	ldr	r0, [r0, #4]
   d57aa:	4611      	mov	r1, r2
   d57ac:	f7ff bf2e 	b.w	d560c <network_connecting>

000d57b0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57b0:	6840      	ldr	r0, [r0, #4]
   d57b2:	2200      	movs	r2, #0
   d57b4:	2102      	movs	r1, #2
   d57b6:	f7ff bf31 	b.w	d561c <network_disconnect>

000d57ba <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d57ba:	2300      	movs	r3, #0
   d57bc:	6840      	ldr	r0, [r0, #4]
   d57be:	461a      	mov	r2, r3
   d57c0:	f7ff bf1c 	b.w	d55fc <network_connect>

000d57c4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d57c4:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d57c6:	2203      	movs	r2, #3
   d57c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d57ca:	4a02      	ldr	r2, [pc, #8]	; (d57d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d57cc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d57ce:	4770      	bx	lr
   d57d0:	2003e5a8 	.word	0x2003e5a8
   d57d4:	000d8d44 	.word	0x000d8d44

000d57d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d57d8:	b510      	push	{r4, lr}
   d57da:	4604      	mov	r4, r0
   d57dc:	4608      	mov	r0, r1
{
    _spi = spi;
   d57de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d57e0:	f7ff fe38 	bl	d5454 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d57e4:	2300      	movs	r3, #0
   d57e6:	6063      	str	r3, [r4, #4]
}
   d57e8:	4620      	mov	r0, r4
   d57ea:	bd10      	pop	{r4, pc}

000d57ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d57ec:	4b05      	ldr	r3, [pc, #20]	; (d5804 <_GLOBAL__sub_I_System+0x18>)
   d57ee:	2202      	movs	r2, #2
   d57f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d57f2:	4b05      	ldr	r3, [pc, #20]	; (d5808 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d57f4:	4a05      	ldr	r2, [pc, #20]	; (d580c <_GLOBAL__sub_I_System+0x20>)
   d57f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d57f8:	2000      	movs	r0, #0
   d57fa:	6018      	str	r0, [r3, #0]
   d57fc:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d57fe:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5800:	f7ff bec8 	b.w	d5594 <set_system_mode>
   d5804:	2003e5bc 	.word	0x2003e5bc
   d5808:	2003e5b0 	.word	0x2003e5b0
   d580c:	ffff0000 	.word	0xffff0000

000d5810 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5810:	b510      	push	{r4, lr}
   d5812:	4604      	mov	r4, r0
{
	free(buffer);
   d5814:	6800      	ldr	r0, [r0, #0]
   d5816:	f7ff ff79 	bl	d570c <free>
}
   d581a:	4620      	mov	r0, r4
   d581c:	bd10      	pop	{r4, pc}

000d581e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d581e:	b510      	push	{r4, lr}
   d5820:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5822:	6800      	ldr	r0, [r0, #0]
   d5824:	b108      	cbz	r0, d582a <_ZN6String10invalidateEv+0xc>
   d5826:	f7ff ff71 	bl	d570c <free>
	buffer = NULL;
   d582a:	2300      	movs	r3, #0
	capacity = len = 0;
   d582c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5830:	6023      	str	r3, [r4, #0]
}
   d5832:	bd10      	pop	{r4, pc}

000d5834 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5834:	b538      	push	{r3, r4, r5, lr}
   d5836:	4604      	mov	r4, r0
   d5838:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d583a:	6800      	ldr	r0, [r0, #0]
   d583c:	3101      	adds	r1, #1
   d583e:	f7ff ff6d 	bl	d571c <realloc>
	if (newbuffer) {
   d5842:	b110      	cbz	r0, d584a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5844:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5848:	2001      	movs	r0, #1
	}
	return 0;
}
   d584a:	bd38      	pop	{r3, r4, r5, pc}

000d584c <_ZN6String7reserveEj>:
{
   d584c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d584e:	6803      	ldr	r3, [r0, #0]
{
   d5850:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5852:	b123      	cbz	r3, d585e <_ZN6String7reserveEj+0x12>
   d5854:	6843      	ldr	r3, [r0, #4]
   d5856:	428b      	cmp	r3, r1
   d5858:	d301      	bcc.n	d585e <_ZN6String7reserveEj+0x12>
   d585a:	2001      	movs	r0, #1
}
   d585c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d585e:	4620      	mov	r0, r4
   d5860:	f7ff ffe8 	bl	d5834 <_ZN6String12changeBufferEj>
   d5864:	2800      	cmp	r0, #0
   d5866:	d0f9      	beq.n	d585c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5868:	68a3      	ldr	r3, [r4, #8]
   d586a:	2b00      	cmp	r3, #0
   d586c:	d1f5      	bne.n	d585a <_ZN6String7reserveEj+0xe>
   d586e:	6822      	ldr	r2, [r4, #0]
   d5870:	7013      	strb	r3, [r2, #0]
   d5872:	e7f2      	b.n	d585a <_ZN6String7reserveEj+0xe>

000d5874 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5874:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5876:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5878:	4611      	mov	r1, r2
   d587a:	9201      	str	r2, [sp, #4]
{
   d587c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d587e:	f7ff ffe5 	bl	d584c <_ZN6String7reserveEj>
   d5882:	9a01      	ldr	r2, [sp, #4]
   d5884:	b928      	cbnz	r0, d5892 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5886:	4620      	mov	r0, r4
   d5888:	f7ff ffc9 	bl	d581e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d588c:	4620      	mov	r0, r4
   d588e:	b003      	add	sp, #12
   d5890:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5892:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5894:	4629      	mov	r1, r5
   d5896:	6820      	ldr	r0, [r4, #0]
   d5898:	f003 f87a 	bl	d8990 <memcpy>
	buffer[len] = 0;
   d589c:	6822      	ldr	r2, [r4, #0]
   d589e:	68a3      	ldr	r3, [r4, #8]
   d58a0:	2100      	movs	r1, #0
   d58a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d58a4:	e7f2      	b.n	d588c <_ZN6String4copyEPKcj+0x18>

000d58a6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d58a6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d58a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d58aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d58ae:	4604      	mov	r4, r0
	len = 0;
   d58b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d58b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d58b4:	b141      	cbz	r1, d58c8 <_ZN6StringC1EPKc+0x22>
   d58b6:	4608      	mov	r0, r1
   d58b8:	9101      	str	r1, [sp, #4]
   d58ba:	f003 f8cf 	bl	d8a5c <strlen>
   d58be:	9901      	ldr	r1, [sp, #4]
   d58c0:	4602      	mov	r2, r0
   d58c2:	4620      	mov	r0, r4
   d58c4:	f7ff ffd6 	bl	d5874 <_ZN6String4copyEPKcj>
}
   d58c8:	4620      	mov	r0, r4
   d58ca:	b002      	add	sp, #8
   d58cc:	bd10      	pop	{r4, pc}

000d58ce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d58ce:	b538      	push	{r3, r4, r5, lr}
   d58d0:	4605      	mov	r5, r0
	if (buffer) {
   d58d2:	6800      	ldr	r0, [r0, #0]
{
   d58d4:	460c      	mov	r4, r1
	if (buffer) {
   d58d6:	b168      	cbz	r0, d58f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d58d8:	686a      	ldr	r2, [r5, #4]
   d58da:	688b      	ldr	r3, [r1, #8]
   d58dc:	429a      	cmp	r2, r3
   d58de:	d307      	bcc.n	d58f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d58e0:	6809      	ldr	r1, [r1, #0]
   d58e2:	f003 f8b3 	bl	d8a4c <strcpy>
			len = rhs.len;
   d58e6:	68a3      	ldr	r3, [r4, #8]
   d58e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d58ea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d58ec:	60a3      	str	r3, [r4, #8]
}
   d58ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d58f0:	f7ff ff0c 	bl	d570c <free>
	buffer = rhs.buffer;
   d58f4:	6823      	ldr	r3, [r4, #0]
   d58f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d58f8:	6863      	ldr	r3, [r4, #4]
   d58fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d58fc:	68a3      	ldr	r3, [r4, #8]
   d58fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5900:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5902:	e9c4 3300 	strd	r3, r3, [r4]
   d5906:	e7f1      	b.n	d58ec <_ZN6String4moveERS_+0x1e>

000d5908 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5908:	4288      	cmp	r0, r1
{
   d590a:	b510      	push	{r4, lr}
   d590c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d590e:	d005      	beq.n	d591c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5910:	680b      	ldr	r3, [r1, #0]
   d5912:	b12b      	cbz	r3, d5920 <_ZN6StringaSERKS_+0x18>
   d5914:	688a      	ldr	r2, [r1, #8]
   d5916:	4619      	mov	r1, r3
   d5918:	f7ff ffac 	bl	d5874 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d591c:	4620      	mov	r0, r4
   d591e:	bd10      	pop	{r4, pc}
	else invalidate();
   d5920:	f7ff ff7d 	bl	d581e <_ZN6String10invalidateEv>
   d5924:	e7fa      	b.n	d591c <_ZN6StringaSERKS_+0x14>

000d5926 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5926:	b510      	push	{r4, lr}
	buffer = NULL;
   d5928:	2300      	movs	r3, #0
String::String(const String &value)
   d592a:	4604      	mov	r4, r0
	capacity = 0;
   d592c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5930:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5932:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5934:	f7ff ffe8 	bl	d5908 <_ZN6StringaSERKS_>
}
   d5938:	4620      	mov	r0, r4
   d593a:	bd10      	pop	{r4, pc}

000d593c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d593c:	4288      	cmp	r0, r1
{
   d593e:	b510      	push	{r4, lr}
   d5940:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5942:	d001      	beq.n	d5948 <_ZN6StringaSEOS_+0xc>
   d5944:	f7ff ffc3 	bl	d58ce <_ZN6String4moveERS_>
	return *this;
}
   d5948:	4620      	mov	r0, r4
   d594a:	bd10      	pop	{r4, pc}

000d594c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d594c:	b513      	push	{r0, r1, r4, lr}
   d594e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5950:	b159      	cbz	r1, d596a <_ZN6StringaSEPKc+0x1e>
   d5952:	4608      	mov	r0, r1
   d5954:	9101      	str	r1, [sp, #4]
   d5956:	f003 f881 	bl	d8a5c <strlen>
   d595a:	9901      	ldr	r1, [sp, #4]
   d595c:	4602      	mov	r2, r0
   d595e:	4620      	mov	r0, r4
   d5960:	f7ff ff88 	bl	d5874 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5964:	4620      	mov	r0, r4
   d5966:	b002      	add	sp, #8
   d5968:	bd10      	pop	{r4, pc}
	else invalidate();
   d596a:	f7ff ff58 	bl	d581e <_ZN6String10invalidateEv>
   d596e:	e7f9      	b.n	d5964 <_ZN6StringaSEPKc+0x18>

000d5970 <_ZN6StringC1Ec>:
String::String(char c)
   d5970:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d5972:	2300      	movs	r3, #0
	buf[0] = c;
   d5974:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d5978:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d597c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d597e:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d5980:	a901      	add	r1, sp, #4
String::String(char c)
   d5982:	4604      	mov	r4, r0
	buf[1] = 0;
   d5984:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5988:	f7ff ffe0 	bl	d594c <_ZN6StringaSEPKc>
}
   d598c:	4620      	mov	r0, r4
   d598e:	b002      	add	sp, #8
   d5990:	bd10      	pop	{r4, pc}

000d5992 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5992:	b570      	push	{r4, r5, r6, lr}
   d5994:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5996:	460e      	mov	r6, r1
   d5998:	b909      	cbnz	r1, d599e <_ZN6String6concatEPKcj+0xc>
   d599a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d599c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d599e:	b16a      	cbz	r2, d59bc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d59a0:	6884      	ldr	r4, [r0, #8]
   d59a2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d59a4:	4621      	mov	r1, r4
   d59a6:	f7ff ff51 	bl	d584c <_ZN6String7reserveEj>
   d59aa:	2800      	cmp	r0, #0
   d59ac:	d0f5      	beq.n	d599a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d59ae:	6828      	ldr	r0, [r5, #0]
   d59b0:	68ab      	ldr	r3, [r5, #8]
   d59b2:	4631      	mov	r1, r6
   d59b4:	4418      	add	r0, r3
   d59b6:	f003 f849 	bl	d8a4c <strcpy>
	len = newlen;
   d59ba:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d59bc:	2001      	movs	r0, #1
   d59be:	e7ed      	b.n	d599c <_ZN6String6concatEPKcj+0xa>

000d59c0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d59c0:	688a      	ldr	r2, [r1, #8]
   d59c2:	6809      	ldr	r1, [r1, #0]
   d59c4:	f7ff bfe5 	b.w	d5992 <_ZN6String6concatEPKcj>

000d59c8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d59c8:	b40e      	push	{r1, r2, r3}
   d59ca:	b570      	push	{r4, r5, r6, lr}
   d59cc:	b087      	sub	sp, #28
   d59ce:	ad0b      	add	r5, sp, #44	; 0x2c
   d59d0:	4604      	mov	r4, r0
   d59d2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59d6:	9201      	str	r2, [sp, #4]
   d59d8:	462b      	mov	r3, r5
   d59da:	2105      	movs	r1, #5
   d59dc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d59de:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59e0:	f7ff fea4 	bl	d572c <vsnprintf>
    va_end(marker);

    String result;
   d59e4:	490b      	ldr	r1, [pc, #44]	; (d5a14 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d59e6:	4606      	mov	r6, r0
    String result;
   d59e8:	4620      	mov	r0, r4
   d59ea:	f7ff ff5c 	bl	d58a6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d59ee:	4631      	mov	r1, r6
   d59f0:	4620      	mov	r0, r4
   d59f2:	f7ff ff2b 	bl	d584c <_ZN6String7reserveEj>
    if (result.buffer) {
   d59f6:	6820      	ldr	r0, [r4, #0]
   d59f8:	b130      	cbz	r0, d5a08 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d59fa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d59fc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d59fe:	462b      	mov	r3, r5
   d5a00:	1c71      	adds	r1, r6, #1
   d5a02:	f7ff fe93 	bl	d572c <vsnprintf>
        va_end(marker);
        result.len = n;
   d5a06:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d5a08:	4620      	mov	r0, r4
   d5a0a:	b007      	add	sp, #28
   d5a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5a10:	b003      	add	sp, #12
   d5a12:	4770      	bx	lr
   d5a14:	000d8eaf 	.word	0x000d8eaf

000d5a18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a18:	4802      	ldr	r0, [pc, #8]	; (d5a24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5a1a:	2300      	movs	r3, #0
   d5a1c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5a1e:	f7ff bc91 	b.w	d5344 <os_mutex_recursive_create>
   d5a22:	bf00      	nop
   d5a24:	2003e5c0 	.word	0x2003e5c0

000d5a28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a2a:	4606      	mov	r6, r0
   d5a2c:	460d      	mov	r5, r1
  size_t n = 0;
   d5a2e:	188f      	adds	r7, r1, r2
   d5a30:	2400      	movs	r4, #0
  while (size--) {
   d5a32:	42bd      	cmp	r5, r7
   d5a34:	d00c      	beq.n	d5a50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a36:	6833      	ldr	r3, [r6, #0]
   d5a38:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a3c:	689b      	ldr	r3, [r3, #8]
   d5a3e:	4630      	mov	r0, r6
   d5a40:	4798      	blx	r3
     if (chunk>=0)
   d5a42:	1e03      	subs	r3, r0, #0
   d5a44:	db01      	blt.n	d5a4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a46:	441c      	add	r4, r3
  while (size--) {
   d5a48:	e7f3      	b.n	d5a32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a4a:	2c00      	cmp	r4, #0
   d5a4c:	bf08      	it	eq
   d5a4e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a50:	4620      	mov	r0, r4
   d5a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a54 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5a54:	b513      	push	{r0, r1, r4, lr}
   d5a56:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5a58:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5a5a:	b159      	cbz	r1, d5a74 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5a5c:	9101      	str	r1, [sp, #4]
   d5a5e:	f002 fffd 	bl	d8a5c <strlen>
   d5a62:	6823      	ldr	r3, [r4, #0]
   d5a64:	9901      	ldr	r1, [sp, #4]
   d5a66:	68db      	ldr	r3, [r3, #12]
   d5a68:	4602      	mov	r2, r0
   d5a6a:	4620      	mov	r0, r4
    }
   d5a6c:	b002      	add	sp, #8
   d5a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5a72:	4718      	bx	r3
    }
   d5a74:	b002      	add	sp, #8
   d5a76:	bd10      	pop	{r4, pc}

000d5a78 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a78:	6803      	ldr	r3, [r0, #0]
   d5a7a:	689b      	ldr	r3, [r3, #8]
   d5a7c:	4718      	bx	r3

000d5a7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5a7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5a80:	210d      	movs	r1, #13
{
   d5a82:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5a84:	f7ff fff8 	bl	d5a78 <_ZN5Print5printEc>
  n += print('\n');
   d5a88:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5a8a:	4604      	mov	r4, r0
  n += print('\n');
   d5a8c:	4628      	mov	r0, r5
   d5a8e:	f7ff fff3 	bl	d5a78 <_ZN5Print5printEc>
  return n;
}
   d5a92:	4420      	add	r0, r4
   d5a94:	bd38      	pop	{r3, r4, r5, pc}

000d5a96 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a96:	b530      	push	{r4, r5, lr}
   d5a98:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a9a:	2300      	movs	r3, #0
   d5a9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5aa0:	2a01      	cmp	r2, #1
   d5aa2:	bf98      	it	ls
   d5aa4:	220a      	movls	r2, #10
   d5aa6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5aa8:	460d      	mov	r5, r1
   d5aaa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5aae:	fb01 5312 	mls	r3, r1, r2, r5
   d5ab2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ab6:	2b09      	cmp	r3, #9
   d5ab8:	bf94      	ite	ls
   d5aba:	3330      	addls	r3, #48	; 0x30
   d5abc:	3337      	addhi	r3, #55	; 0x37
   d5abe:	b2db      	uxtb	r3, r3
  } while(n);
   d5ac0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ac2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ac6:	d9ef      	bls.n	d5aa8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ac8:	4621      	mov	r1, r4
   d5aca:	f7ff ffc3 	bl	d5a54 <_ZN5Print5writeEPKc>
}
   d5ace:	b00b      	add	sp, #44	; 0x2c
   d5ad0:	bd30      	pop	{r4, r5, pc}

000d5ad2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ad6:	b086      	sub	sp, #24
   d5ad8:	af00      	add	r7, sp, #0
   d5ada:	4605      	mov	r5, r0
   d5adc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5ade:	1d38      	adds	r0, r7, #4
   d5ae0:	2114      	movs	r1, #20
{
   d5ae2:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5ae4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5ae6:	f7ff fe21 	bl	d572c <vsnprintf>

    if (n<bufsize)
   d5aea:	2813      	cmp	r0, #19
   d5aec:	d80e      	bhi.n	d5b0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5aee:	1d39      	adds	r1, r7, #4
   d5af0:	4628      	mov	r0, r5
   d5af2:	f7ff ffaf 	bl	d5a54 <_ZN5Print5writeEPKc>
   d5af6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5af8:	b11e      	cbz	r6, d5b02 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5afa:	4628      	mov	r0, r5
   d5afc:	f7ff ffbf 	bl	d5a7e <_ZN5Print7printlnEv>
   d5b00:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5b02:	4620      	mov	r0, r4
   d5b04:	3718      	adds	r7, #24
   d5b06:	46bd      	mov	sp, r7
   d5b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5b0c:	f100 0308 	add.w	r3, r0, #8
   d5b10:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5b14:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5b16:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5b1a:	4622      	mov	r2, r4
   d5b1c:	1c41      	adds	r1, r0, #1
   d5b1e:	683b      	ldr	r3, [r7, #0]
   d5b20:	4668      	mov	r0, sp
   d5b22:	f7ff fe03 	bl	d572c <vsnprintf>
  return write(str);
   d5b26:	4669      	mov	r1, sp
   d5b28:	4628      	mov	r0, r5
   d5b2a:	f7ff ff93 	bl	d5a54 <_ZN5Print5writeEPKc>
   d5b2e:	4604      	mov	r4, r0
   d5b30:	46c5      	mov	sp, r8
   d5b32:	e7e1      	b.n	d5af8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5b34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5b34:	4b01      	ldr	r3, [pc, #4]	; (d5b3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5b36:	4a02      	ldr	r2, [pc, #8]	; (d5b40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5b38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5b3a:	4770      	bx	lr
   d5b3c:	2003e5c4 	.word	0x2003e5c4
   d5b40:	000d8d78 	.word	0x000d8d78

000d5b44 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5b44:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5b46:	2000      	movs	r0, #0
   d5b48:	f7ff fdc8 	bl	d56dc <spark_sync_time_pending>
   d5b4c:	b128      	cbz	r0, d5b5a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b4e:	f7ff fdbd 	bl	d56cc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5b52:	f080 0001 	eor.w	r0, r0, #1
   d5b56:	b2c0      	uxtb	r0, r0
    }
   d5b58:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5b5a:	2001      	movs	r0, #1
   d5b5c:	e7fc      	b.n	d5b58 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d5b5e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5b5e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5b60:	2000      	movs	r0, #0
   d5b62:	f7ff fbdf 	bl	d5324 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5b66:	4604      	mov	r4, r0
   d5b68:	b9a0      	cbnz	r0, d5b94 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5b6a:	f7ff fd0b 	bl	d5584 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5b6e:	2801      	cmp	r0, #1
   d5b70:	d110      	bne.n	d5b94 <_ZN9TimeClass7isValidEv+0x36>
   d5b72:	4620      	mov	r0, r4
   d5b74:	f7ff fd26 	bl	d55c4 <system_thread_get_state>
   d5b78:	b960      	cbnz	r0, d5b94 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5b7a:	f7ff ffe3 	bl	d5b44 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5b7e:	b910      	cbnz	r0, d5b86 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5b80:	f7ff fd9c 	bl	d56bc <spark_process>
        while (_while() && !_condition()) {
   d5b84:	e7f9      	b.n	d5b7a <_ZN9TimeClass7isValidEv+0x1c>
   d5b86:	f7ff ffdd 	bl	d5b44 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5b8e:	2000      	movs	r0, #0
   d5b90:	f7ff bbc8 	b.w	d5324 <hal_rtc_time_is_valid>
}
   d5b94:	4620      	mov	r0, r4
   d5b96:	bd10      	pop	{r4, pc}

000d5b98 <_ZN9TimeClass3nowEv>:
{
   d5b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5b9a:	f7ff ffe0 	bl	d5b5e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5b9e:	2210      	movs	r2, #16
   d5ba0:	2100      	movs	r1, #0
   d5ba2:	4668      	mov	r0, sp
   d5ba4:	f002 ff1c 	bl	d89e0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5ba8:	2100      	movs	r1, #0
   d5baa:	4668      	mov	r0, sp
   d5bac:	f7ff fbc2 	bl	d5334 <hal_rtc_get_time>
}
   d5bb0:	9800      	ldr	r0, [sp, #0]
   d5bb2:	b005      	add	sp, #20
   d5bb4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5bb8:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5bba:	681a      	ldr	r2, [r3, #0]
   d5bbc:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5bbe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5bc0:	4770      	bx	lr
   d5bc2:	bf00      	nop
   d5bc4:	2003e498 	.word	0x2003e498
   d5bc8:	2003e5c8 	.word	0x2003e5c8

000d5bcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5bcc:	2100      	movs	r1, #0
   d5bce:	f7ff bce9 	b.w	d55a4 <system_delay_ms>

000d5bd2 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5bd2:	b510      	push	{r4, lr}
   d5bd4:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d5bd6:	f7ff fca5 	bl	d5524 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d5bda:	4284      	cmp	r4, r0
   d5bdc:	d008      	beq.n	d5bf0 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5bde:	b11c      	cbz	r4, d5be8 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d5be4:	f7ff bc86 	b.w	d54f4 <LED_Signaling_Start>
}
   d5be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d5bec:	f7ff bc8a 	b.w	d5504 <LED_Signaling_Stop>
}
   d5bf0:	bd10      	pop	{r4, pc}

000d5bf2 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5bf2:	b570      	push	{r4, r5, r6, lr}
   d5bf4:	4605      	mov	r5, r0
   d5bf6:	460e      	mov	r6, r1
   d5bf8:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d5bfa:	f7ff fc93 	bl	d5524 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d5bfe:	b150      	cbz	r0, d5c16 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5c00:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5c04:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5c08:	f7ff fc6c 	bl	d54e4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d5c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d5c10:	20e7      	movs	r0, #231	; 0xe7
   d5c12:	f7ff bc8f 	b.w	d5534 <LED_On>
}
   d5c16:	bd70      	pop	{r4, r5, r6, pc}

000d5c18 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d5c18:	b510      	push	{r4, lr}
   d5c1a:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d5c1c:	f7ff fc7a 	bl	d5514 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d5c20:	f7ff fc80 	bl	d5524 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d5c24:	b128      	cbz	r0, d5c32 <_ZN8RGBClass10brightnessEhb+0x1a>
   d5c26:	b124      	cbz	r4, d5c32 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d5c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d5c2c:	20e7      	movs	r0, #231	; 0xe7
   d5c2e:	f7ff bc81 	b.w	d5534 <LED_On>
}
   d5c32:	bd10      	pop	{r4, pc}

000d5c34 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5c34:	f7ff bc86 	b.w	d5544 <Get_LED_Brightness>

000d5c38 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c38:	4b01      	ldr	r3, [pc, #4]	; (d5c40 <_GLOBAL__sub_I_RGB+0x8>)
   d5c3a:	2200      	movs	r2, #0
   d5c3c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5c3e:	4770      	bx	lr
   d5c40:	2003e5cc 	.word	0x2003e5cc

000d5c44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5c44:	4b01      	ldr	r3, [pc, #4]	; (d5c4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5c46:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5c48:	4770      	bx	lr
   d5c4a:	bf00      	nop
   d5c4c:	2003e4a0 	.word	0x2003e4a0

000d5c50 <serialEventRun>:
{
   d5c50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c52:	4b0b      	ldr	r3, [pc, #44]	; (d5c80 <serialEventRun+0x30>)
   d5c54:	b143      	cbz	r3, d5c68 <serialEventRun+0x18>
   d5c56:	f000 f961 	bl	d5f1c <_Z16_fetch_usbserialv>
   d5c5a:	6803      	ldr	r3, [r0, #0]
   d5c5c:	691b      	ldr	r3, [r3, #16]
   d5c5e:	4798      	blx	r3
   d5c60:	2800      	cmp	r0, #0
   d5c62:	dd01      	ble.n	d5c68 <serialEventRun+0x18>
        serialEvent();
   d5c64:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5c68:	4b06      	ldr	r3, [pc, #24]	; (d5c84 <serialEventRun+0x34>)
   d5c6a:	b143      	cbz	r3, d5c7e <serialEventRun+0x2e>
   d5c6c:	f000 f9d4 	bl	d6018 <_Z22__fetch_global_Serial1v>
   d5c70:	6803      	ldr	r3, [r0, #0]
   d5c72:	691b      	ldr	r3, [r3, #16]
   d5c74:	4798      	blx	r3
   d5c76:	2800      	cmp	r0, #0
   d5c78:	dd01      	ble.n	d5c7e <serialEventRun+0x2e>
        serialEvent1();
   d5c7a:	f3af 8000 	nop.w
}
   d5c7e:	bd08      	pop	{r3, pc}
	...

000d5c88 <_post_loop>:
{
   d5c88:	b508      	push	{r3, lr}
	serialEventRun();
   d5c8a:	f7ff ffe1 	bl	d5c50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c8e:	f7ff fb41 	bl	d5314 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c92:	4b01      	ldr	r3, [pc, #4]	; (d5c98 <_post_loop+0x10>)
   d5c94:	6018      	str	r0, [r3, #0]
}
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	2003e738 	.word	0x2003e738

000d5c9c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5c9c:	4805      	ldr	r0, [pc, #20]	; (d5cb4 <_Z33system_initialize_user_backup_ramv+0x18>)
   d5c9e:	4a06      	ldr	r2, [pc, #24]	; (d5cb8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5ca0:	4906      	ldr	r1, [pc, #24]	; (d5cbc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5ca2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5ca4:	1a12      	subs	r2, r2, r0
   d5ca6:	f002 fe73 	bl	d8990 <memcpy>
    __backup_sram_signature = signature;
   d5caa:	4b05      	ldr	r3, [pc, #20]	; (d5cc0 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5cac:	4a05      	ldr	r2, [pc, #20]	; (d5cc4 <_Z33system_initialize_user_backup_ramv+0x28>)
   d5cae:	601a      	str	r2, [r3, #0]
}
   d5cb0:	bd08      	pop	{r3, pc}
   d5cb2:	bf00      	nop
   d5cb4:	2003f400 	.word	0x2003f400
   d5cb8:	2003f404 	.word	0x2003f404
   d5cbc:	000d9030 	.word	0x000d9030
   d5cc0:	2003f400 	.word	0x2003f400
   d5cc4:	9a271c1e 	.word	0x9a271c1e

000d5cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5cc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	9300      	str	r3, [sp, #0]
   d5cce:	461a      	mov	r2, r3
   d5cd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cd4:	f7ff fc88 	bl	d55e8 <system_ctrl_set_result>
}
   d5cd8:	b003      	add	sp, #12
   d5cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ce0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5ce0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5ce2:	8843      	ldrh	r3, [r0, #2]
   d5ce4:	2b0a      	cmp	r3, #10
   d5ce6:	d008      	beq.n	d5cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ce8:	2b50      	cmp	r3, #80	; 0x50
   d5cea:	d10b      	bne.n	d5d04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5cec:	4b09      	ldr	r3, [pc, #36]	; (d5d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5cee:	681b      	ldr	r3, [r3, #0]
   d5cf0:	b14b      	cbz	r3, d5d06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5cf2:	b003      	add	sp, #12
   d5cf4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5cf8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5cfa:	f7ff ffe5 	bl	d5cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5cfe:	b003      	add	sp, #12
   d5d00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d04:	2300      	movs	r3, #0
   d5d06:	9300      	str	r3, [sp, #0]
   d5d08:	461a      	mov	r2, r3
   d5d0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d0e:	f7ff fc6b 	bl	d55e8 <system_ctrl_set_result>
}
   d5d12:	e7f4      	b.n	d5cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5d14:	2003e5e0 	.word	0x2003e5e0

000d5d18 <module_user_init_hook>:
{
   d5d18:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5d1a:	4812      	ldr	r0, [pc, #72]	; (d5d64 <module_user_init_hook+0x4c>)
   d5d1c:	2100      	movs	r1, #0
   d5d1e:	f7ff fd15 	bl	d574c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5d22:	4b11      	ldr	r3, [pc, #68]	; (d5d68 <module_user_init_hook+0x50>)
   d5d24:	681a      	ldr	r2, [r3, #0]
   d5d26:	4b11      	ldr	r3, [pc, #68]	; (d5d6c <module_user_init_hook+0x54>)
   d5d28:	429a      	cmp	r2, r3
   d5d2a:	4b11      	ldr	r3, [pc, #68]	; (d5d70 <module_user_init_hook+0x58>)
   d5d2c:	bf0c      	ite	eq
   d5d2e:	2201      	moveq	r2, #1
   d5d30:	2200      	movne	r2, #0
   d5d32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5d34:	d001      	beq.n	d5d3a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5d36:	f7ff ffb1 	bl	d5c9c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5d3a:	f7ff fadb 	bl	d52f4 <HAL_RNG_GetRandomNumber>
   d5d3e:	4604      	mov	r4, r0
    srand(seed);
   d5d40:	f002 fe56 	bl	d89f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5d44:	4b0b      	ldr	r3, [pc, #44]	; (d5d74 <module_user_init_hook+0x5c>)
   d5d46:	b113      	cbz	r3, d5d4e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5d48:	4620      	mov	r0, r4
   d5d4a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d4e:	2100      	movs	r1, #0
   d5d50:	4808      	ldr	r0, [pc, #32]	; (d5d74 <module_user_init_hook+0x5c>)
   d5d52:	f7ff fccb 	bl	d56ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d5a:	4807      	ldr	r0, [pc, #28]	; (d5d78 <module_user_init_hook+0x60>)
   d5d5c:	2100      	movs	r1, #0
   d5d5e:	f7ff bc39 	b.w	d55d4 <system_ctrl_set_app_request_handler>
   d5d62:	bf00      	nop
   d5d64:	000d5c45 	.word	0x000d5c45
   d5d68:	2003f400 	.word	0x2003f400
   d5d6c:	9a271c1e 	.word	0x9a271c1e
   d5d70:	2003e5dc 	.word	0x2003e5dc
   d5d74:	00000000 	.word	0x00000000
   d5d78:	000d5ce1 	.word	0x000d5ce1

000d5d7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d7c:	4770      	bx	lr

000d5d7e <_ZN9IPAddressD0Ev>:
   d5d7e:	b510      	push	{r4, lr}
   d5d80:	2118      	movs	r1, #24
   d5d82:	4604      	mov	r4, r0
   d5d84:	f000 fdf4 	bl	d6970 <_ZdlPvj>
   d5d88:	4620      	mov	r0, r4
   d5d8a:	bd10      	pop	{r4, pc}

000d5d8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d8e:	7d03      	ldrb	r3, [r0, #20]
   d5d90:	2b06      	cmp	r3, #6
{
   d5d92:	b08d      	sub	sp, #52	; 0x34
   d5d94:	460e      	mov	r6, r1
   d5d96:	f100 0704 	add.w	r7, r0, #4
   d5d9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5d9e:	d012      	beq.n	d5dc6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5da0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5da8:	220a      	movs	r2, #10
   d5daa:	4630      	mov	r0, r6
   d5dac:	f7ff fe73 	bl	d5a96 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5db0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5db2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5db4:	d019      	beq.n	d5dea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5db6:	2c00      	cmp	r4, #0
   d5db8:	d0f4      	beq.n	d5da4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5dba:	212e      	movs	r1, #46	; 0x2e
   d5dbc:	4630      	mov	r0, r6
   d5dbe:	f7ff fe5b 	bl	d5a78 <_ZN5Print5printEc>
   d5dc2:	4404      	add	r4, r0
   d5dc4:	e7ee      	b.n	d5da4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dc6:	232f      	movs	r3, #47	; 0x2f
   d5dc8:	466a      	mov	r2, sp
   d5dca:	4639      	mov	r1, r7
   d5dcc:	200a      	movs	r0, #10
		buf[0] = 0;
   d5dce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dd2:	f7ff fabf 	bl	d5354 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5dd6:	4668      	mov	r0, sp
   d5dd8:	f002 fe40 	bl	d8a5c <strlen>
   d5ddc:	6833      	ldr	r3, [r6, #0]
   d5dde:	4602      	mov	r2, r0
   d5de0:	68db      	ldr	r3, [r3, #12]
   d5de2:	4669      	mov	r1, sp
   d5de4:	4630      	mov	r0, r6
   d5de6:	4798      	blx	r3
   d5de8:	4604      	mov	r4, r0
    }
    return n;
}
   d5dea:	4620      	mov	r0, r4
   d5dec:	b00d      	add	sp, #52	; 0x34
   d5dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5df0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5df0:	b510      	push	{r4, lr}
   d5df2:	4b05      	ldr	r3, [pc, #20]	; (d5e08 <_ZN9IPAddressC1Ev+0x18>)
   d5df4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5df6:	2211      	movs	r2, #17
   d5df8:	f840 3b04 	str.w	r3, [r0], #4
   d5dfc:	2100      	movs	r1, #0
   d5dfe:	f002 fdef 	bl	d89e0 <memset>
}
   d5e02:	4620      	mov	r0, r4
   d5e04:	bd10      	pop	{r4, pc}
   d5e06:	bf00      	nop
   d5e08:	000d8da0 	.word	0x000d8da0

000d5e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e0c:	4603      	mov	r3, r0
   d5e0e:	4a07      	ldr	r2, [pc, #28]	; (d5e2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e10:	b510      	push	{r4, lr}
   d5e12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5e16:	f101 0210 	add.w	r2, r1, #16
   d5e1a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e1e:	f843 4b04 	str.w	r4, [r3], #4
   d5e22:	4291      	cmp	r1, r2
   d5e24:	d1f9      	bne.n	d5e1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e26:	780a      	ldrb	r2, [r1, #0]
   d5e28:	701a      	strb	r2, [r3, #0]
}
   d5e2a:	bd10      	pop	{r4, pc}
   d5e2c:	000d8da0 	.word	0x000d8da0

000d5e30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5e30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5e42:	2304      	movs	r3, #4
   d5e44:	6041      	str	r1, [r0, #4]
   d5e46:	7503      	strb	r3, [r0, #20]
}
   d5e48:	bd10      	pop	{r4, pc}

000d5e4a <_ZN9IPAddressaSEPKh>:
{
   d5e4a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e4c:	78cb      	ldrb	r3, [r1, #3]
   d5e4e:	9300      	str	r3, [sp, #0]
   d5e50:	788b      	ldrb	r3, [r1, #2]
   d5e52:	784a      	ldrb	r2, [r1, #1]
   d5e54:	7809      	ldrb	r1, [r1, #0]
   d5e56:	f7ff ffeb 	bl	d5e30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e5a:	b002      	add	sp, #8
   d5e5c:	bd10      	pop	{r4, pc}

000d5e5e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e5e:	7441      	strb	r1, [r0, #17]
}
   d5e60:	4770      	bx	lr

000d5e62 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e62:	4770      	bx	lr

000d5e64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5e64:	4770      	bx	lr

000d5e66 <_ZN9USBSerial4readEv>:
{
   d5e66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5e68:	2100      	movs	r1, #0
   d5e6a:	7c00      	ldrb	r0, [r0, #16]
   d5e6c:	f7ff fb22 	bl	d54b4 <HAL_USB_USART_Receive_Data>
}
   d5e70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e74:	bd08      	pop	{r3, pc}

000d5e76 <_ZN9USBSerial4peekEv>:
{
   d5e76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5e78:	2101      	movs	r1, #1
   d5e7a:	7c00      	ldrb	r0, [r0, #16]
   d5e7c:	f7ff fb1a 	bl	d54b4 <HAL_USB_USART_Receive_Data>
}
   d5e80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e84:	bd08      	pop	{r3, pc}

000d5e86 <_ZN9USBSerial17availableForWriteEv>:
{
   d5e86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e88:	7c00      	ldrb	r0, [r0, #16]
   d5e8a:	f7ff fb0b 	bl	d54a4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5e8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e92:	bd08      	pop	{r3, pc}

000d5e94 <_ZN9USBSerial9availableEv>:
{
   d5e94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e96:	7c00      	ldrb	r0, [r0, #16]
   d5e98:	f7ff fafc 	bl	d5494 <HAL_USB_USART_Available_Data>
}
   d5e9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ea0:	bd08      	pop	{r3, pc}

000d5ea2 <_ZN9USBSerial5writeEh>:
{
   d5ea2:	b513      	push	{r0, r1, r4, lr}
   d5ea4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ea6:	7c00      	ldrb	r0, [r0, #16]
{
   d5ea8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eaa:	f7ff fafb 	bl	d54a4 <HAL_USB_USART_Available_Data_For_Write>
   d5eae:	2800      	cmp	r0, #0
   d5eb0:	9901      	ldr	r1, [sp, #4]
   d5eb2:	dc01      	bgt.n	d5eb8 <_ZN9USBSerial5writeEh+0x16>
   d5eb4:	7c60      	ldrb	r0, [r4, #17]
   d5eb6:	b120      	cbz	r0, d5ec2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5eb8:	7c20      	ldrb	r0, [r4, #16]
   d5eba:	f7ff fb03 	bl	d54c4 <HAL_USB_USART_Send_Data>
   d5ebe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5ec2:	b002      	add	sp, #8
   d5ec4:	bd10      	pop	{r4, pc}

000d5ec6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5ec6:	7c00      	ldrb	r0, [r0, #16]
   d5ec8:	f7ff bb04 	b.w	d54d4 <HAL_USB_USART_Flush_Data>

000d5ecc <_ZN9USBSerialD0Ev>:
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	2114      	movs	r1, #20
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	f000 fd4d 	bl	d6970 <_ZdlPvj>
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	bd10      	pop	{r4, pc}
	...

000d5edc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5edc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ee2:	4604      	mov	r4, r0
   d5ee4:	4608      	mov	r0, r1
   d5ee6:	2100      	movs	r1, #0
   d5ee8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5eec:	4b04      	ldr	r3, [pc, #16]	; (d5f00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5eee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5ef0:	2301      	movs	r3, #1
  _serial = serial;
   d5ef2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ef4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5ef6:	4611      	mov	r1, r2
   d5ef8:	f7ff fabc 	bl	d5474 <HAL_USB_USART_Init>
}
   d5efc:	4620      	mov	r0, r4
   d5efe:	bd10      	pop	{r4, pc}
   d5f00:	000d8db4 	.word	0x000d8db4

000d5f04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f04:	7c00      	ldrb	r0, [r0, #16]
   d5f06:	2200      	movs	r2, #0
   d5f08:	f7ff babc 	b.w	d5484 <HAL_USB_USART_Begin>

000d5f0c <_Z19acquireSerialBufferv>:
{
   d5f0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f0e:	2214      	movs	r2, #20
{
   d5f10:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f12:	2100      	movs	r1, #0
   d5f14:	f002 fd64 	bl	d89e0 <memset>
}
   d5f18:	4620      	mov	r0, r4
   d5f1a:	bd10      	pop	{r4, pc}

000d5f1c <_Z16_fetch_usbserialv>:
{
   d5f1c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f1e:	4c0f      	ldr	r4, [pc, #60]	; (d5f5c <_Z16_fetch_usbserialv+0x40>)
{
   d5f20:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f22:	a803      	add	r0, sp, #12
   d5f24:	f7ff fff2 	bl	d5f0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f28:	7821      	ldrb	r1, [r4, #0]
   d5f2a:	f3bf 8f5b 	dmb	ish
   d5f2e:	f011 0101 	ands.w	r1, r1, #1
   d5f32:	d10f      	bne.n	d5f54 <_Z16_fetch_usbserialv+0x38>
   d5f34:	4620      	mov	r0, r4
   d5f36:	9101      	str	r1, [sp, #4]
   d5f38:	f7fe f8b5 	bl	d40a6 <__cxa_guard_acquire>
   d5f3c:	9901      	ldr	r1, [sp, #4]
   d5f3e:	b148      	cbz	r0, d5f54 <_Z16_fetch_usbserialv+0x38>
   d5f40:	aa03      	add	r2, sp, #12
   d5f42:	4807      	ldr	r0, [pc, #28]	; (d5f60 <_Z16_fetch_usbserialv+0x44>)
   d5f44:	f7ff ffca 	bl	d5edc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f48:	4620      	mov	r0, r4
   d5f4a:	f7fe f8b1 	bl	d40b0 <__cxa_guard_release>
   d5f4e:	4805      	ldr	r0, [pc, #20]	; (d5f64 <_Z16_fetch_usbserialv+0x48>)
   d5f50:	f002 fd18 	bl	d8984 <atexit>
	return _usbserial;
}
   d5f54:	4802      	ldr	r0, [pc, #8]	; (d5f60 <_Z16_fetch_usbserialv+0x44>)
   d5f56:	b008      	add	sp, #32
   d5f58:	bd10      	pop	{r4, pc}
   d5f5a:	bf00      	nop
   d5f5c:	2003e5e4 	.word	0x2003e5e4
   d5f60:	2003e5e8 	.word	0x2003e5e8
   d5f64:	000d5e63 	.word	0x000d5e63

000d5f68 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5f68:	f7ff b9b4 	b.w	d52d4 <HAL_Interrupts_Disable_All>

000d5f6c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5f6c:	f7ff b9aa 	b.w	d52c4 <HAL_Interrupts_Enable_All>

000d5f70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5f70:	4770      	bx	lr

000d5f72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f72:	7441      	strb	r1, [r0, #17]
}
   d5f74:	4770      	bx	lr

000d5f76 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5f76:	4770      	bx	lr

000d5f78 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5f78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5f7a:	7c00      	ldrb	r0, [r0, #16]
   d5f7c:	f7ff fa2a 	bl	d53d4 <hal_usart_available_data_for_write>
}
   d5f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f84:	bd08      	pop	{r3, pc}

000d5f86 <_ZN11USARTSerial9availableEv>:
{
   d5f86:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5f88:	7c00      	ldrb	r0, [r0, #16]
   d5f8a:	f7ff f9fb 	bl	d5384 <hal_usart_available>
}
   d5f8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f92:	bd08      	pop	{r3, pc}

000d5f94 <_ZN11USARTSerial4peekEv>:
{
   d5f94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5f96:	7c00      	ldrb	r0, [r0, #16]
   d5f98:	f7ff fa04 	bl	d53a4 <hal_usart_peek>
}
   d5f9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fa0:	bd08      	pop	{r3, pc}

000d5fa2 <_ZN11USARTSerial4readEv>:
{
   d5fa2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5fa4:	7c00      	ldrb	r0, [r0, #16]
   d5fa6:	f7ff f9f5 	bl	d5394 <hal_usart_read>
}
   d5faa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fae:	bd08      	pop	{r3, pc}

000d5fb0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5fb0:	7c00      	ldrb	r0, [r0, #16]
   d5fb2:	f7ff b9ff 	b.w	d53b4 <hal_usart_flush>

000d5fb6 <_ZN11USARTSerial5writeEh>:
{
   d5fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fb8:	7c45      	ldrb	r5, [r0, #17]
{
   d5fba:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fbc:	b12d      	cbz	r5, d5fca <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5fbe:	7c20      	ldrb	r0, [r4, #16]
}
   d5fc0:	b003      	add	sp, #12
   d5fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5fc6:	f7ff b9d5 	b.w	d5374 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5fca:	7c00      	ldrb	r0, [r0, #16]
   d5fcc:	9101      	str	r1, [sp, #4]
   d5fce:	f7ff fa01 	bl	d53d4 <hal_usart_available_data_for_write>
   d5fd2:	2800      	cmp	r0, #0
   d5fd4:	9901      	ldr	r1, [sp, #4]
   d5fd6:	dcf2      	bgt.n	d5fbe <_ZN11USARTSerial5writeEh+0x8>
}
   d5fd8:	4628      	mov	r0, r5
   d5fda:	b003      	add	sp, #12
   d5fdc:	bd30      	pop	{r4, r5, pc}

000d5fde <_ZN11USARTSerialD0Ev>:
   d5fde:	b510      	push	{r4, lr}
   d5fe0:	2114      	movs	r1, #20
   d5fe2:	4604      	mov	r4, r0
   d5fe4:	f000 fcc4 	bl	d6970 <_ZdlPvj>
   d5fe8:	4620      	mov	r0, r4
   d5fea:	bd10      	pop	{r4, pc}

000d5fec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5fec:	b510      	push	{r4, lr}
   d5fee:	f04f 0c00 	mov.w	ip, #0
   d5ff2:	4604      	mov	r4, r0
   d5ff4:	4608      	mov	r0, r1
   d5ff6:	4611      	mov	r1, r2
   d5ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ffc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6000:	4a04      	ldr	r2, [pc, #16]	; (d6014 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6002:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6004:	2201      	movs	r2, #1
  _serial = serial;
   d6006:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6008:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d600a:	461a      	mov	r2, r3
   d600c:	f7ff f9aa 	bl	d5364 <hal_usart_init>
}
   d6010:	4620      	mov	r0, r4
   d6012:	bd10      	pop	{r4, pc}
   d6014:	000d8de4 	.word	0x000d8de4

000d6018 <_Z22__fetch_global_Serial1v>:
{
   d6018:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d601a:	4c0d      	ldr	r4, [pc, #52]	; (d6050 <_Z22__fetch_global_Serial1v+0x38>)
   d601c:	7821      	ldrb	r1, [r4, #0]
   d601e:	f3bf 8f5b 	dmb	ish
   d6022:	f011 0101 	ands.w	r1, r1, #1
   d6026:	d110      	bne.n	d604a <_Z22__fetch_global_Serial1v+0x32>
   d6028:	4620      	mov	r0, r4
   d602a:	9101      	str	r1, [sp, #4]
   d602c:	f7fe f83b 	bl	d40a6 <__cxa_guard_acquire>
   d6030:	9901      	ldr	r1, [sp, #4]
   d6032:	b150      	cbz	r0, d604a <_Z22__fetch_global_Serial1v+0x32>
   d6034:	4b07      	ldr	r3, [pc, #28]	; (d6054 <_Z22__fetch_global_Serial1v+0x3c>)
   d6036:	4a08      	ldr	r2, [pc, #32]	; (d6058 <_Z22__fetch_global_Serial1v+0x40>)
   d6038:	4808      	ldr	r0, [pc, #32]	; (d605c <_Z22__fetch_global_Serial1v+0x44>)
   d603a:	f7ff ffd7 	bl	d5fec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d603e:	4620      	mov	r0, r4
   d6040:	f7fe f836 	bl	d40b0 <__cxa_guard_release>
   d6044:	4806      	ldr	r0, [pc, #24]	; (d6060 <_Z22__fetch_global_Serial1v+0x48>)
   d6046:	f002 fc9d 	bl	d8984 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d604a:	4804      	ldr	r0, [pc, #16]	; (d605c <_Z22__fetch_global_Serial1v+0x44>)
   d604c:	b002      	add	sp, #8
   d604e:	bd10      	pop	{r4, pc}
   d6050:	2003e5fc 	.word	0x2003e5fc
   d6054:	2003e684 	.word	0x2003e684
   d6058:	2003e600 	.word	0x2003e600
   d605c:	2003e708 	.word	0x2003e708
   d6060:	000d5f77 	.word	0x000d5f77

000d6064 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6064:	4770      	bx	lr

000d6066 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6068:	4606      	mov	r6, r0
   d606a:	4615      	mov	r5, r2
   d606c:	460c      	mov	r4, r1
   d606e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6070:	42bc      	cmp	r4, r7
   d6072:	d006      	beq.n	d6082 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6074:	6833      	ldr	r3, [r6, #0]
   d6076:	f814 1b01 	ldrb.w	r1, [r4], #1
   d607a:	689b      	ldr	r3, [r3, #8]
   d607c:	4630      	mov	r0, r6
   d607e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6080:	e7f6      	b.n	d6070 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6082:	4628      	mov	r0, r5
   d6084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6086 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6086:	7c00      	ldrb	r0, [r0, #16]
   d6088:	2200      	movs	r2, #0
   d608a:	f7ff b9ab 	b.w	d53e4 <hal_i2c_write>

000d608e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d608e:	7c00      	ldrb	r0, [r0, #16]
   d6090:	2100      	movs	r1, #0
   d6092:	f7ff b9af 	b.w	d53f4 <hal_i2c_available>

000d6096 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6096:	7c00      	ldrb	r0, [r0, #16]
   d6098:	2100      	movs	r1, #0
   d609a:	f7ff b9b3 	b.w	d5404 <hal_i2c_read>

000d609e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d609e:	7c00      	ldrb	r0, [r0, #16]
   d60a0:	2100      	movs	r1, #0
   d60a2:	f7ff b9b7 	b.w	d5414 <hal_i2c_peek>

000d60a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d60a6:	7c00      	ldrb	r0, [r0, #16]
   d60a8:	2100      	movs	r1, #0
   d60aa:	f7ff b9bb 	b.w	d5424 <hal_i2c_flush>

000d60ae <_ZN7TwoWireD0Ev>:
   d60ae:	b510      	push	{r4, lr}
   d60b0:	2114      	movs	r1, #20
   d60b2:	4604      	mov	r4, r0
   d60b4:	f000 fc5c 	bl	d6970 <_ZdlPvj>
   d60b8:	4620      	mov	r0, r4
   d60ba:	bd10      	pop	{r4, pc}

000d60bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d60bc:	b510      	push	{r4, lr}
   d60be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60c2:	4604      	mov	r4, r0
   d60c4:	4608      	mov	r0, r1
   d60c6:	2100      	movs	r1, #0
   d60c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d60cc:	4b03      	ldr	r3, [pc, #12]	; (d60dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d60ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d60d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d60d2:	4611      	mov	r1, r2
   d60d4:	f7ff f9b6 	bl	d5444 <hal_i2c_init>
}
   d60d8:	4620      	mov	r0, r4
   d60da:	bd10      	pop	{r4, pc}
   d60dc:	000d8e14 	.word	0x000d8e14

000d60e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d60e0:	2200      	movs	r2, #0
   d60e2:	6840      	ldr	r0, [r0, #4]
   d60e4:	4611      	mov	r1, r2
   d60e6:	f7ff baa1 	b.w	d562c <network_ready>

000d60ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d60ea:	2200      	movs	r2, #0
   d60ec:	6840      	ldr	r0, [r0, #4]
   d60ee:	4611      	mov	r1, r2
   d60f0:	f7ff babc 	b.w	d566c <network_listening>

000d60f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d60f4:	2200      	movs	r2, #0
   d60f6:	6840      	ldr	r0, [r0, #4]
   d60f8:	4611      	mov	r1, r2
   d60fa:	f7ff bac7 	b.w	d568c <network_get_listen_timeout>

000d60fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d60fe:	6840      	ldr	r0, [r0, #4]
   d6100:	2200      	movs	r2, #0
   d6102:	f7ff babb 	b.w	d567c <network_set_listen_timeout>

000d6106 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6106:	6840      	ldr	r0, [r0, #4]
   d6108:	2200      	movs	r2, #0
   d610a:	f081 0101 	eor.w	r1, r1, #1
   d610e:	f7ff baa5 	b.w	d565c <network_listen>

000d6112 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6112:	2300      	movs	r3, #0
   d6114:	6840      	ldr	r0, [r0, #4]
   d6116:	461a      	mov	r2, r3
   d6118:	4619      	mov	r1, r3
   d611a:	f7ff ba97 	b.w	d564c <network_off>

000d611e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d611e:	2300      	movs	r3, #0
   d6120:	6840      	ldr	r0, [r0, #4]
   d6122:	461a      	mov	r2, r3
   d6124:	4619      	mov	r1, r3
   d6126:	f7ff ba89 	b.w	d563c <network_on>

000d612a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d612a:	2200      	movs	r2, #0
   d612c:	6840      	ldr	r0, [r0, #4]
   d612e:	4611      	mov	r1, r2
   d6130:	f7ff ba6c 	b.w	d560c <network_connecting>

000d6134 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6134:	6840      	ldr	r0, [r0, #4]
   d6136:	2200      	movs	r2, #0
   d6138:	2102      	movs	r1, #2
   d613a:	f7ff ba6f 	b.w	d561c <network_disconnect>

000d613e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d613e:	2300      	movs	r3, #0
   d6140:	6840      	ldr	r0, [r0, #4]
   d6142:	461a      	mov	r2, r3
   d6144:	f7ff ba5a 	b.w	d55fc <network_connect>

000d6148 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6148:	4b02      	ldr	r3, [pc, #8]	; (d6154 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d614a:	2204      	movs	r2, #4
   d614c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d614e:	4a02      	ldr	r2, [pc, #8]	; (d6158 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6150:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6152:	4770      	bx	lr
   d6154:	2003e71c 	.word	0x2003e71c
   d6158:	000d8e3c 	.word	0x000d8e3c

000d615c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d615c:	2300      	movs	r3, #0
   d615e:	6840      	ldr	r0, [r0, #4]
   d6160:	461a      	mov	r2, r3
   d6162:	f7ff ba4b 	b.w	d55fc <network_connect>

000d6166 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6166:	6840      	ldr	r0, [r0, #4]
   d6168:	2200      	movs	r2, #0
   d616a:	2102      	movs	r1, #2
   d616c:	f7ff ba56 	b.w	d561c <network_disconnect>

000d6170 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6170:	2200      	movs	r2, #0
   d6172:	6840      	ldr	r0, [r0, #4]
   d6174:	4611      	mov	r1, r2
   d6176:	f7ff ba49 	b.w	d560c <network_connecting>

000d617a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d617a:	2200      	movs	r2, #0
   d617c:	6840      	ldr	r0, [r0, #4]
   d617e:	4611      	mov	r1, r2
   d6180:	f7ff ba54 	b.w	d562c <network_ready>

000d6184 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6184:	2300      	movs	r3, #0
   d6186:	6840      	ldr	r0, [r0, #4]
   d6188:	461a      	mov	r2, r3
   d618a:	4619      	mov	r1, r3
   d618c:	f7ff ba56 	b.w	d563c <network_on>

000d6190 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6190:	2300      	movs	r3, #0
   d6192:	6840      	ldr	r0, [r0, #4]
   d6194:	461a      	mov	r2, r3
   d6196:	4619      	mov	r1, r3
   d6198:	f7ff ba58 	b.w	d564c <network_off>

000d619c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d619c:	6840      	ldr	r0, [r0, #4]
   d619e:	2100      	movs	r1, #0
   d61a0:	f7ff ba7c 	b.w	d569c <network_is_on>

000d61a4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d61a4:	6840      	ldr	r0, [r0, #4]
   d61a6:	2100      	movs	r1, #0
   d61a8:	f7ff ba80 	b.w	d56ac <network_is_off>

000d61ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d61ac:	6840      	ldr	r0, [r0, #4]
   d61ae:	2200      	movs	r2, #0
   d61b0:	f081 0101 	eor.w	r1, r1, #1
   d61b4:	f7ff ba52 	b.w	d565c <network_listen>

000d61b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d61b8:	6840      	ldr	r0, [r0, #4]
   d61ba:	2200      	movs	r2, #0
   d61bc:	f7ff ba5e 	b.w	d567c <network_set_listen_timeout>

000d61c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d61c0:	2200      	movs	r2, #0
   d61c2:	6840      	ldr	r0, [r0, #4]
   d61c4:	4611      	mov	r1, r2
   d61c6:	f7ff ba61 	b.w	d568c <network_get_listen_timeout>

000d61ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d61ca:	2200      	movs	r2, #0
   d61cc:	6840      	ldr	r0, [r0, #4]
   d61ce:	4611      	mov	r1, r2
   d61d0:	f7ff ba4c 	b.w	d566c <network_listening>

000d61d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d61d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61d8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d61da:	b095      	sub	sp, #84	; 0x54
   d61dc:	4616      	mov	r6, r2
   d61de:	460d      	mov	r5, r1
   d61e0:	4607      	mov	r7, r0
    IPAddress addr;
   d61e2:	f7ff fe05 	bl	d5df0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d61e6:	4621      	mov	r1, r4
   d61e8:	2218      	movs	r2, #24
   d61ea:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d61ec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d61ee:	f002 fbf7 	bl	d89e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d61f2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d61f4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d61f8:	4621      	mov	r1, r4
   d61fa:	466b      	mov	r3, sp
   d61fc:	aa0c      	add	r2, sp, #48	; 0x30
   d61fe:	4630      	mov	r0, r6
   d6200:	f7ff f830 	bl	d5264 <netdb_getaddrinfo>
    if (!r) {
   d6204:	4604      	mov	r4, r0
   d6206:	2800      	cmp	r0, #0
   d6208:	d146      	bne.n	d6298 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d620a:	4602      	mov	r2, r0
   d620c:	2101      	movs	r1, #1
   d620e:	6868      	ldr	r0, [r5, #4]
   d6210:	f7ff fa0c 	bl	d562c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6214:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6216:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6218:	4622      	mov	r2, r4
   d621a:	6868      	ldr	r0, [r5, #4]
   d621c:	f7ff fa06 	bl	d562c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6220:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6222:	4681      	mov	r9, r0
        bool ok = false;
   d6224:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6226:	2e00      	cmp	r6, #0
   d6228:	d036      	beq.n	d6298 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d622a:	2900      	cmp	r1, #0
   d622c:	d134      	bne.n	d6298 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d622e:	6873      	ldr	r3, [r6, #4]
   d6230:	2b02      	cmp	r3, #2
   d6232:	d003      	beq.n	d623c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6234:	2b0a      	cmp	r3, #10
   d6236:	d00b      	beq.n	d6250 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6238:	69f6      	ldr	r6, [r6, #28]
   d623a:	e7f4      	b.n	d6226 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d623c:	f1b8 0f00 	cmp.w	r8, #0
   d6240:	d004      	beq.n	d624c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6242:	6971      	ldr	r1, [r6, #20]
   d6244:	4638      	mov	r0, r7
   d6246:	3104      	adds	r1, #4
   d6248:	f7ff fdff 	bl	d5e4a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d624c:	4641      	mov	r1, r8
   d624e:	e7f3      	b.n	d6238 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6250:	f1b9 0f00 	cmp.w	r9, #0
   d6254:	d101      	bne.n	d625a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6256:	4649      	mov	r1, r9
   d6258:	e7ee      	b.n	d6238 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d625a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d625c:	2210      	movs	r2, #16
   d625e:	a801      	add	r0, sp, #4
   d6260:	f002 fbbe 	bl	d89e0 <memset>
                    a.v = 6;
   d6264:	2306      	movs	r3, #6
   d6266:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d626a:	ad01      	add	r5, sp, #4
   d626c:	f104 0308 	add.w	r3, r4, #8
   d6270:	3418      	adds	r4, #24
   d6272:	6818      	ldr	r0, [r3, #0]
   d6274:	6859      	ldr	r1, [r3, #4]
   d6276:	462a      	mov	r2, r5
   d6278:	c203      	stmia	r2!, {r0, r1}
   d627a:	3308      	adds	r3, #8
   d627c:	42a3      	cmp	r3, r4
   d627e:	4615      	mov	r5, r2
   d6280:	d1f7      	bne.n	d6272 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6282:	a901      	add	r1, sp, #4
   d6284:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6286:	ad07      	add	r5, sp, #28
   d6288:	f7ff fdc0 	bl	d5e0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d628c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d628e:	1d3c      	adds	r4, r7, #4
   d6290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6292:	682b      	ldr	r3, [r5, #0]
   d6294:	7023      	strb	r3, [r4, #0]
   d6296:	e7de      	b.n	d6256 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6298:	9800      	ldr	r0, [sp, #0]
   d629a:	f7fe ffdb 	bl	d5254 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d629e:	4638      	mov	r0, r7
   d62a0:	b015      	add	sp, #84	; 0x54
   d62a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d62a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d62a8:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d62aa:	4a03      	ldr	r2, [pc, #12]	; (d62b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d62ac:	601a      	str	r2, [r3, #0]
   d62ae:	2200      	movs	r2, #0
   d62b0:	605a      	str	r2, [r3, #4]

} // spark
   d62b2:	4770      	bx	lr
   d62b4:	2003e724 	.word	0x2003e724
   d62b8:	000d8e78 	.word	0x000d8e78

000d62bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d62bc:	f100 0310 	add.w	r3, r0, #16
   d62c0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d62c2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d62c6:	2901      	cmp	r1, #1
   d62c8:	4618      	mov	r0, r3
   d62ca:	d108      	bne.n	d62de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d62cc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d62d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d62d4:	3a01      	subs	r2, #1
   d62d6:	f103 0310 	add.w	r3, r3, #16
   d62da:	d1f2      	bne.n	d62c2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d62dc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d62de:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d62e0:	bf04      	itt	eq
   d62e2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d62e6:	1852      	addeq	r2, r2, r1
   d62e8:	e7f4      	b.n	d62d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d62ea <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62ea:	4770      	bx	lr

000d62ec <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d62ec:	2000      	movs	r0, #0
   d62ee:	4770      	bx	lr

000d62f0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62f0:	b510      	push	{r4, lr}
   d62f2:	2110      	movs	r1, #16
   d62f4:	4604      	mov	r4, r0
   d62f6:	f000 fb3b 	bl	d6970 <_ZdlPvj>
   d62fa:	4620      	mov	r0, r4
   d62fc:	bd10      	pop	{r4, pc}

000d62fe <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d62fe:	b508      	push	{r3, lr}
      { delete this; }
   d6300:	f7ff fff6 	bl	d62f0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6304:	bd08      	pop	{r3, pc}

000d6306 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6306:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d6308:	68c4      	ldr	r4, [r0, #12]
   d630a:	b17c      	cbz	r4, d632c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d630c:	6820      	ldr	r0, [r4, #0]
   d630e:	b108      	cbz	r0, d6314 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d6310:	f7fd fec7 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d6314:	7a23      	ldrb	r3, [r4, #8]
   d6316:	b11b      	cbz	r3, d6320 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d6318:	6860      	ldr	r0, [r4, #4]
   d631a:	b108      	cbz	r0, d6320 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d631c:	f7fd fec1 	bl	d40a2 <_ZdaPv>
   d6320:	4620      	mov	r0, r4
   d6322:	210c      	movs	r1, #12
   d6324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6328:	f000 bb22 	b.w	d6970 <_ZdlPvj>
   d632c:	bd10      	pop	{r4, pc}

000d632e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d632e:	b510      	push	{r4, lr}
          _M_dispose();
   d6330:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6332:	4604      	mov	r4, r0
          _M_dispose();
   d6334:	689b      	ldr	r3, [r3, #8]
   d6336:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6338:	68a3      	ldr	r3, [r4, #8]
   d633a:	3b01      	subs	r3, #1
   d633c:	60a3      	str	r3, [r4, #8]
   d633e:	b92b      	cbnz	r3, d634c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6340:	6823      	ldr	r3, [r4, #0]
   d6342:	4620      	mov	r0, r4
   d6344:	68db      	ldr	r3, [r3, #12]
    }
   d6346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d634a:	4718      	bx	r3
    }
   d634c:	bd10      	pop	{r4, pc}

000d634e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d634e:	b538      	push	{r3, r4, r5, lr}
   d6350:	680b      	ldr	r3, [r1, #0]
   d6352:	6003      	str	r3, [r0, #0]
   d6354:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6356:	6843      	ldr	r3, [r0, #4]
   d6358:	429d      	cmp	r5, r3
    class __shared_ptr
   d635a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d635c:	d00c      	beq.n	d6378 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d635e:	b115      	cbz	r5, d6366 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6360:	686b      	ldr	r3, [r5, #4]
   d6362:	3301      	adds	r3, #1
   d6364:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6366:	6860      	ldr	r0, [r4, #4]
   d6368:	b128      	cbz	r0, d6376 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d636a:	6843      	ldr	r3, [r0, #4]
   d636c:	3b01      	subs	r3, #1
   d636e:	6043      	str	r3, [r0, #4]
   d6370:	b90b      	cbnz	r3, d6376 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6372:	f7ff ffdc 	bl	d632e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6376:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6378:	4620      	mov	r0, r4
   d637a:	bd38      	pop	{r3, r4, r5, pc}

000d637c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d637c:	460b      	mov	r3, r1
   d637e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6380:	2200      	movs	r2, #0
   d6382:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6384:	e9c0 2200 	strd	r2, r2, [r0]
   d6388:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d638a:	6083      	str	r3, [r0, #8]
    if (t) {
   d638c:	b90b      	cbnz	r3, d6392 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d638e:	4620      	mov	r0, r4
   d6390:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6392:	f7ff ffdc 	bl	d634e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6396:	e7fa      	b.n	d638e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6398 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d6398:	6883      	ldr	r3, [r0, #8]
   d639a:	b1eb      	cbz	r3, d63d8 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d639c:	781a      	ldrb	r2, [r3, #0]
   d639e:	2a03      	cmp	r2, #3
   d63a0:	d81a      	bhi.n	d63d8 <_ZNK5spark9JSONValue4typeEv+0x40>
   d63a2:	e8df f002 	tbb	[pc, r2]
   d63a6:	1704      	.short	0x1704
   d63a8:	1b02      	.short	0x1b02
   d63aa:	2005      	movs	r0, #5
   d63ac:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d63ae:	6802      	ldr	r2, [r0, #0]
   d63b0:	685b      	ldr	r3, [r3, #4]
   d63b2:	6852      	ldr	r2, [r2, #4]
   d63b4:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d63b6:	282d      	cmp	r0, #45	; 0x2d
   d63b8:	d012      	beq.n	d63e0 <_ZNK5spark9JSONValue4typeEv+0x48>
   d63ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d63be:	2b09      	cmp	r3, #9
   d63c0:	d90e      	bls.n	d63e0 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d63c2:	2874      	cmp	r0, #116	; 0x74
   d63c4:	d00e      	beq.n	d63e4 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d63c6:	2866      	cmp	r0, #102	; 0x66
   d63c8:	d00c      	beq.n	d63e4 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d63ca:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d63ce:	4258      	negs	r0, r3
   d63d0:	4158      	adcs	r0, r3
   d63d2:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d63d4:	2006      	movs	r0, #6
   d63d6:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d63d8:	2000      	movs	r0, #0
   d63da:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d63dc:	2004      	movs	r0, #4
   d63de:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d63e0:	2003      	movs	r0, #3
   d63e2:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d63e4:	2002      	movs	r0, #2
    }
}
   d63e6:	4770      	bx	lr

000d63e8 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d63e8:	b510      	push	{r4, lr}
   d63ea:	4604      	mov	r4, r0
    switch (type()) {
   d63ec:	f7ff ffd4 	bl	d6398 <_ZNK5spark9JSONValue4typeEv>
   d63f0:	2803      	cmp	r0, #3
   d63f2:	d00d      	beq.n	d6410 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d63f4:	2804      	cmp	r0, #4
   d63f6:	d01e      	beq.n	d6436 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d63f8:	2802      	cmp	r0, #2
   d63fa:	d12b      	bne.n	d6454 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d63fc:	6822      	ldr	r2, [r4, #0]
   d63fe:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6400:	6852      	ldr	r2, [r2, #4]
   d6402:	685b      	ldr	r3, [r3, #4]
   d6404:	5cd0      	ldrb	r0, [r2, r3]
   d6406:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d640a:	4258      	negs	r0, r3
   d640c:	4158      	adcs	r0, r3
}
   d640e:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d6410:	68a3      	ldr	r3, [r4, #8]
   d6412:	6822      	ldr	r2, [r4, #0]
   d6414:	685b      	ldr	r3, [r3, #4]
   d6416:	6854      	ldr	r4, [r2, #4]
   d6418:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d641a:	490f      	ldr	r1, [pc, #60]	; (d6458 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d641c:	4620      	mov	r0, r4
   d641e:	f002 fb0b 	bl	d8a38 <strcmp>
   d6422:	2800      	cmp	r0, #0
   d6424:	d0f3      	beq.n	d640e <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d6426:	490d      	ldr	r1, [pc, #52]	; (d645c <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d6428:	4620      	mov	r0, r4
   d642a:	f002 fb05 	bl	d8a38 <strcmp>
   d642e:	3800      	subs	r0, #0
   d6430:	bf18      	it	ne
   d6432:	2001      	movne	r0, #1
   d6434:	e7eb      	b.n	d640e <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d6436:	6822      	ldr	r2, [r4, #0]
   d6438:	68a3      	ldr	r3, [r4, #8]
   d643a:	6852      	ldr	r2, [r2, #4]
   d643c:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d643e:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d6440:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d6442:	2800      	cmp	r0, #0
   d6444:	d0e3      	beq.n	d640e <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d6446:	4906      	ldr	r1, [pc, #24]	; (d6460 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d6448:	4620      	mov	r0, r4
   d644a:	f002 faf5 	bl	d8a38 <strcmp>
   d644e:	2800      	cmp	r0, #0
   d6450:	d1e3      	bne.n	d641a <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d6452:	e7dc      	b.n	d640e <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d6454:	2000      	movs	r0, #0
   d6456:	e7da      	b.n	d640e <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d6458:	000d8eae 	.word	0x000d8eae
   d645c:	000d8eac 	.word	0x000d8eac
   d6460:	000d8eb0 	.word	0x000d8eb0

000d6464 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6464:	b510      	push	{r4, lr}
   d6466:	4604      	mov	r4, r0
    switch (type()) {
   d6468:	f7ff ff96 	bl	d6398 <_ZNK5spark9JSONValue4typeEv>
   d646c:	2802      	cmp	r0, #2
   d646e:	d00e      	beq.n	d648e <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6470:	1ec3      	subs	r3, r0, #3
   d6472:	b2db      	uxtb	r3, r3
   d6474:	2b01      	cmp	r3, #1
   d6476:	d814      	bhi.n	d64a2 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6478:	6822      	ldr	r2, [r4, #0]
   d647a:	68a3      	ldr	r3, [r4, #8]
   d647c:	6850      	ldr	r0, [r2, #4]
   d647e:	685b      	ldr	r3, [r3, #4]
}
   d6480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6484:	220a      	movs	r2, #10
   d6486:	2100      	movs	r1, #0
   d6488:	4418      	add	r0, r3
   d648a:	f002 bb69 	b.w	d8b60 <strtol>
        const char* const s = d_->json + t_->start;
   d648e:	6822      	ldr	r2, [r4, #0]
   d6490:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6492:	6852      	ldr	r2, [r2, #4]
   d6494:	685b      	ldr	r3, [r3, #4]
   d6496:	5cd0      	ldrb	r0, [r2, r3]
   d6498:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d649c:	4258      	negs	r0, r3
   d649e:	4158      	adcs	r0, r3
}
   d64a0:	bd10      	pop	{r4, pc}
    switch (type()) {
   d64a2:	2000      	movs	r0, #0
   d64a4:	e7fc      	b.n	d64a0 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d64a8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d64a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d64ac:	4699      	mov	r9, r3
   d64ae:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d64b0:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d64b2:	4607      	mov	r7, r0
   d64b4:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d64b6:	eb0d 0003 	add.w	r0, sp, r3
   d64ba:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d64bc:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d64be:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d64c0:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d64c2:	f7ff f84f 	bl	d5564 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d64c6:	ab03      	add	r3, sp, #12
   d64c8:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d64ca:	f04f 36ff 	mov.w	r6, #4294967295
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d64ce:	9400      	str	r4, [sp, #0]
   d64d0:	4623      	mov	r3, r4
   d64d2:	4642      	mov	r2, r8
   d64d4:	4639      	mov	r1, r7
   d64d6:	a804      	add	r0, sp, #16
    int nExt = -1;
   d64d8:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d64da:	f7ff f84b 	bl	d5574 <jsmn_parse_deprecated>
    if (n <= 0) {
   d64de:	1e05      	subs	r5, r0, #0
   d64e0:	dd27      	ble.n	d6532 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d64e2:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d64e4:	4914      	ldr	r1, [pc, #80]	; (d6538 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d64e6:	4285      	cmp	r5, r0
   d64e8:	bfb8      	it	lt
   d64ea:	4605      	movlt	r5, r0
   d64ec:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d64f0:	bfac      	ite	ge
   d64f2:	4630      	movge	r0, r6
   d64f4:	0128      	lsllt	r0, r5, #4
   d64f6:	f000 fa3f 	bl	d6978 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d64fa:	4606      	mov	r6, r0
   d64fc:	b198      	cbz	r0, d6526 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d64fe:	2100      	movs	r1, #0
   d6500:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d6502:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d6504:	f7ff f82e 	bl	d5564 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d6508:	e9cd 5400 	strd	r5, r4, [sp]
   d650c:	4633      	mov	r3, r6
   d650e:	4642      	mov	r2, r8
   d6510:	4639      	mov	r1, r7
   d6512:	a804      	add	r0, sp, #16
   d6514:	f7ff f82e 	bl	d5574 <jsmn_parse_deprecated>
   d6518:	42a0      	cmp	r0, r4
   d651a:	dd07      	ble.n	d652c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d651c:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d6520:	2001      	movs	r0, #1
    *count = n;
   d6522:	f8c9 5000 	str.w	r5, [r9]
}
   d6526:	b008      	add	sp, #32
   d6528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d652c:	4630      	mov	r0, r6
   d652e:	f7fd fdb8 	bl	d40a2 <_ZdaPv>
      }
   d6532:	4620      	mov	r0, r4
   d6534:	e7f7      	b.n	d6526 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d6536:	bf00      	nop
   d6538:	000d8ed4 	.word	0x000d8ed4

000d653c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d653c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d6540:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d6542:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d6544:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d6546:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d6548:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d654a:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d654c:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d654e:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d6550:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d6554:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d6558:	42b4      	cmp	r4, r6
   d655a:	d063      	beq.n	d6624 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d655c:	4625      	mov	r5, r4
   d655e:	f815 2b01 	ldrb.w	r2, [r5], #1
   d6562:	2a5c      	cmp	r2, #92	; 0x5c
   d6564:	d12b      	bne.n	d65be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d6566:	42a1      	cmp	r1, r4
   d6568:	d007      	beq.n	d657a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d656a:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d656e:	4618      	mov	r0, r3
   d6570:	465a      	mov	r2, fp
   d6572:	f002 fa1b 	bl	d89ac <memmove>
   d6576:	4603      	mov	r3, r0
                str += n;
   d6578:	445b      	add	r3, fp
            if (s == end) {
   d657a:	42b5      	cmp	r5, r6
   d657c:	d039      	beq.n	d65f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d657e:	7862      	ldrb	r2, [r4, #1]
   d6580:	2a75      	cmp	r2, #117	; 0x75
   d6582:	d12a      	bne.n	d65da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d6584:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d6586:	1ab2      	subs	r2, r6, r2
   d6588:	2a03      	cmp	r2, #3
   d658a:	dd32      	ble.n	d65f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d658c:	1da0      	adds	r0, r4, #6
   d658e:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d6592:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d6596:	45ae      	cmp	lr, r5
   d6598:	d053      	beq.n	d6642 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d659a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d659e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d65a2:	fa5f fb82 	uxtb.w	fp, r2
   d65a6:	f1bb 0f09 	cmp.w	fp, #9
   d65aa:	d905      	bls.n	d65b8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d65ac:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d65b0:	2a05      	cmp	r2, #5
   d65b2:	d807      	bhi.n	d65c4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d65b4:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d65b8:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d65bc:	e7eb      	b.n	d6596 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d65be:	4628      	mov	r0, r5
   d65c0:	4604      	mov	r4, r0
   d65c2:	e7c9      	b.n	d6558 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d65c4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d65c8:	2a05      	cmp	r2, #5
   d65ca:	d812      	bhi.n	d65f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d65cc:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d65d0:	e7f2      	b.n	d65b8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d65d2:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d65d6:	4601      	mov	r1, r0
   d65d8:	e7f2      	b.n	d65c0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d65da:	2a6e      	cmp	r2, #110	; 0x6e
   d65dc:	d01c      	beq.n	d6618 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d65de:	d80e      	bhi.n	d65fe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d65e0:	2a62      	cmp	r2, #98	; 0x62
   d65e2:	d013      	beq.n	d660c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d65e4:	d807      	bhi.n	d65f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d65e6:	2a2f      	cmp	r2, #47	; 0x2f
   d65e8:	d011      	beq.n	d660e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d65ea:	2a5c      	cmp	r2, #92	; 0x5c
   d65ec:	d00f      	beq.n	d660e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d65ee:	2a22      	cmp	r2, #34	; 0x22
   d65f0:	d00d      	beq.n	d660e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d65f2:	2000      	movs	r0, #0
   d65f4:	e023      	b.n	d663e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d65f6:	2a66      	cmp	r2, #102	; 0x66
   d65f8:	d1fb      	bne.n	d65f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d65fa:	220c      	movs	r2, #12
   d65fc:	e007      	b.n	d660e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d65fe:	2a72      	cmp	r2, #114	; 0x72
   d6600:	d00d      	beq.n	d661e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d6602:	2a74      	cmp	r2, #116	; 0x74
   d6604:	d1f5      	bne.n	d65f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d6606:	f883 a000 	strb.w	sl, [r3]
                    break;
   d660a:	e001      	b.n	d6610 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d660c:	2208      	movs	r2, #8
   d660e:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d6610:	1ca1      	adds	r1, r4, #2
                ++str;
   d6612:	3301      	adds	r3, #1
                ++s;
   d6614:	4608      	mov	r0, r1
   d6616:	e7d3      	b.n	d65c0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d6618:	f04f 020a 	mov.w	r2, #10
   d661c:	e7f7      	b.n	d660e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d661e:	f883 9000 	strb.w	r9, [r3]
                    break;
   d6622:	e7f5      	b.n	d6610 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d6624:	42a1      	cmp	r1, r4
   d6626:	d006      	beq.n	d6636 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d6628:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d662a:	4618      	mov	r0, r3
   d662c:	4622      	mov	r2, r4
   d662e:	f002 f9bd 	bl	d89ac <memmove>
   d6632:	4603      	mov	r3, r0
        str += n;
   d6634:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d6636:	eba3 0308 	sub.w	r3, r3, r8
   d663a:	60bb      	str	r3, [r7, #8]
    return true;
   d663c:	2001      	movs	r0, #1
}
   d663e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d6642:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d6646:	d9c4      	bls.n	d65d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d6648:	4621      	mov	r1, r4
   d664a:	e7b9      	b.n	d65c0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d664c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d664e:	4604      	mov	r4, r0
   d6650:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d6652:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d6656:	2700      	movs	r7, #0
    while (t != end) {
   d6658:	42b4      	cmp	r4, r6
   d665a:	d010      	beq.n	d667e <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d665c:	7823      	ldrb	r3, [r4, #0]
   d665e:	2b03      	cmp	r3, #3
   d6660:	d108      	bne.n	d6674 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d6662:	4629      	mov	r1, r5
   d6664:	4620      	mov	r0, r4
   d6666:	f7ff ff69 	bl	d653c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d666a:	b148      	cbz	r0, d6680 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d666c:	68a3      	ldr	r3, [r4, #8]
   d666e:	54ef      	strb	r7, [r5, r3]
        ++t;
   d6670:	3410      	adds	r4, #16
    while (t != end) {
   d6672:	e7f1      	b.n	d6658 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d6674:	2b00      	cmp	r3, #0
   d6676:	d1fb      	bne.n	d6670 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d6678:	68a2      	ldr	r2, [r4, #8]
   d667a:	54ab      	strb	r3, [r5, r2]
   d667c:	e7f8      	b.n	d6670 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d667e:	2001      	movs	r0, #1
}
   d6680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6684 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6684:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6686:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6688:	e9c0 3300 	strd	r3, r3, [r0]
   d668c:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d668e:	480e      	ldr	r0, [pc, #56]	; (d66c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6690:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6694:	b1a9      	cbz	r1, d66c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6696:	780b      	ldrb	r3, [r1, #0]
   d6698:	2b03      	cmp	r3, #3
   d669a:	d006      	beq.n	d66aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d669c:	b98b      	cbnz	r3, d66c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d669e:	6813      	ldr	r3, [r2, #0]
   d66a0:	6858      	ldr	r0, [r3, #4]
   d66a2:	684b      	ldr	r3, [r1, #4]
   d66a4:	5cc3      	ldrb	r3, [r0, r3]
   d66a6:	2b6e      	cmp	r3, #110	; 0x6e
   d66a8:	d007      	beq.n	d66ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d66aa:	6813      	ldr	r3, [r2, #0]
   d66ac:	684d      	ldr	r5, [r1, #4]
   d66ae:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d66b0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d66b2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d66b4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d66b6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d66b8:	60e3      	str	r3, [r4, #12]
   d66ba:	4611      	mov	r1, r2
   d66bc:	4620      	mov	r0, r4
   d66be:	f7ff fe46 	bl	d634e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d66c2:	4620      	mov	r0, r4
   d66c4:	bd38      	pop	{r3, r4, r5, pc}
   d66c6:	bf00      	nop
   d66c8:	000d8eaf 	.word	0x000d8eaf

000d66cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d66cc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d66ce:	2500      	movs	r5, #0
   d66d0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d66d2:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d66d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d66da:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d66de:	4604      	mov	r4, r0
   d66e0:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d66e2:	b14b      	cbz	r3, d66f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d66e4:	781a      	ldrb	r2, [r3, #0]
   d66e6:	2a01      	cmp	r2, #1
   d66e8:	d106      	bne.n	d66f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d66ea:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d66ee:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d66f0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d66f2:	6143      	str	r3, [r0, #20]
   d66f4:	f7ff fe2b 	bl	d634e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d66f8:	4620      	mov	r0, r4
   d66fa:	bd38      	pop	{r3, r4, r5, pc}

000d66fc <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d66fc:	b510      	push	{r4, lr}
    if (!n_) {
   d66fe:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6700:	4604      	mov	r4, r0
    if (!n_) {
   d6702:	b163      	cbz	r3, d671e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d6704:	6880      	ldr	r0, [r0, #8]
   d6706:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6708:	3b01      	subs	r3, #1
    ++t_;
   d670a:	3010      	adds	r0, #16
   d670c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d670e:	6120      	str	r0, [r4, #16]
    --n_;
   d6710:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6712:	b113      	cbz	r3, d671a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6714:	f7ff fdd2 	bl	d62bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6718:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d671a:	2001      	movs	r0, #1
   d671c:	e000      	b.n	d6720 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d671e:	4618      	mov	r0, r3
}
   d6720:	bd10      	pop	{r4, pc}
	...

000d6724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6724:	b538      	push	{r3, r4, r5, lr}
   d6726:	2300      	movs	r3, #0
   d6728:	4604      	mov	r4, r0
   d672a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d672c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d672e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6730:	f7fd fcb1 	bl	d4096 <_Znwj>
   d6734:	b128      	cbz	r0, d6742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6736:	2301      	movs	r3, #1
   d6738:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d673c:	4b02      	ldr	r3, [pc, #8]	; (d6748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d673e:	6003      	str	r3, [r0, #0]
   d6740:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6742:	6020      	str	r0, [r4, #0]
	}
   d6744:	4620      	mov	r0, r4
   d6746:	bd38      	pop	{r3, r4, r5, pc}
   d6748:	000d8ec0 	.word	0x000d8ec0

000d674c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d674c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d674e:	4604      	mov	r4, r0
   d6750:	b087      	sub	sp, #28
   d6752:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d6754:	200c      	movs	r0, #12
   d6756:	4927      	ldr	r1, [pc, #156]	; (d67f4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d6758:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d675a:	f000 f90b 	bl	d6974 <_ZnwjRKSt9nothrow_t>
   d675e:	4601      	mov	r1, r0
   d6760:	b118      	cbz	r0, d676a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d6762:	2300      	movs	r3, #0
   d6764:	e9c0 3300 	strd	r3, r3, [r0]
   d6768:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d676a:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d676c:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d676e:	f7ff ffd9 	bl	d6724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d6772:	9a02      	ldr	r2, [sp, #8]
   d6774:	b942      	cbnz	r2, d6788 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d6776:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d677a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d677c:	a803      	add	r0, sp, #12
   d677e:	f7fd fcee 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6782:	4620      	mov	r0, r4
   d6784:	b007      	add	sp, #28
   d6786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d6788:	2300      	movs	r3, #0
   d678a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d678c:	4629      	mov	r1, r5
   d678e:	ab01      	add	r3, sp, #4
   d6790:	4630      	mov	r0, r6
   d6792:	f7ff fe89 	bl	d64a8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d6796:	b918      	cbnz	r0, d67a0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d6798:	e9c4 0000 	strd	r0, r0, [r4]
   d679c:	60a0      	str	r0, [r4, #8]
}
   d679e:	e7ed      	b.n	d677c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d67a0:	4914      	ldr	r1, [pc, #80]	; (d67f4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d67a2:	9f02      	ldr	r7, [sp, #8]
   d67a4:	1c68      	adds	r0, r5, #1
   d67a6:	f000 f8e7 	bl	d6978 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d67aa:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d67ac:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d67ae:	6858      	ldr	r0, [r3, #4]
   d67b0:	2800      	cmp	r0, #0
   d67b2:	d0f1      	beq.n	d6798 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d67b4:	462a      	mov	r2, r5
   d67b6:	4631      	mov	r1, r6
   d67b8:	f002 f8ea 	bl	d8990 <memcpy>
   d67bc:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d67be:	9901      	ldr	r1, [sp, #4]
   d67c0:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d67c2:	2201      	movs	r2, #1
   d67c4:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d67c6:	685a      	ldr	r2, [r3, #4]
   d67c8:	f7ff ff40 	bl	d664c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d67cc:	2800      	cmp	r0, #0
   d67ce:	d0e3      	beq.n	d6798 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d67d0:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d67d2:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d67d4:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d67d6:	9b03      	ldr	r3, [sp, #12]
   d67d8:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d67da:	b113      	cbz	r3, d67e2 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d67dc:	685a      	ldr	r2, [r3, #4]
   d67de:	3201      	adds	r2, #1
   d67e0:	605a      	str	r2, [r3, #4]
   d67e2:	aa04      	add	r2, sp, #16
   d67e4:	4620      	mov	r0, r4
   d67e6:	f7ff fdc9 	bl	d637c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d67ea:	a805      	add	r0, sp, #20
   d67ec:	f7fd fcb7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67f0:	e7c4      	b.n	d677c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d67f2:	bf00      	nop
   d67f4:	000d8ed4 	.word	0x000d8ed4

000d67f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d67f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d67fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d67fc:	d902      	bls.n	d6804 <pinAvailable+0xc>
    return false;
   d67fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6800:	b002      	add	sp, #8
   d6802:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6804:	f1a0 030b 	sub.w	r3, r0, #11
   d6808:	2b02      	cmp	r3, #2
   d680a:	d81a      	bhi.n	d6842 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d680c:	4c17      	ldr	r4, [pc, #92]	; (d686c <pinAvailable+0x74>)
   d680e:	7821      	ldrb	r1, [r4, #0]
   d6810:	f3bf 8f5b 	dmb	ish
   d6814:	f011 0101 	ands.w	r1, r1, #1
   d6818:	d10b      	bne.n	d6832 <pinAvailable+0x3a>
   d681a:	4620      	mov	r0, r4
   d681c:	9101      	str	r1, [sp, #4]
   d681e:	f7fd fc42 	bl	d40a6 <__cxa_guard_acquire>
   d6822:	9901      	ldr	r1, [sp, #4]
   d6824:	b128      	cbz	r0, d6832 <pinAvailable+0x3a>
   d6826:	4812      	ldr	r0, [pc, #72]	; (d6870 <pinAvailable+0x78>)
   d6828:	f7fe ffd6 	bl	d57d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d682c:	4620      	mov	r0, r4
   d682e:	f7fd fc3f 	bl	d40b0 <__cxa_guard_release>
   d6832:	4b0f      	ldr	r3, [pc, #60]	; (d6870 <pinAvailable+0x78>)
   d6834:	7818      	ldrb	r0, [r3, #0]
   d6836:	f7fe fe15 	bl	d5464 <hal_spi_is_enabled>
   d683a:	2800      	cmp	r0, #0
   d683c:	d1df      	bne.n	d67fe <pinAvailable+0x6>
  return true; // 'pin' is available
   d683e:	2001      	movs	r0, #1
   d6840:	e7de      	b.n	d6800 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6842:	2801      	cmp	r0, #1
   d6844:	d809      	bhi.n	d685a <pinAvailable+0x62>
   d6846:	f000 f86f 	bl	d6928 <_Z19__fetch_global_Wirev>
   d684a:	2100      	movs	r1, #0
   d684c:	7c00      	ldrb	r0, [r0, #16]
   d684e:	f7fe fdf1 	bl	d5434 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6852:	f080 0001 	eor.w	r0, r0, #1
   d6856:	b2c0      	uxtb	r0, r0
   d6858:	e7d2      	b.n	d6800 <pinAvailable+0x8>
   d685a:	3809      	subs	r0, #9
   d685c:	2801      	cmp	r0, #1
   d685e:	d8ee      	bhi.n	d683e <pinAvailable+0x46>
   d6860:	f7ff fbda 	bl	d6018 <_Z22__fetch_global_Serial1v>
   d6864:	7c00      	ldrb	r0, [r0, #16]
   d6866:	f7fe fdad 	bl	d53c4 <hal_usart_is_enabled>
   d686a:	e7f2      	b.n	d6852 <pinAvailable+0x5a>
   d686c:	2003e72c 	.word	0x2003e72c
   d6870:	2003e730 	.word	0x2003e730

000d6874 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6874:	2823      	cmp	r0, #35	; 0x23
{
   d6876:	b538      	push	{r3, r4, r5, lr}
   d6878:	4604      	mov	r4, r0
   d687a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d687c:	d80a      	bhi.n	d6894 <pinMode+0x20>
   d687e:	29ff      	cmp	r1, #255	; 0xff
   d6880:	d008      	beq.n	d6894 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6882:	f7ff ffb9 	bl	d67f8 <pinAvailable>
   d6886:	b128      	cbz	r0, d6894 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6888:	4629      	mov	r1, r5
   d688a:	4620      	mov	r0, r4
}
   d688c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6890:	f7fe bd00 	b.w	d5294 <HAL_Pin_Mode>
}
   d6894:	bd38      	pop	{r3, r4, r5, pc}

000d6896 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6896:	b538      	push	{r3, r4, r5, lr}
   d6898:	4604      	mov	r4, r0
   d689a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d689c:	f7fe fd02 	bl	d52a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d68a0:	28ff      	cmp	r0, #255	; 0xff
   d68a2:	d010      	beq.n	d68c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d68a4:	2806      	cmp	r0, #6
   d68a6:	d804      	bhi.n	d68b2 <digitalWrite+0x1c>
   d68a8:	234d      	movs	r3, #77	; 0x4d
   d68aa:	fa23 f000 	lsr.w	r0, r3, r0
   d68ae:	07c3      	lsls	r3, r0, #31
   d68b0:	d409      	bmi.n	d68c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d68b2:	4620      	mov	r0, r4
   d68b4:	f7ff ffa0 	bl	d67f8 <pinAvailable>
   d68b8:	b128      	cbz	r0, d68c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d68ba:	4629      	mov	r1, r5
   d68bc:	4620      	mov	r0, r4
}
   d68be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d68c2:	f7fe bcf7 	b.w	d52b4 <HAL_GPIO_Write>
}
   d68c6:	bd38      	pop	{r3, r4, r5, pc}

000d68c8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d68c8:	280d      	cmp	r0, #13
{
   d68ca:	b510      	push	{r4, lr}
   d68cc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d68ce:	bf9c      	itt	ls
   d68d0:	340e      	addls	r4, #14
   d68d2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7ff ff8f 	bl	d67f8 <pinAvailable>
   d68da:	b150      	cbz	r0, d68f2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d68dc:	2103      	movs	r1, #3
   d68de:	4620      	mov	r0, r4
   d68e0:	f7fe fcd0 	bl	d5284 <HAL_Validate_Pin_Function>
   d68e4:	2803      	cmp	r0, #3
   d68e6:	d104      	bne.n	d68f2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d68e8:	4620      	mov	r0, r4
}
   d68ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d68ee:	f7fe bcf9 	b.w	d52e4 <hal_adc_read>
}
   d68f2:	2000      	movs	r0, #0
   d68f4:	bd10      	pop	{r4, pc}

000d68f6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d68f6:	4770      	bx	lr

000d68f8 <_Z17acquireWireBufferv>:
{
   d68f8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d68fa:	2300      	movs	r3, #0
   d68fc:	2520      	movs	r5, #32
   d68fe:	8043      	strh	r3, [r0, #2]
   d6900:	2314      	movs	r3, #20
{
   d6902:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6904:	8003      	strh	r3, [r0, #0]
   d6906:	6085      	str	r5, [r0, #8]
   d6908:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d690a:	4906      	ldr	r1, [pc, #24]	; (d6924 <_Z17acquireWireBufferv+0x2c>)
   d690c:	4628      	mov	r0, r5
   d690e:	f000 f833 	bl	d6978 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6912:	4904      	ldr	r1, [pc, #16]	; (d6924 <_Z17acquireWireBufferv+0x2c>)
	};
   d6914:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6916:	4628      	mov	r0, r5
   d6918:	f000 f82e 	bl	d6978 <_ZnajRKSt9nothrow_t>
	};
   d691c:	60e0      	str	r0, [r4, #12]
}
   d691e:	4620      	mov	r0, r4
   d6920:	bd38      	pop	{r3, r4, r5, pc}
   d6922:	bf00      	nop
   d6924:	000d8ed4 	.word	0x000d8ed4

000d6928 <_Z19__fetch_global_Wirev>:
{
   d6928:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d692a:	4d0e      	ldr	r5, [pc, #56]	; (d6964 <_Z19__fetch_global_Wirev+0x3c>)
   d692c:	7829      	ldrb	r1, [r5, #0]
   d692e:	f3bf 8f5b 	dmb	ish
   d6932:	f011 0401 	ands.w	r4, r1, #1
{
   d6936:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6938:	d111      	bne.n	d695e <_Z19__fetch_global_Wirev+0x36>
   d693a:	4628      	mov	r0, r5
   d693c:	f7fd fbb3 	bl	d40a6 <__cxa_guard_acquire>
   d6940:	b168      	cbz	r0, d695e <_Z19__fetch_global_Wirev+0x36>
   d6942:	a801      	add	r0, sp, #4
   d6944:	f7ff ffd8 	bl	d68f8 <_Z17acquireWireBufferv>
   d6948:	aa01      	add	r2, sp, #4
   d694a:	4621      	mov	r1, r4
   d694c:	4806      	ldr	r0, [pc, #24]	; (d6968 <_Z19__fetch_global_Wirev+0x40>)
   d694e:	f7ff fbb5 	bl	d60bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6952:	4628      	mov	r0, r5
   d6954:	f7fd fbac 	bl	d40b0 <__cxa_guard_release>
   d6958:	4804      	ldr	r0, [pc, #16]	; (d696c <_Z19__fetch_global_Wirev+0x44>)
   d695a:	f002 f813 	bl	d8984 <atexit>
	return wire;
}
   d695e:	4802      	ldr	r0, [pc, #8]	; (d6968 <_Z19__fetch_global_Wirev+0x40>)
   d6960:	b007      	add	sp, #28
   d6962:	bd30      	pop	{r4, r5, pc}
   d6964:	2003e73c 	.word	0x2003e73c
   d6968:	2003e740 	.word	0x2003e740
   d696c:	000d68f7 	.word	0x000d68f7

000d6970 <_ZdlPvj>:
   d6970:	f7fd bb95 	b.w	d409e <_ZdlPv>

000d6974 <_ZnwjRKSt9nothrow_t>:
   d6974:	f7fd bb8f 	b.w	d4096 <_Znwj>

000d6978 <_ZnajRKSt9nothrow_t>:
   d6978:	f7fd bb8f 	b.w	d409a <_Znaj>
   d697c:	0000      	movs	r0, r0
	...

000d6980 <pow>:
   d6980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6984:	ed2d 8b02 	vpush	{d8}
   d6988:	b08d      	sub	sp, #52	; 0x34
   d698a:	ec57 6b10 	vmov	r6, r7, d0
   d698e:	ec55 4b11 	vmov	r4, r5, d1
   d6992:	f000 fa2d 	bl	d6df0 <__ieee754_pow>
   d6996:	4bae      	ldr	r3, [pc, #696]	; (d6c50 <pow+0x2d0>)
   d6998:	eeb0 8a40 	vmov.f32	s16, s0
   d699c:	eef0 8a60 	vmov.f32	s17, s1
   d69a0:	f993 9000 	ldrsb.w	r9, [r3]
   d69a4:	f1b9 3fff 	cmp.w	r9, #4294967295
   d69a8:	d037      	beq.n	d6a1a <pow+0x9a>
   d69aa:	4622      	mov	r2, r4
   d69ac:	462b      	mov	r3, r5
   d69ae:	4620      	mov	r0, r4
   d69b0:	4629      	mov	r1, r5
   d69b2:	f001 ff59 	bl	d8868 <__aeabi_dcmpun>
   d69b6:	4683      	mov	fp, r0
   d69b8:	bb78      	cbnz	r0, d6a1a <pow+0x9a>
   d69ba:	4632      	mov	r2, r6
   d69bc:	463b      	mov	r3, r7
   d69be:	4630      	mov	r0, r6
   d69c0:	4639      	mov	r1, r7
   d69c2:	f001 ff51 	bl	d8868 <__aeabi_dcmpun>
   d69c6:	4680      	mov	r8, r0
   d69c8:	2800      	cmp	r0, #0
   d69ca:	f040 8093 	bne.w	d6af4 <pow+0x174>
   d69ce:	f04f 0a00 	mov.w	sl, #0
   d69d2:	f04f 0b00 	mov.w	fp, #0
   d69d6:	4630      	mov	r0, r6
   d69d8:	4639      	mov	r1, r7
   d69da:	4652      	mov	r2, sl
   d69dc:	465b      	mov	r3, fp
   d69de:	f001 ff11 	bl	d8804 <__aeabi_dcmpeq>
   d69e2:	b318      	cbz	r0, d6a2c <pow+0xac>
   d69e4:	4652      	mov	r2, sl
   d69e6:	465b      	mov	r3, fp
   d69e8:	4620      	mov	r0, r4
   d69ea:	4629      	mov	r1, r5
   d69ec:	f001 ff0a 	bl	d8804 <__aeabi_dcmpeq>
   d69f0:	9000      	str	r0, [sp, #0]
   d69f2:	2800      	cmp	r0, #0
   d69f4:	d057      	beq.n	d6aa6 <pow+0x126>
   d69f6:	4b97      	ldr	r3, [pc, #604]	; (d6c54 <pow+0x2d4>)
   d69f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d69fc:	2201      	movs	r2, #1
   d69fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6a02:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6a06:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6a0a:	9202      	str	r2, [sp, #8]
   d6a0c:	9303      	str	r3, [sp, #12]
   d6a0e:	f1b9 0f00 	cmp.w	r9, #0
   d6a12:	f000 8089 	beq.w	d6b28 <pow+0x1a8>
   d6a16:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d6c40 <pow+0x2c0>
   d6a1a:	eeb0 0a48 	vmov.f32	s0, s16
   d6a1e:	eef0 0a68 	vmov.f32	s1, s17
   d6a22:	b00d      	add	sp, #52	; 0x34
   d6a24:	ecbd 8b02 	vpop	{d8}
   d6a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a2c:	eeb0 0a48 	vmov.f32	s0, s16
   d6a30:	eef0 0a68 	vmov.f32	s1, s17
   d6a34:	f001 f984 	bl	d7d40 <finite>
   d6a38:	4680      	mov	r8, r0
   d6a3a:	2800      	cmp	r0, #0
   d6a3c:	f000 8082 	beq.w	d6b44 <pow+0x1c4>
   d6a40:	f04f 0800 	mov.w	r8, #0
   d6a44:	f04f 0900 	mov.w	r9, #0
   d6a48:	ec51 0b18 	vmov	r0, r1, d8
   d6a4c:	4642      	mov	r2, r8
   d6a4e:	464b      	mov	r3, r9
   d6a50:	f001 fed8 	bl	d8804 <__aeabi_dcmpeq>
   d6a54:	2800      	cmp	r0, #0
   d6a56:	d0e0      	beq.n	d6a1a <pow+0x9a>
   d6a58:	ec47 6b10 	vmov	d0, r6, r7
   d6a5c:	f001 f970 	bl	d7d40 <finite>
   d6a60:	2800      	cmp	r0, #0
   d6a62:	d0da      	beq.n	d6a1a <pow+0x9a>
   d6a64:	ec45 4b10 	vmov	d0, r4, r5
   d6a68:	f001 f96a 	bl	d7d40 <finite>
   d6a6c:	2800      	cmp	r0, #0
   d6a6e:	d0d4      	beq.n	d6a1a <pow+0x9a>
   d6a70:	4b77      	ldr	r3, [pc, #476]	; (d6c50 <pow+0x2d0>)
   d6a72:	4a78      	ldr	r2, [pc, #480]	; (d6c54 <pow+0x2d4>)
   d6a74:	f993 3000 	ldrsb.w	r3, [r3]
   d6a78:	9203      	str	r2, [sp, #12]
   d6a7a:	2104      	movs	r1, #4
   d6a7c:	2200      	movs	r2, #0
   d6a7e:	2b02      	cmp	r3, #2
   d6a80:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6a84:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6a88:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6a8c:	9102      	str	r1, [sp, #8]
   d6a8e:	920a      	str	r2, [sp, #40]	; 0x28
   d6a90:	d004      	beq.n	d6a9c <pow+0x11c>
   d6a92:	a802      	add	r0, sp, #8
   d6a94:	f001 f960 	bl	d7d58 <matherr>
   d6a98:	2800      	cmp	r0, #0
   d6a9a:	d14a      	bne.n	d6b32 <pow+0x1b2>
   d6a9c:	f7fe fe4e 	bl	d573c <__errno>
   d6aa0:	2322      	movs	r3, #34	; 0x22
   d6aa2:	6003      	str	r3, [r0, #0]
   d6aa4:	e045      	b.n	d6b32 <pow+0x1b2>
   d6aa6:	ec45 4b10 	vmov	d0, r4, r5
   d6aaa:	f001 f949 	bl	d7d40 <finite>
   d6aae:	2800      	cmp	r0, #0
   d6ab0:	d0b3      	beq.n	d6a1a <pow+0x9a>
   d6ab2:	4652      	mov	r2, sl
   d6ab4:	465b      	mov	r3, fp
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	4629      	mov	r1, r5
   d6aba:	f001 fead 	bl	d8818 <__aeabi_dcmplt>
   d6abe:	2800      	cmp	r0, #0
   d6ac0:	d0ab      	beq.n	d6a1a <pow+0x9a>
   d6ac2:	4b63      	ldr	r3, [pc, #396]	; (d6c50 <pow+0x2d0>)
   d6ac4:	9900      	ldr	r1, [sp, #0]
   d6ac6:	4a63      	ldr	r2, [pc, #396]	; (d6c54 <pow+0x2d4>)
   d6ac8:	f993 3000 	ldrsb.w	r3, [r3]
   d6acc:	910a      	str	r1, [sp, #40]	; 0x28
   d6ace:	2101      	movs	r1, #1
   d6ad0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6ad4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6ad8:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d6adc:	2b00      	cmp	r3, #0
   d6ade:	d16f      	bne.n	d6bc0 <pow+0x240>
   d6ae0:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6ae4:	a802      	add	r0, sp, #8
   d6ae6:	f001 f937 	bl	d7d58 <matherr>
   d6aea:	2800      	cmp	r0, #0
   d6aec:	d06e      	beq.n	d6bcc <pow+0x24c>
   d6aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6af0:	b32b      	cbz	r3, d6b3e <pow+0x1be>
   d6af2:	e020      	b.n	d6b36 <pow+0x1b6>
   d6af4:	2200      	movs	r2, #0
   d6af6:	2300      	movs	r3, #0
   d6af8:	4620      	mov	r0, r4
   d6afa:	4629      	mov	r1, r5
   d6afc:	f001 fe82 	bl	d8804 <__aeabi_dcmpeq>
   d6b00:	2800      	cmp	r0, #0
   d6b02:	d08a      	beq.n	d6a1a <pow+0x9a>
   d6b04:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d6c40 <pow+0x2c0>
   d6b08:	4b52      	ldr	r3, [pc, #328]	; (d6c54 <pow+0x2d4>)
   d6b0a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d6b0e:	2201      	movs	r2, #1
   d6b10:	f1b9 0f02 	cmp.w	r9, #2
   d6b14:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6b18:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6b1c:	ed8d 8b08 	vstr	d8, [sp, #32]
   d6b20:	9202      	str	r2, [sp, #8]
   d6b22:	9303      	str	r3, [sp, #12]
   d6b24:	f43f af79 	beq.w	d6a1a <pow+0x9a>
   d6b28:	a802      	add	r0, sp, #8
   d6b2a:	f001 f915 	bl	d7d58 <matherr>
   d6b2e:	2800      	cmp	r0, #0
   d6b30:	d051      	beq.n	d6bd6 <pow+0x256>
   d6b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b34:	b11b      	cbz	r3, d6b3e <pow+0x1be>
   d6b36:	f7fe fe01 	bl	d573c <__errno>
   d6b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6b3c:	6003      	str	r3, [r0, #0]
   d6b3e:	ed9d 8b08 	vldr	d8, [sp, #32]
   d6b42:	e76a      	b.n	d6a1a <pow+0x9a>
   d6b44:	ec47 6b10 	vmov	d0, r6, r7
   d6b48:	f001 f8fa 	bl	d7d40 <finite>
   d6b4c:	2800      	cmp	r0, #0
   d6b4e:	f43f af77 	beq.w	d6a40 <pow+0xc0>
   d6b52:	ec45 4b10 	vmov	d0, r4, r5
   d6b56:	f001 f8f3 	bl	d7d40 <finite>
   d6b5a:	2800      	cmp	r0, #0
   d6b5c:	f43f af70 	beq.w	d6a40 <pow+0xc0>
   d6b60:	ec53 2b18 	vmov	r2, r3, d8
   d6b64:	ee18 0a10 	vmov	r0, s16
   d6b68:	4619      	mov	r1, r3
   d6b6a:	f001 fe7d 	bl	d8868 <__aeabi_dcmpun>
   d6b6e:	4b38      	ldr	r3, [pc, #224]	; (d6c50 <pow+0x2d0>)
   d6b70:	2800      	cmp	r0, #0
   d6b72:	f040 8096 	bne.w	d6ca2 <pow+0x322>
   d6b76:	f993 8000 	ldrsb.w	r8, [r3]
   d6b7a:	900a      	str	r0, [sp, #40]	; 0x28
   d6b7c:	2303      	movs	r3, #3
   d6b7e:	9302      	str	r3, [sp, #8]
   d6b80:	4b34      	ldr	r3, [pc, #208]	; (d6c54 <pow+0x2d4>)
   d6b82:	9303      	str	r3, [sp, #12]
   d6b84:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6b88:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6b8c:	f1b8 0f00 	cmp.w	r8, #0
   d6b90:	d126      	bne.n	d6be0 <pow+0x260>
   d6b92:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d6c64 <pow+0x2e4>
   d6b96:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d6b9a:	4652      	mov	r2, sl
   d6b9c:	465b      	mov	r3, fp
   d6b9e:	4630      	mov	r0, r6
   d6ba0:	4639      	mov	r1, r7
   d6ba2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6ba6:	f001 fe37 	bl	d8818 <__aeabi_dcmplt>
   d6baa:	bb48      	cbnz	r0, d6c00 <pow+0x280>
   d6bac:	a802      	add	r0, sp, #8
   d6bae:	f001 f8d3 	bl	d7d58 <matherr>
   d6bb2:	2800      	cmp	r0, #0
   d6bb4:	d19b      	bne.n	d6aee <pow+0x16e>
   d6bb6:	f7fe fdc1 	bl	d573c <__errno>
   d6bba:	2322      	movs	r3, #34	; 0x22
   d6bbc:	6003      	str	r3, [r0, #0]
   d6bbe:	e796      	b.n	d6aee <pow+0x16e>
   d6bc0:	4925      	ldr	r1, [pc, #148]	; (d6c58 <pow+0x2d8>)
   d6bc2:	2000      	movs	r0, #0
   d6bc4:	2b02      	cmp	r3, #2
   d6bc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6bca:	d18b      	bne.n	d6ae4 <pow+0x164>
   d6bcc:	f7fe fdb6 	bl	d573c <__errno>
   d6bd0:	2321      	movs	r3, #33	; 0x21
   d6bd2:	6003      	str	r3, [r0, #0]
   d6bd4:	e78b      	b.n	d6aee <pow+0x16e>
   d6bd6:	f7fe fdb1 	bl	d573c <__errno>
   d6bda:	2321      	movs	r3, #33	; 0x21
   d6bdc:	6003      	str	r3, [r0, #0]
   d6bde:	e7a8      	b.n	d6b32 <pow+0x1b2>
   d6be0:	ed9f 7b19 	vldr	d7, [pc, #100]	; d6c48 <pow+0x2c8>
   d6be4:	4652      	mov	r2, sl
   d6be6:	465b      	mov	r3, fp
   d6be8:	4630      	mov	r0, r6
   d6bea:	4639      	mov	r1, r7
   d6bec:	ed8d 7b08 	vstr	d7, [sp, #32]
   d6bf0:	f001 fe12 	bl	d8818 <__aeabi_dcmplt>
   d6bf4:	2800      	cmp	r0, #0
   d6bf6:	d137      	bne.n	d6c68 <pow+0x2e8>
   d6bf8:	f1b8 0f02 	cmp.w	r8, #2
   d6bfc:	d0db      	beq.n	d6bb6 <pow+0x236>
   d6bfe:	e7d5      	b.n	d6bac <pow+0x22c>
   d6c00:	4b16      	ldr	r3, [pc, #88]	; (d6c5c <pow+0x2dc>)
   d6c02:	2200      	movs	r2, #0
   d6c04:	4620      	mov	r0, r4
   d6c06:	4629      	mov	r1, r5
   d6c08:	f001 fb94 	bl	d8334 <__aeabi_dmul>
   d6c0c:	4602      	mov	r2, r0
   d6c0e:	460b      	mov	r3, r1
   d6c10:	ec43 2b10 	vmov	d0, r2, r3
   d6c14:	e9cd 2300 	strd	r2, r3, [sp]
   d6c18:	f001 f8aa 	bl	d7d70 <rint>
   d6c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6c20:	ec51 0b10 	vmov	r0, r1, d0
   d6c24:	f001 fdee 	bl	d8804 <__aeabi_dcmpeq>
   d6c28:	2800      	cmp	r0, #0
   d6c2a:	d136      	bne.n	d6c9a <pow+0x31a>
   d6c2c:	4b0c      	ldr	r3, [pc, #48]	; (d6c60 <pow+0x2e0>)
   d6c2e:	4908      	ldr	r1, [pc, #32]	; (d6c50 <pow+0x2d0>)
   d6c30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6c34:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6c38:	f991 8000 	ldrsb.w	r8, [r1]
   d6c3c:	e7dc      	b.n	d6bf8 <pow+0x278>
   d6c3e:	bf00      	nop
   d6c40:	00000000 	.word	0x00000000
   d6c44:	3ff00000 	.word	0x3ff00000
   d6c48:	00000000 	.word	0x00000000
   d6c4c:	7ff00000 	.word	0x7ff00000
   d6c50:	2003e49c 	.word	0x2003e49c
   d6c54:	000d8ed8 	.word	0x000d8ed8
   d6c58:	fff00000 	.word	0xfff00000
   d6c5c:	3fe00000 	.word	0x3fe00000
   d6c60:	c7efffff 	.word	0xc7efffff
   d6c64:	47efffff 	.word	0x47efffff
   d6c68:	4b1c      	ldr	r3, [pc, #112]	; (d6cdc <pow+0x35c>)
   d6c6a:	2200      	movs	r2, #0
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	4629      	mov	r1, r5
   d6c70:	f001 fb60 	bl	d8334 <__aeabi_dmul>
   d6c74:	4602      	mov	r2, r0
   d6c76:	460b      	mov	r3, r1
   d6c78:	ec43 2b10 	vmov	d0, r2, r3
   d6c7c:	e9cd 2300 	strd	r2, r3, [sp]
   d6c80:	f001 f876 	bl	d7d70 <rint>
   d6c84:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6c88:	ec51 0b10 	vmov	r0, r1, d0
   d6c8c:	f001 fdba 	bl	d8804 <__aeabi_dcmpeq>
   d6c90:	b918      	cbnz	r0, d6c9a <pow+0x31a>
   d6c92:	4b13      	ldr	r3, [pc, #76]	; (d6ce0 <pow+0x360>)
   d6c94:	2200      	movs	r2, #0
   d6c96:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6c9a:	4b12      	ldr	r3, [pc, #72]	; (d6ce4 <pow+0x364>)
   d6c9c:	f993 8000 	ldrsb.w	r8, [r3]
   d6ca0:	e7aa      	b.n	d6bf8 <pow+0x278>
   d6ca2:	f993 9000 	ldrsb.w	r9, [r3]
   d6ca6:	4b10      	ldr	r3, [pc, #64]	; (d6ce8 <pow+0x368>)
   d6ca8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6cac:	2201      	movs	r2, #1
   d6cae:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6cb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d6cba:	f1b9 0f00 	cmp.w	r9, #0
   d6cbe:	f43f af0f 	beq.w	d6ae0 <pow+0x160>
   d6cc2:	4652      	mov	r2, sl
   d6cc4:	465b      	mov	r3, fp
   d6cc6:	4650      	mov	r0, sl
   d6cc8:	4659      	mov	r1, fp
   d6cca:	f001 fc5d 	bl	d8588 <__aeabi_ddiv>
   d6cce:	f1b9 0f02 	cmp.w	r9, #2
   d6cd2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6cd6:	f43f af79 	beq.w	d6bcc <pow+0x24c>
   d6cda:	e703      	b.n	d6ae4 <pow+0x164>
   d6cdc:	3fe00000 	.word	0x3fe00000
   d6ce0:	fff00000 	.word	0xfff00000
   d6ce4:	2003e49c 	.word	0x2003e49c
   d6ce8:	000d8ed8 	.word	0x000d8ed8

000d6cec <logf>:
   d6cec:	b510      	push	{r4, lr}
   d6cee:	ed2d 8b02 	vpush	{d8}
   d6cf2:	b08a      	sub	sp, #40	; 0x28
   d6cf4:	eeb0 8a40 	vmov.f32	s16, s0
   d6cf8:	f000 ff18 	bl	d7b2c <__ieee754_logf>
   d6cfc:	4b37      	ldr	r3, [pc, #220]	; (d6ddc <logf+0xf0>)
   d6cfe:	f993 4000 	ldrsb.w	r4, [r3]
   d6d02:	1c63      	adds	r3, r4, #1
   d6d04:	d033      	beq.n	d6d6e <logf+0x82>
   d6d06:	eeb4 8a48 	vcmp.f32	s16, s16
   d6d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d0e:	d62e      	bvs.n	d6d6e <logf+0x82>
   d6d10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d6d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d18:	dc29      	bgt.n	d6d6e <logf+0x82>
   d6d1a:	4b31      	ldr	r3, [pc, #196]	; (d6de0 <logf+0xf4>)
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	ee18 0a10 	vmov	r0, s16
   d6d22:	2300      	movs	r3, #0
   d6d24:	9308      	str	r3, [sp, #32]
   d6d26:	f001 faad 	bl	d8284 <__aeabi_f2d>
   d6d2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d6d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6d32:	b304      	cbz	r4, d6d76 <logf+0x8a>
   d6d34:	4b2b      	ldr	r3, [pc, #172]	; (d6de4 <logf+0xf8>)
   d6d36:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d6d3a:	2200      	movs	r2, #0
   d6d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d40:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6d44:	d141      	bne.n	d6dca <logf+0xde>
   d6d46:	2302      	movs	r3, #2
   d6d48:	429c      	cmp	r4, r3
   d6d4a:	9300      	str	r3, [sp, #0]
   d6d4c:	d137      	bne.n	d6dbe <logf+0xd2>
   d6d4e:	f7fe fcf5 	bl	d573c <__errno>
   d6d52:	2322      	movs	r3, #34	; 0x22
   d6d54:	6003      	str	r3, [r0, #0]
   d6d56:	9b08      	ldr	r3, [sp, #32]
   d6d58:	b32b      	cbz	r3, d6da6 <logf+0xba>
   d6d5a:	f7fe fcef 	bl	d573c <__errno>
   d6d5e:	9b08      	ldr	r3, [sp, #32]
   d6d60:	6003      	str	r3, [r0, #0]
   d6d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6d66:	f001 fdbd 	bl	d88e4 <__aeabi_d2f>
   d6d6a:	ee00 0a10 	vmov	s0, r0
   d6d6e:	b00a      	add	sp, #40	; 0x28
   d6d70:	ecbd 8b02 	vpop	{d8}
   d6d74:	bd10      	pop	{r4, pc}
   d6d76:	4b1c      	ldr	r3, [pc, #112]	; (d6de8 <logf+0xfc>)
   d6d78:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d6d7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d84:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6d88:	d017      	beq.n	d6dba <logf+0xce>
   d6d8a:	2301      	movs	r3, #1
   d6d8c:	9300      	str	r3, [sp, #0]
   d6d8e:	4668      	mov	r0, sp
   d6d90:	f000 ffe2 	bl	d7d58 <matherr>
   d6d94:	b1e8      	cbz	r0, d6dd2 <logf+0xe6>
   d6d96:	4815      	ldr	r0, [pc, #84]	; (d6dec <logf+0x100>)
   d6d98:	f000 ffe2 	bl	d7d60 <nan>
   d6d9c:	ed8d 0b06 	vstr	d0, [sp, #24]
   d6da0:	9b08      	ldr	r3, [sp, #32]
   d6da2:	2b00      	cmp	r3, #0
   d6da4:	d1d9      	bne.n	d6d5a <logf+0x6e>
   d6da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6daa:	f001 fd9b 	bl	d88e4 <__aeabi_d2f>
   d6dae:	ee00 0a10 	vmov	s0, r0
   d6db2:	b00a      	add	sp, #40	; 0x28
   d6db4:	ecbd 8b02 	vpop	{d8}
   d6db8:	bd10      	pop	{r4, pc}
   d6dba:	2302      	movs	r3, #2
   d6dbc:	9300      	str	r3, [sp, #0]
   d6dbe:	4668      	mov	r0, sp
   d6dc0:	f000 ffca 	bl	d7d58 <matherr>
   d6dc4:	2800      	cmp	r0, #0
   d6dc6:	d1eb      	bne.n	d6da0 <logf+0xb4>
   d6dc8:	e7c1      	b.n	d6d4e <logf+0x62>
   d6dca:	2301      	movs	r3, #1
   d6dcc:	2c02      	cmp	r4, #2
   d6dce:	9300      	str	r3, [sp, #0]
   d6dd0:	d1dd      	bne.n	d6d8e <logf+0xa2>
   d6dd2:	f7fe fcb3 	bl	d573c <__errno>
   d6dd6:	2321      	movs	r3, #33	; 0x21
   d6dd8:	6003      	str	r3, [r0, #0]
   d6dda:	e7dc      	b.n	d6d96 <logf+0xaa>
   d6ddc:	2003e49c 	.word	0x2003e49c
   d6de0:	000d8edc 	.word	0x000d8edc
   d6de4:	fff00000 	.word	0xfff00000
   d6de8:	c7efffff 	.word	0xc7efffff
   d6dec:	000d8ee0 	.word	0x000d8ee0

000d6df0 <__ieee754_pow>:
   d6df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6df4:	ec57 6b11 	vmov	r6, r7, d1
   d6df8:	ed2d 8b0a 	vpush	{d8-d12}
   d6dfc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d6e00:	ea5a 0206 	orrs.w	r2, sl, r6
   d6e04:	b089      	sub	sp, #36	; 0x24
   d6e06:	d03d      	beq.n	d6e84 <__ieee754_pow+0x94>
   d6e08:	ec55 4b10 	vmov	r4, r5, d0
   d6e0c:	4976      	ldr	r1, [pc, #472]	; (d6fe8 <__ieee754_pow+0x1f8>)
   d6e0e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d6e12:	4588      	cmp	r8, r1
   d6e14:	ee10 2a10 	vmov	r2, s0
   d6e18:	46a9      	mov	r9, r5
   d6e1a:	dc2c      	bgt.n	d6e76 <__ieee754_pow+0x86>
   d6e1c:	ee11 3a10 	vmov	r3, s2
   d6e20:	46bb      	mov	fp, r7
   d6e22:	d03a      	beq.n	d6e9a <__ieee754_pow+0xaa>
   d6e24:	458a      	cmp	sl, r1
   d6e26:	dc26      	bgt.n	d6e76 <__ieee754_pow+0x86>
   d6e28:	496f      	ldr	r1, [pc, #444]	; (d6fe8 <__ieee754_pow+0x1f8>)
   d6e2a:	458a      	cmp	sl, r1
   d6e2c:	d021      	beq.n	d6e72 <__ieee754_pow+0x82>
   d6e2e:	f1b9 0f00 	cmp.w	r9, #0
   d6e32:	db3d      	blt.n	d6eb0 <__ieee754_pow+0xc0>
   d6e34:	2100      	movs	r1, #0
   d6e36:	9103      	str	r1, [sp, #12]
   d6e38:	2b00      	cmp	r3, #0
   d6e3a:	d155      	bne.n	d6ee8 <__ieee754_pow+0xf8>
   d6e3c:	4b6a      	ldr	r3, [pc, #424]	; (d6fe8 <__ieee754_pow+0x1f8>)
   d6e3e:	459a      	cmp	sl, r3
   d6e40:	f000 80a8 	beq.w	d6f94 <__ieee754_pow+0x1a4>
   d6e44:	4b69      	ldr	r3, [pc, #420]	; (d6fec <__ieee754_pow+0x1fc>)
   d6e46:	459a      	cmp	sl, r3
   d6e48:	f000 80b6 	beq.w	d6fb8 <__ieee754_pow+0x1c8>
   d6e4c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d6e50:	f000 8501 	beq.w	d7856 <__ieee754_pow+0xa66>
   d6e54:	4b66      	ldr	r3, [pc, #408]	; (d6ff0 <__ieee754_pow+0x200>)
   d6e56:	459b      	cmp	fp, r3
   d6e58:	d146      	bne.n	d6ee8 <__ieee754_pow+0xf8>
   d6e5a:	f1b9 0f00 	cmp.w	r9, #0
   d6e5e:	db43      	blt.n	d6ee8 <__ieee754_pow+0xf8>
   d6e60:	ec45 4b10 	vmov	d0, r4, r5
   d6e64:	b009      	add	sp, #36	; 0x24
   d6e66:	ecbd 8b0a 	vpop	{d8-d12}
   d6e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e6e:	f000 bd99 	b.w	d79a4 <__ieee754_sqrt>
   d6e72:	2b00      	cmp	r3, #0
   d6e74:	d0db      	beq.n	d6e2e <__ieee754_pow+0x3e>
   d6e76:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6e7a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6e7e:	ea58 0302 	orrs.w	r3, r8, r2
   d6e82:	d10d      	bne.n	d6ea0 <__ieee754_pow+0xb0>
   d6e84:	ed9f 7b54 	vldr	d7, [pc, #336]	; d6fd8 <__ieee754_pow+0x1e8>
   d6e88:	ed8d 7b00 	vstr	d7, [sp]
   d6e8c:	ed9d 0b00 	vldr	d0, [sp]
   d6e90:	b009      	add	sp, #36	; 0x24
   d6e92:	ecbd 8b0a 	vpop	{d8-d12}
   d6e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e9a:	b90c      	cbnz	r4, d6ea0 <__ieee754_pow+0xb0>
   d6e9c:	45c2      	cmp	sl, r8
   d6e9e:	ddc3      	ble.n	d6e28 <__ieee754_pow+0x38>
   d6ea0:	4854      	ldr	r0, [pc, #336]	; (d6ff4 <__ieee754_pow+0x204>)
   d6ea2:	b009      	add	sp, #36	; 0x24
   d6ea4:	ecbd 8b0a 	vpop	{d8-d12}
   d6ea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6eac:	f000 bf58 	b.w	d7d60 <nan>
   d6eb0:	4951      	ldr	r1, [pc, #324]	; (d6ff8 <__ieee754_pow+0x208>)
   d6eb2:	458a      	cmp	sl, r1
   d6eb4:	f300 8087 	bgt.w	d6fc6 <__ieee754_pow+0x1d6>
   d6eb8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d6ebc:	458a      	cmp	sl, r1
   d6ebe:	dd0f      	ble.n	d6ee0 <__ieee754_pow+0xf0>
   d6ec0:	ea4f 512a 	mov.w	r1, sl, asr #20
   d6ec4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d6ec8:	2914      	cmp	r1, #20
   d6eca:	f340 84ce 	ble.w	d786a <__ieee754_pow+0xa7a>
   d6ece:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d6ed2:	fa23 f001 	lsr.w	r0, r3, r1
   d6ed6:	fa00 f101 	lsl.w	r1, r0, r1
   d6eda:	4299      	cmp	r1, r3
   d6edc:	f000 8520 	beq.w	d7920 <__ieee754_pow+0xb30>
   d6ee0:	2100      	movs	r1, #0
   d6ee2:	9103      	str	r1, [sp, #12]
   d6ee4:	2b00      	cmp	r3, #0
   d6ee6:	d0ad      	beq.n	d6e44 <__ieee754_pow+0x54>
   d6ee8:	ec45 4b10 	vmov	d0, r4, r5
   d6eec:	9206      	str	r2, [sp, #24]
   d6eee:	f000 ff1d 	bl	d7d2c <fabs>
   d6ef2:	9a06      	ldr	r2, [sp, #24]
   d6ef4:	ed8d 0b00 	vstr	d0, [sp]
   d6ef8:	bb5a      	cbnz	r2, d6f52 <__ieee754_pow+0x162>
   d6efa:	f1b8 0f00 	cmp.w	r8, #0
   d6efe:	d004      	beq.n	d6f0a <__ieee754_pow+0x11a>
   d6f00:	4b3a      	ldr	r3, [pc, #232]	; (d6fec <__ieee754_pow+0x1fc>)
   d6f02:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d6f06:	429a      	cmp	r2, r3
   d6f08:	d123      	bne.n	d6f52 <__ieee754_pow+0x162>
   d6f0a:	f1bb 0f00 	cmp.w	fp, #0
   d6f0e:	da07      	bge.n	d6f20 <__ieee754_pow+0x130>
   d6f10:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6f14:	4935      	ldr	r1, [pc, #212]	; (d6fec <__ieee754_pow+0x1fc>)
   d6f16:	2000      	movs	r0, #0
   d6f18:	f001 fb36 	bl	d8588 <__aeabi_ddiv>
   d6f1c:	e9cd 0100 	strd	r0, r1, [sp]
   d6f20:	f1b9 0f00 	cmp.w	r9, #0
   d6f24:	dab2      	bge.n	d6e8c <__ieee754_pow+0x9c>
   d6f26:	9b03      	ldr	r3, [sp, #12]
   d6f28:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6f2c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6f30:	ea58 0303 	orrs.w	r3, r8, r3
   d6f34:	f040 84be 	bne.w	d78b4 <__ieee754_pow+0xac4>
   d6f38:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6f3c:	4610      	mov	r0, r2
   d6f3e:	4619      	mov	r1, r3
   d6f40:	f001 f840 	bl	d7fc4 <__aeabi_dsub>
   d6f44:	4602      	mov	r2, r0
   d6f46:	460b      	mov	r3, r1
   d6f48:	f001 fb1e 	bl	d8588 <__aeabi_ddiv>
   d6f4c:	e9cd 0100 	strd	r0, r1, [sp]
   d6f50:	e79c      	b.n	d6e8c <__ieee754_pow+0x9c>
   d6f52:	9a03      	ldr	r2, [sp, #12]
   d6f54:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d6f58:	3b01      	subs	r3, #1
   d6f5a:	9306      	str	r3, [sp, #24]
   d6f5c:	4313      	orrs	r3, r2
   d6f5e:	d035      	beq.n	d6fcc <__ieee754_pow+0x1dc>
   d6f60:	4b26      	ldr	r3, [pc, #152]	; (d6ffc <__ieee754_pow+0x20c>)
   d6f62:	459a      	cmp	sl, r3
   d6f64:	dd4e      	ble.n	d7004 <__ieee754_pow+0x214>
   d6f66:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d6f6a:	459a      	cmp	sl, r3
   d6f6c:	4b24      	ldr	r3, [pc, #144]	; (d7000 <__ieee754_pow+0x210>)
   d6f6e:	f340 83ed 	ble.w	d774c <__ieee754_pow+0x95c>
   d6f72:	4598      	cmp	r8, r3
   d6f74:	f340 836b 	ble.w	d764e <__ieee754_pow+0x85e>
   d6f78:	f1bb 0f00 	cmp.w	fp, #0
   d6f7c:	f340 836b 	ble.w	d7656 <__ieee754_pow+0x866>
   d6f80:	a317      	add	r3, pc, #92	; (adr r3, d6fe0 <__ieee754_pow+0x1f0>)
   d6f82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f86:	4610      	mov	r0, r2
   d6f88:	4619      	mov	r1, r3
   d6f8a:	f001 f9d3 	bl	d8334 <__aeabi_dmul>
   d6f8e:	e9cd 0100 	strd	r0, r1, [sp]
   d6f92:	e77b      	b.n	d6e8c <__ieee754_pow+0x9c>
   d6f94:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d6f98:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d6f9c:	4313      	orrs	r3, r2
   d6f9e:	f43f af71 	beq.w	d6e84 <__ieee754_pow+0x94>
   d6fa2:	4b17      	ldr	r3, [pc, #92]	; (d7000 <__ieee754_pow+0x210>)
   d6fa4:	4598      	cmp	r8, r3
   d6fa6:	f340 8388 	ble.w	d76ba <__ieee754_pow+0x8ca>
   d6faa:	f1bb 0f00 	cmp.w	fp, #0
   d6fae:	f2c0 8352 	blt.w	d7656 <__ieee754_pow+0x866>
   d6fb2:	e9cd 6700 	strd	r6, r7, [sp]
   d6fb6:	e769      	b.n	d6e8c <__ieee754_pow+0x9c>
   d6fb8:	f1bb 0f00 	cmp.w	fp, #0
   d6fbc:	f2c0 8441 	blt.w	d7842 <__ieee754_pow+0xa52>
   d6fc0:	e9cd 4500 	strd	r4, r5, [sp]
   d6fc4:	e762      	b.n	d6e8c <__ieee754_pow+0x9c>
   d6fc6:	2102      	movs	r1, #2
   d6fc8:	9103      	str	r1, [sp, #12]
   d6fca:	e735      	b.n	d6e38 <__ieee754_pow+0x48>
   d6fcc:	4622      	mov	r2, r4
   d6fce:	462b      	mov	r3, r5
   d6fd0:	e7b4      	b.n	d6f3c <__ieee754_pow+0x14c>
   d6fd2:	bf00      	nop
   d6fd4:	f3af 8000 	nop.w
   d6fd8:	00000000 	.word	0x00000000
   d6fdc:	3ff00000 	.word	0x3ff00000
   d6fe0:	8800759c 	.word	0x8800759c
   d6fe4:	7e37e43c 	.word	0x7e37e43c
   d6fe8:	7ff00000 	.word	0x7ff00000
   d6fec:	3ff00000 	.word	0x3ff00000
   d6ff0:	3fe00000 	.word	0x3fe00000
   d6ff4:	000d8ee0 	.word	0x000d8ee0
   d6ff8:	433fffff 	.word	0x433fffff
   d6ffc:	41e00000 	.word	0x41e00000
   d7000:	3fefffff 	.word	0x3fefffff
   d7004:	4be4      	ldr	r3, [pc, #912]	; (d7398 <__ieee754_pow+0x5a8>)
   d7006:	ea09 0303 	and.w	r3, r9, r3
   d700a:	2b00      	cmp	r3, #0
   d700c:	f040 8416 	bne.w	d783c <__ieee754_pow+0xa4c>
   d7010:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7014:	4be1      	ldr	r3, [pc, #900]	; (d739c <__ieee754_pow+0x5ac>)
   d7016:	2200      	movs	r2, #0
   d7018:	f001 f98c 	bl	d8334 <__aeabi_dmul>
   d701c:	e9cd 0100 	strd	r0, r1, [sp]
   d7020:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d7024:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d7028:	ea4f 5328 	mov.w	r3, r8, asr #20
   d702c:	49dc      	ldr	r1, [pc, #880]	; (d73a0 <__ieee754_pow+0x5b0>)
   d702e:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d7032:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7036:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d703a:	1818      	adds	r0, r3, r0
   d703c:	428a      	cmp	r2, r1
   d703e:	9007      	str	r0, [sp, #28]
   d7040:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d7044:	f340 83e9 	ble.w	d781a <__ieee754_pow+0xa2a>
   d7048:	4bd6      	ldr	r3, [pc, #856]	; (d73a4 <__ieee754_pow+0x5b4>)
   d704a:	429a      	cmp	r2, r3
   d704c:	f340 843e 	ble.w	d78cc <__ieee754_pow+0xadc>
   d7050:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d7340 <__ieee754_pow+0x550>
   d7054:	eeb0 ba47 	vmov.f32	s22, s14
   d7058:	eef0 ba67 	vmov.f32	s23, s15
   d705c:	eeb0 ca47 	vmov.f32	s24, s14
   d7060:	eef0 ca67 	vmov.f32	s25, s15
   d7064:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d7348 <__ieee754_pow+0x558>
   d7068:	3001      	adds	r0, #1
   d706a:	ec54 3b17 	vmov	r3, r4, d7
   d706e:	9007      	str	r0, [sp, #28]
   d7070:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d7074:	f04f 0900 	mov.w	r9, #0
   d7078:	e9dd ab00 	ldrd	sl, fp, [sp]
   d707c:	ec44 3b18 	vmov	d8, r3, r4
   d7080:	461a      	mov	r2, r3
   d7082:	4650      	mov	r0, sl
   d7084:	4623      	mov	r3, r4
   d7086:	4641      	mov	r1, r8
   d7088:	f000 ff9c 	bl	d7fc4 <__aeabi_dsub>
   d708c:	ec53 2b18 	vmov	r2, r3, d8
   d7090:	4604      	mov	r4, r0
   d7092:	460d      	mov	r5, r1
   d7094:	4650      	mov	r0, sl
   d7096:	4641      	mov	r1, r8
   d7098:	f000 ff96 	bl	d7fc8 <__adddf3>
   d709c:	4602      	mov	r2, r0
   d709e:	460b      	mov	r3, r1
   d70a0:	2000      	movs	r0, #0
   d70a2:	49c1      	ldr	r1, [pc, #772]	; (d73a8 <__ieee754_pow+0x5b8>)
   d70a4:	f001 fa70 	bl	d8588 <__aeabi_ddiv>
   d70a8:	ec45 4b1a 	vmov	d10, r4, r5
   d70ac:	ec41 0b19 	vmov	d9, r0, r1
   d70b0:	ec51 0b1a 	vmov	r0, r1, d10
   d70b4:	ec53 2b19 	vmov	r2, r3, d9
   d70b8:	f001 f93c 	bl	d8334 <__aeabi_dmul>
   d70bc:	46c3      	mov	fp, r8
   d70be:	ea4f 0868 	mov.w	r8, r8, asr #1
   d70c2:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d70c6:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d70ca:	eb03 0509 	add.w	r5, r3, r9
   d70ce:	460a      	mov	r2, r1
   d70d0:	2300      	movs	r3, #0
   d70d2:	4601      	mov	r1, r0
   d70d4:	e9cd 1200 	strd	r1, r2, [sp]
   d70d8:	9300      	str	r3, [sp, #0]
   d70da:	e9dd 8900 	ldrd	r8, r9, [sp]
   d70de:	2400      	movs	r4, #0
   d70e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d70e4:	462b      	mov	r3, r5
   d70e6:	4622      	mov	r2, r4
   d70e8:	4640      	mov	r0, r8
   d70ea:	4649      	mov	r1, r9
   d70ec:	f001 f922 	bl	d8334 <__aeabi_dmul>
   d70f0:	4602      	mov	r2, r0
   d70f2:	460b      	mov	r3, r1
   d70f4:	ec51 0b1a 	vmov	r0, r1, d10
   d70f8:	f000 ff64 	bl	d7fc4 <__aeabi_dsub>
   d70fc:	ec41 0b17 	vmov	d7, r0, r1
   d7100:	ec53 2b18 	vmov	r2, r3, d8
   d7104:	4620      	mov	r0, r4
   d7106:	4629      	mov	r1, r5
   d7108:	ec55 4b17 	vmov	r4, r5, d7
   d710c:	f000 ff5a 	bl	d7fc4 <__aeabi_dsub>
   d7110:	4602      	mov	r2, r0
   d7112:	460b      	mov	r3, r1
   d7114:	4650      	mov	r0, sl
   d7116:	4659      	mov	r1, fp
   d7118:	f000 ff54 	bl	d7fc4 <__aeabi_dsub>
   d711c:	4642      	mov	r2, r8
   d711e:	464b      	mov	r3, r9
   d7120:	f001 f908 	bl	d8334 <__aeabi_dmul>
   d7124:	4602      	mov	r2, r0
   d7126:	460b      	mov	r3, r1
   d7128:	4620      	mov	r0, r4
   d712a:	4629      	mov	r1, r5
   d712c:	f000 ff4a 	bl	d7fc4 <__aeabi_dsub>
   d7130:	ec53 2b19 	vmov	r2, r3, d9
   d7134:	f001 f8fe 	bl	d8334 <__aeabi_dmul>
   d7138:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d713c:	4604      	mov	r4, r0
   d713e:	460d      	mov	r5, r1
   d7140:	4652      	mov	r2, sl
   d7142:	465b      	mov	r3, fp
   d7144:	4650      	mov	r0, sl
   d7146:	4659      	mov	r1, fp
   d7148:	f001 f8f4 	bl	d8334 <__aeabi_dmul>
   d714c:	a380      	add	r3, pc, #512	; (adr r3, d7350 <__ieee754_pow+0x560>)
   d714e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7152:	ec45 4b1a 	vmov	d10, r4, r5
   d7156:	4604      	mov	r4, r0
   d7158:	460d      	mov	r5, r1
   d715a:	f001 f8eb 	bl	d8334 <__aeabi_dmul>
   d715e:	a37e      	add	r3, pc, #504	; (adr r3, d7358 <__ieee754_pow+0x568>)
   d7160:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7164:	f000 ff30 	bl	d7fc8 <__adddf3>
   d7168:	4622      	mov	r2, r4
   d716a:	462b      	mov	r3, r5
   d716c:	f001 f8e2 	bl	d8334 <__aeabi_dmul>
   d7170:	a37b      	add	r3, pc, #492	; (adr r3, d7360 <__ieee754_pow+0x570>)
   d7172:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7176:	f000 ff27 	bl	d7fc8 <__adddf3>
   d717a:	4622      	mov	r2, r4
   d717c:	462b      	mov	r3, r5
   d717e:	f001 f8d9 	bl	d8334 <__aeabi_dmul>
   d7182:	a379      	add	r3, pc, #484	; (adr r3, d7368 <__ieee754_pow+0x578>)
   d7184:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7188:	f000 ff1e 	bl	d7fc8 <__adddf3>
   d718c:	4622      	mov	r2, r4
   d718e:	462b      	mov	r3, r5
   d7190:	f001 f8d0 	bl	d8334 <__aeabi_dmul>
   d7194:	a376      	add	r3, pc, #472	; (adr r3, d7370 <__ieee754_pow+0x580>)
   d7196:	e9d3 2300 	ldrd	r2, r3, [r3]
   d719a:	f000 ff15 	bl	d7fc8 <__adddf3>
   d719e:	4622      	mov	r2, r4
   d71a0:	462b      	mov	r3, r5
   d71a2:	f001 f8c7 	bl	d8334 <__aeabi_dmul>
   d71a6:	a374      	add	r3, pc, #464	; (adr r3, d7378 <__ieee754_pow+0x588>)
   d71a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d71ac:	f000 ff0c 	bl	d7fc8 <__adddf3>
   d71b0:	4622      	mov	r2, r4
   d71b2:	462b      	mov	r3, r5
   d71b4:	4604      	mov	r4, r0
   d71b6:	460d      	mov	r5, r1
   d71b8:	4610      	mov	r0, r2
   d71ba:	4619      	mov	r1, r3
   d71bc:	f001 f8ba 	bl	d8334 <__aeabi_dmul>
   d71c0:	4602      	mov	r2, r0
   d71c2:	460b      	mov	r3, r1
   d71c4:	4620      	mov	r0, r4
   d71c6:	4629      	mov	r1, r5
   d71c8:	f001 f8b4 	bl	d8334 <__aeabi_dmul>
   d71cc:	4642      	mov	r2, r8
   d71ce:	4604      	mov	r4, r0
   d71d0:	460d      	mov	r5, r1
   d71d2:	464b      	mov	r3, r9
   d71d4:	4650      	mov	r0, sl
   d71d6:	4659      	mov	r1, fp
   d71d8:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d71dc:	f000 fef4 	bl	d7fc8 <__adddf3>
   d71e0:	ec53 2b1a 	vmov	r2, r3, d10
   d71e4:	f001 f8a6 	bl	d8334 <__aeabi_dmul>
   d71e8:	4622      	mov	r2, r4
   d71ea:	462b      	mov	r3, r5
   d71ec:	f000 feec 	bl	d7fc8 <__adddf3>
   d71f0:	4642      	mov	r2, r8
   d71f2:	4604      	mov	r4, r0
   d71f4:	460d      	mov	r5, r1
   d71f6:	464b      	mov	r3, r9
   d71f8:	4640      	mov	r0, r8
   d71fa:	4649      	mov	r1, r9
   d71fc:	f001 f89a 	bl	d8334 <__aeabi_dmul>
   d7200:	ec45 4b19 	vmov	d9, r4, r5
   d7204:	4b69      	ldr	r3, [pc, #420]	; (d73ac <__ieee754_pow+0x5bc>)
   d7206:	2200      	movs	r2, #0
   d7208:	4682      	mov	sl, r0
   d720a:	468b      	mov	fp, r1
   d720c:	f000 fedc 	bl	d7fc8 <__adddf3>
   d7210:	ec53 2b19 	vmov	r2, r3, d9
   d7214:	f000 fed8 	bl	d7fc8 <__adddf3>
   d7218:	9c00      	ldr	r4, [sp, #0]
   d721a:	460d      	mov	r5, r1
   d721c:	4622      	mov	r2, r4
   d721e:	462b      	mov	r3, r5
   d7220:	4640      	mov	r0, r8
   d7222:	4649      	mov	r1, r9
   d7224:	f001 f886 	bl	d8334 <__aeabi_dmul>
   d7228:	4b60      	ldr	r3, [pc, #384]	; (d73ac <__ieee754_pow+0x5bc>)
   d722a:	4680      	mov	r8, r0
   d722c:	4689      	mov	r9, r1
   d722e:	2200      	movs	r2, #0
   d7230:	4620      	mov	r0, r4
   d7232:	4629      	mov	r1, r5
   d7234:	f000 fec6 	bl	d7fc4 <__aeabi_dsub>
   d7238:	4652      	mov	r2, sl
   d723a:	465b      	mov	r3, fp
   d723c:	f000 fec2 	bl	d7fc4 <__aeabi_dsub>
   d7240:	4602      	mov	r2, r0
   d7242:	460b      	mov	r3, r1
   d7244:	ec51 0b19 	vmov	r0, r1, d9
   d7248:	f000 febc 	bl	d7fc4 <__aeabi_dsub>
   d724c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7250:	f001 f870 	bl	d8334 <__aeabi_dmul>
   d7254:	ec49 8b18 	vmov	d8, r8, r9
   d7258:	4622      	mov	r2, r4
   d725a:	4680      	mov	r8, r0
   d725c:	4689      	mov	r9, r1
   d725e:	462b      	mov	r3, r5
   d7260:	ec51 0b1a 	vmov	r0, r1, d10
   d7264:	f001 f866 	bl	d8334 <__aeabi_dmul>
   d7268:	4602      	mov	r2, r0
   d726a:	460b      	mov	r3, r1
   d726c:	4640      	mov	r0, r8
   d726e:	4649      	mov	r1, r9
   d7270:	f000 feaa 	bl	d7fc8 <__adddf3>
   d7274:	4682      	mov	sl, r0
   d7276:	468b      	mov	fp, r1
   d7278:	4652      	mov	r2, sl
   d727a:	465b      	mov	r3, fp
   d727c:	ec51 0b18 	vmov	r0, r1, d8
   d7280:	f000 fea2 	bl	d7fc8 <__adddf3>
   d7284:	9c00      	ldr	r4, [sp, #0]
   d7286:	a33e      	add	r3, pc, #248	; (adr r3, d7380 <__ieee754_pow+0x590>)
   d7288:	e9d3 2300 	ldrd	r2, r3, [r3]
   d728c:	4620      	mov	r0, r4
   d728e:	460d      	mov	r5, r1
   d7290:	f001 f850 	bl	d8334 <__aeabi_dmul>
   d7294:	ec53 2b18 	vmov	r2, r3, d8
   d7298:	4680      	mov	r8, r0
   d729a:	4689      	mov	r9, r1
   d729c:	4620      	mov	r0, r4
   d729e:	4629      	mov	r1, r5
   d72a0:	f000 fe90 	bl	d7fc4 <__aeabi_dsub>
   d72a4:	4602      	mov	r2, r0
   d72a6:	460b      	mov	r3, r1
   d72a8:	4650      	mov	r0, sl
   d72aa:	4659      	mov	r1, fp
   d72ac:	f000 fe8a 	bl	d7fc4 <__aeabi_dsub>
   d72b0:	a335      	add	r3, pc, #212	; (adr r3, d7388 <__ieee754_pow+0x598>)
   d72b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d72b6:	f001 f83d 	bl	d8334 <__aeabi_dmul>
   d72ba:	ec49 8b19 	vmov	d9, r8, r9
   d72be:	a334      	add	r3, pc, #208	; (adr r3, d7390 <__ieee754_pow+0x5a0>)
   d72c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d72c4:	4680      	mov	r8, r0
   d72c6:	4689      	mov	r9, r1
   d72c8:	4620      	mov	r0, r4
   d72ca:	4629      	mov	r1, r5
   d72cc:	f001 f832 	bl	d8334 <__aeabi_dmul>
   d72d0:	4602      	mov	r2, r0
   d72d2:	460b      	mov	r3, r1
   d72d4:	4640      	mov	r0, r8
   d72d6:	4649      	mov	r1, r9
   d72d8:	f000 fe76 	bl	d7fc8 <__adddf3>
   d72dc:	ec53 2b1c 	vmov	r2, r3, d12
   d72e0:	f000 fe72 	bl	d7fc8 <__adddf3>
   d72e4:	4682      	mov	sl, r0
   d72e6:	9807      	ldr	r0, [sp, #28]
   d72e8:	468b      	mov	fp, r1
   d72ea:	f000 ffb9 	bl	d8260 <__aeabi_i2d>
   d72ee:	4652      	mov	r2, sl
   d72f0:	4680      	mov	r8, r0
   d72f2:	4689      	mov	r9, r1
   d72f4:	465b      	mov	r3, fp
   d72f6:	ec51 0b19 	vmov	r0, r1, d9
   d72fa:	f000 fe65 	bl	d7fc8 <__adddf3>
   d72fe:	ec53 2b1b 	vmov	r2, r3, d11
   d7302:	f000 fe61 	bl	d7fc8 <__adddf3>
   d7306:	4642      	mov	r2, r8
   d7308:	464b      	mov	r3, r9
   d730a:	f000 fe5d 	bl	d7fc8 <__adddf3>
   d730e:	9c00      	ldr	r4, [sp, #0]
   d7310:	4642      	mov	r2, r8
   d7312:	464b      	mov	r3, r9
   d7314:	4620      	mov	r0, r4
   d7316:	460d      	mov	r5, r1
   d7318:	f000 fe54 	bl	d7fc4 <__aeabi_dsub>
   d731c:	ec53 2b1b 	vmov	r2, r3, d11
   d7320:	f000 fe50 	bl	d7fc4 <__aeabi_dsub>
   d7324:	ec53 2b19 	vmov	r2, r3, d9
   d7328:	f000 fe4c 	bl	d7fc4 <__aeabi_dsub>
   d732c:	4602      	mov	r2, r0
   d732e:	460b      	mov	r3, r1
   d7330:	4650      	mov	r0, sl
   d7332:	4659      	mov	r1, fp
   d7334:	f000 fe46 	bl	d7fc4 <__aeabi_dsub>
   d7338:	4682      	mov	sl, r0
   d733a:	468b      	mov	fp, r1
   d733c:	e038      	b.n	d73b0 <__ieee754_pow+0x5c0>
   d733e:	bf00      	nop
	...
   d734c:	3ff00000 	.word	0x3ff00000
   d7350:	4a454eef 	.word	0x4a454eef
   d7354:	3fca7e28 	.word	0x3fca7e28
   d7358:	93c9db65 	.word	0x93c9db65
   d735c:	3fcd864a 	.word	0x3fcd864a
   d7360:	a91d4101 	.word	0xa91d4101
   d7364:	3fd17460 	.word	0x3fd17460
   d7368:	518f264d 	.word	0x518f264d
   d736c:	3fd55555 	.word	0x3fd55555
   d7370:	db6fabff 	.word	0xdb6fabff
   d7374:	3fdb6db6 	.word	0x3fdb6db6
   d7378:	33333303 	.word	0x33333303
   d737c:	3fe33333 	.word	0x3fe33333
   d7380:	e0000000 	.word	0xe0000000
   d7384:	3feec709 	.word	0x3feec709
   d7388:	dc3a03fd 	.word	0xdc3a03fd
   d738c:	3feec709 	.word	0x3feec709
   d7390:	145b01f5 	.word	0x145b01f5
   d7394:	be3e2fe0 	.word	0xbe3e2fe0
   d7398:	7ff00000 	.word	0x7ff00000
   d739c:	43400000 	.word	0x43400000
   d73a0:	0003988e 	.word	0x0003988e
   d73a4:	000bb679 	.word	0x000bb679
   d73a8:	3ff00000 	.word	0x3ff00000
   d73ac:	40080000 	.word	0x40080000
   d73b0:	9b03      	ldr	r3, [sp, #12]
   d73b2:	9a06      	ldr	r2, [sp, #24]
   d73b4:	3b01      	subs	r3, #1
   d73b6:	4313      	orrs	r3, r2
   d73b8:	f040 8178 	bne.w	d76ac <__ieee754_pow+0x8bc>
   d73bc:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d76d0 <__ieee754_pow+0x8e0>
   d73c0:	eeb0 9a47 	vmov.f32	s18, s14
   d73c4:	eef0 9a67 	vmov.f32	s19, s15
   d73c8:	2300      	movs	r3, #0
   d73ca:	e9cd 6700 	strd	r6, r7, [sp]
   d73ce:	9300      	str	r3, [sp, #0]
   d73d0:	e9dd 8900 	ldrd	r8, r9, [sp]
   d73d4:	4630      	mov	r0, r6
   d73d6:	4642      	mov	r2, r8
   d73d8:	4639      	mov	r1, r7
   d73da:	464b      	mov	r3, r9
   d73dc:	f000 fdf2 	bl	d7fc4 <__aeabi_dsub>
   d73e0:	4622      	mov	r2, r4
   d73e2:	462b      	mov	r3, r5
   d73e4:	f000 ffa6 	bl	d8334 <__aeabi_dmul>
   d73e8:	4632      	mov	r2, r6
   d73ea:	463b      	mov	r3, r7
   d73ec:	4606      	mov	r6, r0
   d73ee:	460f      	mov	r7, r1
   d73f0:	4650      	mov	r0, sl
   d73f2:	4659      	mov	r1, fp
   d73f4:	f000 ff9e 	bl	d8334 <__aeabi_dmul>
   d73f8:	4602      	mov	r2, r0
   d73fa:	460b      	mov	r3, r1
   d73fc:	4630      	mov	r0, r6
   d73fe:	4639      	mov	r1, r7
   d7400:	f000 fde2 	bl	d7fc8 <__adddf3>
   d7404:	4642      	mov	r2, r8
   d7406:	4682      	mov	sl, r0
   d7408:	468b      	mov	fp, r1
   d740a:	464b      	mov	r3, r9
   d740c:	4620      	mov	r0, r4
   d740e:	4629      	mov	r1, r5
   d7410:	f000 ff90 	bl	d8334 <__aeabi_dmul>
   d7414:	4606      	mov	r6, r0
   d7416:	460f      	mov	r7, r1
   d7418:	463b      	mov	r3, r7
   d741a:	4650      	mov	r0, sl
   d741c:	4659      	mov	r1, fp
   d741e:	4632      	mov	r2, r6
   d7420:	f000 fdd2 	bl	d7fc8 <__adddf3>
   d7424:	4bc4      	ldr	r3, [pc, #784]	; (d7738 <__ieee754_pow+0x948>)
   d7426:	4299      	cmp	r1, r3
   d7428:	4604      	mov	r4, r0
   d742a:	460d      	mov	r5, r1
   d742c:	4688      	mov	r8, r1
   d742e:	f340 8117 	ble.w	d7660 <__ieee754_pow+0x870>
   d7432:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7436:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d743a:	4303      	orrs	r3, r0
   d743c:	f040 822a 	bne.w	d7894 <__ieee754_pow+0xaa4>
   d7440:	a3a5      	add	r3, pc, #660	; (adr r3, d76d8 <__ieee754_pow+0x8e8>)
   d7442:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7446:	4650      	mov	r0, sl
   d7448:	4659      	mov	r1, fp
   d744a:	f000 fdbd 	bl	d7fc8 <__adddf3>
   d744e:	4632      	mov	r2, r6
   d7450:	ec41 0b18 	vmov	d8, r0, r1
   d7454:	463b      	mov	r3, r7
   d7456:	4620      	mov	r0, r4
   d7458:	4629      	mov	r1, r5
   d745a:	f000 fdb3 	bl	d7fc4 <__aeabi_dsub>
   d745e:	4602      	mov	r2, r0
   d7460:	460b      	mov	r3, r1
   d7462:	ec51 0b18 	vmov	r0, r1, d8
   d7466:	f001 f9f5 	bl	d8854 <__aeabi_dcmpgt>
   d746a:	2800      	cmp	r0, #0
   d746c:	f040 8212 	bne.w	d7894 <__ieee754_pow+0xaa4>
   d7470:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d7474:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7478:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d747c:	fa42 f303 	asr.w	r3, r2, r3
   d7480:	4443      	add	r3, r8
   d7482:	49ae      	ldr	r1, [pc, #696]	; (d773c <__ieee754_pow+0x94c>)
   d7484:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7488:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d748c:	fa41 fc02 	asr.w	ip, r1, r2
   d7490:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d7494:	ea23 010c 	bic.w	r1, r3, ip
   d7498:	f1c2 0414 	rsb	r4, r2, #20
   d749c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d74a0:	f1b8 0f00 	cmp.w	r8, #0
   d74a4:	460b      	mov	r3, r1
   d74a6:	fa45 f104 	asr.w	r1, r5, r4
   d74aa:	9103      	str	r1, [sp, #12]
   d74ac:	f04f 0000 	mov.w	r0, #0
   d74b0:	bfb8      	it	lt
   d74b2:	4249      	neglt	r1, r1
   d74b4:	4602      	mov	r2, r0
   d74b6:	bfb8      	it	lt
   d74b8:	9103      	strlt	r1, [sp, #12]
   d74ba:	4630      	mov	r0, r6
   d74bc:	4639      	mov	r1, r7
   d74be:	f000 fd81 	bl	d7fc4 <__aeabi_dsub>
   d74c2:	4606      	mov	r6, r0
   d74c4:	460f      	mov	r7, r1
   d74c6:	463b      	mov	r3, r7
   d74c8:	4650      	mov	r0, sl
   d74ca:	4659      	mov	r1, fp
   d74cc:	4632      	mov	r2, r6
   d74ce:	f000 fd7b 	bl	d7fc8 <__adddf3>
   d74d2:	9b03      	ldr	r3, [sp, #12]
   d74d4:	051b      	lsls	r3, r3, #20
   d74d6:	9300      	str	r3, [sp, #0]
   d74d8:	460d      	mov	r5, r1
   d74da:	2400      	movs	r4, #0
   d74dc:	a380      	add	r3, pc, #512	; (adr r3, d76e0 <__ieee754_pow+0x8f0>)
   d74de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74e2:	4620      	mov	r0, r4
   d74e4:	4629      	mov	r1, r5
   d74e6:	f000 ff25 	bl	d8334 <__aeabi_dmul>
   d74ea:	4632      	mov	r2, r6
   d74ec:	4680      	mov	r8, r0
   d74ee:	4689      	mov	r9, r1
   d74f0:	463b      	mov	r3, r7
   d74f2:	4620      	mov	r0, r4
   d74f4:	4629      	mov	r1, r5
   d74f6:	f000 fd65 	bl	d7fc4 <__aeabi_dsub>
   d74fa:	4602      	mov	r2, r0
   d74fc:	460b      	mov	r3, r1
   d74fe:	4650      	mov	r0, sl
   d7500:	4659      	mov	r1, fp
   d7502:	f000 fd5f 	bl	d7fc4 <__aeabi_dsub>
   d7506:	a378      	add	r3, pc, #480	; (adr r3, d76e8 <__ieee754_pow+0x8f8>)
   d7508:	e9d3 2300 	ldrd	r2, r3, [r3]
   d750c:	f000 ff12 	bl	d8334 <__aeabi_dmul>
   d7510:	a377      	add	r3, pc, #476	; (adr r3, d76f0 <__ieee754_pow+0x900>)
   d7512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7516:	4606      	mov	r6, r0
   d7518:	460f      	mov	r7, r1
   d751a:	4620      	mov	r0, r4
   d751c:	4629      	mov	r1, r5
   d751e:	f000 ff09 	bl	d8334 <__aeabi_dmul>
   d7522:	4602      	mov	r2, r0
   d7524:	460b      	mov	r3, r1
   d7526:	4630      	mov	r0, r6
   d7528:	4639      	mov	r1, r7
   d752a:	f000 fd4d 	bl	d7fc8 <__adddf3>
   d752e:	4606      	mov	r6, r0
   d7530:	460f      	mov	r7, r1
   d7532:	4632      	mov	r2, r6
   d7534:	463b      	mov	r3, r7
   d7536:	4640      	mov	r0, r8
   d7538:	4649      	mov	r1, r9
   d753a:	f000 fd45 	bl	d7fc8 <__adddf3>
   d753e:	4642      	mov	r2, r8
   d7540:	464b      	mov	r3, r9
   d7542:	4604      	mov	r4, r0
   d7544:	460d      	mov	r5, r1
   d7546:	f000 fd3d 	bl	d7fc4 <__aeabi_dsub>
   d754a:	4602      	mov	r2, r0
   d754c:	460b      	mov	r3, r1
   d754e:	4630      	mov	r0, r6
   d7550:	4639      	mov	r1, r7
   d7552:	f000 fd37 	bl	d7fc4 <__aeabi_dsub>
   d7556:	4622      	mov	r2, r4
   d7558:	4682      	mov	sl, r0
   d755a:	468b      	mov	fp, r1
   d755c:	462b      	mov	r3, r5
   d755e:	4620      	mov	r0, r4
   d7560:	4629      	mov	r1, r5
   d7562:	f000 fee7 	bl	d8334 <__aeabi_dmul>
   d7566:	a364      	add	r3, pc, #400	; (adr r3, d76f8 <__ieee754_pow+0x908>)
   d7568:	e9d3 2300 	ldrd	r2, r3, [r3]
   d756c:	4606      	mov	r6, r0
   d756e:	460f      	mov	r7, r1
   d7570:	f000 fee0 	bl	d8334 <__aeabi_dmul>
   d7574:	a362      	add	r3, pc, #392	; (adr r3, d7700 <__ieee754_pow+0x910>)
   d7576:	e9d3 2300 	ldrd	r2, r3, [r3]
   d757a:	f000 fd23 	bl	d7fc4 <__aeabi_dsub>
   d757e:	4632      	mov	r2, r6
   d7580:	463b      	mov	r3, r7
   d7582:	f000 fed7 	bl	d8334 <__aeabi_dmul>
   d7586:	a360      	add	r3, pc, #384	; (adr r3, d7708 <__ieee754_pow+0x918>)
   d7588:	e9d3 2300 	ldrd	r2, r3, [r3]
   d758c:	f000 fd1c 	bl	d7fc8 <__adddf3>
   d7590:	4632      	mov	r2, r6
   d7592:	463b      	mov	r3, r7
   d7594:	f000 fece 	bl	d8334 <__aeabi_dmul>
   d7598:	a35d      	add	r3, pc, #372	; (adr r3, d7710 <__ieee754_pow+0x920>)
   d759a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d759e:	f000 fd11 	bl	d7fc4 <__aeabi_dsub>
   d75a2:	4632      	mov	r2, r6
   d75a4:	463b      	mov	r3, r7
   d75a6:	f000 fec5 	bl	d8334 <__aeabi_dmul>
   d75aa:	a35b      	add	r3, pc, #364	; (adr r3, d7718 <__ieee754_pow+0x928>)
   d75ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75b0:	f000 fd0a 	bl	d7fc8 <__adddf3>
   d75b4:	4632      	mov	r2, r6
   d75b6:	463b      	mov	r3, r7
   d75b8:	f000 febc 	bl	d8334 <__aeabi_dmul>
   d75bc:	4602      	mov	r2, r0
   d75be:	460b      	mov	r3, r1
   d75c0:	4620      	mov	r0, r4
   d75c2:	4629      	mov	r1, r5
   d75c4:	f000 fcfe 	bl	d7fc4 <__aeabi_dsub>
   d75c8:	4606      	mov	r6, r0
   d75ca:	460f      	mov	r7, r1
   d75cc:	4632      	mov	r2, r6
   d75ce:	463b      	mov	r3, r7
   d75d0:	4620      	mov	r0, r4
   d75d2:	4629      	mov	r1, r5
   d75d4:	f000 feae 	bl	d8334 <__aeabi_dmul>
   d75d8:	2200      	movs	r2, #0
   d75da:	4680      	mov	r8, r0
   d75dc:	4689      	mov	r9, r1
   d75de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d75e2:	4630      	mov	r0, r6
   d75e4:	4639      	mov	r1, r7
   d75e6:	f000 fced 	bl	d7fc4 <__aeabi_dsub>
   d75ea:	4602      	mov	r2, r0
   d75ec:	460b      	mov	r3, r1
   d75ee:	4640      	mov	r0, r8
   d75f0:	4649      	mov	r1, r9
   d75f2:	f000 ffc9 	bl	d8588 <__aeabi_ddiv>
   d75f6:	4652      	mov	r2, sl
   d75f8:	4606      	mov	r6, r0
   d75fa:	460f      	mov	r7, r1
   d75fc:	465b      	mov	r3, fp
   d75fe:	4620      	mov	r0, r4
   d7600:	4629      	mov	r1, r5
   d7602:	f000 fe97 	bl	d8334 <__aeabi_dmul>
   d7606:	4652      	mov	r2, sl
   d7608:	465b      	mov	r3, fp
   d760a:	f000 fcdd 	bl	d7fc8 <__adddf3>
   d760e:	4602      	mov	r2, r0
   d7610:	460b      	mov	r3, r1
   d7612:	4630      	mov	r0, r6
   d7614:	4639      	mov	r1, r7
   d7616:	f000 fcd5 	bl	d7fc4 <__aeabi_dsub>
   d761a:	4622      	mov	r2, r4
   d761c:	462b      	mov	r3, r5
   d761e:	f000 fcd1 	bl	d7fc4 <__aeabi_dsub>
   d7622:	4602      	mov	r2, r0
   d7624:	460b      	mov	r3, r1
   d7626:	2000      	movs	r0, #0
   d7628:	4945      	ldr	r1, [pc, #276]	; (d7740 <__ieee754_pow+0x950>)
   d762a:	f000 fccb 	bl	d7fc4 <__aeabi_dsub>
   d762e:	460b      	mov	r3, r1
   d7630:	9900      	ldr	r1, [sp, #0]
   d7632:	4419      	add	r1, r3
   d7634:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7638:	4602      	mov	r2, r0
   d763a:	f2c0 8169 	blt.w	d7910 <__ieee754_pow+0xb20>
   d763e:	4610      	mov	r0, r2
   d7640:	ec53 2b19 	vmov	r2, r3, d9
   d7644:	f000 fe76 	bl	d8334 <__aeabi_dmul>
   d7648:	e9cd 0100 	strd	r0, r1, [sp]
   d764c:	e41e      	b.n	d6e8c <__ieee754_pow+0x9c>
   d764e:	f1bb 0f00 	cmp.w	fp, #0
   d7652:	f6ff ac95 	blt.w	d6f80 <__ieee754_pow+0x190>
   d7656:	ed9f 7b32 	vldr	d7, [pc, #200]	; d7720 <__ieee754_pow+0x930>
   d765a:	ed8d 7b00 	vstr	d7, [sp]
   d765e:	e415      	b.n	d6e8c <__ieee754_pow+0x9c>
   d7660:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d7748 <__ieee754_pow+0x958>
   d7664:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7668:	4563      	cmp	r3, ip
   d766a:	f340 810b 	ble.w	d7884 <__ieee754_pow+0xa94>
   d766e:	4b35      	ldr	r3, [pc, #212]	; (d7744 <__ieee754_pow+0x954>)
   d7670:	440b      	add	r3, r1
   d7672:	4303      	orrs	r3, r0
   d7674:	d10a      	bne.n	d768c <__ieee754_pow+0x89c>
   d7676:	4632      	mov	r2, r6
   d7678:	463b      	mov	r3, r7
   d767a:	f000 fca3 	bl	d7fc4 <__aeabi_dsub>
   d767e:	4652      	mov	r2, sl
   d7680:	465b      	mov	r3, fp
   d7682:	f001 f8dd 	bl	d8840 <__aeabi_dcmpge>
   d7686:	2800      	cmp	r0, #0
   d7688:	f43f aef2 	beq.w	d7470 <__ieee754_pow+0x680>
   d768c:	a326      	add	r3, pc, #152	; (adr r3, d7728 <__ieee754_pow+0x938>)
   d768e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7692:	ec51 0b19 	vmov	r0, r1, d9
   d7696:	f000 fe4d 	bl	d8334 <__aeabi_dmul>
   d769a:	a323      	add	r3, pc, #140	; (adr r3, d7728 <__ieee754_pow+0x938>)
   d769c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d76a0:	f000 fe48 	bl	d8334 <__aeabi_dmul>
   d76a4:	e9cd 0100 	strd	r0, r1, [sp]
   d76a8:	f7ff bbf0 	b.w	d6e8c <__ieee754_pow+0x9c>
   d76ac:	ed9f 7b20 	vldr	d7, [pc, #128]	; d7730 <__ieee754_pow+0x940>
   d76b0:	eeb0 9a47 	vmov.f32	s18, s14
   d76b4:	eef0 9a67 	vmov.f32	s19, s15
   d76b8:	e686      	b.n	d73c8 <__ieee754_pow+0x5d8>
   d76ba:	f1bb 0f00 	cmp.w	fp, #0
   d76be:	daca      	bge.n	d7656 <__ieee754_pow+0x866>
   d76c0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d76c4:	9600      	str	r6, [sp, #0]
   d76c6:	9301      	str	r3, [sp, #4]
   d76c8:	f7ff bbe0 	b.w	d6e8c <__ieee754_pow+0x9c>
   d76cc:	f3af 8000 	nop.w
   d76d0:	00000000 	.word	0x00000000
   d76d4:	bff00000 	.word	0xbff00000
   d76d8:	652b82fe 	.word	0x652b82fe
   d76dc:	3c971547 	.word	0x3c971547
   d76e0:	00000000 	.word	0x00000000
   d76e4:	3fe62e43 	.word	0x3fe62e43
   d76e8:	fefa39ef 	.word	0xfefa39ef
   d76ec:	3fe62e42 	.word	0x3fe62e42
   d76f0:	0ca86c39 	.word	0x0ca86c39
   d76f4:	be205c61 	.word	0xbe205c61
   d76f8:	72bea4d0 	.word	0x72bea4d0
   d76fc:	3e663769 	.word	0x3e663769
   d7700:	c5d26bf1 	.word	0xc5d26bf1
   d7704:	3ebbbd41 	.word	0x3ebbbd41
   d7708:	af25de2c 	.word	0xaf25de2c
   d770c:	3f11566a 	.word	0x3f11566a
   d7710:	16bebd93 	.word	0x16bebd93
   d7714:	3f66c16c 	.word	0x3f66c16c
   d7718:	5555553e 	.word	0x5555553e
   d771c:	3fc55555 	.word	0x3fc55555
	...
   d7728:	c2f8f359 	.word	0xc2f8f359
   d772c:	01a56e1f 	.word	0x01a56e1f
   d7730:	00000000 	.word	0x00000000
   d7734:	3ff00000 	.word	0x3ff00000
   d7738:	408fffff 	.word	0x408fffff
   d773c:	000fffff 	.word	0x000fffff
   d7740:	3ff00000 	.word	0x3ff00000
   d7744:	3f6f3400 	.word	0x3f6f3400
   d7748:	4090cbff 	.word	0x4090cbff
   d774c:	4598      	cmp	r8, r3
   d774e:	f6ff af7e 	blt.w	d764e <__ieee754_pow+0x85e>
   d7752:	4b91      	ldr	r3, [pc, #580]	; (d7998 <__ieee754_pow+0xba8>)
   d7754:	4598      	cmp	r8, r3
   d7756:	f73f ac0f 	bgt.w	d6f78 <__ieee754_pow+0x188>
   d775a:	4b8f      	ldr	r3, [pc, #572]	; (d7998 <__ieee754_pow+0xba8>)
   d775c:	2200      	movs	r2, #0
   d775e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7762:	f000 fc2f 	bl	d7fc4 <__aeabi_dsub>
   d7766:	a378      	add	r3, pc, #480	; (adr r3, d7948 <__ieee754_pow+0xb58>)
   d7768:	e9d3 2300 	ldrd	r2, r3, [r3]
   d776c:	4604      	mov	r4, r0
   d776e:	460d      	mov	r5, r1
   d7770:	f000 fde0 	bl	d8334 <__aeabi_dmul>
   d7774:	a376      	add	r3, pc, #472	; (adr r3, d7950 <__ieee754_pow+0xb60>)
   d7776:	e9d3 2300 	ldrd	r2, r3, [r3]
   d777a:	4682      	mov	sl, r0
   d777c:	468b      	mov	fp, r1
   d777e:	4620      	mov	r0, r4
   d7780:	4629      	mov	r1, r5
   d7782:	f000 fdd7 	bl	d8334 <__aeabi_dmul>
   d7786:	4b85      	ldr	r3, [pc, #532]	; (d799c <__ieee754_pow+0xbac>)
   d7788:	4680      	mov	r8, r0
   d778a:	4689      	mov	r9, r1
   d778c:	2200      	movs	r2, #0
   d778e:	4620      	mov	r0, r4
   d7790:	4629      	mov	r1, r5
   d7792:	f000 fdcf 	bl	d8334 <__aeabi_dmul>
   d7796:	4602      	mov	r2, r0
   d7798:	460b      	mov	r3, r1
   d779a:	a16f      	add	r1, pc, #444	; (adr r1, d7958 <__ieee754_pow+0xb68>)
   d779c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d77a0:	f000 fc10 	bl	d7fc4 <__aeabi_dsub>
   d77a4:	4622      	mov	r2, r4
   d77a6:	462b      	mov	r3, r5
   d77a8:	f000 fdc4 	bl	d8334 <__aeabi_dmul>
   d77ac:	4602      	mov	r2, r0
   d77ae:	460b      	mov	r3, r1
   d77b0:	2000      	movs	r0, #0
   d77b2:	497b      	ldr	r1, [pc, #492]	; (d79a0 <__ieee754_pow+0xbb0>)
   d77b4:	f000 fc06 	bl	d7fc4 <__aeabi_dsub>
   d77b8:	4622      	mov	r2, r4
   d77ba:	462b      	mov	r3, r5
   d77bc:	4604      	mov	r4, r0
   d77be:	460d      	mov	r5, r1
   d77c0:	4610      	mov	r0, r2
   d77c2:	4619      	mov	r1, r3
   d77c4:	f000 fdb6 	bl	d8334 <__aeabi_dmul>
   d77c8:	4602      	mov	r2, r0
   d77ca:	460b      	mov	r3, r1
   d77cc:	4620      	mov	r0, r4
   d77ce:	4629      	mov	r1, r5
   d77d0:	f000 fdb0 	bl	d8334 <__aeabi_dmul>
   d77d4:	a362      	add	r3, pc, #392	; (adr r3, d7960 <__ieee754_pow+0xb70>)
   d77d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d77da:	f000 fdab 	bl	d8334 <__aeabi_dmul>
   d77de:	4602      	mov	r2, r0
   d77e0:	460b      	mov	r3, r1
   d77e2:	4640      	mov	r0, r8
   d77e4:	4649      	mov	r1, r9
   d77e6:	f000 fbed 	bl	d7fc4 <__aeabi_dsub>
   d77ea:	4680      	mov	r8, r0
   d77ec:	4689      	mov	r9, r1
   d77ee:	4650      	mov	r0, sl
   d77f0:	4659      	mov	r1, fp
   d77f2:	4642      	mov	r2, r8
   d77f4:	464b      	mov	r3, r9
   d77f6:	f000 fbe7 	bl	d7fc8 <__adddf3>
   d77fa:	2400      	movs	r4, #0
   d77fc:	4652      	mov	r2, sl
   d77fe:	465b      	mov	r3, fp
   d7800:	4620      	mov	r0, r4
   d7802:	460d      	mov	r5, r1
   d7804:	f000 fbde 	bl	d7fc4 <__aeabi_dsub>
   d7808:	4602      	mov	r2, r0
   d780a:	460b      	mov	r3, r1
   d780c:	4640      	mov	r0, r8
   d780e:	4649      	mov	r1, r9
   d7810:	f000 fbd8 	bl	d7fc4 <__aeabi_dsub>
   d7814:	4682      	mov	sl, r0
   d7816:	468b      	mov	fp, r1
   d7818:	e5ca      	b.n	d73b0 <__ieee754_pow+0x5c0>
   d781a:	ed9f 7b53 	vldr	d7, [pc, #332]	; d7968 <__ieee754_pow+0xb78>
   d781e:	eeb0 ba47 	vmov.f32	s22, s14
   d7822:	eef0 ba67 	vmov.f32	s23, s15
   d7826:	eeb0 ca47 	vmov.f32	s24, s14
   d782a:	eef0 ca67 	vmov.f32	s25, s15
   d782e:	ed9f 7b50 	vldr	d7, [pc, #320]	; d7970 <__ieee754_pow+0xb80>
   d7832:	f04f 0900 	mov.w	r9, #0
   d7836:	ec54 3b17 	vmov	r3, r4, d7
   d783a:	e41d      	b.n	d7078 <__ieee754_pow+0x288>
   d783c:	2000      	movs	r0, #0
   d783e:	f7ff bbf3 	b.w	d7028 <__ieee754_pow+0x238>
   d7842:	4955      	ldr	r1, [pc, #340]	; (d7998 <__ieee754_pow+0xba8>)
   d7844:	4622      	mov	r2, r4
   d7846:	462b      	mov	r3, r5
   d7848:	2000      	movs	r0, #0
   d784a:	f000 fe9d 	bl	d8588 <__aeabi_ddiv>
   d784e:	e9cd 0100 	strd	r0, r1, [sp]
   d7852:	f7ff bb1b 	b.w	d6e8c <__ieee754_pow+0x9c>
   d7856:	4622      	mov	r2, r4
   d7858:	462b      	mov	r3, r5
   d785a:	4620      	mov	r0, r4
   d785c:	4629      	mov	r1, r5
   d785e:	f000 fd69 	bl	d8334 <__aeabi_dmul>
   d7862:	e9cd 0100 	strd	r0, r1, [sp]
   d7866:	f7ff bb11 	b.w	d6e8c <__ieee754_pow+0x9c>
   d786a:	2b00      	cmp	r3, #0
   d786c:	d142      	bne.n	d78f4 <__ieee754_pow+0xb04>
   d786e:	f1c1 0114 	rsb	r1, r1, #20
   d7872:	fa4a f001 	asr.w	r0, sl, r1
   d7876:	fa00 f101 	lsl.w	r1, r0, r1
   d787a:	4551      	cmp	r1, sl
   d787c:	d05a      	beq.n	d7934 <__ieee754_pow+0xb44>
   d787e:	9303      	str	r3, [sp, #12]
   d7880:	f7ff bae0 	b.w	d6e44 <__ieee754_pow+0x54>
   d7884:	4a46      	ldr	r2, [pc, #280]	; (d79a0 <__ieee754_pow+0xbb0>)
   d7886:	4293      	cmp	r3, r2
   d7888:	dc5b      	bgt.n	d7942 <__ieee754_pow+0xb52>
   d788a:	e9dd 1200 	ldrd	r1, r2, [sp]
   d788e:	9100      	str	r1, [sp, #0]
   d7890:	9103      	str	r1, [sp, #12]
   d7892:	e622      	b.n	d74da <__ieee754_pow+0x6ea>
   d7894:	a338      	add	r3, pc, #224	; (adr r3, d7978 <__ieee754_pow+0xb88>)
   d7896:	e9d3 2300 	ldrd	r2, r3, [r3]
   d789a:	ec51 0b19 	vmov	r0, r1, d9
   d789e:	f000 fd49 	bl	d8334 <__aeabi_dmul>
   d78a2:	a335      	add	r3, pc, #212	; (adr r3, d7978 <__ieee754_pow+0xb88>)
   d78a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d78a8:	f000 fd44 	bl	d8334 <__aeabi_dmul>
   d78ac:	e9cd 0100 	strd	r0, r1, [sp]
   d78b0:	f7ff baec 	b.w	d6e8c <__ieee754_pow+0x9c>
   d78b4:	9b03      	ldr	r3, [sp, #12]
   d78b6:	2b01      	cmp	r3, #1
   d78b8:	f47f aae8 	bne.w	d6e8c <__ieee754_pow+0x9c>
   d78bc:	e9dd 2100 	ldrd	r2, r1, [sp]
   d78c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d78c4:	e9cd 2300 	strd	r2, r3, [sp]
   d78c8:	f7ff bae0 	b.w	d6e8c <__ieee754_pow+0x9c>
   d78cc:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d7980 <__ieee754_pow+0xb90>
   d78d0:	eeb0 ba47 	vmov.f32	s22, s14
   d78d4:	eef0 ba67 	vmov.f32	s23, s15
   d78d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d7988 <__ieee754_pow+0xb98>
   d78dc:	eeb0 ca47 	vmov.f32	s24, s14
   d78e0:	eef0 ca67 	vmov.f32	s25, s15
   d78e4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d7990 <__ieee754_pow+0xba0>
   d78e8:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d78ec:	ec54 3b17 	vmov	r3, r4, d7
   d78f0:	f7ff bbc2 	b.w	d7078 <__ieee754_pow+0x288>
   d78f4:	ec45 4b10 	vmov	d0, r4, r5
   d78f8:	9203      	str	r2, [sp, #12]
   d78fa:	f000 fa17 	bl	d7d2c <fabs>
   d78fe:	9a03      	ldr	r2, [sp, #12]
   d7900:	ed8d 0b00 	vstr	d0, [sp]
   d7904:	2a00      	cmp	r2, #0
   d7906:	f47f ab61 	bne.w	d6fcc <__ieee754_pow+0x1dc>
   d790a:	9203      	str	r2, [sp, #12]
   d790c:	f7ff baf5 	b.w	d6efa <__ieee754_pow+0x10a>
   d7910:	9803      	ldr	r0, [sp, #12]
   d7912:	ec43 2b10 	vmov	d0, r2, r3
   d7916:	f000 fabf 	bl	d7e98 <scalbn>
   d791a:	ec51 0b10 	vmov	r0, r1, d0
   d791e:	e68f      	b.n	d7640 <__ieee754_pow+0x850>
   d7920:	f000 0001 	and.w	r0, r0, #1
   d7924:	f1c0 0102 	rsb	r1, r0, #2
   d7928:	9103      	str	r1, [sp, #12]
   d792a:	2b00      	cmp	r3, #0
   d792c:	f43f aa8a 	beq.w	d6e44 <__ieee754_pow+0x54>
   d7930:	f7ff bada 	b.w	d6ee8 <__ieee754_pow+0xf8>
   d7934:	f000 0001 	and.w	r0, r0, #1
   d7938:	f1c0 0302 	rsb	r3, r0, #2
   d793c:	9303      	str	r3, [sp, #12]
   d793e:	f7ff ba81 	b.w	d6e44 <__ieee754_pow+0x54>
   d7942:	151b      	asrs	r3, r3, #20
   d7944:	e596      	b.n	d7474 <__ieee754_pow+0x684>
   d7946:	bf00      	nop
   d7948:	60000000 	.word	0x60000000
   d794c:	3ff71547 	.word	0x3ff71547
   d7950:	f85ddf44 	.word	0xf85ddf44
   d7954:	3e54ae0b 	.word	0x3e54ae0b
   d7958:	55555555 	.word	0x55555555
   d795c:	3fd55555 	.word	0x3fd55555
   d7960:	652b82fe 	.word	0x652b82fe
   d7964:	3ff71547 	.word	0x3ff71547
	...
   d7974:	3ff00000 	.word	0x3ff00000
   d7978:	8800759c 	.word	0x8800759c
   d797c:	7e37e43c 	.word	0x7e37e43c
   d7980:	40000000 	.word	0x40000000
   d7984:	3fe2b803 	.word	0x3fe2b803
   d7988:	43cfd006 	.word	0x43cfd006
   d798c:	3e4cfdeb 	.word	0x3e4cfdeb
   d7990:	00000000 	.word	0x00000000
   d7994:	3ff80000 	.word	0x3ff80000
   d7998:	3ff00000 	.word	0x3ff00000
   d799c:	3fd00000 	.word	0x3fd00000
   d79a0:	3fe00000 	.word	0x3fe00000

000d79a4 <__ieee754_sqrt>:
   d79a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79a8:	4a5f      	ldr	r2, [pc, #380]	; (d7b28 <__ieee754_sqrt+0x184>)
   d79aa:	ec57 6b10 	vmov	r6, r7, d0
   d79ae:	43ba      	bics	r2, r7
   d79b0:	f000 8098 	beq.w	d7ae4 <__ieee754_sqrt+0x140>
   d79b4:	2f00      	cmp	r7, #0
   d79b6:	ee10 4a10 	vmov	r4, s0
   d79ba:	463b      	mov	r3, r7
   d79bc:	dd4e      	ble.n	d7a5c <__ieee754_sqrt+0xb8>
   d79be:	1539      	asrs	r1, r7, #20
   d79c0:	d05b      	beq.n	d7a7a <__ieee754_sqrt+0xd6>
   d79c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d79c6:	07ca      	lsls	r2, r1, #31
   d79c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d79cc:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d79d0:	d403      	bmi.n	d79da <__ieee754_sqrt+0x36>
   d79d2:	005b      	lsls	r3, r3, #1
   d79d4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d79d8:	0064      	lsls	r4, r4, #1
   d79da:	0fe2      	lsrs	r2, r4, #31
   d79dc:	f04f 0c00 	mov.w	ip, #0
   d79e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d79e4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d79e8:	0064      	lsls	r4, r4, #1
   d79ea:	4666      	mov	r6, ip
   d79ec:	2516      	movs	r5, #22
   d79ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d79f2:	18b1      	adds	r1, r6, r2
   d79f4:	4299      	cmp	r1, r3
   d79f6:	dc02      	bgt.n	d79fe <__ieee754_sqrt+0x5a>
   d79f8:	1a5b      	subs	r3, r3, r1
   d79fa:	188e      	adds	r6, r1, r2
   d79fc:	4494      	add	ip, r2
   d79fe:	005b      	lsls	r3, r3, #1
   d7a00:	3d01      	subs	r5, #1
   d7a02:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7a06:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7a0a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7a0e:	d1f0      	bne.n	d79f2 <__ieee754_sqrt+0x4e>
   d7a10:	462f      	mov	r7, r5
   d7a12:	2020      	movs	r0, #32
   d7a14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d7a18:	e009      	b.n	d7a2e <__ieee754_sqrt+0x8a>
   d7a1a:	d03e      	beq.n	d7a9a <__ieee754_sqrt+0xf6>
   d7a1c:	0fe1      	lsrs	r1, r4, #31
   d7a1e:	3801      	subs	r0, #1
   d7a20:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7a24:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d7a28:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7a2c:	d03e      	beq.n	d7aac <__ieee754_sqrt+0x108>
   d7a2e:	42b3      	cmp	r3, r6
   d7a30:	eb02 0105 	add.w	r1, r2, r5
   d7a34:	ddf1      	ble.n	d7a1a <__ieee754_sqrt+0x76>
   d7a36:	2900      	cmp	r1, #0
   d7a38:	eb01 0502 	add.w	r5, r1, r2
   d7a3c:	db09      	blt.n	d7a52 <__ieee754_sqrt+0xae>
   d7a3e:	46b0      	mov	r8, r6
   d7a40:	1b9b      	subs	r3, r3, r6
   d7a42:	42a1      	cmp	r1, r4
   d7a44:	bf88      	it	hi
   d7a46:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d7a4a:	1a64      	subs	r4, r4, r1
   d7a4c:	4417      	add	r7, r2
   d7a4e:	4646      	mov	r6, r8
   d7a50:	e7e4      	b.n	d7a1c <__ieee754_sqrt+0x78>
   d7a52:	2d00      	cmp	r5, #0
   d7a54:	dbf3      	blt.n	d7a3e <__ieee754_sqrt+0x9a>
   d7a56:	f106 0801 	add.w	r8, r6, #1
   d7a5a:	e7f1      	b.n	d7a40 <__ieee754_sqrt+0x9c>
   d7a5c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d7a60:	4332      	orrs	r2, r6
   d7a62:	d036      	beq.n	d7ad2 <__ieee754_sqrt+0x12e>
   d7a64:	2f00      	cmp	r7, #0
   d7a66:	d14d      	bne.n	d7b04 <__ieee754_sqrt+0x160>
   d7a68:	4639      	mov	r1, r7
   d7a6a:	0ae2      	lsrs	r2, r4, #11
   d7a6c:	3915      	subs	r1, #21
   d7a6e:	0564      	lsls	r4, r4, #21
   d7a70:	4613      	mov	r3, r2
   d7a72:	2a00      	cmp	r2, #0
   d7a74:	d0f9      	beq.n	d7a6a <__ieee754_sqrt+0xc6>
   d7a76:	02d7      	lsls	r7, r2, #11
   d7a78:	d451      	bmi.n	d7b1e <__ieee754_sqrt+0x17a>
   d7a7a:	2000      	movs	r0, #0
   d7a7c:	005b      	lsls	r3, r3, #1
   d7a7e:	02de      	lsls	r6, r3, #11
   d7a80:	4605      	mov	r5, r0
   d7a82:	f100 0001 	add.w	r0, r0, #1
   d7a86:	d5f9      	bpl.n	d7a7c <__ieee754_sqrt+0xd8>
   d7a88:	461a      	mov	r2, r3
   d7a8a:	4623      	mov	r3, r4
   d7a8c:	4084      	lsls	r4, r0
   d7a8e:	f1c0 0020 	rsb	r0, r0, #32
   d7a92:	40c3      	lsrs	r3, r0
   d7a94:	4313      	orrs	r3, r2
   d7a96:	1b49      	subs	r1, r1, r5
   d7a98:	e793      	b.n	d79c2 <__ieee754_sqrt+0x1e>
   d7a9a:	42a1      	cmp	r1, r4
   d7a9c:	d8be      	bhi.n	d7a1c <__ieee754_sqrt+0x78>
   d7a9e:	2900      	cmp	r1, #0
   d7aa0:	eb01 0502 	add.w	r5, r1, r2
   d7aa4:	dbd5      	blt.n	d7a52 <__ieee754_sqrt+0xae>
   d7aa6:	4698      	mov	r8, r3
   d7aa8:	2300      	movs	r3, #0
   d7aaa:	e7ce      	b.n	d7a4a <__ieee754_sqrt+0xa6>
   d7aac:	4323      	orrs	r3, r4
   d7aae:	d112      	bne.n	d7ad6 <__ieee754_sqrt+0x132>
   d7ab0:	0878      	lsrs	r0, r7, #1
   d7ab2:	ea4f 016c 	mov.w	r1, ip, asr #1
   d7ab6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7aba:	f01c 0f01 	tst.w	ip, #1
   d7abe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d7ac2:	bf18      	it	ne
   d7ac4:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d7ac8:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d7acc:	4602      	mov	r2, r0
   d7ace:	ec43 2b10 	vmov	d0, r2, r3
   d7ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ad6:	1c7b      	adds	r3, r7, #1
   d7ad8:	bf16      	itet	ne
   d7ada:	1c78      	addne	r0, r7, #1
   d7adc:	f10c 0c01 	addeq.w	ip, ip, #1
   d7ae0:	0840      	lsrne	r0, r0, #1
   d7ae2:	e7e6      	b.n	d7ab2 <__ieee754_sqrt+0x10e>
   d7ae4:	ee10 2a10 	vmov	r2, s0
   d7ae8:	ee10 0a10 	vmov	r0, s0
   d7aec:	463b      	mov	r3, r7
   d7aee:	4639      	mov	r1, r7
   d7af0:	f000 fc20 	bl	d8334 <__aeabi_dmul>
   d7af4:	4632      	mov	r2, r6
   d7af6:	463b      	mov	r3, r7
   d7af8:	f000 fa66 	bl	d7fc8 <__adddf3>
   d7afc:	ec41 0b10 	vmov	d0, r0, r1
   d7b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7b04:	ee10 2a10 	vmov	r2, s0
   d7b08:	4630      	mov	r0, r6
   d7b0a:	4639      	mov	r1, r7
   d7b0c:	f000 fa5a 	bl	d7fc4 <__aeabi_dsub>
   d7b10:	4602      	mov	r2, r0
   d7b12:	460b      	mov	r3, r1
   d7b14:	f000 fd38 	bl	d8588 <__aeabi_ddiv>
   d7b18:	ec41 0b10 	vmov	d0, r0, r1
   d7b1c:	e7d9      	b.n	d7ad2 <__ieee754_sqrt+0x12e>
   d7b1e:	4623      	mov	r3, r4
   d7b20:	2020      	movs	r0, #32
   d7b22:	f04f 35ff 	mov.w	r5, #4294967295
   d7b26:	e7b4      	b.n	d7a92 <__ieee754_sqrt+0xee>
   d7b28:	7ff00000 	.word	0x7ff00000

000d7b2c <__ieee754_logf>:
   d7b2c:	ee10 3a10 	vmov	r3, s0
   d7b30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   d7b34:	d02d      	beq.n	d7b92 <__ieee754_logf+0x66>
   d7b36:	2b00      	cmp	r3, #0
   d7b38:	db32      	blt.n	d7ba0 <__ieee754_logf+0x74>
   d7b3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d7b3e:	da3f      	bge.n	d7bc0 <__ieee754_logf+0x94>
   d7b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   d7b44:	b430      	push	{r4, r5}
   d7b46:	db32      	blt.n	d7bae <__ieee754_logf+0x82>
   d7b48:	2500      	movs	r5, #0
   d7b4a:	4868      	ldr	r0, [pc, #416]	; (d7cec <__ieee754_logf+0x1c0>)
   d7b4c:	4c68      	ldr	r4, [pc, #416]	; (d7cf0 <__ieee754_logf+0x1c4>)
   d7b4e:	f3c3 0116 	ubfx	r1, r3, #0, #23
   d7b52:	4408      	add	r0, r1
   d7b54:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   d7b58:	15db      	asrs	r3, r3, #23
   d7b5a:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   d7b5e:	3b7f      	subs	r3, #127	; 0x7f
   d7b60:	430a      	orrs	r2, r1
   d7b62:	442b      	add	r3, r5
   d7b64:	ee00 2a10 	vmov	s0, r2
   d7b68:	f101 050f 	add.w	r5, r1, #15
   d7b6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d7b70:	402c      	ands	r4, r5
   d7b72:	ee30 0a67 	vsub.f32	s0, s0, s15
   d7b76:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   d7b7a:	bb24      	cbnz	r4, d7bc6 <__ieee754_logf+0x9a>
   d7b7c:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d7b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7b84:	d161      	bne.n	d7c4a <__ieee754_logf+0x11e>
   d7b86:	2b00      	cmp	r3, #0
   d7b88:	f040 8093 	bne.w	d7cb2 <__ieee754_logf+0x186>
   d7b8c:	ed9f 0a59 	vldr	s0, [pc, #356]	; d7cf4 <__ieee754_logf+0x1c8>
   d7b90:	e059      	b.n	d7c46 <__ieee754_logf+0x11a>
   d7b92:	ed9f 7a59 	vldr	s14, [pc, #356]	; d7cf8 <__ieee754_logf+0x1cc>
   d7b96:	eddf 7a57 	vldr	s15, [pc, #348]	; d7cf4 <__ieee754_logf+0x1c8>
   d7b9a:	ee87 0a27 	vdiv.f32	s0, s14, s15
   d7b9e:	4770      	bx	lr
   d7ba0:	ee70 7a40 	vsub.f32	s15, s0, s0
   d7ba4:	ed9f 7a53 	vldr	s14, [pc, #332]	; d7cf4 <__ieee754_logf+0x1c8>
   d7ba8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7bac:	4770      	bx	lr
   d7bae:	eddf 7a53 	vldr	s15, [pc, #332]	; d7cfc <__ieee754_logf+0x1d0>
   d7bb2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d7bb6:	f06f 0518 	mvn.w	r5, #24
   d7bba:	ee17 3a90 	vmov	r3, s15
   d7bbe:	e7c4      	b.n	d7b4a <__ieee754_logf+0x1e>
   d7bc0:	ee30 0a00 	vadd.f32	s0, s0, s0
   d7bc4:	4770      	bx	lr
   d7bc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d7bca:	ee30 7a07 	vadd.f32	s14, s0, s14
   d7bce:	ed9f 3a4c 	vldr	s6, [pc, #304]	; d7d00 <__ieee754_logf+0x1d4>
   d7bd2:	eddf 4a4c 	vldr	s9, [pc, #304]	; d7d04 <__ieee754_logf+0x1d8>
   d7bd6:	eddf 5a4c 	vldr	s11, [pc, #304]	; d7d08 <__ieee754_logf+0x1dc>
   d7bda:	eddf 3a4c 	vldr	s7, [pc, #304]	; d7d0c <__ieee754_logf+0x1e0>
   d7bde:	ed9f 5a4c 	vldr	s10, [pc, #304]	; d7d10 <__ieee754_logf+0x1e4>
   d7be2:	eddf 7a4c 	vldr	s15, [pc, #304]	; d7d14 <__ieee754_logf+0x1e8>
   d7be6:	eddf 6a4c 	vldr	s13, [pc, #304]	; d7d18 <__ieee754_logf+0x1ec>
   d7bea:	484c      	ldr	r0, [pc, #304]	; (d7d1c <__ieee754_logf+0x1f0>)
   d7bec:	ee80 4a07 	vdiv.f32	s8, s0, s14
   d7bf0:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   d7bf4:	4408      	add	r0, r1
   d7bf6:	f502 7222 	add.w	r2, r2, #648	; 0x288
   d7bfa:	4302      	orrs	r2, r0
   d7bfc:	2a00      	cmp	r2, #0
   d7bfe:	ee07 3a10 	vmov	s14, r3
   d7c02:	ee24 6a04 	vmul.f32	s12, s8, s8
   d7c06:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   d7c0a:	ee26 7a06 	vmul.f32	s14, s12, s12
   d7c0e:	eee7 4a03 	vfma.f32	s9, s14, s6
   d7c12:	eea7 5a23 	vfma.f32	s10, s14, s7
   d7c16:	eee4 5a87 	vfma.f32	s11, s9, s14
   d7c1a:	eee5 6a07 	vfma.f32	s13, s10, s14
   d7c1e:	eee5 7a87 	vfma.f32	s15, s11, s14
   d7c22:	ee67 7a86 	vmul.f32	s15, s15, s12
   d7c26:	eee6 7a87 	vfma.f32	s15, s13, s14
   d7c2a:	dd2b      	ble.n	d7c84 <__ieee754_logf+0x158>
   d7c2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d7c30:	ee20 7a07 	vmul.f32	s14, s0, s14
   d7c34:	ee27 7a00 	vmul.f32	s14, s14, s0
   d7c38:	bb53      	cbnz	r3, d7c90 <__ieee754_logf+0x164>
   d7c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
   d7c3e:	eea7 7ac4 	vfms.f32	s14, s15, s8
   d7c42:	ee30 0a47 	vsub.f32	s0, s0, s14
   d7c46:	bc30      	pop	{r4, r5}
   d7c48:	4770      	bx	lr
   d7c4a:	eddf 7a35 	vldr	s15, [pc, #212]	; d7d20 <__ieee754_logf+0x1f4>
   d7c4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d7c52:	eea0 7a67 	vfms.f32	s14, s0, s15
   d7c56:	eef0 7a47 	vmov.f32	s15, s14
   d7c5a:	ee20 7a00 	vmul.f32	s14, s0, s0
   d7c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
   d7c62:	2b00      	cmp	r3, #0
   d7c64:	d0ed      	beq.n	d7c42 <__ieee754_logf+0x116>
   d7c66:	ee07 3a90 	vmov	s15, r3
   d7c6a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; d7d24 <__ieee754_logf+0x1f8>
   d7c6e:	eddf 6a2e 	vldr	s13, [pc, #184]	; d7d28 <__ieee754_logf+0x1fc>
   d7c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c76:	eea7 7ac6 	vfms.f32	s14, s15, s12
   d7c7a:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7c7e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   d7c82:	e7e0      	b.n	d7c46 <__ieee754_logf+0x11a>
   d7c84:	bb13      	cbnz	r3, d7ccc <__ieee754_logf+0x1a0>
   d7c86:	ee70 7a67 	vsub.f32	s15, s0, s15
   d7c8a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   d7c8e:	e7da      	b.n	d7c46 <__ieee754_logf+0x11a>
   d7c90:	eddf 6a24 	vldr	s13, [pc, #144]	; d7d24 <__ieee754_logf+0x1f8>
   d7c94:	ed9f 6a24 	vldr	s12, [pc, #144]	; d7d28 <__ieee754_logf+0x1fc>
   d7c98:	ee77 7a87 	vadd.f32	s15, s15, s14
   d7c9c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   d7ca0:	eee7 6a84 	vfma.f32	s13, s15, s8
   d7ca4:	ee37 7a66 	vsub.f32	s14, s14, s13
   d7ca8:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7cac:	ee92 0a86 	vfnms.f32	s0, s5, s12
   d7cb0:	e7c9      	b.n	d7c46 <__ieee754_logf+0x11a>
   d7cb2:	ee07 3a90 	vmov	s15, r3
   d7cb6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d7d24 <__ieee754_logf+0x1f8>
   d7cba:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d7d28 <__ieee754_logf+0x1fc>
   d7cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7cc2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d7cc6:	eea7 0a87 	vfma.f32	s0, s15, s14
   d7cca:	e7bc      	b.n	d7c46 <__ieee754_logf+0x11a>
   d7ccc:	ed9f 7a15 	vldr	s14, [pc, #84]	; d7d24 <__ieee754_logf+0x1f8>
   d7cd0:	eddf 6a15 	vldr	s13, [pc, #84]	; d7d28 <__ieee754_logf+0x1fc>
   d7cd4:	ee70 7a67 	vsub.f32	s15, s0, s15
   d7cd8:	ee27 7a62 	vnmul.f32	s14, s14, s5
   d7cdc:	eea7 7a84 	vfma.f32	s14, s15, s8
   d7ce0:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7ce4:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   d7ce8:	e7ad      	b.n	d7c46 <__ieee754_logf+0x11a>
   d7cea:	bf00      	nop
   d7cec:	004afb20 	.word	0x004afb20
   d7cf0:	007ffff0 	.word	0x007ffff0
   d7cf4:	00000000 	.word	0x00000000
   d7cf8:	cc000000 	.word	0xcc000000
   d7cfc:	4c000000 	.word	0x4c000000
   d7d00:	3e178897 	.word	0x3e178897
   d7d04:	3e3a3325 	.word	0x3e3a3325
   d7d08:	3e924925 	.word	0x3e924925
   d7d0c:	3e1cd04f 	.word	0x3e1cd04f
   d7d10:	3e638e29 	.word	0x3e638e29
   d7d14:	3f2aaaab 	.word	0x3f2aaaab
   d7d18:	3ecccccd 	.word	0x3ecccccd
   d7d1c:	ffcf5c30 	.word	0xffcf5c30
   d7d20:	3eaaaaab 	.word	0x3eaaaaab
   d7d24:	3717f7d1 	.word	0x3717f7d1
   d7d28:	3f317180 	.word	0x3f317180

000d7d2c <fabs>:
   d7d2c:	ec51 0b10 	vmov	r0, r1, d0
   d7d30:	ee10 2a10 	vmov	r2, s0
   d7d34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7d38:	ec43 2b10 	vmov	d0, r2, r3
   d7d3c:	4770      	bx	lr
   d7d3e:	bf00      	nop

000d7d40 <finite>:
   d7d40:	b082      	sub	sp, #8
   d7d42:	ed8d 0b00 	vstr	d0, [sp]
   d7d46:	9801      	ldr	r0, [sp, #4]
   d7d48:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d7d4c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d7d50:	0fc0      	lsrs	r0, r0, #31
   d7d52:	b002      	add	sp, #8
   d7d54:	4770      	bx	lr
   d7d56:	bf00      	nop

000d7d58 <matherr>:
   d7d58:	2000      	movs	r0, #0
   d7d5a:	4770      	bx	lr
   d7d5c:	0000      	movs	r0, r0
	...

000d7d60 <nan>:
   d7d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7d68 <nan+0x8>
   d7d64:	4770      	bx	lr
   d7d66:	bf00      	nop
   d7d68:	00000000 	.word	0x00000000
   d7d6c:	7ff80000 	.word	0x7ff80000

000d7d70 <rint>:
   d7d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d72:	ec53 2b10 	vmov	r2, r3, d0
   d7d76:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d7d7a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d7d7e:	2813      	cmp	r0, #19
   d7d80:	ee10 5a10 	vmov	r5, s0
   d7d84:	b083      	sub	sp, #12
   d7d86:	4619      	mov	r1, r3
   d7d88:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d7d8c:	dc31      	bgt.n	d7df2 <rint+0x82>
   d7d8e:	2800      	cmp	r0, #0
   d7d90:	db4c      	blt.n	d7e2c <rint+0xbc>
   d7d92:	4e3e      	ldr	r6, [pc, #248]	; (d7e8c <rint+0x11c>)
   d7d94:	4106      	asrs	r6, r0
   d7d96:	ea03 0706 	and.w	r7, r3, r6
   d7d9a:	4317      	orrs	r7, r2
   d7d9c:	d02e      	beq.n	d7dfc <rint+0x8c>
   d7d9e:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d7da2:	431d      	orrs	r5, r3
   d7da4:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d7da8:	d00c      	beq.n	d7dc4 <rint+0x54>
   d7daa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d7dae:	2813      	cmp	r0, #19
   d7db0:	ea21 0606 	bic.w	r6, r1, r6
   d7db4:	fa43 f100 	asr.w	r1, r3, r0
   d7db8:	ea41 0106 	orr.w	r1, r1, r6
   d7dbc:	bf0c      	ite	eq
   d7dbe:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d7dc2:	2500      	movne	r5, #0
   d7dc4:	4832      	ldr	r0, [pc, #200]	; (d7e90 <rint+0x120>)
   d7dc6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d7dca:	462a      	mov	r2, r5
   d7dcc:	e9d4 4500 	ldrd	r4, r5, [r4]
   d7dd0:	460b      	mov	r3, r1
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	4629      	mov	r1, r5
   d7dd6:	f000 f8f7 	bl	d7fc8 <__adddf3>
   d7dda:	e9cd 0100 	strd	r0, r1, [sp]
   d7dde:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7de2:	4622      	mov	r2, r4
   d7de4:	462b      	mov	r3, r5
   d7de6:	f000 f8ed 	bl	d7fc4 <__aeabi_dsub>
   d7dea:	ec41 0b10 	vmov	d0, r0, r1
   d7dee:	b003      	add	sp, #12
   d7df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7df2:	2833      	cmp	r0, #51	; 0x33
   d7df4:	dd06      	ble.n	d7e04 <rint+0x94>
   d7df6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7dfa:	d040      	beq.n	d7e7e <rint+0x10e>
   d7dfc:	ec43 2b10 	vmov	d0, r2, r3
   d7e00:	b003      	add	sp, #12
   d7e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e04:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7e08:	f04f 30ff 	mov.w	r0, #4294967295
   d7e0c:	40f0      	lsrs	r0, r6
   d7e0e:	4202      	tst	r2, r0
   d7e10:	d0f4      	beq.n	d7dfc <rint+0x8c>
   d7e12:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d7e16:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7e1a:	d0d3      	beq.n	d7dc4 <rint+0x54>
   d7e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d7e20:	ea25 0503 	bic.w	r5, r5, r3
   d7e24:	fa42 f606 	asr.w	r6, r2, r6
   d7e28:	4335      	orrs	r5, r6
   d7e2a:	e7cb      	b.n	d7dc4 <rint+0x54>
   d7e2c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7e30:	4310      	orrs	r0, r2
   d7e32:	d0e3      	beq.n	d7dfc <rint+0x8c>
   d7e34:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d7e38:	4310      	orrs	r0, r2
   d7e3a:	4245      	negs	r5, r0
   d7e3c:	4305      	orrs	r5, r0
   d7e3e:	4814      	ldr	r0, [pc, #80]	; (d7e90 <rint+0x120>)
   d7e40:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d7e44:	e9d0 6700 	ldrd	r6, r7, [r0]
   d7e48:	0c59      	lsrs	r1, r3, #17
   d7e4a:	0b2d      	lsrs	r5, r5, #12
   d7e4c:	0449      	lsls	r1, r1, #17
   d7e4e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d7e52:	ea45 0301 	orr.w	r3, r5, r1
   d7e56:	4630      	mov	r0, r6
   d7e58:	4639      	mov	r1, r7
   d7e5a:	f000 f8b5 	bl	d7fc8 <__adddf3>
   d7e5e:	e9cd 0100 	strd	r0, r1, [sp]
   d7e62:	463b      	mov	r3, r7
   d7e64:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7e68:	4632      	mov	r2, r6
   d7e6a:	f000 f8ab 	bl	d7fc4 <__aeabi_dsub>
   d7e6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7e72:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d7e76:	ec41 0b10 	vmov	d0, r0, r1
   d7e7a:	b003      	add	sp, #12
   d7e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e7e:	ee10 0a10 	vmov	r0, s0
   d7e82:	f000 f8a1 	bl	d7fc8 <__adddf3>
   d7e86:	ec41 0b10 	vmov	d0, r0, r1
   d7e8a:	e7b9      	b.n	d7e00 <rint+0x90>
   d7e8c:	000fffff 	.word	0x000fffff
   d7e90:	000d8ee8 	.word	0x000d8ee8
   d7e94:	00000000 	.word	0x00000000

000d7e98 <scalbn>:
   d7e98:	b538      	push	{r3, r4, r5, lr}
   d7e9a:	ec53 2b10 	vmov	r2, r3, d0
   d7e9e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d7ea2:	461c      	mov	r4, r3
   d7ea4:	4605      	mov	r5, r0
   d7ea6:	bb81      	cbnz	r1, d7f0a <scalbn+0x72>
   d7ea8:	ee10 1a10 	vmov	r1, s0
   d7eac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d7eb0:	4321      	orrs	r1, r4
   d7eb2:	d029      	beq.n	d7f08 <scalbn+0x70>
   d7eb4:	4619      	mov	r1, r3
   d7eb6:	2200      	movs	r2, #0
   d7eb8:	4b3d      	ldr	r3, [pc, #244]	; (d7fb0 <scalbn+0x118>)
   d7eba:	4c3e      	ldr	r4, [pc, #248]	; (d7fb4 <scalbn+0x11c>)
   d7ebc:	ee10 0a10 	vmov	r0, s0
   d7ec0:	f000 fa38 	bl	d8334 <__aeabi_dmul>
   d7ec4:	42a5      	cmp	r5, r4
   d7ec6:	4602      	mov	r2, r0
   d7ec8:	460b      	mov	r3, r1
   d7eca:	db16      	blt.n	d7efa <scalbn+0x62>
   d7ecc:	460c      	mov	r4, r1
   d7ece:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d7ed2:	3936      	subs	r1, #54	; 0x36
   d7ed4:	4429      	add	r1, r5
   d7ed6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7eda:	4281      	cmp	r1, r0
   d7edc:	dc21      	bgt.n	d7f22 <scalbn+0x8a>
   d7ede:	2900      	cmp	r1, #0
   d7ee0:	dc47      	bgt.n	d7f72 <scalbn+0xda>
   d7ee2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d7ee6:	da34      	bge.n	d7f52 <scalbn+0xba>
   d7ee8:	f24c 3150 	movw	r1, #50000	; 0xc350
   d7eec:	428d      	cmp	r5, r1
   d7eee:	dc18      	bgt.n	d7f22 <scalbn+0x8a>
   d7ef0:	2b00      	cmp	r3, #0
   d7ef2:	a127      	add	r1, pc, #156	; (adr r1, d7f90 <scalbn+0xf8>)
   d7ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7ef8:	db44      	blt.n	d7f84 <scalbn+0xec>
   d7efa:	a325      	add	r3, pc, #148	; (adr r3, d7f90 <scalbn+0xf8>)
   d7efc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f00:	f000 fa18 	bl	d8334 <__aeabi_dmul>
   d7f04:	ec41 0b10 	vmov	d0, r0, r1
   d7f08:	bd38      	pop	{r3, r4, r5, pc}
   d7f0a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7f0e:	4281      	cmp	r1, r0
   d7f10:	d1e0      	bne.n	d7ed4 <scalbn+0x3c>
   d7f12:	ee10 0a10 	vmov	r0, s0
   d7f16:	4619      	mov	r1, r3
   d7f18:	f000 f856 	bl	d7fc8 <__adddf3>
   d7f1c:	ec41 0b10 	vmov	d0, r0, r1
   d7f20:	bd38      	pop	{r3, r4, r5, pc}
   d7f22:	2b00      	cmp	r3, #0
   d7f24:	a11c      	add	r1, pc, #112	; (adr r1, d7f98 <scalbn+0x100>)
   d7f26:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7f2a:	db07      	blt.n	d7f3c <scalbn+0xa4>
   d7f2c:	a31a      	add	r3, pc, #104	; (adr r3, d7f98 <scalbn+0x100>)
   d7f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f32:	f000 f9ff 	bl	d8334 <__aeabi_dmul>
   d7f36:	ec41 0b10 	vmov	d0, r0, r1
   d7f3a:	bd38      	pop	{r3, r4, r5, pc}
   d7f3c:	a118      	add	r1, pc, #96	; (adr r1, d7fa0 <scalbn+0x108>)
   d7f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7f42:	a315      	add	r3, pc, #84	; (adr r3, d7f98 <scalbn+0x100>)
   d7f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f48:	f000 f9f4 	bl	d8334 <__aeabi_dmul>
   d7f4c:	ec41 0b10 	vmov	d0, r0, r1
   d7f50:	e7f3      	b.n	d7f3a <scalbn+0xa2>
   d7f52:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d7f56:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7f5a:	3136      	adds	r1, #54	; 0x36
   d7f5c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7f60:	4610      	mov	r0, r2
   d7f62:	4619      	mov	r1, r3
   d7f64:	2200      	movs	r2, #0
   d7f66:	4b14      	ldr	r3, [pc, #80]	; (d7fb8 <scalbn+0x120>)
   d7f68:	f000 f9e4 	bl	d8334 <__aeabi_dmul>
   d7f6c:	ec41 0b10 	vmov	d0, r0, r1
   d7f70:	bd38      	pop	{r3, r4, r5, pc}
   d7f72:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d7f76:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7f7a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7f7e:	ec43 2b10 	vmov	d0, r2, r3
   d7f82:	bd38      	pop	{r3, r4, r5, pc}
   d7f84:	a108      	add	r1, pc, #32	; (adr r1, d7fa8 <scalbn+0x110>)
   d7f86:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7f8a:	e7b6      	b.n	d7efa <scalbn+0x62>
   d7f8c:	f3af 8000 	nop.w
   d7f90:	c2f8f359 	.word	0xc2f8f359
   d7f94:	01a56e1f 	.word	0x01a56e1f
   d7f98:	8800759c 	.word	0x8800759c
   d7f9c:	7e37e43c 	.word	0x7e37e43c
   d7fa0:	8800759c 	.word	0x8800759c
   d7fa4:	fe37e43c 	.word	0xfe37e43c
   d7fa8:	c2f8f359 	.word	0xc2f8f359
   d7fac:	81a56e1f 	.word	0x81a56e1f
   d7fb0:	43500000 	.word	0x43500000
   d7fb4:	ffff3cb0 	.word	0xffff3cb0
   d7fb8:	3c900000 	.word	0x3c900000

000d7fbc <__aeabi_drsub>:
   d7fbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7fc0:	e002      	b.n	d7fc8 <__adddf3>
   d7fc2:	bf00      	nop

000d7fc4 <__aeabi_dsub>:
   d7fc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7fc8 <__adddf3>:
   d7fc8:	b530      	push	{r4, r5, lr}
   d7fca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7fce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7fd2:	ea94 0f05 	teq	r4, r5
   d7fd6:	bf08      	it	eq
   d7fd8:	ea90 0f02 	teqeq	r0, r2
   d7fdc:	bf1f      	itttt	ne
   d7fde:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7fe2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7fe6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7fea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7fee:	f000 80e2 	beq.w	d81b6 <__adddf3+0x1ee>
   d7ff2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7ff6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7ffa:	bfb8      	it	lt
   d7ffc:	426d      	neglt	r5, r5
   d7ffe:	dd0c      	ble.n	d801a <__adddf3+0x52>
   d8000:	442c      	add	r4, r5
   d8002:	ea80 0202 	eor.w	r2, r0, r2
   d8006:	ea81 0303 	eor.w	r3, r1, r3
   d800a:	ea82 0000 	eor.w	r0, r2, r0
   d800e:	ea83 0101 	eor.w	r1, r3, r1
   d8012:	ea80 0202 	eor.w	r2, r0, r2
   d8016:	ea81 0303 	eor.w	r3, r1, r3
   d801a:	2d36      	cmp	r5, #54	; 0x36
   d801c:	bf88      	it	hi
   d801e:	bd30      	pophi	{r4, r5, pc}
   d8020:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8024:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8028:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d802c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8030:	d002      	beq.n	d8038 <__adddf3+0x70>
   d8032:	4240      	negs	r0, r0
   d8034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8038:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d803c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8040:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8044:	d002      	beq.n	d804c <__adddf3+0x84>
   d8046:	4252      	negs	r2, r2
   d8048:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d804c:	ea94 0f05 	teq	r4, r5
   d8050:	f000 80a7 	beq.w	d81a2 <__adddf3+0x1da>
   d8054:	f1a4 0401 	sub.w	r4, r4, #1
   d8058:	f1d5 0e20 	rsbs	lr, r5, #32
   d805c:	db0d      	blt.n	d807a <__adddf3+0xb2>
   d805e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8062:	fa22 f205 	lsr.w	r2, r2, r5
   d8066:	1880      	adds	r0, r0, r2
   d8068:	f141 0100 	adc.w	r1, r1, #0
   d806c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8070:	1880      	adds	r0, r0, r2
   d8072:	fa43 f305 	asr.w	r3, r3, r5
   d8076:	4159      	adcs	r1, r3
   d8078:	e00e      	b.n	d8098 <__adddf3+0xd0>
   d807a:	f1a5 0520 	sub.w	r5, r5, #32
   d807e:	f10e 0e20 	add.w	lr, lr, #32
   d8082:	2a01      	cmp	r2, #1
   d8084:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8088:	bf28      	it	cs
   d808a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d808e:	fa43 f305 	asr.w	r3, r3, r5
   d8092:	18c0      	adds	r0, r0, r3
   d8094:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d809c:	d507      	bpl.n	d80ae <__adddf3+0xe6>
   d809e:	f04f 0e00 	mov.w	lr, #0
   d80a2:	f1dc 0c00 	rsbs	ip, ip, #0
   d80a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d80aa:	eb6e 0101 	sbc.w	r1, lr, r1
   d80ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d80b2:	d31b      	bcc.n	d80ec <__adddf3+0x124>
   d80b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d80b8:	d30c      	bcc.n	d80d4 <__adddf3+0x10c>
   d80ba:	0849      	lsrs	r1, r1, #1
   d80bc:	ea5f 0030 	movs.w	r0, r0, rrx
   d80c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d80c4:	f104 0401 	add.w	r4, r4, #1
   d80c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d80cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d80d0:	f080 809a 	bcs.w	d8208 <__adddf3+0x240>
   d80d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d80d8:	bf08      	it	eq
   d80da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d80de:	f150 0000 	adcs.w	r0, r0, #0
   d80e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d80e6:	ea41 0105 	orr.w	r1, r1, r5
   d80ea:	bd30      	pop	{r4, r5, pc}
   d80ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d80f0:	4140      	adcs	r0, r0
   d80f2:	eb41 0101 	adc.w	r1, r1, r1
   d80f6:	3c01      	subs	r4, #1
   d80f8:	bf28      	it	cs
   d80fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d80fe:	d2e9      	bcs.n	d80d4 <__adddf3+0x10c>
   d8100:	f091 0f00 	teq	r1, #0
   d8104:	bf04      	itt	eq
   d8106:	4601      	moveq	r1, r0
   d8108:	2000      	moveq	r0, #0
   d810a:	fab1 f381 	clz	r3, r1
   d810e:	bf08      	it	eq
   d8110:	3320      	addeq	r3, #32
   d8112:	f1a3 030b 	sub.w	r3, r3, #11
   d8116:	f1b3 0220 	subs.w	r2, r3, #32
   d811a:	da0c      	bge.n	d8136 <__adddf3+0x16e>
   d811c:	320c      	adds	r2, #12
   d811e:	dd08      	ble.n	d8132 <__adddf3+0x16a>
   d8120:	f102 0c14 	add.w	ip, r2, #20
   d8124:	f1c2 020c 	rsb	r2, r2, #12
   d8128:	fa01 f00c 	lsl.w	r0, r1, ip
   d812c:	fa21 f102 	lsr.w	r1, r1, r2
   d8130:	e00c      	b.n	d814c <__adddf3+0x184>
   d8132:	f102 0214 	add.w	r2, r2, #20
   d8136:	bfd8      	it	le
   d8138:	f1c2 0c20 	rsble	ip, r2, #32
   d813c:	fa01 f102 	lsl.w	r1, r1, r2
   d8140:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8144:	bfdc      	itt	le
   d8146:	ea41 010c 	orrle.w	r1, r1, ip
   d814a:	4090      	lslle	r0, r2
   d814c:	1ae4      	subs	r4, r4, r3
   d814e:	bfa2      	ittt	ge
   d8150:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8154:	4329      	orrge	r1, r5
   d8156:	bd30      	popge	{r4, r5, pc}
   d8158:	ea6f 0404 	mvn.w	r4, r4
   d815c:	3c1f      	subs	r4, #31
   d815e:	da1c      	bge.n	d819a <__adddf3+0x1d2>
   d8160:	340c      	adds	r4, #12
   d8162:	dc0e      	bgt.n	d8182 <__adddf3+0x1ba>
   d8164:	f104 0414 	add.w	r4, r4, #20
   d8168:	f1c4 0220 	rsb	r2, r4, #32
   d816c:	fa20 f004 	lsr.w	r0, r0, r4
   d8170:	fa01 f302 	lsl.w	r3, r1, r2
   d8174:	ea40 0003 	orr.w	r0, r0, r3
   d8178:	fa21 f304 	lsr.w	r3, r1, r4
   d817c:	ea45 0103 	orr.w	r1, r5, r3
   d8180:	bd30      	pop	{r4, r5, pc}
   d8182:	f1c4 040c 	rsb	r4, r4, #12
   d8186:	f1c4 0220 	rsb	r2, r4, #32
   d818a:	fa20 f002 	lsr.w	r0, r0, r2
   d818e:	fa01 f304 	lsl.w	r3, r1, r4
   d8192:	ea40 0003 	orr.w	r0, r0, r3
   d8196:	4629      	mov	r1, r5
   d8198:	bd30      	pop	{r4, r5, pc}
   d819a:	fa21 f004 	lsr.w	r0, r1, r4
   d819e:	4629      	mov	r1, r5
   d81a0:	bd30      	pop	{r4, r5, pc}
   d81a2:	f094 0f00 	teq	r4, #0
   d81a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d81aa:	bf06      	itte	eq
   d81ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d81b0:	3401      	addeq	r4, #1
   d81b2:	3d01      	subne	r5, #1
   d81b4:	e74e      	b.n	d8054 <__adddf3+0x8c>
   d81b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d81ba:	bf18      	it	ne
   d81bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d81c0:	d029      	beq.n	d8216 <__adddf3+0x24e>
   d81c2:	ea94 0f05 	teq	r4, r5
   d81c6:	bf08      	it	eq
   d81c8:	ea90 0f02 	teqeq	r0, r2
   d81cc:	d005      	beq.n	d81da <__adddf3+0x212>
   d81ce:	ea54 0c00 	orrs.w	ip, r4, r0
   d81d2:	bf04      	itt	eq
   d81d4:	4619      	moveq	r1, r3
   d81d6:	4610      	moveq	r0, r2
   d81d8:	bd30      	pop	{r4, r5, pc}
   d81da:	ea91 0f03 	teq	r1, r3
   d81de:	bf1e      	ittt	ne
   d81e0:	2100      	movne	r1, #0
   d81e2:	2000      	movne	r0, #0
   d81e4:	bd30      	popne	{r4, r5, pc}
   d81e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d81ea:	d105      	bne.n	d81f8 <__adddf3+0x230>
   d81ec:	0040      	lsls	r0, r0, #1
   d81ee:	4149      	adcs	r1, r1
   d81f0:	bf28      	it	cs
   d81f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d81f6:	bd30      	pop	{r4, r5, pc}
   d81f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d81fc:	bf3c      	itt	cc
   d81fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8202:	bd30      	popcc	{r4, r5, pc}
   d8204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8208:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d820c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8210:	f04f 0000 	mov.w	r0, #0
   d8214:	bd30      	pop	{r4, r5, pc}
   d8216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d821a:	bf1a      	itte	ne
   d821c:	4619      	movne	r1, r3
   d821e:	4610      	movne	r0, r2
   d8220:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8224:	bf1c      	itt	ne
   d8226:	460b      	movne	r3, r1
   d8228:	4602      	movne	r2, r0
   d822a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d822e:	bf06      	itte	eq
   d8230:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8234:	ea91 0f03 	teqeq	r1, r3
   d8238:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d823c:	bd30      	pop	{r4, r5, pc}
   d823e:	bf00      	nop

000d8240 <__aeabi_ui2d>:
   d8240:	f090 0f00 	teq	r0, #0
   d8244:	bf04      	itt	eq
   d8246:	2100      	moveq	r1, #0
   d8248:	4770      	bxeq	lr
   d824a:	b530      	push	{r4, r5, lr}
   d824c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8250:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8254:	f04f 0500 	mov.w	r5, #0
   d8258:	f04f 0100 	mov.w	r1, #0
   d825c:	e750      	b.n	d8100 <__adddf3+0x138>
   d825e:	bf00      	nop

000d8260 <__aeabi_i2d>:
   d8260:	f090 0f00 	teq	r0, #0
   d8264:	bf04      	itt	eq
   d8266:	2100      	moveq	r1, #0
   d8268:	4770      	bxeq	lr
   d826a:	b530      	push	{r4, r5, lr}
   d826c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8274:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8278:	bf48      	it	mi
   d827a:	4240      	negmi	r0, r0
   d827c:	f04f 0100 	mov.w	r1, #0
   d8280:	e73e      	b.n	d8100 <__adddf3+0x138>
   d8282:	bf00      	nop

000d8284 <__aeabi_f2d>:
   d8284:	0042      	lsls	r2, r0, #1
   d8286:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d828a:	ea4f 0131 	mov.w	r1, r1, rrx
   d828e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8292:	bf1f      	itttt	ne
   d8294:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8298:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d829c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d82a0:	4770      	bxne	lr
   d82a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d82a6:	bf08      	it	eq
   d82a8:	4770      	bxeq	lr
   d82aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d82ae:	bf04      	itt	eq
   d82b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d82b4:	4770      	bxeq	lr
   d82b6:	b530      	push	{r4, r5, lr}
   d82b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d82bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d82c4:	e71c      	b.n	d8100 <__adddf3+0x138>
   d82c6:	bf00      	nop

000d82c8 <__aeabi_ul2d>:
   d82c8:	ea50 0201 	orrs.w	r2, r0, r1
   d82cc:	bf08      	it	eq
   d82ce:	4770      	bxeq	lr
   d82d0:	b530      	push	{r4, r5, lr}
   d82d2:	f04f 0500 	mov.w	r5, #0
   d82d6:	e00a      	b.n	d82ee <__aeabi_l2d+0x16>

000d82d8 <__aeabi_l2d>:
   d82d8:	ea50 0201 	orrs.w	r2, r0, r1
   d82dc:	bf08      	it	eq
   d82de:	4770      	bxeq	lr
   d82e0:	b530      	push	{r4, r5, lr}
   d82e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d82e6:	d502      	bpl.n	d82ee <__aeabi_l2d+0x16>
   d82e8:	4240      	negs	r0, r0
   d82ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d82fa:	f43f aed8 	beq.w	d80ae <__adddf3+0xe6>
   d82fe:	f04f 0203 	mov.w	r2, #3
   d8302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8306:	bf18      	it	ne
   d8308:	3203      	addne	r2, #3
   d830a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d830e:	bf18      	it	ne
   d8310:	3203      	addne	r2, #3
   d8312:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8316:	f1c2 0320 	rsb	r3, r2, #32
   d831a:	fa00 fc03 	lsl.w	ip, r0, r3
   d831e:	fa20 f002 	lsr.w	r0, r0, r2
   d8322:	fa01 fe03 	lsl.w	lr, r1, r3
   d8326:	ea40 000e 	orr.w	r0, r0, lr
   d832a:	fa21 f102 	lsr.w	r1, r1, r2
   d832e:	4414      	add	r4, r2
   d8330:	e6bd      	b.n	d80ae <__adddf3+0xe6>
   d8332:	bf00      	nop

000d8334 <__aeabi_dmul>:
   d8334:	b570      	push	{r4, r5, r6, lr}
   d8336:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d833a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d833e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8342:	bf1d      	ittte	ne
   d8344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8348:	ea94 0f0c 	teqne	r4, ip
   d834c:	ea95 0f0c 	teqne	r5, ip
   d8350:	f000 f8de 	bleq	d8510 <__aeabi_dmul+0x1dc>
   d8354:	442c      	add	r4, r5
   d8356:	ea81 0603 	eor.w	r6, r1, r3
   d835a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d835e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8362:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8366:	bf18      	it	ne
   d8368:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d836c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8374:	d038      	beq.n	d83e8 <__aeabi_dmul+0xb4>
   d8376:	fba0 ce02 	umull	ip, lr, r0, r2
   d837a:	f04f 0500 	mov.w	r5, #0
   d837e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8382:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8386:	fbe0 e503 	umlal	lr, r5, r0, r3
   d838a:	f04f 0600 	mov.w	r6, #0
   d838e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8392:	f09c 0f00 	teq	ip, #0
   d8396:	bf18      	it	ne
   d8398:	f04e 0e01 	orrne.w	lr, lr, #1
   d839c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d83a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d83a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d83a8:	d204      	bcs.n	d83b4 <__aeabi_dmul+0x80>
   d83aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d83ae:	416d      	adcs	r5, r5
   d83b0:	eb46 0606 	adc.w	r6, r6, r6
   d83b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d83b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d83bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d83c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d83c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d83c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d83cc:	bf88      	it	hi
   d83ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d83d2:	d81e      	bhi.n	d8412 <__aeabi_dmul+0xde>
   d83d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d83d8:	bf08      	it	eq
   d83da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d83de:	f150 0000 	adcs.w	r0, r0, #0
   d83e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d83e6:	bd70      	pop	{r4, r5, r6, pc}
   d83e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d83ec:	ea46 0101 	orr.w	r1, r6, r1
   d83f0:	ea40 0002 	orr.w	r0, r0, r2
   d83f4:	ea81 0103 	eor.w	r1, r1, r3
   d83f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d83fc:	bfc2      	ittt	gt
   d83fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8406:	bd70      	popgt	{r4, r5, r6, pc}
   d8408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d840c:	f04f 0e00 	mov.w	lr, #0
   d8410:	3c01      	subs	r4, #1
   d8412:	f300 80ab 	bgt.w	d856c <__aeabi_dmul+0x238>
   d8416:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d841a:	bfde      	ittt	le
   d841c:	2000      	movle	r0, #0
   d841e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8422:	bd70      	pople	{r4, r5, r6, pc}
   d8424:	f1c4 0400 	rsb	r4, r4, #0
   d8428:	3c20      	subs	r4, #32
   d842a:	da35      	bge.n	d8498 <__aeabi_dmul+0x164>
   d842c:	340c      	adds	r4, #12
   d842e:	dc1b      	bgt.n	d8468 <__aeabi_dmul+0x134>
   d8430:	f104 0414 	add.w	r4, r4, #20
   d8434:	f1c4 0520 	rsb	r5, r4, #32
   d8438:	fa00 f305 	lsl.w	r3, r0, r5
   d843c:	fa20 f004 	lsr.w	r0, r0, r4
   d8440:	fa01 f205 	lsl.w	r2, r1, r5
   d8444:	ea40 0002 	orr.w	r0, r0, r2
   d8448:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d844c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8454:	fa21 f604 	lsr.w	r6, r1, r4
   d8458:	eb42 0106 	adc.w	r1, r2, r6
   d845c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8460:	bf08      	it	eq
   d8462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8466:	bd70      	pop	{r4, r5, r6, pc}
   d8468:	f1c4 040c 	rsb	r4, r4, #12
   d846c:	f1c4 0520 	rsb	r5, r4, #32
   d8470:	fa00 f304 	lsl.w	r3, r0, r4
   d8474:	fa20 f005 	lsr.w	r0, r0, r5
   d8478:	fa01 f204 	lsl.w	r2, r1, r4
   d847c:	ea40 0002 	orr.w	r0, r0, r2
   d8480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8488:	f141 0100 	adc.w	r1, r1, #0
   d848c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8490:	bf08      	it	eq
   d8492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8496:	bd70      	pop	{r4, r5, r6, pc}
   d8498:	f1c4 0520 	rsb	r5, r4, #32
   d849c:	fa00 f205 	lsl.w	r2, r0, r5
   d84a0:	ea4e 0e02 	orr.w	lr, lr, r2
   d84a4:	fa20 f304 	lsr.w	r3, r0, r4
   d84a8:	fa01 f205 	lsl.w	r2, r1, r5
   d84ac:	ea43 0302 	orr.w	r3, r3, r2
   d84b0:	fa21 f004 	lsr.w	r0, r1, r4
   d84b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d84b8:	fa21 f204 	lsr.w	r2, r1, r4
   d84bc:	ea20 0002 	bic.w	r0, r0, r2
   d84c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d84c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84c8:	bf08      	it	eq
   d84ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84ce:	bd70      	pop	{r4, r5, r6, pc}
   d84d0:	f094 0f00 	teq	r4, #0
   d84d4:	d10f      	bne.n	d84f6 <__aeabi_dmul+0x1c2>
   d84d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d84da:	0040      	lsls	r0, r0, #1
   d84dc:	eb41 0101 	adc.w	r1, r1, r1
   d84e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d84e4:	bf08      	it	eq
   d84e6:	3c01      	subeq	r4, #1
   d84e8:	d0f7      	beq.n	d84da <__aeabi_dmul+0x1a6>
   d84ea:	ea41 0106 	orr.w	r1, r1, r6
   d84ee:	f095 0f00 	teq	r5, #0
   d84f2:	bf18      	it	ne
   d84f4:	4770      	bxne	lr
   d84f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d84fa:	0052      	lsls	r2, r2, #1
   d84fc:	eb43 0303 	adc.w	r3, r3, r3
   d8500:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8504:	bf08      	it	eq
   d8506:	3d01      	subeq	r5, #1
   d8508:	d0f7      	beq.n	d84fa <__aeabi_dmul+0x1c6>
   d850a:	ea43 0306 	orr.w	r3, r3, r6
   d850e:	4770      	bx	lr
   d8510:	ea94 0f0c 	teq	r4, ip
   d8514:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8518:	bf18      	it	ne
   d851a:	ea95 0f0c 	teqne	r5, ip
   d851e:	d00c      	beq.n	d853a <__aeabi_dmul+0x206>
   d8520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8524:	bf18      	it	ne
   d8526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d852a:	d1d1      	bne.n	d84d0 <__aeabi_dmul+0x19c>
   d852c:	ea81 0103 	eor.w	r1, r1, r3
   d8530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8534:	f04f 0000 	mov.w	r0, #0
   d8538:	bd70      	pop	{r4, r5, r6, pc}
   d853a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d853e:	bf06      	itte	eq
   d8540:	4610      	moveq	r0, r2
   d8542:	4619      	moveq	r1, r3
   d8544:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8548:	d019      	beq.n	d857e <__aeabi_dmul+0x24a>
   d854a:	ea94 0f0c 	teq	r4, ip
   d854e:	d102      	bne.n	d8556 <__aeabi_dmul+0x222>
   d8550:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8554:	d113      	bne.n	d857e <__aeabi_dmul+0x24a>
   d8556:	ea95 0f0c 	teq	r5, ip
   d855a:	d105      	bne.n	d8568 <__aeabi_dmul+0x234>
   d855c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8560:	bf1c      	itt	ne
   d8562:	4610      	movne	r0, r2
   d8564:	4619      	movne	r1, r3
   d8566:	d10a      	bne.n	d857e <__aeabi_dmul+0x24a>
   d8568:	ea81 0103 	eor.w	r1, r1, r3
   d856c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8570:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8574:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8578:	f04f 0000 	mov.w	r0, #0
   d857c:	bd70      	pop	{r4, r5, r6, pc}
   d857e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8582:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8586:	bd70      	pop	{r4, r5, r6, pc}

000d8588 <__aeabi_ddiv>:
   d8588:	b570      	push	{r4, r5, r6, lr}
   d858a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d858e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8596:	bf1d      	ittte	ne
   d8598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d859c:	ea94 0f0c 	teqne	r4, ip
   d85a0:	ea95 0f0c 	teqne	r5, ip
   d85a4:	f000 f8a7 	bleq	d86f6 <__aeabi_ddiv+0x16e>
   d85a8:	eba4 0405 	sub.w	r4, r4, r5
   d85ac:	ea81 0e03 	eor.w	lr, r1, r3
   d85b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d85b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d85b8:	f000 8088 	beq.w	d86cc <__aeabi_ddiv+0x144>
   d85bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d85c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d85c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d85c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d85cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d85d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d85d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d85d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d85dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d85e0:	429d      	cmp	r5, r3
   d85e2:	bf08      	it	eq
   d85e4:	4296      	cmpeq	r6, r2
   d85e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d85ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d85ee:	d202      	bcs.n	d85f6 <__aeabi_ddiv+0x6e>
   d85f0:	085b      	lsrs	r3, r3, #1
   d85f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d85f6:	1ab6      	subs	r6, r6, r2
   d85f8:	eb65 0503 	sbc.w	r5, r5, r3
   d85fc:	085b      	lsrs	r3, r3, #1
   d85fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8602:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8606:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d860a:	ebb6 0e02 	subs.w	lr, r6, r2
   d860e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8612:	bf22      	ittt	cs
   d8614:	1ab6      	subcs	r6, r6, r2
   d8616:	4675      	movcs	r5, lr
   d8618:	ea40 000c 	orrcs.w	r0, r0, ip
   d861c:	085b      	lsrs	r3, r3, #1
   d861e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8622:	ebb6 0e02 	subs.w	lr, r6, r2
   d8626:	eb75 0e03 	sbcs.w	lr, r5, r3
   d862a:	bf22      	ittt	cs
   d862c:	1ab6      	subcs	r6, r6, r2
   d862e:	4675      	movcs	r5, lr
   d8630:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8634:	085b      	lsrs	r3, r3, #1
   d8636:	ea4f 0232 	mov.w	r2, r2, rrx
   d863a:	ebb6 0e02 	subs.w	lr, r6, r2
   d863e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8642:	bf22      	ittt	cs
   d8644:	1ab6      	subcs	r6, r6, r2
   d8646:	4675      	movcs	r5, lr
   d8648:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d864c:	085b      	lsrs	r3, r3, #1
   d864e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8652:	ebb6 0e02 	subs.w	lr, r6, r2
   d8656:	eb75 0e03 	sbcs.w	lr, r5, r3
   d865a:	bf22      	ittt	cs
   d865c:	1ab6      	subcs	r6, r6, r2
   d865e:	4675      	movcs	r5, lr
   d8660:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8664:	ea55 0e06 	orrs.w	lr, r5, r6
   d8668:	d018      	beq.n	d869c <__aeabi_ddiv+0x114>
   d866a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d866e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8672:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8676:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d867a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d867e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8682:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8686:	d1c0      	bne.n	d860a <__aeabi_ddiv+0x82>
   d8688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d868c:	d10b      	bne.n	d86a6 <__aeabi_ddiv+0x11e>
   d868e:	ea41 0100 	orr.w	r1, r1, r0
   d8692:	f04f 0000 	mov.w	r0, #0
   d8696:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d869a:	e7b6      	b.n	d860a <__aeabi_ddiv+0x82>
   d869c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86a0:	bf04      	itt	eq
   d86a2:	4301      	orreq	r1, r0
   d86a4:	2000      	moveq	r0, #0
   d86a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d86aa:	bf88      	it	hi
   d86ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d86b0:	f63f aeaf 	bhi.w	d8412 <__aeabi_dmul+0xde>
   d86b4:	ebb5 0c03 	subs.w	ip, r5, r3
   d86b8:	bf04      	itt	eq
   d86ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   d86be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d86c2:	f150 0000 	adcs.w	r0, r0, #0
   d86c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d86ca:	bd70      	pop	{r4, r5, r6, pc}
   d86cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d86d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d86d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d86d8:	bfc2      	ittt	gt
   d86da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d86de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d86e2:	bd70      	popgt	{r4, r5, r6, pc}
   d86e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86e8:	f04f 0e00 	mov.w	lr, #0
   d86ec:	3c01      	subs	r4, #1
   d86ee:	e690      	b.n	d8412 <__aeabi_dmul+0xde>
   d86f0:	ea45 0e06 	orr.w	lr, r5, r6
   d86f4:	e68d      	b.n	d8412 <__aeabi_dmul+0xde>
   d86f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d86fa:	ea94 0f0c 	teq	r4, ip
   d86fe:	bf08      	it	eq
   d8700:	ea95 0f0c 	teqeq	r5, ip
   d8704:	f43f af3b 	beq.w	d857e <__aeabi_dmul+0x24a>
   d8708:	ea94 0f0c 	teq	r4, ip
   d870c:	d10a      	bne.n	d8724 <__aeabi_ddiv+0x19c>
   d870e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8712:	f47f af34 	bne.w	d857e <__aeabi_dmul+0x24a>
   d8716:	ea95 0f0c 	teq	r5, ip
   d871a:	f47f af25 	bne.w	d8568 <__aeabi_dmul+0x234>
   d871e:	4610      	mov	r0, r2
   d8720:	4619      	mov	r1, r3
   d8722:	e72c      	b.n	d857e <__aeabi_dmul+0x24a>
   d8724:	ea95 0f0c 	teq	r5, ip
   d8728:	d106      	bne.n	d8738 <__aeabi_ddiv+0x1b0>
   d872a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d872e:	f43f aefd 	beq.w	d852c <__aeabi_dmul+0x1f8>
   d8732:	4610      	mov	r0, r2
   d8734:	4619      	mov	r1, r3
   d8736:	e722      	b.n	d857e <__aeabi_dmul+0x24a>
   d8738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d873c:	bf18      	it	ne
   d873e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8742:	f47f aec5 	bne.w	d84d0 <__aeabi_dmul+0x19c>
   d8746:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d874a:	f47f af0d 	bne.w	d8568 <__aeabi_dmul+0x234>
   d874e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8752:	f47f aeeb 	bne.w	d852c <__aeabi_dmul+0x1f8>
   d8756:	e712      	b.n	d857e <__aeabi_dmul+0x24a>

000d8758 <__gedf2>:
   d8758:	f04f 3cff 	mov.w	ip, #4294967295
   d875c:	e006      	b.n	d876c <__cmpdf2+0x4>
   d875e:	bf00      	nop

000d8760 <__ledf2>:
   d8760:	f04f 0c01 	mov.w	ip, #1
   d8764:	e002      	b.n	d876c <__cmpdf2+0x4>
   d8766:	bf00      	nop

000d8768 <__cmpdf2>:
   d8768:	f04f 0c01 	mov.w	ip, #1
   d876c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8770:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8774:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8778:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d877c:	bf18      	it	ne
   d877e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8782:	d01b      	beq.n	d87bc <__cmpdf2+0x54>
   d8784:	b001      	add	sp, #4
   d8786:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d878a:	bf0c      	ite	eq
   d878c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8790:	ea91 0f03 	teqne	r1, r3
   d8794:	bf02      	ittt	eq
   d8796:	ea90 0f02 	teqeq	r0, r2
   d879a:	2000      	moveq	r0, #0
   d879c:	4770      	bxeq	lr
   d879e:	f110 0f00 	cmn.w	r0, #0
   d87a2:	ea91 0f03 	teq	r1, r3
   d87a6:	bf58      	it	pl
   d87a8:	4299      	cmppl	r1, r3
   d87aa:	bf08      	it	eq
   d87ac:	4290      	cmpeq	r0, r2
   d87ae:	bf2c      	ite	cs
   d87b0:	17d8      	asrcs	r0, r3, #31
   d87b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d87b6:	f040 0001 	orr.w	r0, r0, #1
   d87ba:	4770      	bx	lr
   d87bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d87c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87c4:	d102      	bne.n	d87cc <__cmpdf2+0x64>
   d87c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d87ca:	d107      	bne.n	d87dc <__cmpdf2+0x74>
   d87cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d87d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87d4:	d1d6      	bne.n	d8784 <__cmpdf2+0x1c>
   d87d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d87da:	d0d3      	beq.n	d8784 <__cmpdf2+0x1c>
   d87dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d87e0:	4770      	bx	lr
   d87e2:	bf00      	nop

000d87e4 <__aeabi_cdrcmple>:
   d87e4:	4684      	mov	ip, r0
   d87e6:	4610      	mov	r0, r2
   d87e8:	4662      	mov	r2, ip
   d87ea:	468c      	mov	ip, r1
   d87ec:	4619      	mov	r1, r3
   d87ee:	4663      	mov	r3, ip
   d87f0:	e000      	b.n	d87f4 <__aeabi_cdcmpeq>
   d87f2:	bf00      	nop

000d87f4 <__aeabi_cdcmpeq>:
   d87f4:	b501      	push	{r0, lr}
   d87f6:	f7ff ffb7 	bl	d8768 <__cmpdf2>
   d87fa:	2800      	cmp	r0, #0
   d87fc:	bf48      	it	mi
   d87fe:	f110 0f00 	cmnmi.w	r0, #0
   d8802:	bd01      	pop	{r0, pc}

000d8804 <__aeabi_dcmpeq>:
   d8804:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8808:	f7ff fff4 	bl	d87f4 <__aeabi_cdcmpeq>
   d880c:	bf0c      	ite	eq
   d880e:	2001      	moveq	r0, #1
   d8810:	2000      	movne	r0, #0
   d8812:	f85d fb08 	ldr.w	pc, [sp], #8
   d8816:	bf00      	nop

000d8818 <__aeabi_dcmplt>:
   d8818:	f84d ed08 	str.w	lr, [sp, #-8]!
   d881c:	f7ff ffea 	bl	d87f4 <__aeabi_cdcmpeq>
   d8820:	bf34      	ite	cc
   d8822:	2001      	movcc	r0, #1
   d8824:	2000      	movcs	r0, #0
   d8826:	f85d fb08 	ldr.w	pc, [sp], #8
   d882a:	bf00      	nop

000d882c <__aeabi_dcmple>:
   d882c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8830:	f7ff ffe0 	bl	d87f4 <__aeabi_cdcmpeq>
   d8834:	bf94      	ite	ls
   d8836:	2001      	movls	r0, #1
   d8838:	2000      	movhi	r0, #0
   d883a:	f85d fb08 	ldr.w	pc, [sp], #8
   d883e:	bf00      	nop

000d8840 <__aeabi_dcmpge>:
   d8840:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8844:	f7ff ffce 	bl	d87e4 <__aeabi_cdrcmple>
   d8848:	bf94      	ite	ls
   d884a:	2001      	movls	r0, #1
   d884c:	2000      	movhi	r0, #0
   d884e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8852:	bf00      	nop

000d8854 <__aeabi_dcmpgt>:
   d8854:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8858:	f7ff ffc4 	bl	d87e4 <__aeabi_cdrcmple>
   d885c:	bf34      	ite	cc
   d885e:	2001      	movcc	r0, #1
   d8860:	2000      	movcs	r0, #0
   d8862:	f85d fb08 	ldr.w	pc, [sp], #8
   d8866:	bf00      	nop

000d8868 <__aeabi_dcmpun>:
   d8868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d886c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8870:	d102      	bne.n	d8878 <__aeabi_dcmpun+0x10>
   d8872:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8876:	d10a      	bne.n	d888e <__aeabi_dcmpun+0x26>
   d8878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d887c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8880:	d102      	bne.n	d8888 <__aeabi_dcmpun+0x20>
   d8882:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8886:	d102      	bne.n	d888e <__aeabi_dcmpun+0x26>
   d8888:	f04f 0000 	mov.w	r0, #0
   d888c:	4770      	bx	lr
   d888e:	f04f 0001 	mov.w	r0, #1
   d8892:	4770      	bx	lr

000d8894 <__aeabi_d2iz>:
   d8894:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8898:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d889c:	d215      	bcs.n	d88ca <__aeabi_d2iz+0x36>
   d889e:	d511      	bpl.n	d88c4 <__aeabi_d2iz+0x30>
   d88a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d88a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d88a8:	d912      	bls.n	d88d0 <__aeabi_d2iz+0x3c>
   d88aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d88ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d88b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d88b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d88ba:	fa23 f002 	lsr.w	r0, r3, r2
   d88be:	bf18      	it	ne
   d88c0:	4240      	negne	r0, r0
   d88c2:	4770      	bx	lr
   d88c4:	f04f 0000 	mov.w	r0, #0
   d88c8:	4770      	bx	lr
   d88ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d88ce:	d105      	bne.n	d88dc <__aeabi_d2iz+0x48>
   d88d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d88d4:	bf08      	it	eq
   d88d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d88da:	4770      	bx	lr
   d88dc:	f04f 0000 	mov.w	r0, #0
   d88e0:	4770      	bx	lr
   d88e2:	bf00      	nop

000d88e4 <__aeabi_d2f>:
   d88e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d88e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d88ec:	bf24      	itt	cs
   d88ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d88f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d88f6:	d90d      	bls.n	d8914 <__aeabi_d2f+0x30>
   d88f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d88fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d890c:	bf08      	it	eq
   d890e:	f020 0001 	biceq.w	r0, r0, #1
   d8912:	4770      	bx	lr
   d8914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8918:	d121      	bne.n	d895e <__aeabi_d2f+0x7a>
   d891a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d891e:	bfbc      	itt	lt
   d8920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8924:	4770      	bxlt	lr
   d8926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d892a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d892e:	f1c2 0218 	rsb	r2, r2, #24
   d8932:	f1c2 0c20 	rsb	ip, r2, #32
   d8936:	fa10 f30c 	lsls.w	r3, r0, ip
   d893a:	fa20 f002 	lsr.w	r0, r0, r2
   d893e:	bf18      	it	ne
   d8940:	f040 0001 	orrne.w	r0, r0, #1
   d8944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d894c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8950:	ea40 000c 	orr.w	r0, r0, ip
   d8954:	fa23 f302 	lsr.w	r3, r3, r2
   d8958:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d895c:	e7cc      	b.n	d88f8 <__aeabi_d2f+0x14>
   d895e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8962:	d107      	bne.n	d8974 <__aeabi_d2f+0x90>
   d8964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8968:	bf1e      	ittt	ne
   d896a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d896e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8972:	4770      	bxne	lr
   d8974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d897c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8980:	4770      	bx	lr
   d8982:	bf00      	nop

000d8984 <atexit>:
   d8984:	2300      	movs	r3, #0
   d8986:	4601      	mov	r1, r0
   d8988:	461a      	mov	r2, r3
   d898a:	4618      	mov	r0, r3
   d898c:	f000 b8f2 	b.w	d8b74 <__register_exitproc>

000d8990 <memcpy>:
   d8990:	440a      	add	r2, r1
   d8992:	4291      	cmp	r1, r2
   d8994:	f100 33ff 	add.w	r3, r0, #4294967295
   d8998:	d100      	bne.n	d899c <memcpy+0xc>
   d899a:	4770      	bx	lr
   d899c:	b510      	push	{r4, lr}
   d899e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d89a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d89a6:	4291      	cmp	r1, r2
   d89a8:	d1f9      	bne.n	d899e <memcpy+0xe>
   d89aa:	bd10      	pop	{r4, pc}

000d89ac <memmove>:
   d89ac:	4288      	cmp	r0, r1
   d89ae:	b510      	push	{r4, lr}
   d89b0:	eb01 0402 	add.w	r4, r1, r2
   d89b4:	d902      	bls.n	d89bc <memmove+0x10>
   d89b6:	4284      	cmp	r4, r0
   d89b8:	4623      	mov	r3, r4
   d89ba:	d807      	bhi.n	d89cc <memmove+0x20>
   d89bc:	1e43      	subs	r3, r0, #1
   d89be:	42a1      	cmp	r1, r4
   d89c0:	d008      	beq.n	d89d4 <memmove+0x28>
   d89c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d89c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d89ca:	e7f8      	b.n	d89be <memmove+0x12>
   d89cc:	4402      	add	r2, r0
   d89ce:	4601      	mov	r1, r0
   d89d0:	428a      	cmp	r2, r1
   d89d2:	d100      	bne.n	d89d6 <memmove+0x2a>
   d89d4:	bd10      	pop	{r4, pc}
   d89d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d89da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d89de:	e7f7      	b.n	d89d0 <memmove+0x24>

000d89e0 <memset>:
   d89e0:	4402      	add	r2, r0
   d89e2:	4603      	mov	r3, r0
   d89e4:	4293      	cmp	r3, r2
   d89e6:	d100      	bne.n	d89ea <memset+0xa>
   d89e8:	4770      	bx	lr
   d89ea:	f803 1b01 	strb.w	r1, [r3], #1
   d89ee:	e7f9      	b.n	d89e4 <memset+0x4>

000d89f0 <srand>:
   d89f0:	b538      	push	{r3, r4, r5, lr}
   d89f2:	4b0d      	ldr	r3, [pc, #52]	; (d8a28 <srand+0x38>)
   d89f4:	681d      	ldr	r5, [r3, #0]
   d89f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d89f8:	4604      	mov	r4, r0
   d89fa:	b97b      	cbnz	r3, d8a1c <srand+0x2c>
   d89fc:	2018      	movs	r0, #24
   d89fe:	f7fc fe7d 	bl	d56fc <malloc>
   d8a02:	4a0a      	ldr	r2, [pc, #40]	; (d8a2c <srand+0x3c>)
   d8a04:	4b0a      	ldr	r3, [pc, #40]	; (d8a30 <srand+0x40>)
   d8a06:	63a8      	str	r0, [r5, #56]	; 0x38
   d8a08:	e9c0 2300 	strd	r2, r3, [r0]
   d8a0c:	4b09      	ldr	r3, [pc, #36]	; (d8a34 <srand+0x44>)
   d8a0e:	6083      	str	r3, [r0, #8]
   d8a10:	230b      	movs	r3, #11
   d8a12:	8183      	strh	r3, [r0, #12]
   d8a14:	2201      	movs	r2, #1
   d8a16:	2300      	movs	r3, #0
   d8a18:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8a1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8a1e:	2200      	movs	r2, #0
   d8a20:	611c      	str	r4, [r3, #16]
   d8a22:	615a      	str	r2, [r3, #20]
   d8a24:	bd38      	pop	{r3, r4, r5, pc}
   d8a26:	bf00      	nop
   d8a28:	2003e4a0 	.word	0x2003e4a0
   d8a2c:	abcd330e 	.word	0xabcd330e
   d8a30:	e66d1234 	.word	0xe66d1234
   d8a34:	0005deec 	.word	0x0005deec

000d8a38 <strcmp>:
   d8a38:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8a40:	2a01      	cmp	r2, #1
   d8a42:	bf28      	it	cs
   d8a44:	429a      	cmpcs	r2, r3
   d8a46:	d0f7      	beq.n	d8a38 <strcmp>
   d8a48:	1ad0      	subs	r0, r2, r3
   d8a4a:	4770      	bx	lr

000d8a4c <strcpy>:
   d8a4c:	4603      	mov	r3, r0
   d8a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8a52:	f803 2b01 	strb.w	r2, [r3], #1
   d8a56:	2a00      	cmp	r2, #0
   d8a58:	d1f9      	bne.n	d8a4e <strcpy+0x2>
   d8a5a:	4770      	bx	lr

000d8a5c <strlen>:
   d8a5c:	4603      	mov	r3, r0
   d8a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8a62:	2a00      	cmp	r2, #0
   d8a64:	d1fb      	bne.n	d8a5e <strlen+0x2>
   d8a66:	1a18      	subs	r0, r3, r0
   d8a68:	3801      	subs	r0, #1
   d8a6a:	4770      	bx	lr

000d8a6c <_strtol_l.isra.0>:
   d8a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a70:	4e3a      	ldr	r6, [pc, #232]	; (d8b5c <_strtol_l.isra.0+0xf0>)
   d8a72:	4686      	mov	lr, r0
   d8a74:	468c      	mov	ip, r1
   d8a76:	4660      	mov	r0, ip
   d8a78:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8a7c:	5da5      	ldrb	r5, [r4, r6]
   d8a7e:	f015 0508 	ands.w	r5, r5, #8
   d8a82:	d1f8      	bne.n	d8a76 <_strtol_l.isra.0+0xa>
   d8a84:	2c2d      	cmp	r4, #45	; 0x2d
   d8a86:	d133      	bne.n	d8af0 <_strtol_l.isra.0+0x84>
   d8a88:	f89c 4000 	ldrb.w	r4, [ip]
   d8a8c:	f04f 0801 	mov.w	r8, #1
   d8a90:	f100 0c02 	add.w	ip, r0, #2
   d8a94:	2b00      	cmp	r3, #0
   d8a96:	d05c      	beq.n	d8b52 <_strtol_l.isra.0+0xe6>
   d8a98:	2b10      	cmp	r3, #16
   d8a9a:	d10c      	bne.n	d8ab6 <_strtol_l.isra.0+0x4a>
   d8a9c:	2c30      	cmp	r4, #48	; 0x30
   d8a9e:	d10a      	bne.n	d8ab6 <_strtol_l.isra.0+0x4a>
   d8aa0:	f89c 0000 	ldrb.w	r0, [ip]
   d8aa4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8aa8:	2858      	cmp	r0, #88	; 0x58
   d8aaa:	d14d      	bne.n	d8b48 <_strtol_l.isra.0+0xdc>
   d8aac:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8ab0:	2310      	movs	r3, #16
   d8ab2:	f10c 0c02 	add.w	ip, ip, #2
   d8ab6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8aba:	3f01      	subs	r7, #1
   d8abc:	2600      	movs	r6, #0
   d8abe:	fbb7 f9f3 	udiv	r9, r7, r3
   d8ac2:	4630      	mov	r0, r6
   d8ac4:	fb03 7a19 	mls	sl, r3, r9, r7
   d8ac8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8acc:	2d09      	cmp	r5, #9
   d8ace:	d818      	bhi.n	d8b02 <_strtol_l.isra.0+0x96>
   d8ad0:	462c      	mov	r4, r5
   d8ad2:	42a3      	cmp	r3, r4
   d8ad4:	dd24      	ble.n	d8b20 <_strtol_l.isra.0+0xb4>
   d8ad6:	1c75      	adds	r5, r6, #1
   d8ad8:	d007      	beq.n	d8aea <_strtol_l.isra.0+0x7e>
   d8ada:	4581      	cmp	r9, r0
   d8adc:	d31d      	bcc.n	d8b1a <_strtol_l.isra.0+0xae>
   d8ade:	d101      	bne.n	d8ae4 <_strtol_l.isra.0+0x78>
   d8ae0:	45a2      	cmp	sl, r4
   d8ae2:	db1a      	blt.n	d8b1a <_strtol_l.isra.0+0xae>
   d8ae4:	fb00 4003 	mla	r0, r0, r3, r4
   d8ae8:	2601      	movs	r6, #1
   d8aea:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8aee:	e7eb      	b.n	d8ac8 <_strtol_l.isra.0+0x5c>
   d8af0:	2c2b      	cmp	r4, #43	; 0x2b
   d8af2:	bf08      	it	eq
   d8af4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8af8:	46a8      	mov	r8, r5
   d8afa:	bf08      	it	eq
   d8afc:	f100 0c02 	addeq.w	ip, r0, #2
   d8b00:	e7c8      	b.n	d8a94 <_strtol_l.isra.0+0x28>
   d8b02:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8b06:	2d19      	cmp	r5, #25
   d8b08:	d801      	bhi.n	d8b0e <_strtol_l.isra.0+0xa2>
   d8b0a:	3c37      	subs	r4, #55	; 0x37
   d8b0c:	e7e1      	b.n	d8ad2 <_strtol_l.isra.0+0x66>
   d8b0e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8b12:	2d19      	cmp	r5, #25
   d8b14:	d804      	bhi.n	d8b20 <_strtol_l.isra.0+0xb4>
   d8b16:	3c57      	subs	r4, #87	; 0x57
   d8b18:	e7db      	b.n	d8ad2 <_strtol_l.isra.0+0x66>
   d8b1a:	f04f 36ff 	mov.w	r6, #4294967295
   d8b1e:	e7e4      	b.n	d8aea <_strtol_l.isra.0+0x7e>
   d8b20:	1c73      	adds	r3, r6, #1
   d8b22:	d106      	bne.n	d8b32 <_strtol_l.isra.0+0xc6>
   d8b24:	2322      	movs	r3, #34	; 0x22
   d8b26:	f8ce 3000 	str.w	r3, [lr]
   d8b2a:	4638      	mov	r0, r7
   d8b2c:	b942      	cbnz	r2, d8b40 <_strtol_l.isra.0+0xd4>
   d8b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b32:	f1b8 0f00 	cmp.w	r8, #0
   d8b36:	d000      	beq.n	d8b3a <_strtol_l.isra.0+0xce>
   d8b38:	4240      	negs	r0, r0
   d8b3a:	2a00      	cmp	r2, #0
   d8b3c:	d0f7      	beq.n	d8b2e <_strtol_l.isra.0+0xc2>
   d8b3e:	b10e      	cbz	r6, d8b44 <_strtol_l.isra.0+0xd8>
   d8b40:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8b44:	6011      	str	r1, [r2, #0]
   d8b46:	e7f2      	b.n	d8b2e <_strtol_l.isra.0+0xc2>
   d8b48:	2430      	movs	r4, #48	; 0x30
   d8b4a:	2b00      	cmp	r3, #0
   d8b4c:	d1b3      	bne.n	d8ab6 <_strtol_l.isra.0+0x4a>
   d8b4e:	2308      	movs	r3, #8
   d8b50:	e7b1      	b.n	d8ab6 <_strtol_l.isra.0+0x4a>
   d8b52:	2c30      	cmp	r4, #48	; 0x30
   d8b54:	d0a4      	beq.n	d8aa0 <_strtol_l.isra.0+0x34>
   d8b56:	230a      	movs	r3, #10
   d8b58:	e7ad      	b.n	d8ab6 <_strtol_l.isra.0+0x4a>
   d8b5a:	bf00      	nop
   d8b5c:	000d8ef9 	.word	0x000d8ef9

000d8b60 <strtol>:
   d8b60:	4613      	mov	r3, r2
   d8b62:	460a      	mov	r2, r1
   d8b64:	4601      	mov	r1, r0
   d8b66:	4802      	ldr	r0, [pc, #8]	; (d8b70 <strtol+0x10>)
   d8b68:	6800      	ldr	r0, [r0, #0]
   d8b6a:	f7ff bf7f 	b.w	d8a6c <_strtol_l.isra.0>
   d8b6e:	bf00      	nop
   d8b70:	2003e4a0 	.word	0x2003e4a0

000d8b74 <__register_exitproc>:
   d8b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8b78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d8c34 <__register_exitproc+0xc0>
   d8b7c:	4606      	mov	r6, r0
   d8b7e:	f8d8 0000 	ldr.w	r0, [r8]
   d8b82:	461f      	mov	r7, r3
   d8b84:	460d      	mov	r5, r1
   d8b86:	4691      	mov	r9, r2
   d8b88:	f000 f856 	bl	d8c38 <__retarget_lock_acquire_recursive>
   d8b8c:	4b25      	ldr	r3, [pc, #148]	; (d8c24 <__register_exitproc+0xb0>)
   d8b8e:	681c      	ldr	r4, [r3, #0]
   d8b90:	b934      	cbnz	r4, d8ba0 <__register_exitproc+0x2c>
   d8b92:	4c25      	ldr	r4, [pc, #148]	; (d8c28 <__register_exitproc+0xb4>)
   d8b94:	601c      	str	r4, [r3, #0]
   d8b96:	4b25      	ldr	r3, [pc, #148]	; (d8c2c <__register_exitproc+0xb8>)
   d8b98:	b113      	cbz	r3, d8ba0 <__register_exitproc+0x2c>
   d8b9a:	681b      	ldr	r3, [r3, #0]
   d8b9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8ba0:	6863      	ldr	r3, [r4, #4]
   d8ba2:	2b1f      	cmp	r3, #31
   d8ba4:	dd07      	ble.n	d8bb6 <__register_exitproc+0x42>
   d8ba6:	f8d8 0000 	ldr.w	r0, [r8]
   d8baa:	f000 f847 	bl	d8c3c <__retarget_lock_release_recursive>
   d8bae:	f04f 30ff 	mov.w	r0, #4294967295
   d8bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8bb6:	b34e      	cbz	r6, d8c0c <__register_exitproc+0x98>
   d8bb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d8bbc:	b988      	cbnz	r0, d8be2 <__register_exitproc+0x6e>
   d8bbe:	4b1c      	ldr	r3, [pc, #112]	; (d8c30 <__register_exitproc+0xbc>)
   d8bc0:	b923      	cbnz	r3, d8bcc <__register_exitproc+0x58>
   d8bc2:	f8d8 0000 	ldr.w	r0, [r8]
   d8bc6:	f000 f838 	bl	d8c3a <__retarget_lock_release>
   d8bca:	e7f0      	b.n	d8bae <__register_exitproc+0x3a>
   d8bcc:	f44f 7084 	mov.w	r0, #264	; 0x108
   d8bd0:	f7fc fd94 	bl	d56fc <malloc>
   d8bd4:	2800      	cmp	r0, #0
   d8bd6:	d0f4      	beq.n	d8bc2 <__register_exitproc+0x4e>
   d8bd8:	2300      	movs	r3, #0
   d8bda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d8bde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d8be2:	6863      	ldr	r3, [r4, #4]
   d8be4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d8be8:	2201      	movs	r2, #1
   d8bea:	409a      	lsls	r2, r3
   d8bec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d8bf0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d8bf4:	4313      	orrs	r3, r2
   d8bf6:	2e02      	cmp	r6, #2
   d8bf8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d8bfc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d8c00:	bf02      	ittt	eq
   d8c02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d8c06:	431a      	orreq	r2, r3
   d8c08:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d8c0c:	6863      	ldr	r3, [r4, #4]
   d8c0e:	f8d8 0000 	ldr.w	r0, [r8]
   d8c12:	1c5a      	adds	r2, r3, #1
   d8c14:	3302      	adds	r3, #2
   d8c16:	6062      	str	r2, [r4, #4]
   d8c18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d8c1c:	f000 f80e 	bl	d8c3c <__retarget_lock_release_recursive>
   d8c20:	2000      	movs	r0, #0
   d8c22:	e7c6      	b.n	d8bb2 <__register_exitproc+0x3e>
   d8c24:	2003e7e0 	.word	0x2003e7e0
   d8c28:	2003e754 	.word	0x2003e754
   d8c2c:	00000000 	.word	0x00000000
   d8c30:	000d56fd 	.word	0x000d56fd
   d8c34:	2003e504 	.word	0x2003e504

000d8c38 <__retarget_lock_acquire_recursive>:
   d8c38:	4770      	bx	lr

000d8c3a <__retarget_lock_release>:
   d8c3a:	4770      	bx	lr

000d8c3c <__retarget_lock_release_recursive>:
   d8c3c:	4770      	bx	lr

000d8c3e <link_code_end>:
	...

000d8c40 <dynalib_user>:
   d8c40:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8c50:	0000 0000 7d7b 7b00 7422 3a22 6425 222c     ....{}.{"t":%d,"
   d8c60:	2270 253a 2c64 7322 3a22 6425 222c 2268     p":%d,"s":%d,"h"
   d8c70:	253a 7d64 6600 6572 7571 6e65 7963 7300     :%d}.frequency.s
   d8c80:	616d 7472 696c 6867 0074 656c 0064 227b     martlight.led.{"
   d8c90:	2274 253a 2c64 6c22 6769 7468 3a22 7325     t":%d,"light":%s
   d8ca0:	222c 656c 2264 253a 2c73 7422 6568 6d72     ,"led":%s,"therm
   d8cb0:	736f 6174 2274 253a 2c73 6322 2274 253a     ostat":%s,"ct":%
   d8cc0:	646c 007d 227b 304c 3a22 6425 222c 314c     ld}.{"L0":%d,"L1
   d8cd0:	3a22 6425 222c 2262 253a 2c64 7322 3a22     ":%d,"b":%d,"s":
   d8ce0:	6425 222c 226d 253a 2c64 4d22 3a22 6425     %d,"m":%d,"M":%d
   d8cf0:	007d 6e6f 6100 7475 006f 7262 6769 7468     }.on.auto.bright
   d8d00:	656e 7373 6d00 6e69 6d00 7861 7b00 7422     ness.min.max.{"t
   d8d10:	3a22 6625 222c 2263 253a 2c66 6822 3a22     ":%f,"c":%f,"h":
   d8d20:	6625 222c 6968 3a22 6625 222c 7064 3a22     %f,"hi":%f,"dp":
   d8d30:	6625 222c 226b 253a 7d66 0000               %f,"k":%f}..

000d8d3c <_ZTVN5spark13EthernetClassE>:
	...
   d8d44:	57bb 000d 57b1 000d 57a7 000d 579d 000d     .W...W...W...W..
   d8d54:	5791 000d 5785 000d 619d 000d 61a5 000d     .W...W...a...a..
   d8d64:	5779 000d 5771 000d 5767 000d 575d 000d     yW..qW..gW..]W..
   d8d74:	61d5 000d 7061 0070 5925 252d 2d6d 6425     .a..app.%Y-%m-%d
   d8d84:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8d94:	6d69 0065                                   ime.

000d8d98 <_ZTV9IPAddress>:
	...
   d8da0:	5d8d 000d 5d7d 000d 5d7f 000d               .]..}]...]..

000d8dac <_ZTV9USBSerial>:
	...
   d8db4:	5e65 000d 5ecd 000d 5ea3 000d 5a29 000d     e^...^...^..)Z..
   d8dc4:	5e95 000d 5e67 000d 5e77 000d 5ec7 000d     .^..g^..w^...^..
   d8dd4:	5e87 000d 5e5f 000d                         .^.._^..

000d8ddc <_ZTV11USARTSerial>:
	...
   d8de4:	5f71 000d 5fdf 000d 5fb7 000d 5a29 000d     q_..._..._..)Z..
   d8df4:	5f87 000d 5fa3 000d 5f95 000d 5fb1 000d     ._..._..._..._..
   d8e04:	5f73 000d 5f79 000d                         s_..y_..

000d8e0c <_ZTV7TwoWire>:
	...
   d8e14:	6065 000d 60af 000d 6087 000d 6067 000d     e`...`...`..g`..
   d8e24:	608f 000d 6097 000d 609f 000d 60a7 000d     .`...`...`...`..

000d8e34 <_ZTVN5spark9WiFiClassE>:
	...
   d8e3c:	613f 000d 6135 000d 612b 000d 60e1 000d     ?a..5a..+a...`..
   d8e4c:	611f 000d 6113 000d 619d 000d 61a5 000d     .a...a...a...a..
   d8e5c:	6107 000d 60ff 000d 60f5 000d 60eb 000d     .a...`...`...`..
   d8e6c:	61d5 000d                                   .a..

000d8e70 <_ZTVN5spark12NetworkClassE>:
	...
   d8e78:	615d 000d 6167 000d 6171 000d 617b 000d     ]a..ga..qa..{a..
   d8e88:	6185 000d 6191 000d 619d 000d 61a5 000d     .a...a...a...a..
   d8e98:	61ad 000d 61b9 000d 61c1 000d 61cb 000d     .a...a...a...a..
   d8ea8:	61d5 000d 2e30 0030 6166 736c 0065 0000     .a..0.0.false...

000d8eb8 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8ec0:	62eb 000d 62f1 000d 6307 000d 62ff 000d     .b...b...c...b..
   d8ed0:	62ed 000d                                   .b..

000d8ed4 <_ZSt7nothrow>:
   d8ed4:	0000 0000 6f70 0077 6f6c 6667 0000 0000     ....pow.logf....
   d8ee4:	0000 0000                                   ....

000d8ee8 <TWO52>:
   d8ee8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d8ef8 <_ctype_>:
   d8ef8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8f08:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8f18:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8f28:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8f38:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8f48:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8f58:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8f68:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8f78:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8ff9 <link_const_variable_data_end>:
   d8ff9:	00          	.byte	0x00
	...

000d8ffc <link_constructors_location>:
   d8ffc:	000d4591 	.word	0x000d4591
   d9000:	000d5245 	.word	0x000d5245
   d9004:	000d57c5 	.word	0x000d57c5
   d9008:	000d57ed 	.word	0x000d57ed
   d900c:	000d5a19 	.word	0x000d5a19
   d9010:	000d5b35 	.word	0x000d5b35
   d9014:	000d5bb9 	.word	0x000d5bb9
   d9018:	000d5c39 	.word	0x000d5c39
   d901c:	000d6149 	.word	0x000d6149
   d9020:	000d62a9 	.word	0x000d62a9

000d9024 <link_constructors_end>:
	...
