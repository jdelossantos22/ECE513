
h:/Documents/Masters/ECE513/Project/ECE513/Particle/smartLightExample/target/2.2.0-rc.2/argon/smartLightExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6d70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e4e8  000d6d74  0001e4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000029c  2003e554  2003e554  0002e554  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6de0  000d6de0  00026de0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6e08  000d6e08  00026e08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00144eef  00000000  00000000  00026e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015fcc  00000000  00000000  0016bcfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002978d  00000000  00000000  00181cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027e0  00000000  00000000  001ab454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000070b8  00000000  00000000  001adc34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038006  00000000  00000000  001b4cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036f17  00000000  00000000  001eccf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104971  00000000  00000000  00223c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006dac  00000000  00000000  0032857c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fb83 	bl	d673c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fba5 	bl	d678c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4e8 	.word	0x2003e4e8
   d404c:	000d6d74 	.word	0x000d6d74
   d4050:	2003e554 	.word	0x2003e554
   d4054:	2003e554 	.word	0x2003e554
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 f941 	bl	d52e8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d6d48 	.word	0x000d6d48
   d4080:	000d6d6c 	.word	0x000d6d6c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b904 	b.w	d4290 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9db 	bl	d4444 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 b8e1 	b.w	d5258 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 be21 	b.w	d4cdc <malloc>

000d409a <_Znaj>:
   d409a:	f000 be1f 	b.w	d4cdc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 be25 	b.w	d4cec <free>

000d40a2 <_ZdaPv>:
   d40a2:	f000 be23 	b.w	d4cec <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CToggleLedC1Ev>:
#include "toggleLed.h"

CToggleLed::CToggleLed() {
   d40b8:	b538      	push	{r3, r4, r5, lr}
   d40ba:	f100 0510 	add.w	r5, r0, #16
   d40be:	4604      	mov	r4, r0
   d40c0:	4908      	ldr	r1, [pc, #32]	; (d40e4 <_ZN10CToggleLedC1Ev+0x2c>)
   d40c2:	4628      	mov	r0, r5
   d40c4:	f000 fed7 	bl	d4e76 <_ZN6StringC1EPKc>
    state = S_OFF;
   d40c8:	2300      	movs	r3, #0
    hz = TOGGLE_FREQUENCY;
    period = TOGGLE_FREQUENCY * LOOP_FREQUENCY;
   d40ca:	220a      	movs	r2, #10
   d40cc:	2101      	movs	r1, #1
   d40ce:	e9c4 2102 	strd	r2, r1, [r4, #8]
    state = S_OFF;
   d40d2:	7023      	strb	r3, [r4, #0]
    tick = 0;
    statusStr = "{}";
   d40d4:	4904      	ldr	r1, [pc, #16]	; (d40e8 <_ZN10CToggleLedC1Ev+0x30>)
    tick = 0;
   d40d6:	6063      	str	r3, [r4, #4]
    statusStr = "{}";
   d40d8:	4628      	mov	r0, r5
   d40da:	f000 ff1f 	bl	d4f1c <_ZN6StringaSEPKc>
}
   d40de:	4620      	mov	r0, r4
   d40e0:	bd38      	pop	{r3, r4, r5, pc}
   d40e2:	bf00      	nop
   d40e4:	000d6c1f 	.word	0x000d6c1f
   d40e8:	000d6a00 	.word	0x000d6a00

000d40ec <_ZN10CToggleLed15createStatusStrEv>:
    }

    createStatusStr();
}

void CToggleLed::createStatusStr() {
   d40ec:	b510      	push	{r4, lr}
   d40ee:	b086      	sub	sp, #24
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40f0:	68c3      	ldr	r3, [r0, #12]
   d40f2:	9301      	str	r3, [sp, #4]
   d40f4:	7803      	ldrb	r3, [r0, #0]
   d40f6:	9300      	str	r3, [sp, #0]
   d40f8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
void CToggleLed::createStatusStr() {
   d40fc:	4604      	mov	r4, r0
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40fe:	4907      	ldr	r1, [pc, #28]	; (d411c <_ZN10CToggleLed15createStatusStrEv+0x30>)
   d4100:	a802      	add	r0, sp, #8
   d4102:	f000 ff49 	bl	d4f98 <_ZN6String6formatEPKcz>
   d4106:	a902      	add	r1, sp, #8
   d4108:	f104 0010 	add.w	r0, r4, #16
   d410c:	f000 fefe 	bl	d4f0c <_ZN6StringaSEOS_>
   d4110:	a802      	add	r0, sp, #8
   d4112:	f000 fe65 	bl	d4de0 <_ZN6StringD1Ev>
   d4116:	b006      	add	sp, #24
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	000d6a03 	.word	0x000d6a03

000d4120 <_ZN10CToggleLed7executeEv>:
void CToggleLed::execute() {
   d4120:	b538      	push	{r3, r4, r5, lr}
    switch (state) {
   d4122:	7802      	ldrb	r2, [r0, #0]
void CToggleLed::execute() {
   d4124:	4604      	mov	r4, r0
    switch (state) {
   d4126:	b132      	cbz	r2, d4136 <_ZN10CToggleLed7executeEv+0x16>
   d4128:	2a01      	cmp	r2, #1
   d412a:	d012      	beq.n	d4152 <_ZN10CToggleLed7executeEv+0x32>
    createStatusStr();
   d412c:	4620      	mov	r0, r4
}
   d412e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4132:	f7ff bfdb 	b.w	d40ec <_ZN10CToggleLed15createStatusStrEv>
            if (++tick >= period) {
   d4136:	6843      	ldr	r3, [r0, #4]
   d4138:	6881      	ldr	r1, [r0, #8]
   d413a:	3301      	adds	r3, #1
   d413c:	428b      	cmp	r3, r1
   d413e:	6043      	str	r3, [r0, #4]
   d4140:	dbf4      	blt.n	d412c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d4142:	6042      	str	r2, [r0, #4]
                digitalWrite(LED, HIGH);
   d4144:	2101      	movs	r1, #1
   d4146:	2007      	movs	r0, #7
   d4148:	f001 fe89 	bl	d5e5e <digitalWrite>
                state = CToggleLed::S_ON;
   d414c:	2301      	movs	r3, #1
   d414e:	7023      	strb	r3, [r4, #0]
   d4150:	e7ec      	b.n	d412c <_ZN10CToggleLed7executeEv+0xc>
            if (++tick >= period) {
   d4152:	6843      	ldr	r3, [r0, #4]
   d4154:	6882      	ldr	r2, [r0, #8]
   d4156:	3301      	adds	r3, #1
   d4158:	4293      	cmp	r3, r2
   d415a:	6043      	str	r3, [r0, #4]
   d415c:	dbe6      	blt.n	d412c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d415e:	2500      	movs	r5, #0
   d4160:	6045      	str	r5, [r0, #4]
                digitalWrite(LED, LOW);
   d4162:	4629      	mov	r1, r5
   d4164:	2007      	movs	r0, #7
   d4166:	f001 fe7a 	bl	d5e5e <digitalWrite>
                state = CToggleLed::S_OFF;
   d416a:	7025      	strb	r5, [r4, #0]
   d416c:	e7de      	b.n	d412c <_ZN10CToggleLed7executeEv+0xc>

000d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d416e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4170:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4172:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4174:	b17c      	cbz	r4, d4196 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4176:	6863      	ldr	r3, [r4, #4]
   d4178:	3b01      	subs	r3, #1
   d417a:	6063      	str	r3, [r4, #4]
   d417c:	b95b      	cbnz	r3, d4196 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	689b      	ldr	r3, [r3, #8]
   d4184:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4186:	68a3      	ldr	r3, [r4, #8]
   d4188:	3b01      	subs	r3, #1
   d418a:	60a3      	str	r3, [r4, #8]
   d418c:	b91b      	cbnz	r3, d4196 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d418e:	6823      	ldr	r3, [r4, #0]
   d4190:	4620      	mov	r0, r4
   d4192:	68db      	ldr	r3, [r3, #12]
   d4194:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4196:	4628      	mov	r0, r5
   d4198:	bd38      	pop	{r3, r4, r5, pc}

000d419a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d419a:	b513      	push	{r0, r1, r4, lr}
   d419c:	460b      	mov	r3, r1
   d419e:	4604      	mov	r4, r0
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41a0:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d41a2:	685b      	ldr	r3, [r3, #4]
    return JSONValue(v_, d_);
   d41a4:	6909      	ldr	r1, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41a6:	9200      	str	r2, [sp, #0]
      : _M_pi(__r._M_pi)
   d41a8:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d41aa:	b113      	cbz	r3, d41b2 <_ZNK5spark18JSONObjectIterator5valueEv+0x18>
    { ++_M_use_count; }
   d41ac:	685a      	ldr	r2, [r3, #4]
   d41ae:	3201      	adds	r2, #1
   d41b0:	605a      	str	r2, [r3, #4]
   d41b2:	466a      	mov	r2, sp
   d41b4:	4620      	mov	r0, r4
   d41b6:	f001 fbc5 	bl	d5944 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41ba:	a801      	add	r0, sp, #4
   d41bc:	f7ff ffd7 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d41c0:	4620      	mov	r0, r4
   d41c2:	b002      	add	sp, #8
   d41c4:	bd10      	pop	{r4, pc}
	...

000d41c8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>:
void CToggleLed::cmdProcessing(JSONValue cmdJson) {
   d41c8:	b570      	push	{r4, r5, r6, lr}
   d41ca:	460b      	mov	r3, r1
   d41cc:	b08c      	sub	sp, #48	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41ce:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d41d0:	685b      	ldr	r3, [r3, #4]
        JSONObjectIterator(value.t_, value.d_) {
   d41d2:	6889      	ldr	r1, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41d4:	9202      	str	r2, [sp, #8]
   d41d6:	4604      	mov	r4, r0
      : _M_pi(__r._M_pi)
   d41d8:	9303      	str	r3, [sp, #12]
	if (_M_pi != 0)
   d41da:	b113      	cbz	r3, d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x1a>
    { ++_M_use_count; }
   d41dc:	685a      	ldr	r2, [r3, #4]
   d41de:	3201      	adds	r2, #1
   d41e0:	605a      	str	r2, [r3, #4]
   d41e2:	aa02      	add	r2, sp, #8
   d41e4:	a806      	add	r0, sp, #24
   d41e6:	f001 fd55 	bl	d5c94 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d41ea:	a803      	add	r0, sp, #12
   d41ec:	f7ff ffbf 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d41f0:	4e1f      	ldr	r6, [pc, #124]	; (d4270 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0xa8>)
    while (iter.next()) {
   d41f2:	a806      	add	r0, sp, #24
   d41f4:	f001 fd66 	bl	d5cc4 <_ZN5spark18JSONObjectIterator4nextEv>
   d41f8:	2800      	cmp	r0, #0
   d41fa:	d033      	beq.n	d4264 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x9c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41fc:	9b06      	ldr	r3, [sp, #24]
   d41fe:	9300      	str	r3, [sp, #0]
      : _M_pi(__r._M_pi)
   d4200:	9b07      	ldr	r3, [sp, #28]
    return JSONString(k_, d_);
   d4202:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4204:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d4206:	b113      	cbz	r3, d420e <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x46>
    { ++_M_use_count; }
   d4208:	685a      	ldr	r2, [r3, #4]
   d420a:	3201      	adds	r2, #1
   d420c:	605a      	str	r2, [r3, #4]
   d420e:	466a      	mov	r2, sp
   d4210:	a802      	add	r0, sp, #8
   d4212:	f001 fd1b 	bl	d5c4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4216:	a801      	add	r0, sp, #4
   d4218:	f7ff ffa9 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d421c:	9804      	ldr	r0, [sp, #16]
   d421e:	4631      	mov	r1, r6
   d4220:	f002 fae0 	bl	d67e4 <strcmp>
   d4224:	4605      	mov	r5, r0
   d4226:	a803      	add	r0, sp, #12
   d4228:	f7ff ffa1 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "frequency") {
   d422c:	2d00      	cmp	r5, #0
   d422e:	d1e0      	bne.n	d41f2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
            hz = (int)iter.value().toInt();
   d4230:	a906      	add	r1, sp, #24
   d4232:	a802      	add	r0, sp, #8
   d4234:	f7ff ffb1 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4238:	a802      	add	r0, sp, #8
   d423a:	f001 fbf7 	bl	d5a2c <_ZNK5spark9JSONValue5toIntEv>
   d423e:	60e0      	str	r0, [r4, #12]
   d4240:	a803      	add	r0, sp, #12
   d4242:	f7ff ff94 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            period = (int)iter.value().toInt() * LOOP_FREQUENCY;
   d4246:	a906      	add	r1, sp, #24
   d4248:	a802      	add	r0, sp, #8
   d424a:	f7ff ffa6 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d424e:	a802      	add	r0, sp, #8
   d4250:	f001 fbec 	bl	d5a2c <_ZNK5spark9JSONValue5toIntEv>
   d4254:	230a      	movs	r3, #10
   d4256:	4358      	muls	r0, r3
   d4258:	60a0      	str	r0, [r4, #8]
   d425a:	a803      	add	r0, sp, #12
   d425c:	f7ff ff87 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tick = 0;
   d4260:	6065      	str	r5, [r4, #4]
   d4262:	e7c6      	b.n	d41f2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
   d4264:	a807      	add	r0, sp, #28
   d4266:	f7ff ff82 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d426a:	b00c      	add	sp, #48	; 0x30
   d426c:	bd70      	pop	{r4, r5, r6, pc}
   d426e:	bf00      	nop
   d4270:	000d6a21 	.word	0x000d6a21

000d4274 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4274:	b40e      	push	{r1, r2, r3}
   d4276:	b503      	push	{r0, r1, lr}
   d4278:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d427a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d427c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4280:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4282:	f000 ff0e 	bl	d50a2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4286:	b002      	add	sp, #8
   d4288:	f85d eb04 	ldr.w	lr, [sp], #4
   d428c:	b003      	add	sp, #12
   d428e:	4770      	bx	lr

000d4290 <setup>:
   d4290:	b508      	push	{r3, lr}
   d4292:	2101      	movs	r1, #1
   d4294:	2007      	movs	r0, #7
   d4296:	f001 fdd1 	bl	d5e3c <pinMode>
   d429a:	2001      	movs	r0, #1
   d429c:	f000 ff81 	bl	d51a2 <_ZN8RGBClass7controlEb>
   d42a0:	22ff      	movs	r2, #255	; 0xff
   d42a2:	4611      	mov	r1, r2
   d42a4:	4610      	mov	r0, r2
   d42a6:	f000 ff8c 	bl	d51c2 <_ZN8RGBClass5colorEiii>
   d42aa:	f001 f91f 	bl	d54ec <_Z16_fetch_usbserialv>
   d42ae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42b2:	f001 f90f 	bl	d54d4 <_ZN9USBSerial5beginEl>
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <setup+0x30>)
   d42b8:	2200      	movs	r2, #0
   d42ba:	601a      	str	r2, [r3, #0]
   d42bc:	bd08      	pop	{r3, pc}
   d42be:	bf00      	nop
   d42c0:	2003e554 	.word	0x2003e554

000d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d42c4:	680b      	ldr	r3, [r1, #0]
   d42c6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d42c8:	b113      	cbz	r3, d42d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d42ca:	685a      	ldr	r2, [r3, #4]
   d42cc:	3201      	adds	r2, #1
   d42ce:	605a      	str	r2, [r3, #4]
      }
   d42d0:	4770      	bx	lr
	...

000d42d4 <_Z19serialCmdProcessingv>:
   d42d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42d6:	b097      	sub	sp, #92	; 0x5c
   d42d8:	f001 f908 	bl	d54ec <_Z16_fetch_usbserialv>
   d42dc:	6803      	ldr	r3, [r0, #0]
   d42de:	691b      	ldr	r3, [r3, #16]
   d42e0:	4798      	blx	r3
   d42e2:	2800      	cmp	r0, #0
   d42e4:	f340 80a1 	ble.w	d442a <_Z19serialCmdProcessingv+0x156>
   d42e8:	4951      	ldr	r1, [pc, #324]	; (d4430 <_Z19serialCmdProcessingv+0x15c>)
   d42ea:	a808      	add	r0, sp, #32
   d42ec:	f000 fdc3 	bl	d4e76 <_ZN6StringC1EPKc>
   d42f0:	f001 f8fc 	bl	d54ec <_Z16_fetch_usbserialv>
   d42f4:	6803      	ldr	r3, [r0, #0]
   d42f6:	691b      	ldr	r3, [r3, #16]
   d42f8:	4798      	blx	r3
   d42fa:	b180      	cbz	r0, d431e <_Z19serialCmdProcessingv+0x4a>
   d42fc:	f001 f8f6 	bl	d54ec <_Z16_fetch_usbserialv>
   d4300:	6803      	ldr	r3, [r0, #0]
   d4302:	695b      	ldr	r3, [r3, #20]
   d4304:	4798      	blx	r3
   d4306:	b2c1      	uxtb	r1, r0
   d4308:	a810      	add	r0, sp, #64	; 0x40
   d430a:	f000 fe19 	bl	d4f40 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d430e:	a910      	add	r1, sp, #64	; 0x40
   d4310:	a808      	add	r0, sp, #32
   d4312:	f000 fe3d 	bl	d4f90 <_ZN6String6concatERKS_>
   d4316:	a810      	add	r0, sp, #64	; 0x40
   d4318:	f000 fd62 	bl	d4de0 <_ZN6StringD1Ev>
   d431c:	e7e8      	b.n	d42f0 <_Z19serialCmdProcessingv+0x1c>
   d431e:	9908      	ldr	r1, [sp, #32]
    return parseCopy(json, strlen(json));
   d4320:	9101      	str	r1, [sp, #4]
   d4322:	4608      	mov	r0, r1
   d4324:	f002 fa70 	bl	d6808 <strlen>
   d4328:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d432a:	4e42      	ldr	r6, [pc, #264]	; (d4434 <_Z19serialCmdProcessingv+0x160>)
   d432c:	4f42      	ldr	r7, [pc, #264]	; (d4438 <_Z19serialCmdProcessingv+0x164>)
   d432e:	4d43      	ldr	r5, [pc, #268]	; (d443c <_Z19serialCmdProcessingv+0x168>)
    return parseCopy(json, strlen(json));
   d4330:	4602      	mov	r2, r0
   d4332:	a805      	add	r0, sp, #20
   d4334:	f001 fcee 	bl	d5d14 <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d4338:	9c07      	ldr	r4, [sp, #28]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d433a:	9b05      	ldr	r3, [sp, #20]
   d433c:	930c      	str	r3, [sp, #48]	; 0x30
   d433e:	a906      	add	r1, sp, #24
   d4340:	a80d      	add	r0, sp, #52	; 0x34
   d4342:	f7ff ffbf 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4346:	aa0c      	add	r2, sp, #48	; 0x30
   d4348:	4621      	mov	r1, r4
   d434a:	a810      	add	r0, sp, #64	; 0x40
   d434c:	f001 fca2 	bl	d5c94 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4350:	a80d      	add	r0, sp, #52	; 0x34
   d4352:	f7ff ff0c 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4356:	a810      	add	r0, sp, #64	; 0x40
   d4358:	f001 fcb4 	bl	d5cc4 <_ZN5spark18JSONObjectIterator4nextEv>
   d435c:	2800      	cmp	r0, #0
   d435e:	d05b      	beq.n	d4418 <_Z19serialCmdProcessingv+0x144>
    return JSONString(k_, d_);
   d4360:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4362:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4364:	9303      	str	r3, [sp, #12]
   d4366:	a911      	add	r1, sp, #68	; 0x44
   d4368:	a804      	add	r0, sp, #16
   d436a:	f7ff ffab 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d436e:	4621      	mov	r1, r4
   d4370:	aa03      	add	r2, sp, #12
   d4372:	a80c      	add	r0, sp, #48	; 0x30
   d4374:	f001 fc6a 	bl	d5c4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4378:	a804      	add	r0, sp, #16
   d437a:	f7ff fef8 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d437e:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4380:	4631      	mov	r1, r6
   d4382:	f002 fa2f 	bl	d67e4 <strcmp>
   d4386:	4604      	mov	r4, r0
   d4388:	a80d      	add	r0, sp, #52	; 0x34
   d438a:	f7ff fef0 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d438e:	b9b4      	cbnz	r4, d43be <_Z19serialCmdProcessingv+0xea>
    return JSONValue(v_, d_);
   d4390:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4392:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4394:	9303      	str	r3, [sp, #12]
   d4396:	a911      	add	r1, sp, #68	; 0x44
   d4398:	a804      	add	r0, sp, #16
   d439a:	f7ff ff93 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d439e:	4621      	mov	r1, r4
   d43a0:	aa03      	add	r2, sp, #12
   d43a2:	a80c      	add	r0, sp, #48	; 0x30
   d43a4:	f001 face 	bl	d5944 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43a8:	a804      	add	r0, sp, #16
   d43aa:	f7ff fee0 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ae:	4824      	ldr	r0, [pc, #144]	; (d4440 <_Z19serialCmdProcessingv+0x16c>)
   d43b0:	a90c      	add	r1, sp, #48	; 0x30
   d43b2:	f000 f9d1 	bl	d4758 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d43b6:	a80d      	add	r0, sp, #52	; 0x34
   d43b8:	f7ff fed9 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43bc:	e7cb      	b.n	d4356 <_Z19serialCmdProcessingv+0x82>
    return JSONString(k_, d_);
   d43be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d43c2:	9303      	str	r3, [sp, #12]
   d43c4:	a911      	add	r1, sp, #68	; 0x44
   d43c6:	a804      	add	r0, sp, #16
   d43c8:	f7ff ff7c 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43cc:	4621      	mov	r1, r4
   d43ce:	aa03      	add	r2, sp, #12
   d43d0:	a80c      	add	r0, sp, #48	; 0x30
   d43d2:	f001 fc3b 	bl	d5c4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43d6:	a804      	add	r0, sp, #16
   d43d8:	f7ff fec9 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d43dc:	980e      	ldr	r0, [sp, #56]	; 0x38
   d43de:	4639      	mov	r1, r7
   d43e0:	f002 fa00 	bl	d67e4 <strcmp>
   d43e4:	4604      	mov	r4, r0
   d43e6:	a80d      	add	r0, sp, #52	; 0x34
   d43e8:	f7ff fec1 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ec:	2c00      	cmp	r4, #0
   d43ee:	d1b2      	bne.n	d4356 <_Z19serialCmdProcessingv+0x82>
    return JSONValue(v_, d_);
   d43f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d43f4:	9303      	str	r3, [sp, #12]
   d43f6:	a911      	add	r1, sp, #68	; 0x44
   d43f8:	a804      	add	r0, sp, #16
   d43fa:	f7ff ff63 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43fe:	4621      	mov	r1, r4
   d4400:	aa03      	add	r2, sp, #12
   d4402:	a80c      	add	r0, sp, #48	; 0x30
   d4404:	f001 fa9e 	bl	d5944 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4408:	a804      	add	r0, sp, #16
   d440a:	f7ff feb0 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d440e:	a90c      	add	r1, sp, #48	; 0x30
   d4410:	4628      	mov	r0, r5
   d4412:	f7ff fed9 	bl	d41c8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>
   d4416:	e7ce      	b.n	d43b6 <_Z19serialCmdProcessingv+0xe2>
   d4418:	a811      	add	r0, sp, #68	; 0x44
   d441a:	f7ff fea8 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d441e:	a806      	add	r0, sp, #24
   d4420:	f7ff fea5 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4424:	a808      	add	r0, sp, #32
   d4426:	f000 fcdb 	bl	d4de0 <_ZN6StringD1Ev>
   d442a:	b017      	add	sp, #92	; 0x5c
   d442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d442e:	bf00      	nop
   d4430:	000d6c1f 	.word	0x000d6c1f
   d4434:	000d6a2b 	.word	0x000d6a2b
   d4438:	000d6a36 	.word	0x000d6a36
   d443c:	2003e588 	.word	0x2003e588
   d4440:	2003e558 	.word	0x2003e558

000d4444 <loop>:
   d4444:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4446:	b08d      	sub	sp, #52	; 0x34

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4448:	f000 fa5c 	bl	d4904 <HAL_Timer_Get_Milli_Seconds>
   d444c:	4d22      	ldr	r5, [pc, #136]	; (d44d8 <loop+0x94>)
   d444e:	4604      	mov	r4, r0
   d4450:	f7ff ff40 	bl	d42d4 <_Z19serialCmdProcessingv>
   d4454:	4821      	ldr	r0, [pc, #132]	; (d44dc <loop+0x98>)
   d4456:	f000 f933 	bl	d46c0 <_ZN11CSmartLight7executeEv>
   d445a:	4821      	ldr	r0, [pc, #132]	; (d44e0 <loop+0x9c>)
   d445c:	f7ff fe60 	bl	d4120 <_ZN10CToggleLed7executeEv>
   d4460:	f000 fa50 	bl	d4904 <HAL_Timer_Get_Milli_Seconds>
   d4464:	6829      	ldr	r1, [r5, #0]
   d4466:	220a      	movs	r2, #10
   d4468:	fb91 f3f2 	sdiv	r3, r1, r2
   d446c:	fb02 1313 	mls	r3, r2, r3, r1
   d4470:	4606      	mov	r6, r0
   d4472:	bb23      	cbnz	r3, d44be <loop+0x7a>
   d4474:	602b      	str	r3, [r5, #0]
   d4476:	f001 f839 	bl	d54ec <_Z16_fetch_usbserialv>
   d447a:	4607      	mov	r7, r0
   d447c:	f000 fe74 	bl	d5168 <_ZN9TimeClass3nowEv>

    void execute();
    
    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d4480:	4918      	ldr	r1, [pc, #96]	; (d44e4 <loop+0xa0>)
   d4482:	9003      	str	r0, [sp, #12]
   d4484:	a804      	add	r0, sp, #16
   d4486:	f000 fd36 	bl	d4ef6 <_ZN6StringC1ERKS_>
   d448a:	9b04      	ldr	r3, [sp, #16]
class CToggleLed {
public:
    CToggleLed();
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    String getStatusStr() {return statusStr;};
   d448c:	4916      	ldr	r1, [pc, #88]	; (d44e8 <loop+0xa4>)
   d448e:	9302      	str	r3, [sp, #8]
   d4490:	a808      	add	r0, sp, #32
   d4492:	f000 fd30 	bl	d4ef6 <_ZN6StringC1ERKS_>
   d4496:	1b36      	subs	r6, r6, r4
   d4498:	9908      	ldr	r1, [sp, #32]
   d449a:	9100      	str	r1, [sp, #0]
   d449c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d44a0:	4912      	ldr	r1, [pc, #72]	; (d44ec <loop+0xa8>)
   d44a2:	9601      	str	r6, [sp, #4]
   d44a4:	4638      	mov	r0, r7
   d44a6:	f7ff fee5 	bl	d4274 <_ZN5Print6printfEPKcz>
   d44aa:	a808      	add	r0, sp, #32
   d44ac:	f000 fc98 	bl	d4de0 <_ZN6StringD1Ev>
   d44b0:	a804      	add	r0, sp, #16
   d44b2:	f000 fc95 	bl	d4de0 <_ZN6StringD1Ev>
   d44b6:	f001 f819 	bl	d54ec <_Z16_fetch_usbserialv>
   d44ba:	f000 fdc8 	bl	d504e <_ZN5Print7printlnEv>
   d44be:	682b      	ldr	r3, [r5, #0]
   d44c0:	3301      	adds	r3, #1
   d44c2:	602b      	str	r3, [r5, #0]
   d44c4:	f000 fa1e 	bl	d4904 <HAL_Timer_Get_Milli_Seconds>
   d44c8:	3464      	adds	r4, #100	; 0x64
   d44ca:	1a20      	subs	r0, r4, r0
   d44cc:	d001      	beq.n	d44d2 <loop+0x8e>
   d44ce:	f000 fe65 	bl	d519c <delay>
   d44d2:	b00d      	add	sp, #52	; 0x34
   d44d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44d6:	bf00      	nop
   d44d8:	2003e554 	.word	0x2003e554
   d44dc:	2003e558 	.word	0x2003e558
   d44e0:	2003e588 	.word	0x2003e588
   d44e4:	2003e578 	.word	0x2003e578
   d44e8:	2003e598 	.word	0x2003e598
   d44ec:	000d6a3a 	.word	0x000d6a3a

000d44f0 <_GLOBAL__sub_I_smartLight>:
   d44f0:	b508      	push	{r3, lr}
   d44f2:	2100      	movs	r1, #0
   d44f4:	2001      	movs	r0, #1
   d44f6:	f000 fb4d 	bl	d4b94 <system_thread_set_state>
   d44fa:	4804      	ldr	r0, [pc, #16]	; (d450c <_GLOBAL__sub_I_smartLight+0x1c>)
   d44fc:	f000 f80a 	bl	d4514 <_ZN11CSmartLightC1Ev>
   d4500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4504:	4802      	ldr	r0, [pc, #8]	; (d4510 <_GLOBAL__sub_I_smartLight+0x20>)
   d4506:	f7ff bdd7 	b.w	d40b8 <_ZN10CToggleLedC1Ev>
   d450a:	bf00      	nop
   d450c:	2003e558 	.word	0x2003e558
   d4510:	2003e588 	.word	0x2003e588

000d4514 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d4514:	b538      	push	{r3, r4, r5, lr}
   d4516:	f100 0520 	add.w	r5, r0, #32
   d451a:	4604      	mov	r4, r0
   d451c:	490c      	ldr	r1, [pc, #48]	; (d4550 <_ZN11CSmartLightC1Ev+0x3c>)
   d451e:	4628      	mov	r0, r5
   d4520:	f000 fca9 	bl	d4e76 <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d4524:	f240 1301 	movw	r3, #257	; 0x101
   d4528:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d452a:	2380      	movs	r3, #128	; 0x80
   d452c:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d452e:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4536:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d453a:	4628      	mov	r0, r5
   d453c:	4905      	ldr	r1, [pc, #20]	; (d4554 <_ZN11CSmartLightC1Ev+0x40>)
   d453e:	f000 fced 	bl	d4f1c <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d4542:	4b05      	ldr	r3, [pc, #20]	; (d4558 <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d4544:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4546:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d454a:	4620      	mov	r0, r4
   d454c:	bd38      	pop	{r3, r4, r5, pc}
   d454e:	bf00      	nop
   d4550:	000d6c1f 	.word	0x000d6c1f
   d4554:	000d6a00 	.word	0x000d6a00
   d4558:	fffe7961 	.word	0xfffe7961

000d455c <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d455c:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d455e:	f000 fe51 	bl	d5204 <_ZN8RGBClass10brightnessEv>
   d4562:	b128      	cbz	r0, d4570 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d4564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4568:	2101      	movs	r1, #1
   d456a:	2000      	movs	r0, #0
   d456c:	f000 be3c 	b.w	d51e8 <_ZN8RGBClass10brightnessEhb>
}
   d4570:	bd08      	pop	{r3, pc}
   d4572:	0000      	movs	r0, r0
   d4574:	0000      	movs	r0, r0
	...

000d4578 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d4578:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d457a:	4b13      	ldr	r3, [pc, #76]	; (d45c8 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d457c:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d457e:	4604      	mov	r4, r0
   d4580:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d4582:	d10a      	bne.n	d459a <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d4584:	6865      	ldr	r5, [r4, #4]
   d4586:	f000 fe3d 	bl	d5204 <_ZN8RGBClass10brightnessEv>
   d458a:	4285      	cmp	r5, r0
   d458c:	d016      	beq.n	d45bc <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d458e:	7920      	ldrb	r0, [r4, #4]
   d4590:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
    RGB.brightness(brightness);
}
   d4592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d4596:	f000 be27 	b.w	d51e8 <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d459a:	f001 fe25 	bl	d61e8 <__aeabi_i2d>
   d459e:	a308      	add	r3, pc, #32	; (adr r3, d45c0 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d45a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45a4:	f001 fe8a 	bl	d62bc <__aeabi_dmul>
   d45a8:	4b08      	ldr	r3, [pc, #32]	; (d45cc <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d45aa:	2200      	movs	r2, #0
   d45ac:	f001 ffb0 	bl	d6510 <__aeabi_ddiv>
   d45b0:	f002 f896 	bl	d66e0 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d45b4:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d45b6:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d45b8:	b2c0      	uxtb	r0, r0
   d45ba:	e7ea      	b.n	d4592 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d45bc:	bd38      	pop	{r3, r4, r5, pc}
   d45be:	bf00      	nop
   d45c0:	00000000 	.word	0x00000000
   d45c4:	406fe000 	.word	0x406fe000
   d45c8:	fffe7961 	.word	0xfffe7961
   d45cc:	40590000 	.word	0x40590000

000d45d0 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d45d0:	b510      	push	{r4, lr}
   d45d2:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d45d4:	2013      	movs	r0, #19
   d45d6:	f001 fc5b 	bl	d5e90 <analogRead>
   d45da:	60a0      	str	r0, [r4, #8]
}
   d45dc:	bd10      	pop	{r4, pc}
	...

000d45e0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d45e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45e4:	4604      	mov	r4, r0
    readSensorVal();
   d45e6:	f7ff fff3 	bl	d45d0 <_ZN11CSmartLight13readSensorValEv>
    if(curSensorVal < sensorMin) curSensorVal = sensorMin;
   d45ea:	6925      	ldr	r5, [r4, #16]
   d45ec:	68a0      	ldr	r0, [r4, #8]
    if(curSensorVal > sensorMax) curSensorVal = sensorMax;
   d45ee:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d45f2:	42a8      	cmp	r0, r5
   d45f4:	bfb8      	it	lt
   d45f6:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin)/(double)(sensorMax-sensorMin);
   d45f8:	4580      	cmp	r8, r0
   d45fa:	bfd4      	ite	le
   d45fc:	ebc5 0008 	rsble	r0, r5, r8
   d4600:	ebc5 0000 	rsbgt	r0, r5, r0
   d4604:	f001 fdf0 	bl	d61e8 <__aeabi_i2d>
   d4608:	4606      	mov	r6, r0
   d460a:	eba8 0005 	sub.w	r0, r8, r5
   d460e:	460f      	mov	r7, r1
   d4610:	f001 fdea 	bl	d61e8 <__aeabi_i2d>
   d4614:	4602      	mov	r2, r0
   d4616:	460b      	mov	r3, r1
   d4618:	4630      	mov	r0, r6
   d461a:	4639      	mov	r1, r7
   d461c:	f001 ff78 	bl	d6510 <__aeabi_ddiv>
   d4620:	4602      	mov	r2, r0
   d4622:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4624:	2000      	movs	r0, #0
   d4626:	490a      	ldr	r1, [pc, #40]	; (d4650 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4628:	f001 fc90 	bl	d5f4c <__aeabi_dsub>
   d462c:	a306      	add	r3, pc, #24	; (adr r3, d4648 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d462e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4632:	f001 fe43 	bl	d62bc <__aeabi_dmul>
   d4636:	f002 f853 	bl	d66e0 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d463a:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d463c:	6060      	str	r0, [r4, #4]
}
   d463e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4642:	b2c0      	uxtb	r0, r0
   d4644:	f000 bdd0 	b.w	d51e8 <_ZN8RGBClass10brightnessEhb>
   d4648:	00000000 	.word	0x00000000
   d464c:	406fe000 	.word	0x406fe000
   d4650:	3ff00000 	.word	0x3ff00000
   d4654:	00000000 	.word	0x00000000

000d4658 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4658:	b570      	push	{r4, r5, r6, lr}
   d465a:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d465c:	68c3      	ldr	r3, [r0, #12]
   d465e:	7846      	ldrb	r6, [r0, #1]
   d4660:	7805      	ldrb	r5, [r0, #0]
   d4662:	9303      	str	r3, [sp, #12]
   d4664:	6903      	ldr	r3, [r0, #16]
   d4666:	9302      	str	r3, [sp, #8]
   d4668:	6883      	ldr	r3, [r0, #8]
   d466a:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d466c:	4604      	mov	r4, r0
    state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d466e:	6840      	ldr	r0, [r0, #4]
   d4670:	f001 fdba 	bl	d61e8 <__aeabi_i2d>
   d4674:	a310      	add	r3, pc, #64	; (adr r3, d46b8 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4676:	e9d3 2300 	ldrd	r2, r3, [r3]
   d467a:	f001 ff49 	bl	d6510 <__aeabi_ddiv>
   d467e:	4b0c      	ldr	r3, [pc, #48]	; (d46b0 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4680:	2200      	movs	r2, #0
   d4682:	f001 fe1b 	bl	d62bc <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4686:	f002 f82b 	bl	d66e0 <__aeabi_d2iz>
   d468a:	4633      	mov	r3, r6
   d468c:	462a      	mov	r2, r5
   d468e:	9000      	str	r0, [sp, #0]
   d4690:	4908      	ldr	r1, [pc, #32]	; (d46b4 <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4692:	a804      	add	r0, sp, #16
   d4694:	f000 fc80 	bl	d4f98 <_ZN6String6formatEPKcz>
    state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4698:	a904      	add	r1, sp, #16
   d469a:	f104 0020 	add.w	r0, r4, #32
   d469e:	f000 fc35 	bl	d4f0c <_ZN6StringaSEOS_>
   d46a2:	a804      	add	r0, sp, #16
   d46a4:	f000 fb9c 	bl	d4de0 <_ZN6StringD1Ev>
   d46a8:	b008      	add	sp, #32
   d46aa:	bd70      	pop	{r4, r5, r6, pc}
   d46ac:	f3af 8000 	nop.w
   d46b0:	40590000 	.word	0x40590000
   d46b4:	000d6a60 	.word	0x000d6a60
   d46b8:	00000000 	.word	0x00000000
   d46bc:	406fe000 	.word	0x406fe000

000d46c0 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d46c0:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d46c2:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d46c4:	4604      	mov	r4, r0
    switch (state_L0) {
   d46c6:	b155      	cbz	r5, d46de <_ZN11CSmartLight7executeEv+0x1e>
   d46c8:	2d01      	cmp	r5, #1
   d46ca:	d013      	beq.n	d46f4 <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d46cc:	4b17      	ldr	r3, [pc, #92]	; (d472c <_ZN11CSmartLight7executeEv+0x6c>)
    cmd.Brightness = INVALID_CMD;
   d46ce:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d46d0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d46d4:	4620      	mov	r0, r4
}
   d46d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d46da:	f7ff bfbd 	b.w	d4658 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d46de:	f7ff ff3d 	bl	d455c <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d46e2:	6963      	ldr	r3, [r4, #20]
   d46e4:	4a11      	ldr	r2, [pc, #68]	; (d472c <_ZN11CSmartLight7executeEv+0x6c>)
   d46e6:	4293      	cmp	r3, r2
   d46e8:	d0f0      	beq.n	d46cc <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) { 
   d46ea:	2b00      	cmp	r3, #0
   d46ec:	d0ee      	beq.n	d46cc <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d46ee:	2301      	movs	r3, #1
   d46f0:	8023      	strh	r3, [r4, #0]
   d46f2:	e7eb      	b.n	d46cc <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d46f4:	7843      	ldrb	r3, [r0, #1]
   d46f6:	b133      	cbz	r3, d4706 <_ZN11CSmartLight7executeEv+0x46>
   d46f8:	2b01      	cmp	r3, #1
   d46fa:	d00f      	beq.n	d471c <_ZN11CSmartLight7executeEv+0x5c>
                if(!cmd.On) state_L0= CSmartLight::S_OFF;
   d46fc:	6963      	ldr	r3, [r4, #20]
   d46fe:	2b00      	cmp	r3, #0
   d4700:	d1e4      	bne.n	d46cc <_ZN11CSmartLight7executeEv+0xc>
   d4702:	7023      	strb	r3, [r4, #0]
   d4704:	e7e2      	b.n	d46cc <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4706:	69c1      	ldr	r1, [r0, #28]
   d4708:	f7ff ff36 	bl	d4578 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d470c:	69a3      	ldr	r3, [r4, #24]
   d470e:	4a07      	ldr	r2, [pc, #28]	; (d472c <_ZN11CSmartLight7executeEv+0x6c>)
   d4710:	4293      	cmp	r3, r2
   d4712:	d0f3      	beq.n	d46fc <_ZN11CSmartLight7executeEv+0x3c>
                        if(cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4714:	2b00      	cmp	r3, #0
   d4716:	d0f1      	beq.n	d46fc <_ZN11CSmartLight7executeEv+0x3c>
   d4718:	7065      	strb	r5, [r4, #1]
   d471a:	e7ef      	b.n	d46fc <_ZN11CSmartLight7executeEv+0x3c>
                    updataBrightnessAutomatically();
   d471c:	f7ff ff60 	bl	d45e0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if(!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4720:	69a3      	ldr	r3, [r4, #24]
   d4722:	2b00      	cmp	r3, #0
   d4724:	d1ea      	bne.n	d46fc <_ZN11CSmartLight7executeEv+0x3c>
   d4726:	7063      	strb	r3, [r4, #1]
   d4728:	e7e8      	b.n	d46fc <_ZN11CSmartLight7executeEv+0x3c>
   d472a:	bf00      	nop
   d472c:	fffe7961 	.word	0xfffe7961

000d4730 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4730:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4732:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4734:	f851 3b04 	ldr.w	r3, [r1], #4
   d4738:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d473a:	4604      	mov	r4, r0
   d473c:	a801      	add	r0, sp, #4
   d473e:	f7ff fdc1 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4742:	466a      	mov	r2, sp
   d4744:	4629      	mov	r1, r5
   d4746:	4620      	mov	r0, r4
   d4748:	f001 fa80 	bl	d5c4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d474c:	a801      	add	r0, sp, #4
   d474e:	f7ff fd0e 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4752:	4620      	mov	r0, r4
   d4754:	b003      	add	sp, #12
   d4756:	bd30      	pop	{r4, r5, pc}

000d4758 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d475c:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d475e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4760:	f851 3b04 	ldr.w	r3, [r1], #4
   d4764:	9300      	str	r3, [sp, #0]
   d4766:	4604      	mov	r4, r0
   d4768:	a801      	add	r0, sp, #4
   d476a:	f7ff fdab 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d476e:	466a      	mov	r2, sp
   d4770:	4629      	mov	r1, r5
   d4772:	a804      	add	r0, sp, #16
   d4774:	f001 fa8e 	bl	d5c94 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4778:	a801      	add	r0, sp, #4
   d477a:	f7ff fcf8 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d477e:	4e3c      	ldr	r6, [pc, #240]	; (d4870 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d4780:	4f3c      	ldr	r7, [pc, #240]	; (d4874 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d4782:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d4880 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d4786:	a804      	add	r0, sp, #16
   d4788:	f001 fa9c 	bl	d5cc4 <_ZN5spark18JSONObjectIterator4nextEv>
   d478c:	2800      	cmp	r0, #0
   d478e:	d069      	beq.n	d4864 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d4790:	a904      	add	r1, sp, #16
   d4792:	4668      	mov	r0, sp
   d4794:	f7ff ffcc 	bl	d4730 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4798:	4631      	mov	r1, r6
   d479a:	9802      	ldr	r0, [sp, #8]
   d479c:	f002 f822 	bl	d67e4 <strcmp>
   d47a0:	4605      	mov	r5, r0
   d47a2:	a801      	add	r0, sp, #4
   d47a4:	f7ff fce3 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d47a8:	a904      	add	r1, sp, #16
   d47aa:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d47ac:	b94d      	cbnz	r5, d47c2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d47ae:	f7ff fcf4 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d47b2:	4668      	mov	r0, sp
   d47b4:	f001 f8fc 	bl	d59b0 <_ZNK5spark9JSONValue6toBoolEv>
   d47b8:	6160      	str	r0, [r4, #20]
   d47ba:	a801      	add	r0, sp, #4
   d47bc:	f7ff fcd7 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47c0:	e7e1      	b.n	d4786 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d47c2:	f7ff ffb5 	bl	d4730 <_ZNK5spark18JSONObjectIterator4nameEv>
   d47c6:	4639      	mov	r1, r7
   d47c8:	9802      	ldr	r0, [sp, #8]
   d47ca:	f002 f80b 	bl	d67e4 <strcmp>
   d47ce:	4605      	mov	r5, r0
   d47d0:	a801      	add	r0, sp, #4
   d47d2:	f7ff fccc 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d47d6:	a904      	add	r1, sp, #16
   d47d8:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d47da:	b935      	cbnz	r5, d47ea <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d47dc:	f7ff fcdd 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d47e0:	4668      	mov	r0, sp
   d47e2:	f001 f8e5 	bl	d59b0 <_ZNK5spark9JSONValue6toBoolEv>
   d47e6:	61a0      	str	r0, [r4, #24]
   d47e8:	e7e7      	b.n	d47ba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d47ea:	f7ff ffa1 	bl	d4730 <_ZNK5spark18JSONObjectIterator4nameEv>
   d47ee:	4641      	mov	r1, r8
   d47f0:	9802      	ldr	r0, [sp, #8]
   d47f2:	f001 fff7 	bl	d67e4 <strcmp>
   d47f6:	4605      	mov	r5, r0
   d47f8:	a801      	add	r0, sp, #4
   d47fa:	f7ff fcb8 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d47fe:	a904      	add	r1, sp, #16
   d4800:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d4802:	b935      	cbnz	r5, d4812 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d4804:	f7ff fcc9 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4808:	4668      	mov	r0, sp
   d480a:	f001 f90f 	bl	d5a2c <_ZNK5spark9JSONValue5toIntEv>
   d480e:	61e0      	str	r0, [r4, #28]
   d4810:	e7d3      	b.n	d47ba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d4812:	f7ff ff8d 	bl	d4730 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4816:	4918      	ldr	r1, [pc, #96]	; (d4878 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d4818:	9802      	ldr	r0, [sp, #8]
   d481a:	f001 ffe3 	bl	d67e4 <strcmp>
   d481e:	4605      	mov	r5, r0
   d4820:	a801      	add	r0, sp, #4
   d4822:	f7ff fca4 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d4826:	a904      	add	r1, sp, #16
   d4828:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d482a:	b935      	cbnz	r5, d483a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d482c:	f7ff fcb5 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4830:	4668      	mov	r0, sp
   d4832:	f001 f8fb 	bl	d5a2c <_ZNK5spark9JSONValue5toIntEv>
   d4836:	6120      	str	r0, [r4, #16]
   d4838:	e7bf      	b.n	d47ba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "max") {
   d483a:	f7ff ff79 	bl	d4730 <_ZNK5spark18JSONObjectIterator4nameEv>
   d483e:	490f      	ldr	r1, [pc, #60]	; (d487c <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d4840:	9802      	ldr	r0, [sp, #8]
   d4842:	f001 ffcf 	bl	d67e4 <strcmp>
   d4846:	4605      	mov	r5, r0
   d4848:	a801      	add	r0, sp, #4
   d484a:	f7ff fc90 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d484e:	2d00      	cmp	r5, #0
   d4850:	d199      	bne.n	d4786 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d4852:	a904      	add	r1, sp, #16
   d4854:	4668      	mov	r0, sp
   d4856:	f7ff fca0 	bl	d419a <_ZNK5spark18JSONObjectIterator5valueEv>
   d485a:	4668      	mov	r0, sp
   d485c:	f001 f8e6 	bl	d5a2c <_ZNK5spark9JSONValue5toIntEv>
   d4860:	60e0      	str	r0, [r4, #12]
   d4862:	e7aa      	b.n	d47ba <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d4864:	a805      	add	r0, sp, #20
   d4866:	f7ff fc82 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d486a:	b00a      	add	sp, #40	; 0x28
   d486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4870:	000d6a8e 	.word	0x000d6a8e
   d4874:	000d6a91 	.word	0x000d6a91
   d4878:	000d6aa1 	.word	0x000d6aa1
   d487c:	000d6aa5 	.word	0x000d6aa5
   d4880:	000d6a96 	.word	0x000d6a96

000d4884 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <netdb_freeaddrinfo+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	689b      	ldr	r3, [r3, #8]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030268 	.word	0x00030268

000d4894 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <netdb_getaddrinfo+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	68db      	ldr	r3, [r3, #12]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030268 	.word	0x00030268

000d48a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_Validate_Pin_Function+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	685b      	ldr	r3, [r3, #4]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	0003022c 	.word	0x0003022c

000d48b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_Pin_Mode+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	689b      	ldr	r3, [r3, #8]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	0003022c 	.word	0x0003022c

000d48c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_Get_Pin_Mode+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	68db      	ldr	r3, [r3, #12]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	0003022c 	.word	0x0003022c

000d48d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <HAL_GPIO_Write+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	691b      	ldr	r3, [r3, #16]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	0003022c 	.word	0x0003022c

000d48e4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <hal_adc_read+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	0003022c 	.word	0x0003022c

000d48f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_RNG_GetRandomNumber+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	685b      	ldr	r3, [r3, #4]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030218 	.word	0x00030218

000d4904 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	695b      	ldr	r3, [r3, #20]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030218 	.word	0x00030218

000d4914 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <hal_rtc_time_is_valid+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030218 	.word	0x00030218

000d4924 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <hal_rtc_get_time+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030218 	.word	0x00030218

000d4934 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <os_mutex_recursive_create+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030248 	.word	0x00030248

000d4944 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <inet_inet_ntop+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	695b      	ldr	r3, [r3, #20]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030264 	.word	0x00030264

000d4954 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <hal_usart_init+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	681b      	ldr	r3, [r3, #0]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003023c 	.word	0x0003023c

000d4964 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <hal_usart_write+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	68db      	ldr	r3, [r3, #12]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003023c 	.word	0x0003023c

000d4974 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <hal_usart_available+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	691b      	ldr	r3, [r3, #16]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003023c 	.word	0x0003023c

000d4984 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <hal_usart_read+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	695b      	ldr	r3, [r3, #20]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003023c 	.word	0x0003023c

000d4994 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <hal_usart_peek+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	699b      	ldr	r3, [r3, #24]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	0003023c 	.word	0x0003023c

000d49a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <hal_usart_flush+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	69db      	ldr	r3, [r3, #28]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	0003023c 	.word	0x0003023c

000d49b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <hal_usart_is_enabled+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6a1b      	ldr	r3, [r3, #32]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003023c 	.word	0x0003023c

000d49c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <hal_usart_available_data_for_write+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003023c 	.word	0x0003023c

000d49d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <hal_i2c_write+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6a1b      	ldr	r3, [r3, #32]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030228 	.word	0x00030228

000d49e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <hal_i2c_available+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030228 	.word	0x00030228

000d49f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <hal_i2c_read+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030228 	.word	0x00030228

000d4a04 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <hal_i2c_peek+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030228 	.word	0x00030228

000d4a14 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <hal_i2c_flush+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030228 	.word	0x00030228

000d4a24 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <hal_i2c_is_enabled+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030228 	.word	0x00030228

000d4a34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <hal_i2c_init+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030228 	.word	0x00030228

000d4a44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <hal_spi_init+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	69db      	ldr	r3, [r3, #28]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030230 	.word	0x00030230

000d4a54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <hal_spi_is_enabled+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6a1b      	ldr	r3, [r3, #32]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030230 	.word	0x00030230

000d4a64 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_USB_USART_Init+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	681b      	ldr	r3, [r3, #0]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003024c 	.word	0x0003024c

000d4a74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_USB_USART_Begin+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	685b      	ldr	r3, [r3, #4]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003024c 	.word	0x0003024c

000d4a84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_USB_USART_Available_Data+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	691b      	ldr	r3, [r3, #16]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003024c 	.word	0x0003024c

000d4a94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	695b      	ldr	r3, [r3, #20]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003024c 	.word	0x0003024c

000d4aa4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_USB_USART_Receive_Data+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	699b      	ldr	r3, [r3, #24]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003024c 	.word	0x0003024c

000d4ab4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_USB_USART_Send_Data+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	69db      	ldr	r3, [r3, #28]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003024c 	.word	0x0003024c

000d4ac4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_USB_USART_Flush_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6a1b      	ldr	r3, [r3, #32]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003024c 	.word	0x0003024c

000d4ad4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <LED_SetSignalingColor+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	685b      	ldr	r3, [r3, #4]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030260 	.word	0x00030260

000d4ae4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <LED_Signaling_Start+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	689b      	ldr	r3, [r3, #8]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030260 	.word	0x00030260

000d4af4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <LED_Signaling_Stop+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	68db      	ldr	r3, [r3, #12]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030260 	.word	0x00030260

000d4b04 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <LED_SetBrightness+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	691b      	ldr	r3, [r3, #16]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030260 	.word	0x00030260

000d4b14 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <LED_RGB_IsOverRidden+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	699b      	ldr	r3, [r3, #24]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030260 	.word	0x00030260

000d4b24 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <LED_On+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	69db      	ldr	r3, [r3, #28]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030260 	.word	0x00030260

000d4b34 <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <Get_LED_Brightness+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030260 	.word	0x00030260

000d4b44 <jsmn_init>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <jsmn_init+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030260 	.word	0x00030260

000d4b54 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <jsmn_parse_deprecated+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030260 	.word	0x00030260

000d4b64 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <system_mode+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	681b      	ldr	r3, [r3, #0]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030220 	.word	0x00030220

000d4b74 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <set_system_mode+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	685b      	ldr	r3, [r3, #4]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030220 	.word	0x00030220

000d4b84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <system_delay_ms+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	695b      	ldr	r3, [r3, #20]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030220 	.word	0x00030220

000d4b94 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <system_thread_set_state+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030220 	.word	0x00030220

000d4ba4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <system_thread_get_state+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030220 	.word	0x00030220

000d4bb4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b03      	ldr	r3, [pc, #12]	; (d4bc4 <system_ctrl_set_app_request_handler+0x10>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4bbe:	9301      	str	r3, [sp, #4]
   d4bc0:	bd08      	pop	{r3, pc}
   d4bc2:	0000      	.short	0x0000
   d4bc4:	00030220 	.word	0x00030220

000d4bc8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b03      	ldr	r3, [pc, #12]	; (d4bd8 <system_ctrl_set_result+0x10>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bd2:	9301      	str	r3, [sp, #4]
   d4bd4:	bd08      	pop	{r3, pc}
   d4bd6:	0000      	.short	0x0000
   d4bd8:	00030220 	.word	0x00030220

000d4bdc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <network_connect+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	685b      	ldr	r3, [r3, #4]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030240 	.word	0x00030240

000d4bec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <network_connecting+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	689b      	ldr	r3, [r3, #8]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030240 	.word	0x00030240

000d4bfc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <network_disconnect+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	68db      	ldr	r3, [r3, #12]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030240 	.word	0x00030240

000d4c0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <network_ready+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	691b      	ldr	r3, [r3, #16]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030240 	.word	0x00030240

000d4c1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <network_on+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	695b      	ldr	r3, [r3, #20]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030240 	.word	0x00030240

000d4c2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <network_off+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	699b      	ldr	r3, [r3, #24]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030240 	.word	0x00030240

000d4c3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <network_listen+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	69db      	ldr	r3, [r3, #28]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030240 	.word	0x00030240

000d4c4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <network_listening+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6a1b      	ldr	r3, [r3, #32]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030240 	.word	0x00030240

000d4c5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <network_set_listen_timeout+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030240 	.word	0x00030240

000d4c6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <network_get_listen_timeout+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030240 	.word	0x00030240

000d4c7c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_is_on+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_is_off+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <spark_process+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	689b      	ldr	r3, [r3, #8]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030244 	.word	0x00030244

000d4cac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <spark_cloud_flag_connected+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	695b      	ldr	r3, [r3, #20]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030244 	.word	0x00030244

000d4cbc <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <spark_sync_time_pending+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030244 	.word	0x00030244

000d4ccc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030244 	.word	0x00030244

000d4cdc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <malloc+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	681b      	ldr	r3, [r3, #0]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	0003021c 	.word	0x0003021c

000d4cec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <free+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	685b      	ldr	r3, [r3, #4]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	0003021c 	.word	0x0003021c

000d4cfc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <realloc+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	689b      	ldr	r3, [r3, #8]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	0003021c 	.word	0x0003021c

000d4d0c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <vsnprintf+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003021c 	.word	0x0003021c

000d4d1c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <newlib_impure_ptr_callback+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003021c 	.word	0x0003021c

000d4d2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	6840      	ldr	r0, [r0, #4]
   d4d30:	4611      	mov	r1, r2
   d4d32:	f7ff bf8b 	b.w	d4c4c <network_listening>

000d4d36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d36:	2200      	movs	r2, #0
   d4d38:	6840      	ldr	r0, [r0, #4]
   d4d3a:	4611      	mov	r1, r2
   d4d3c:	f7ff bf96 	b.w	d4c6c <network_get_listen_timeout>

000d4d40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d40:	6840      	ldr	r0, [r0, #4]
   d4d42:	2200      	movs	r2, #0
   d4d44:	f7ff bf8a 	b.w	d4c5c <network_set_listen_timeout>

000d4d48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	2200      	movs	r2, #0
   d4d4c:	f081 0101 	eor.w	r1, r1, #1
   d4d50:	f7ff bf74 	b.w	d4c3c <network_listen>

000d4d54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d54:	2300      	movs	r3, #0
   d4d56:	6840      	ldr	r0, [r0, #4]
   d4d58:	461a      	mov	r2, r3
   d4d5a:	4619      	mov	r1, r3
   d4d5c:	f7ff bf66 	b.w	d4c2c <network_off>

000d4d60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d60:	2300      	movs	r3, #0
   d4d62:	6840      	ldr	r0, [r0, #4]
   d4d64:	461a      	mov	r2, r3
   d4d66:	4619      	mov	r1, r3
   d4d68:	f7ff bf58 	b.w	d4c1c <network_on>

000d4d6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d6c:	2200      	movs	r2, #0
   d4d6e:	6840      	ldr	r0, [r0, #4]
   d4d70:	4611      	mov	r1, r2
   d4d72:	f7ff bf4b 	b.w	d4c0c <network_ready>

000d4d76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d76:	2200      	movs	r2, #0
   d4d78:	6840      	ldr	r0, [r0, #4]
   d4d7a:	4611      	mov	r1, r2
   d4d7c:	f7ff bf36 	b.w	d4bec <network_connecting>

000d4d80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d80:	6840      	ldr	r0, [r0, #4]
   d4d82:	2200      	movs	r2, #0
   d4d84:	2102      	movs	r1, #2
   d4d86:	f7ff bf39 	b.w	d4bfc <network_disconnect>

000d4d8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d8a:	2300      	movs	r3, #0
   d4d8c:	6840      	ldr	r0, [r0, #4]
   d4d8e:	461a      	mov	r2, r3
   d4d90:	f7ff bf24 	b.w	d4bdc <network_connect>

000d4d94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d94:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d96:	2203      	movs	r2, #3
   d4d98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d9a:	4a02      	ldr	r2, [pc, #8]	; (d4da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d9e:	4770      	bx	lr
   d4da0:	2003e5a8 	.word	0x2003e5a8
   d4da4:	000d6ab4 	.word	0x000d6ab4

000d4da8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4da8:	b510      	push	{r4, lr}
   d4daa:	4604      	mov	r4, r0
   d4dac:	4608      	mov	r0, r1
{
    _spi = spi;
   d4dae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4db0:	f7ff fe48 	bl	d4a44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4db4:	2300      	movs	r3, #0
   d4db6:	6063      	str	r3, [r4, #4]
}
   d4db8:	4620      	mov	r0, r4
   d4dba:	bd10      	pop	{r4, pc}

000d4dbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4dbc:	4b05      	ldr	r3, [pc, #20]	; (d4dd4 <_GLOBAL__sub_I_System+0x18>)
   d4dbe:	2202      	movs	r2, #2
   d4dc0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4dc2:	4b05      	ldr	r3, [pc, #20]	; (d4dd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4dc4:	4a05      	ldr	r2, [pc, #20]	; (d4ddc <_GLOBAL__sub_I_System+0x20>)
   d4dc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4dc8:	2000      	movs	r0, #0
   d4dca:	6018      	str	r0, [r3, #0]
   d4dcc:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4dce:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4dd0:	f7ff bed0 	b.w	d4b74 <set_system_mode>
   d4dd4:	2003e5bc 	.word	0x2003e5bc
   d4dd8:	2003e5b0 	.word	0x2003e5b0
   d4ddc:	ffff0000 	.word	0xffff0000

000d4de0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4de0:	b510      	push	{r4, lr}
   d4de2:	4604      	mov	r4, r0
{
	free(buffer);
   d4de4:	6800      	ldr	r0, [r0, #0]
   d4de6:	f7ff ff81 	bl	d4cec <free>
}
   d4dea:	4620      	mov	r0, r4
   d4dec:	bd10      	pop	{r4, pc}

000d4dee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4dee:	b510      	push	{r4, lr}
   d4df0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4df2:	6800      	ldr	r0, [r0, #0]
   d4df4:	b108      	cbz	r0, d4dfa <_ZN6String10invalidateEv+0xc>
   d4df6:	f7ff ff79 	bl	d4cec <free>
	buffer = NULL;
   d4dfa:	2300      	movs	r3, #0
	capacity = len = 0;
   d4dfc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4e00:	6023      	str	r3, [r4, #0]
}
   d4e02:	bd10      	pop	{r4, pc}

000d4e04 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4e04:	b538      	push	{r3, r4, r5, lr}
   d4e06:	4604      	mov	r4, r0
   d4e08:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4e0a:	6800      	ldr	r0, [r0, #0]
   d4e0c:	3101      	adds	r1, #1
   d4e0e:	f7ff ff75 	bl	d4cfc <realloc>
	if (newbuffer) {
   d4e12:	b110      	cbz	r0, d4e1a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4e14:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4e18:	2001      	movs	r0, #1
	}
	return 0;
}
   d4e1a:	bd38      	pop	{r3, r4, r5, pc}

000d4e1c <_ZN6String7reserveEj>:
{
   d4e1c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4e1e:	6803      	ldr	r3, [r0, #0]
{
   d4e20:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4e22:	b123      	cbz	r3, d4e2e <_ZN6String7reserveEj+0x12>
   d4e24:	6843      	ldr	r3, [r0, #4]
   d4e26:	428b      	cmp	r3, r1
   d4e28:	d301      	bcc.n	d4e2e <_ZN6String7reserveEj+0x12>
   d4e2a:	2001      	movs	r0, #1
}
   d4e2c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4e2e:	4620      	mov	r0, r4
   d4e30:	f7ff ffe8 	bl	d4e04 <_ZN6String12changeBufferEj>
   d4e34:	2800      	cmp	r0, #0
   d4e36:	d0f9      	beq.n	d4e2c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4e38:	68a3      	ldr	r3, [r4, #8]
   d4e3a:	2b00      	cmp	r3, #0
   d4e3c:	d1f5      	bne.n	d4e2a <_ZN6String7reserveEj+0xe>
   d4e3e:	6822      	ldr	r2, [r4, #0]
   d4e40:	7013      	strb	r3, [r2, #0]
   d4e42:	e7f2      	b.n	d4e2a <_ZN6String7reserveEj+0xe>

000d4e44 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4e46:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4e48:	4611      	mov	r1, r2
   d4e4a:	9201      	str	r2, [sp, #4]
{
   d4e4c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4e4e:	f7ff ffe5 	bl	d4e1c <_ZN6String7reserveEj>
   d4e52:	9a01      	ldr	r2, [sp, #4]
   d4e54:	b928      	cbnz	r0, d4e62 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4e56:	4620      	mov	r0, r4
   d4e58:	f7ff ffc9 	bl	d4dee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	b003      	add	sp, #12
   d4e60:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4e62:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4e64:	4629      	mov	r1, r5
   d4e66:	6820      	ldr	r0, [r4, #0]
   d4e68:	f001 fc68 	bl	d673c <memcpy>
	buffer[len] = 0;
   d4e6c:	6822      	ldr	r2, [r4, #0]
   d4e6e:	68a3      	ldr	r3, [r4, #8]
   d4e70:	2100      	movs	r1, #0
   d4e72:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4e74:	e7f2      	b.n	d4e5c <_ZN6String4copyEPKcj+0x18>

000d4e76 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4e76:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4e78:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4e7a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4e7e:	4604      	mov	r4, r0
	len = 0;
   d4e80:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e82:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4e84:	b141      	cbz	r1, d4e98 <_ZN6StringC1EPKc+0x22>
   d4e86:	4608      	mov	r0, r1
   d4e88:	9101      	str	r1, [sp, #4]
   d4e8a:	f001 fcbd 	bl	d6808 <strlen>
   d4e8e:	9901      	ldr	r1, [sp, #4]
   d4e90:	4602      	mov	r2, r0
   d4e92:	4620      	mov	r0, r4
   d4e94:	f7ff ffd6 	bl	d4e44 <_ZN6String4copyEPKcj>
}
   d4e98:	4620      	mov	r0, r4
   d4e9a:	b002      	add	sp, #8
   d4e9c:	bd10      	pop	{r4, pc}

000d4e9e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4e9e:	b538      	push	{r3, r4, r5, lr}
   d4ea0:	4605      	mov	r5, r0
	if (buffer) {
   d4ea2:	6800      	ldr	r0, [r0, #0]
{
   d4ea4:	460c      	mov	r4, r1
	if (buffer) {
   d4ea6:	b168      	cbz	r0, d4ec4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4ea8:	686a      	ldr	r2, [r5, #4]
   d4eaa:	688b      	ldr	r3, [r1, #8]
   d4eac:	429a      	cmp	r2, r3
   d4eae:	d307      	bcc.n	d4ec0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4eb0:	6809      	ldr	r1, [r1, #0]
   d4eb2:	f001 fca1 	bl	d67f8 <strcpy>
			len = rhs.len;
   d4eb6:	68a3      	ldr	r3, [r4, #8]
   d4eb8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4eba:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4ebc:	60a3      	str	r3, [r4, #8]
}
   d4ebe:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4ec0:	f7ff ff14 	bl	d4cec <free>
	buffer = rhs.buffer;
   d4ec4:	6823      	ldr	r3, [r4, #0]
   d4ec6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4ec8:	6863      	ldr	r3, [r4, #4]
   d4eca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4ecc:	68a3      	ldr	r3, [r4, #8]
   d4ece:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4ed0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4ed2:	e9c4 3300 	strd	r3, r3, [r4]
   d4ed6:	e7f1      	b.n	d4ebc <_ZN6String4moveERS_+0x1e>

000d4ed8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ed8:	4288      	cmp	r0, r1
{
   d4eda:	b510      	push	{r4, lr}
   d4edc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4ede:	d005      	beq.n	d4eec <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ee0:	680b      	ldr	r3, [r1, #0]
   d4ee2:	b12b      	cbz	r3, d4ef0 <_ZN6StringaSERKS_+0x18>
   d4ee4:	688a      	ldr	r2, [r1, #8]
   d4ee6:	4619      	mov	r1, r3
   d4ee8:	f7ff ffac 	bl	d4e44 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4eec:	4620      	mov	r0, r4
   d4eee:	bd10      	pop	{r4, pc}
	else invalidate();
   d4ef0:	f7ff ff7d 	bl	d4dee <_ZN6String10invalidateEv>
   d4ef4:	e7fa      	b.n	d4eec <_ZN6StringaSERKS_+0x14>

000d4ef6 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4ef6:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ef8:	2300      	movs	r3, #0
String::String(const String &value)
   d4efa:	4604      	mov	r4, r0
	capacity = 0;
   d4efc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4f00:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4f02:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4f04:	f7ff ffe8 	bl	d4ed8 <_ZN6StringaSERKS_>
}
   d4f08:	4620      	mov	r0, r4
   d4f0a:	bd10      	pop	{r4, pc}

000d4f0c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d4f0c:	4288      	cmp	r0, r1
{
   d4f0e:	b510      	push	{r4, lr}
   d4f10:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d4f12:	d001      	beq.n	d4f18 <_ZN6StringaSEOS_+0xc>
   d4f14:	f7ff ffc3 	bl	d4e9e <_ZN6String4moveERS_>
	return *this;
}
   d4f18:	4620      	mov	r0, r4
   d4f1a:	bd10      	pop	{r4, pc}

000d4f1c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4f1c:	b513      	push	{r0, r1, r4, lr}
   d4f1e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4f20:	b159      	cbz	r1, d4f3a <_ZN6StringaSEPKc+0x1e>
   d4f22:	4608      	mov	r0, r1
   d4f24:	9101      	str	r1, [sp, #4]
   d4f26:	f001 fc6f 	bl	d6808 <strlen>
   d4f2a:	9901      	ldr	r1, [sp, #4]
   d4f2c:	4602      	mov	r2, r0
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f7ff ff88 	bl	d4e44 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4f34:	4620      	mov	r0, r4
   d4f36:	b002      	add	sp, #8
   d4f38:	bd10      	pop	{r4, pc}
	else invalidate();
   d4f3a:	f7ff ff58 	bl	d4dee <_ZN6String10invalidateEv>
   d4f3e:	e7f9      	b.n	d4f34 <_ZN6StringaSEPKc+0x18>

000d4f40 <_ZN6StringC1Ec>:
String::String(char c)
   d4f40:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d4f42:	2300      	movs	r3, #0
	buf[0] = c;
   d4f44:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d4f48:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4f4c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4f4e:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d4f50:	a901      	add	r1, sp, #4
String::String(char c)
   d4f52:	4604      	mov	r4, r0
	buf[1] = 0;
   d4f54:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d4f58:	f7ff ffe0 	bl	d4f1c <_ZN6StringaSEPKc>
}
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	b002      	add	sp, #8
   d4f60:	bd10      	pop	{r4, pc}

000d4f62 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4f62:	b570      	push	{r4, r5, r6, lr}
   d4f64:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4f66:	460e      	mov	r6, r1
   d4f68:	b909      	cbnz	r1, d4f6e <_ZN6String6concatEPKcj+0xc>
   d4f6a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4f6c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4f6e:	b16a      	cbz	r2, d4f8c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4f70:	6884      	ldr	r4, [r0, #8]
   d4f72:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4f74:	4621      	mov	r1, r4
   d4f76:	f7ff ff51 	bl	d4e1c <_ZN6String7reserveEj>
   d4f7a:	2800      	cmp	r0, #0
   d4f7c:	d0f5      	beq.n	d4f6a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4f7e:	6828      	ldr	r0, [r5, #0]
   d4f80:	68ab      	ldr	r3, [r5, #8]
   d4f82:	4631      	mov	r1, r6
   d4f84:	4418      	add	r0, r3
   d4f86:	f001 fc37 	bl	d67f8 <strcpy>
	len = newlen;
   d4f8a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d4f8c:	2001      	movs	r0, #1
   d4f8e:	e7ed      	b.n	d4f6c <_ZN6String6concatEPKcj+0xa>

000d4f90 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d4f90:	688a      	ldr	r2, [r1, #8]
   d4f92:	6809      	ldr	r1, [r1, #0]
   d4f94:	f7ff bfe5 	b.w	d4f62 <_ZN6String6concatEPKcj>

000d4f98 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d4f98:	b40e      	push	{r1, r2, r3}
   d4f9a:	b570      	push	{r4, r5, r6, lr}
   d4f9c:	b087      	sub	sp, #28
   d4f9e:	ad0b      	add	r5, sp, #44	; 0x2c
   d4fa0:	4604      	mov	r4, r0
   d4fa2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4fa6:	9201      	str	r2, [sp, #4]
   d4fa8:	462b      	mov	r3, r5
   d4faa:	2105      	movs	r1, #5
   d4fac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d4fae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4fb0:	f7ff feac 	bl	d4d0c <vsnprintf>
    va_end(marker);

    String result;
   d4fb4:	490b      	ldr	r1, [pc, #44]	; (d4fe4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4fb6:	4606      	mov	r6, r0
    String result;
   d4fb8:	4620      	mov	r0, r4
   d4fba:	f7ff ff5c 	bl	d4e76 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d4fbe:	4631      	mov	r1, r6
   d4fc0:	4620      	mov	r0, r4
   d4fc2:	f7ff ff2b 	bl	d4e1c <_ZN6String7reserveEj>
    if (result.buffer) {
   d4fc6:	6820      	ldr	r0, [r4, #0]
   d4fc8:	b130      	cbz	r0, d4fd8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4fca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d4fcc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4fce:	462b      	mov	r3, r5
   d4fd0:	1c71      	adds	r1, r6, #1
   d4fd2:	f7ff fe9b 	bl	d4d0c <vsnprintf>
        va_end(marker);
        result.len = n;
   d4fd6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d4fd8:	4620      	mov	r0, r4
   d4fda:	b007      	add	sp, #28
   d4fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4fe0:	b003      	add	sp, #12
   d4fe2:	4770      	bx	lr
   d4fe4:	000d6c1f 	.word	0x000d6c1f

000d4fe8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fe8:	4802      	ldr	r0, [pc, #8]	; (d4ff4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4fea:	2300      	movs	r3, #0
   d4fec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4fee:	f7ff bca1 	b.w	d4934 <os_mutex_recursive_create>
   d4ff2:	bf00      	nop
   d4ff4:	2003e5c0 	.word	0x2003e5c0

000d4ff8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ffa:	4606      	mov	r6, r0
   d4ffc:	460d      	mov	r5, r1
  size_t n = 0;
   d4ffe:	188f      	adds	r7, r1, r2
   d5000:	2400      	movs	r4, #0
  while (size--) {
   d5002:	42bd      	cmp	r5, r7
   d5004:	d00c      	beq.n	d5020 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5006:	6833      	ldr	r3, [r6, #0]
   d5008:	f815 1b01 	ldrb.w	r1, [r5], #1
   d500c:	689b      	ldr	r3, [r3, #8]
   d500e:	4630      	mov	r0, r6
   d5010:	4798      	blx	r3
     if (chunk>=0)
   d5012:	1e03      	subs	r3, r0, #0
   d5014:	db01      	blt.n	d501a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5016:	441c      	add	r4, r3
  while (size--) {
   d5018:	e7f3      	b.n	d5002 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d501a:	2c00      	cmp	r4, #0
   d501c:	bf08      	it	eq
   d501e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5020:	4620      	mov	r0, r4
   d5022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5024 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5024:	b513      	push	{r0, r1, r4, lr}
   d5026:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5028:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d502a:	b159      	cbz	r1, d5044 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d502c:	9101      	str	r1, [sp, #4]
   d502e:	f001 fbeb 	bl	d6808 <strlen>
   d5032:	6823      	ldr	r3, [r4, #0]
   d5034:	9901      	ldr	r1, [sp, #4]
   d5036:	68db      	ldr	r3, [r3, #12]
   d5038:	4602      	mov	r2, r0
   d503a:	4620      	mov	r0, r4
    }
   d503c:	b002      	add	sp, #8
   d503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5042:	4718      	bx	r3
    }
   d5044:	b002      	add	sp, #8
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5048:	6803      	ldr	r3, [r0, #0]
   d504a:	689b      	ldr	r3, [r3, #8]
   d504c:	4718      	bx	r3

000d504e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d504e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5050:	210d      	movs	r1, #13
{
   d5052:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5054:	f7ff fff8 	bl	d5048 <_ZN5Print5printEc>
  n += print('\n');
   d5058:	210a      	movs	r1, #10
  size_t n = print('\r');
   d505a:	4604      	mov	r4, r0
  n += print('\n');
   d505c:	4628      	mov	r0, r5
   d505e:	f7ff fff3 	bl	d5048 <_ZN5Print5printEc>
  return n;
}
   d5062:	4420      	add	r0, r4
   d5064:	bd38      	pop	{r3, r4, r5, pc}

000d5066 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5066:	b530      	push	{r4, r5, lr}
   d5068:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d506a:	2300      	movs	r3, #0
   d506c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5070:	2a01      	cmp	r2, #1
   d5072:	bf98      	it	ls
   d5074:	220a      	movls	r2, #10
   d5076:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5078:	460d      	mov	r5, r1
   d507a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d507e:	fb01 5312 	mls	r3, r1, r2, r5
   d5082:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5086:	2b09      	cmp	r3, #9
   d5088:	bf94      	ite	ls
   d508a:	3330      	addls	r3, #48	; 0x30
   d508c:	3337      	addhi	r3, #55	; 0x37
   d508e:	b2db      	uxtb	r3, r3
  } while(n);
   d5090:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5092:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5096:	d9ef      	bls.n	d5078 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5098:	4621      	mov	r1, r4
   d509a:	f7ff ffc3 	bl	d5024 <_ZN5Print5writeEPKc>
}
   d509e:	b00b      	add	sp, #44	; 0x2c
   d50a0:	bd30      	pop	{r4, r5, pc}

000d50a2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d50a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d50a6:	b086      	sub	sp, #24
   d50a8:	af00      	add	r7, sp, #0
   d50aa:	4605      	mov	r5, r0
   d50ac:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d50ae:	1d38      	adds	r0, r7, #4
   d50b0:	2114      	movs	r1, #20
{
   d50b2:	4614      	mov	r4, r2
    va_copy(args2, args);
   d50b4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d50b6:	f7ff fe29 	bl	d4d0c <vsnprintf>

    if (n<bufsize)
   d50ba:	2813      	cmp	r0, #19
   d50bc:	d80e      	bhi.n	d50dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d50be:	1d39      	adds	r1, r7, #4
   d50c0:	4628      	mov	r0, r5
   d50c2:	f7ff ffaf 	bl	d5024 <_ZN5Print5writeEPKc>
   d50c6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d50c8:	b11e      	cbz	r6, d50d2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d50ca:	4628      	mov	r0, r5
   d50cc:	f7ff ffbf 	bl	d504e <_ZN5Print7printlnEv>
   d50d0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d50d2:	4620      	mov	r0, r4
   d50d4:	3718      	adds	r7, #24
   d50d6:	46bd      	mov	sp, r7
   d50d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d50dc:	f100 0308 	add.w	r3, r0, #8
   d50e0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d50e4:	46e8      	mov	r8, sp
        char bigger[n+1];
   d50e6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d50ea:	4622      	mov	r2, r4
   d50ec:	1c41      	adds	r1, r0, #1
   d50ee:	683b      	ldr	r3, [r7, #0]
   d50f0:	4668      	mov	r0, sp
   d50f2:	f7ff fe0b 	bl	d4d0c <vsnprintf>
  return write(str);
   d50f6:	4669      	mov	r1, sp
   d50f8:	4628      	mov	r0, r5
   d50fa:	f7ff ff93 	bl	d5024 <_ZN5Print5writeEPKc>
   d50fe:	4604      	mov	r4, r0
   d5100:	46c5      	mov	sp, r8
   d5102:	e7e1      	b.n	d50c8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5104 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5104:	4b01      	ldr	r3, [pc, #4]	; (d510c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5106:	4a02      	ldr	r2, [pc, #8]	; (d5110 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5108:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d510a:	4770      	bx	lr
   d510c:	2003e5c4 	.word	0x2003e5c4
   d5110:	000d6ae8 	.word	0x000d6ae8

000d5114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5114:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5116:	2000      	movs	r0, #0
   d5118:	f7ff fdd0 	bl	d4cbc <spark_sync_time_pending>
   d511c:	b128      	cbz	r0, d512a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d511e:	f7ff fdc5 	bl	d4cac <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5122:	f080 0001 	eor.w	r0, r0, #1
   d5126:	b2c0      	uxtb	r0, r0
    }
   d5128:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d512a:	2001      	movs	r0, #1
   d512c:	e7fc      	b.n	d5128 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d512e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d512e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5130:	2000      	movs	r0, #0
   d5132:	f7ff fbef 	bl	d4914 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5136:	4604      	mov	r4, r0
   d5138:	b9a0      	cbnz	r0, d5164 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d513a:	f7ff fd13 	bl	d4b64 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d513e:	2801      	cmp	r0, #1
   d5140:	d110      	bne.n	d5164 <_ZN9TimeClass7isValidEv+0x36>
   d5142:	4620      	mov	r0, r4
   d5144:	f7ff fd2e 	bl	d4ba4 <system_thread_get_state>
   d5148:	b960      	cbnz	r0, d5164 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d514a:	f7ff ffe3 	bl	d5114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d514e:	b910      	cbnz	r0, d5156 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5150:	f7ff fda4 	bl	d4c9c <spark_process>
        while (_while() && !_condition()) {
   d5154:	e7f9      	b.n	d514a <_ZN9TimeClass7isValidEv+0x1c>
   d5156:	f7ff ffdd 	bl	d5114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d515a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d515e:	2000      	movs	r0, #0
   d5160:	f7ff bbd8 	b.w	d4914 <hal_rtc_time_is_valid>
}
   d5164:	4620      	mov	r0, r4
   d5166:	bd10      	pop	{r4, pc}

000d5168 <_ZN9TimeClass3nowEv>:
{
   d5168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d516a:	f7ff ffe0 	bl	d512e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d516e:	2210      	movs	r2, #16
   d5170:	2100      	movs	r1, #0
   d5172:	4668      	mov	r0, sp
   d5174:	f001 fb0a 	bl	d678c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5178:	2100      	movs	r1, #0
   d517a:	4668      	mov	r0, sp
   d517c:	f7ff fbd2 	bl	d4924 <hal_rtc_get_time>
}
   d5180:	9800      	ldr	r0, [sp, #0]
   d5182:	b005      	add	sp, #20
   d5184:	f85d fb04 	ldr.w	pc, [sp], #4

000d5188 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5188:	4b02      	ldr	r3, [pc, #8]	; (d5194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d518a:	681a      	ldr	r2, [r3, #0]
   d518c:	4b02      	ldr	r3, [pc, #8]	; (d5198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d518e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5190:	4770      	bx	lr
   d5192:	bf00      	nop
   d5194:	2003e4e8 	.word	0x2003e4e8
   d5198:	2003e5c8 	.word	0x2003e5c8

000d519c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d519c:	2100      	movs	r1, #0
   d519e:	f7ff bcf1 	b.w	d4b84 <system_delay_ms>

000d51a2 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d51a2:	b510      	push	{r4, lr}
   d51a4:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d51a6:	f7ff fcb5 	bl	d4b14 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d51aa:	4284      	cmp	r4, r0
   d51ac:	d008      	beq.n	d51c0 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d51ae:	b11c      	cbz	r4, d51b8 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d51b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d51b4:	f7ff bc96 	b.w	d4ae4 <LED_Signaling_Start>
}
   d51b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d51bc:	f7ff bc9a 	b.w	d4af4 <LED_Signaling_Stop>
}
   d51c0:	bd10      	pop	{r4, pc}

000d51c2 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d51c2:	b570      	push	{r4, r5, r6, lr}
   d51c4:	4605      	mov	r5, r0
   d51c6:	460e      	mov	r6, r1
   d51c8:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d51ca:	f7ff fca3 	bl	d4b14 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d51ce:	b150      	cbz	r0, d51e6 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d51d0:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d51d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d51d8:	f7ff fc7c 	bl	d4ad4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d51dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d51e0:	20e7      	movs	r0, #231	; 0xe7
   d51e2:	f7ff bc9f 	b.w	d4b24 <LED_On>
}
   d51e6:	bd70      	pop	{r4, r5, r6, pc}

000d51e8 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d51e8:	b510      	push	{r4, lr}
   d51ea:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d51ec:	f7ff fc8a 	bl	d4b04 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d51f0:	f7ff fc90 	bl	d4b14 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d51f4:	b128      	cbz	r0, d5202 <_ZN8RGBClass10brightnessEhb+0x1a>
   d51f6:	b124      	cbz	r4, d5202 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d51f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d51fc:	20e7      	movs	r0, #231	; 0xe7
   d51fe:	f7ff bc91 	b.w	d4b24 <LED_On>
}
   d5202:	bd10      	pop	{r4, pc}

000d5204 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5204:	f7ff bc96 	b.w	d4b34 <Get_LED_Brightness>

000d5208 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5208:	4b01      	ldr	r3, [pc, #4]	; (d5210 <_GLOBAL__sub_I_RGB+0x8>)
   d520a:	2200      	movs	r2, #0
   d520c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d520e:	4770      	bx	lr
   d5210:	2003e5cc 	.word	0x2003e5cc

000d5214 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5214:	4b01      	ldr	r3, [pc, #4]	; (d521c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5216:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5218:	4770      	bx	lr
   d521a:	bf00      	nop
   d521c:	2003e4ec 	.word	0x2003e4ec

000d5220 <serialEventRun>:
{
   d5220:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5222:	4b0b      	ldr	r3, [pc, #44]	; (d5250 <serialEventRun+0x30>)
   d5224:	b143      	cbz	r3, d5238 <serialEventRun+0x18>
   d5226:	f000 f961 	bl	d54ec <_Z16_fetch_usbserialv>
   d522a:	6803      	ldr	r3, [r0, #0]
   d522c:	691b      	ldr	r3, [r3, #16]
   d522e:	4798      	blx	r3
   d5230:	2800      	cmp	r0, #0
   d5232:	dd01      	ble.n	d5238 <serialEventRun+0x18>
        serialEvent();
   d5234:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5238:	4b06      	ldr	r3, [pc, #24]	; (d5254 <serialEventRun+0x34>)
   d523a:	b143      	cbz	r3, d524e <serialEventRun+0x2e>
   d523c:	f000 f9d0 	bl	d55e0 <_Z22__fetch_global_Serial1v>
   d5240:	6803      	ldr	r3, [r0, #0]
   d5242:	691b      	ldr	r3, [r3, #16]
   d5244:	4798      	blx	r3
   d5246:	2800      	cmp	r0, #0
   d5248:	dd01      	ble.n	d524e <serialEventRun+0x2e>
        serialEvent1();
   d524a:	f3af 8000 	nop.w
}
   d524e:	bd08      	pop	{r3, pc}
	...

000d5258 <_post_loop>:
{
   d5258:	b508      	push	{r3, lr}
	serialEventRun();
   d525a:	f7ff ffe1 	bl	d5220 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d525e:	f7ff fb51 	bl	d4904 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5262:	4b01      	ldr	r3, [pc, #4]	; (d5268 <_post_loop+0x10>)
   d5264:	6018      	str	r0, [r3, #0]
}
   d5266:	bd08      	pop	{r3, pc}
   d5268:	2003e738 	.word	0x2003e738

000d526c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d526c:	4805      	ldr	r0, [pc, #20]	; (d5284 <_Z33system_initialize_user_backup_ramv+0x18>)
   d526e:	4a06      	ldr	r2, [pc, #24]	; (d5288 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5270:	4906      	ldr	r1, [pc, #24]	; (d528c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5272:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5274:	1a12      	subs	r2, r2, r0
   d5276:	f001 fa61 	bl	d673c <memcpy>
    __backup_sram_signature = signature;
   d527a:	4b05      	ldr	r3, [pc, #20]	; (d5290 <_Z33system_initialize_user_backup_ramv+0x24>)
   d527c:	4a05      	ldr	r2, [pc, #20]	; (d5294 <_Z33system_initialize_user_backup_ramv+0x28>)
   d527e:	601a      	str	r2, [r3, #0]
}
   d5280:	bd08      	pop	{r3, pc}
   d5282:	bf00      	nop
   d5284:	2003f400 	.word	0x2003f400
   d5288:	2003f404 	.word	0x2003f404
   d528c:	000d6d70 	.word	0x000d6d70
   d5290:	2003f400 	.word	0x2003f400
   d5294:	9a271c1e 	.word	0x9a271c1e

000d5298 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5298:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d529a:	2300      	movs	r3, #0
   d529c:	9300      	str	r3, [sp, #0]
   d529e:	461a      	mov	r2, r3
   d52a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52a4:	f7ff fc90 	bl	d4bc8 <system_ctrl_set_result>
}
   d52a8:	b003      	add	sp, #12
   d52aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d52b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52b2:	8843      	ldrh	r3, [r0, #2]
   d52b4:	2b0a      	cmp	r3, #10
   d52b6:	d008      	beq.n	d52ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52b8:	2b50      	cmp	r3, #80	; 0x50
   d52ba:	d10b      	bne.n	d52d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d52bc:	4b09      	ldr	r3, [pc, #36]	; (d52e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52be:	681b      	ldr	r3, [r3, #0]
   d52c0:	b14b      	cbz	r3, d52d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d52c2:	b003      	add	sp, #12
   d52c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d52c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d52ca:	f7ff ffe5 	bl	d5298 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d52ce:	b003      	add	sp, #12
   d52d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52d4:	2300      	movs	r3, #0
   d52d6:	9300      	str	r3, [sp, #0]
   d52d8:	461a      	mov	r2, r3
   d52da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52de:	f7ff fc73 	bl	d4bc8 <system_ctrl_set_result>
}
   d52e2:	e7f4      	b.n	d52ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d52e4:	2003e5e0 	.word	0x2003e5e0

000d52e8 <module_user_init_hook>:
{
   d52e8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d52ea:	4812      	ldr	r0, [pc, #72]	; (d5334 <module_user_init_hook+0x4c>)
   d52ec:	2100      	movs	r1, #0
   d52ee:	f7ff fd15 	bl	d4d1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d52f2:	4b11      	ldr	r3, [pc, #68]	; (d5338 <module_user_init_hook+0x50>)
   d52f4:	681a      	ldr	r2, [r3, #0]
   d52f6:	4b11      	ldr	r3, [pc, #68]	; (d533c <module_user_init_hook+0x54>)
   d52f8:	429a      	cmp	r2, r3
   d52fa:	4b11      	ldr	r3, [pc, #68]	; (d5340 <module_user_init_hook+0x58>)
   d52fc:	bf0c      	ite	eq
   d52fe:	2201      	moveq	r2, #1
   d5300:	2200      	movne	r2, #0
   d5302:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5304:	d001      	beq.n	d530a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5306:	f7ff ffb1 	bl	d526c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d530a:	f7ff faf3 	bl	d48f4 <HAL_RNG_GetRandomNumber>
   d530e:	4604      	mov	r4, r0
    srand(seed);
   d5310:	f001 fa44 	bl	d679c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5314:	4b0b      	ldr	r3, [pc, #44]	; (d5344 <module_user_init_hook+0x5c>)
   d5316:	b113      	cbz	r3, d531e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5318:	4620      	mov	r0, r4
   d531a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d531e:	2100      	movs	r1, #0
   d5320:	4808      	ldr	r0, [pc, #32]	; (d5344 <module_user_init_hook+0x5c>)
   d5322:	f7ff fcd3 	bl	d4ccc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d532a:	4807      	ldr	r0, [pc, #28]	; (d5348 <module_user_init_hook+0x60>)
   d532c:	2100      	movs	r1, #0
   d532e:	f7ff bc41 	b.w	d4bb4 <system_ctrl_set_app_request_handler>
   d5332:	bf00      	nop
   d5334:	000d5215 	.word	0x000d5215
   d5338:	2003f400 	.word	0x2003f400
   d533c:	9a271c1e 	.word	0x9a271c1e
   d5340:	2003e5dc 	.word	0x2003e5dc
   d5344:	00000000 	.word	0x00000000
   d5348:	000d52b1 	.word	0x000d52b1

000d534c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d534c:	4770      	bx	lr

000d534e <_ZN9IPAddressD0Ev>:
   d534e:	b510      	push	{r4, lr}
   d5350:	2118      	movs	r1, #24
   d5352:	4604      	mov	r4, r0
   d5354:	f000 fdf0 	bl	d5f38 <_ZdlPvj>
   d5358:	4620      	mov	r0, r4
   d535a:	bd10      	pop	{r4, pc}

000d535c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d535c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d535e:	7d03      	ldrb	r3, [r0, #20]
   d5360:	2b06      	cmp	r3, #6
{
   d5362:	b08d      	sub	sp, #52	; 0x34
   d5364:	460e      	mov	r6, r1
   d5366:	f100 0704 	add.w	r7, r0, #4
   d536a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d536e:	d012      	beq.n	d5396 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5370:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5374:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5378:	220a      	movs	r2, #10
   d537a:	4630      	mov	r0, r6
   d537c:	f7ff fe73 	bl	d5066 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5380:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5382:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5384:	d019      	beq.n	d53ba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5386:	2c00      	cmp	r4, #0
   d5388:	d0f4      	beq.n	d5374 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d538a:	212e      	movs	r1, #46	; 0x2e
   d538c:	4630      	mov	r0, r6
   d538e:	f7ff fe5b 	bl	d5048 <_ZN5Print5printEc>
   d5392:	4404      	add	r4, r0
   d5394:	e7ee      	b.n	d5374 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5396:	232f      	movs	r3, #47	; 0x2f
   d5398:	466a      	mov	r2, sp
   d539a:	4639      	mov	r1, r7
   d539c:	200a      	movs	r0, #10
		buf[0] = 0;
   d539e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d53a2:	f7ff facf 	bl	d4944 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d53a6:	4668      	mov	r0, sp
   d53a8:	f001 fa2e 	bl	d6808 <strlen>
   d53ac:	6833      	ldr	r3, [r6, #0]
   d53ae:	4602      	mov	r2, r0
   d53b0:	68db      	ldr	r3, [r3, #12]
   d53b2:	4669      	mov	r1, sp
   d53b4:	4630      	mov	r0, r6
   d53b6:	4798      	blx	r3
   d53b8:	4604      	mov	r4, r0
    }
    return n;
}
   d53ba:	4620      	mov	r0, r4
   d53bc:	b00d      	add	sp, #52	; 0x34
   d53be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53c0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d53c0:	b510      	push	{r4, lr}
   d53c2:	4b05      	ldr	r3, [pc, #20]	; (d53d8 <_ZN9IPAddressC1Ev+0x18>)
   d53c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d53c6:	2211      	movs	r2, #17
   d53c8:	f840 3b04 	str.w	r3, [r0], #4
   d53cc:	2100      	movs	r1, #0
   d53ce:	f001 f9dd 	bl	d678c <memset>
}
   d53d2:	4620      	mov	r0, r4
   d53d4:	bd10      	pop	{r4, pc}
   d53d6:	bf00      	nop
   d53d8:	000d6b10 	.word	0x000d6b10

000d53dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d53dc:	4603      	mov	r3, r0
   d53de:	4a07      	ldr	r2, [pc, #28]	; (d53fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53e0:	b510      	push	{r4, lr}
   d53e2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d53e6:	f101 0210 	add.w	r2, r1, #16
   d53ea:	f851 4b04 	ldr.w	r4, [r1], #4
   d53ee:	f843 4b04 	str.w	r4, [r3], #4
   d53f2:	4291      	cmp	r1, r2
   d53f4:	d1f9      	bne.n	d53ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d53f6:	780a      	ldrb	r2, [r1, #0]
   d53f8:	701a      	strb	r2, [r3, #0]
}
   d53fa:	bd10      	pop	{r4, pc}
   d53fc:	000d6b10 	.word	0x000d6b10

000d5400 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5400:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5402:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5406:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d540a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d540e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5412:	2304      	movs	r3, #4
   d5414:	6041      	str	r1, [r0, #4]
   d5416:	7503      	strb	r3, [r0, #20]
}
   d5418:	bd10      	pop	{r4, pc}

000d541a <_ZN9IPAddressaSEPKh>:
{
   d541a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d541c:	78cb      	ldrb	r3, [r1, #3]
   d541e:	9300      	str	r3, [sp, #0]
   d5420:	788b      	ldrb	r3, [r1, #2]
   d5422:	784a      	ldrb	r2, [r1, #1]
   d5424:	7809      	ldrb	r1, [r1, #0]
   d5426:	f7ff ffeb 	bl	d5400 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d542a:	b002      	add	sp, #8
   d542c:	bd10      	pop	{r4, pc}

000d542e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d542e:	7441      	strb	r1, [r0, #17]
}
   d5430:	4770      	bx	lr

000d5432 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5432:	4770      	bx	lr

000d5434 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5434:	4770      	bx	lr

000d5436 <_ZN9USBSerial4readEv>:
{
   d5436:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5438:	2100      	movs	r1, #0
   d543a:	7c00      	ldrb	r0, [r0, #16]
   d543c:	f7ff fb32 	bl	d4aa4 <HAL_USB_USART_Receive_Data>
}
   d5440:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5444:	bd08      	pop	{r3, pc}

000d5446 <_ZN9USBSerial4peekEv>:
{
   d5446:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5448:	2101      	movs	r1, #1
   d544a:	7c00      	ldrb	r0, [r0, #16]
   d544c:	f7ff fb2a 	bl	d4aa4 <HAL_USB_USART_Receive_Data>
}
   d5450:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5454:	bd08      	pop	{r3, pc}

000d5456 <_ZN9USBSerial17availableForWriteEv>:
{
   d5456:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5458:	7c00      	ldrb	r0, [r0, #16]
   d545a:	f7ff fb1b 	bl	d4a94 <HAL_USB_USART_Available_Data_For_Write>
}
   d545e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5462:	bd08      	pop	{r3, pc}

000d5464 <_ZN9USBSerial9availableEv>:
{
   d5464:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5466:	7c00      	ldrb	r0, [r0, #16]
   d5468:	f7ff fb0c 	bl	d4a84 <HAL_USB_USART_Available_Data>
}
   d546c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5470:	bd08      	pop	{r3, pc}

000d5472 <_ZN9USBSerial5writeEh>:
{
   d5472:	b513      	push	{r0, r1, r4, lr}
   d5474:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5476:	7c00      	ldrb	r0, [r0, #16]
{
   d5478:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d547a:	f7ff fb0b 	bl	d4a94 <HAL_USB_USART_Available_Data_For_Write>
   d547e:	2800      	cmp	r0, #0
   d5480:	9901      	ldr	r1, [sp, #4]
   d5482:	dc01      	bgt.n	d5488 <_ZN9USBSerial5writeEh+0x16>
   d5484:	7c60      	ldrb	r0, [r4, #17]
   d5486:	b120      	cbz	r0, d5492 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5488:	7c20      	ldrb	r0, [r4, #16]
   d548a:	f7ff fb13 	bl	d4ab4 <HAL_USB_USART_Send_Data>
   d548e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5492:	b002      	add	sp, #8
   d5494:	bd10      	pop	{r4, pc}

000d5496 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5496:	7c00      	ldrb	r0, [r0, #16]
   d5498:	f7ff bb14 	b.w	d4ac4 <HAL_USB_USART_Flush_Data>

000d549c <_ZN9USBSerialD0Ev>:
   d549c:	b510      	push	{r4, lr}
   d549e:	2114      	movs	r1, #20
   d54a0:	4604      	mov	r4, r0
   d54a2:	f000 fd49 	bl	d5f38 <_ZdlPvj>
   d54a6:	4620      	mov	r0, r4
   d54a8:	bd10      	pop	{r4, pc}
	...

000d54ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54ac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54b2:	4604      	mov	r4, r0
   d54b4:	4608      	mov	r0, r1
   d54b6:	2100      	movs	r1, #0
   d54b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54bc:	4b04      	ldr	r3, [pc, #16]	; (d54d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54be:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d54c0:	2301      	movs	r3, #1
  _serial = serial;
   d54c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54c4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d54c6:	4611      	mov	r1, r2
   d54c8:	f7ff facc 	bl	d4a64 <HAL_USB_USART_Init>
}
   d54cc:	4620      	mov	r0, r4
   d54ce:	bd10      	pop	{r4, pc}
   d54d0:	000d6b24 	.word	0x000d6b24

000d54d4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54d4:	7c00      	ldrb	r0, [r0, #16]
   d54d6:	2200      	movs	r2, #0
   d54d8:	f7ff bacc 	b.w	d4a74 <HAL_USB_USART_Begin>

000d54dc <_Z19acquireSerialBufferv>:
{
   d54dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54de:	2214      	movs	r2, #20
{
   d54e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54e2:	2100      	movs	r1, #0
   d54e4:	f001 f952 	bl	d678c <memset>
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	bd10      	pop	{r4, pc}

000d54ec <_Z16_fetch_usbserialv>:
{
   d54ec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54ee:	4c0f      	ldr	r4, [pc, #60]	; (d552c <_Z16_fetch_usbserialv+0x40>)
{
   d54f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54f2:	a803      	add	r0, sp, #12
   d54f4:	f7ff fff2 	bl	d54dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54f8:	7821      	ldrb	r1, [r4, #0]
   d54fa:	f3bf 8f5b 	dmb	ish
   d54fe:	f011 0101 	ands.w	r1, r1, #1
   d5502:	d10f      	bne.n	d5524 <_Z16_fetch_usbserialv+0x38>
   d5504:	4620      	mov	r0, r4
   d5506:	9101      	str	r1, [sp, #4]
   d5508:	f7fe fdcd 	bl	d40a6 <__cxa_guard_acquire>
   d550c:	9901      	ldr	r1, [sp, #4]
   d550e:	b148      	cbz	r0, d5524 <_Z16_fetch_usbserialv+0x38>
   d5510:	aa03      	add	r2, sp, #12
   d5512:	4807      	ldr	r0, [pc, #28]	; (d5530 <_Z16_fetch_usbserialv+0x44>)
   d5514:	f7ff ffca 	bl	d54ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5518:	4620      	mov	r0, r4
   d551a:	f7fe fdc9 	bl	d40b0 <__cxa_guard_release>
   d551e:	4805      	ldr	r0, [pc, #20]	; (d5534 <_Z16_fetch_usbserialv+0x48>)
   d5520:	f001 f906 	bl	d6730 <atexit>
	return _usbserial;
}
   d5524:	4802      	ldr	r0, [pc, #8]	; (d5530 <_Z16_fetch_usbserialv+0x44>)
   d5526:	b008      	add	sp, #32
   d5528:	bd10      	pop	{r4, pc}
   d552a:	bf00      	nop
   d552c:	2003e5e4 	.word	0x2003e5e4
   d5530:	2003e5e8 	.word	0x2003e5e8
   d5534:	000d5433 	.word	0x000d5433

000d5538 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5538:	4770      	bx	lr

000d553a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d553a:	7441      	strb	r1, [r0, #17]
}
   d553c:	4770      	bx	lr

000d553e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d553e:	4770      	bx	lr

000d5540 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5540:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5542:	7c00      	ldrb	r0, [r0, #16]
   d5544:	f7ff fa3e 	bl	d49c4 <hal_usart_available_data_for_write>
}
   d5548:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d554c:	bd08      	pop	{r3, pc}

000d554e <_ZN11USARTSerial9availableEv>:
{
   d554e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5550:	7c00      	ldrb	r0, [r0, #16]
   d5552:	f7ff fa0f 	bl	d4974 <hal_usart_available>
}
   d5556:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d555a:	bd08      	pop	{r3, pc}

000d555c <_ZN11USARTSerial4peekEv>:
{
   d555c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d555e:	7c00      	ldrb	r0, [r0, #16]
   d5560:	f7ff fa18 	bl	d4994 <hal_usart_peek>
}
   d5564:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5568:	bd08      	pop	{r3, pc}

000d556a <_ZN11USARTSerial4readEv>:
{
   d556a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7ff fa09 	bl	d4984 <hal_usart_read>
}
   d5572:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5576:	bd08      	pop	{r3, pc}

000d5578 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5578:	7c00      	ldrb	r0, [r0, #16]
   d557a:	f7ff ba13 	b.w	d49a4 <hal_usart_flush>

000d557e <_ZN11USARTSerial5writeEh>:
{
   d557e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5580:	7c45      	ldrb	r5, [r0, #17]
{
   d5582:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5584:	b12d      	cbz	r5, d5592 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5586:	7c20      	ldrb	r0, [r4, #16]
}
   d5588:	b003      	add	sp, #12
   d558a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d558e:	f7ff b9e9 	b.w	d4964 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5592:	7c00      	ldrb	r0, [r0, #16]
   d5594:	9101      	str	r1, [sp, #4]
   d5596:	f7ff fa15 	bl	d49c4 <hal_usart_available_data_for_write>
   d559a:	2800      	cmp	r0, #0
   d559c:	9901      	ldr	r1, [sp, #4]
   d559e:	dcf2      	bgt.n	d5586 <_ZN11USARTSerial5writeEh+0x8>
}
   d55a0:	4628      	mov	r0, r5
   d55a2:	b003      	add	sp, #12
   d55a4:	bd30      	pop	{r4, r5, pc}

000d55a6 <_ZN11USARTSerialD0Ev>:
   d55a6:	b510      	push	{r4, lr}
   d55a8:	2114      	movs	r1, #20
   d55aa:	4604      	mov	r4, r0
   d55ac:	f000 fcc4 	bl	d5f38 <_ZdlPvj>
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd10      	pop	{r4, pc}

000d55b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d55b4:	b510      	push	{r4, lr}
   d55b6:	f04f 0c00 	mov.w	ip, #0
   d55ba:	4604      	mov	r4, r0
   d55bc:	4608      	mov	r0, r1
   d55be:	4611      	mov	r1, r2
   d55c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55c4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d55c8:	4a04      	ldr	r2, [pc, #16]	; (d55dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d55ca:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d55cc:	2201      	movs	r2, #1
  _serial = serial;
   d55ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55d0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d55d2:	461a      	mov	r2, r3
   d55d4:	f7ff f9be 	bl	d4954 <hal_usart_init>
}
   d55d8:	4620      	mov	r0, r4
   d55da:	bd10      	pop	{r4, pc}
   d55dc:	000d6b54 	.word	0x000d6b54

000d55e0 <_Z22__fetch_global_Serial1v>:
{
   d55e0:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55e2:	4c0d      	ldr	r4, [pc, #52]	; (d5618 <_Z22__fetch_global_Serial1v+0x38>)
   d55e4:	7821      	ldrb	r1, [r4, #0]
   d55e6:	f3bf 8f5b 	dmb	ish
   d55ea:	f011 0101 	ands.w	r1, r1, #1
   d55ee:	d110      	bne.n	d5612 <_Z22__fetch_global_Serial1v+0x32>
   d55f0:	4620      	mov	r0, r4
   d55f2:	9101      	str	r1, [sp, #4]
   d55f4:	f7fe fd57 	bl	d40a6 <__cxa_guard_acquire>
   d55f8:	9901      	ldr	r1, [sp, #4]
   d55fa:	b150      	cbz	r0, d5612 <_Z22__fetch_global_Serial1v+0x32>
   d55fc:	4b07      	ldr	r3, [pc, #28]	; (d561c <_Z22__fetch_global_Serial1v+0x3c>)
   d55fe:	4a08      	ldr	r2, [pc, #32]	; (d5620 <_Z22__fetch_global_Serial1v+0x40>)
   d5600:	4808      	ldr	r0, [pc, #32]	; (d5624 <_Z22__fetch_global_Serial1v+0x44>)
   d5602:	f7ff ffd7 	bl	d55b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5606:	4620      	mov	r0, r4
   d5608:	f7fe fd52 	bl	d40b0 <__cxa_guard_release>
   d560c:	4806      	ldr	r0, [pc, #24]	; (d5628 <_Z22__fetch_global_Serial1v+0x48>)
   d560e:	f001 f88f 	bl	d6730 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5612:	4804      	ldr	r0, [pc, #16]	; (d5624 <_Z22__fetch_global_Serial1v+0x44>)
   d5614:	b002      	add	sp, #8
   d5616:	bd10      	pop	{r4, pc}
   d5618:	2003e5fc 	.word	0x2003e5fc
   d561c:	2003e684 	.word	0x2003e684
   d5620:	2003e600 	.word	0x2003e600
   d5624:	2003e708 	.word	0x2003e708
   d5628:	000d553f 	.word	0x000d553f

000d562c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d562c:	4770      	bx	lr

000d562e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d562e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5630:	4606      	mov	r6, r0
   d5632:	4615      	mov	r5, r2
   d5634:	460c      	mov	r4, r1
   d5636:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5638:	42bc      	cmp	r4, r7
   d563a:	d006      	beq.n	d564a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d563c:	6833      	ldr	r3, [r6, #0]
   d563e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5642:	689b      	ldr	r3, [r3, #8]
   d5644:	4630      	mov	r0, r6
   d5646:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5648:	e7f6      	b.n	d5638 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d564a:	4628      	mov	r0, r5
   d564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d564e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d564e:	7c00      	ldrb	r0, [r0, #16]
   d5650:	2200      	movs	r2, #0
   d5652:	f7ff b9bf 	b.w	d49d4 <hal_i2c_write>

000d5656 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5656:	7c00      	ldrb	r0, [r0, #16]
   d5658:	2100      	movs	r1, #0
   d565a:	f7ff b9c3 	b.w	d49e4 <hal_i2c_available>

000d565e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d565e:	7c00      	ldrb	r0, [r0, #16]
   d5660:	2100      	movs	r1, #0
   d5662:	f7ff b9c7 	b.w	d49f4 <hal_i2c_read>

000d5666 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5666:	7c00      	ldrb	r0, [r0, #16]
   d5668:	2100      	movs	r1, #0
   d566a:	f7ff b9cb 	b.w	d4a04 <hal_i2c_peek>

000d566e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d566e:	7c00      	ldrb	r0, [r0, #16]
   d5670:	2100      	movs	r1, #0
   d5672:	f7ff b9cf 	b.w	d4a14 <hal_i2c_flush>

000d5676 <_ZN7TwoWireD0Ev>:
   d5676:	b510      	push	{r4, lr}
   d5678:	2114      	movs	r1, #20
   d567a:	4604      	mov	r4, r0
   d567c:	f000 fc5c 	bl	d5f38 <_ZdlPvj>
   d5680:	4620      	mov	r0, r4
   d5682:	bd10      	pop	{r4, pc}

000d5684 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5684:	b510      	push	{r4, lr}
   d5686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d568a:	4604      	mov	r4, r0
   d568c:	4608      	mov	r0, r1
   d568e:	2100      	movs	r1, #0
   d5690:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5694:	4b03      	ldr	r3, [pc, #12]	; (d56a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5696:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5698:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d569a:	4611      	mov	r1, r2
   d569c:	f7ff f9ca 	bl	d4a34 <hal_i2c_init>
}
   d56a0:	4620      	mov	r0, r4
   d56a2:	bd10      	pop	{r4, pc}
   d56a4:	000d6b84 	.word	0x000d6b84

000d56a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d56a8:	2200      	movs	r2, #0
   d56aa:	6840      	ldr	r0, [r0, #4]
   d56ac:	4611      	mov	r1, r2
   d56ae:	f7ff baad 	b.w	d4c0c <network_ready>

000d56b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56b2:	2200      	movs	r2, #0
   d56b4:	6840      	ldr	r0, [r0, #4]
   d56b6:	4611      	mov	r1, r2
   d56b8:	f7ff bac8 	b.w	d4c4c <network_listening>

000d56bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d56bc:	2200      	movs	r2, #0
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	4611      	mov	r1, r2
   d56c2:	f7ff bad3 	b.w	d4c6c <network_get_listen_timeout>

000d56c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	2200      	movs	r2, #0
   d56ca:	f7ff bac7 	b.w	d4c5c <network_set_listen_timeout>

000d56ce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d56ce:	6840      	ldr	r0, [r0, #4]
   d56d0:	2200      	movs	r2, #0
   d56d2:	f081 0101 	eor.w	r1, r1, #1
   d56d6:	f7ff bab1 	b.w	d4c3c <network_listen>

000d56da <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d56da:	2300      	movs	r3, #0
   d56dc:	6840      	ldr	r0, [r0, #4]
   d56de:	461a      	mov	r2, r3
   d56e0:	4619      	mov	r1, r3
   d56e2:	f7ff baa3 	b.w	d4c2c <network_off>

000d56e6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d56e6:	2300      	movs	r3, #0
   d56e8:	6840      	ldr	r0, [r0, #4]
   d56ea:	461a      	mov	r2, r3
   d56ec:	4619      	mov	r1, r3
   d56ee:	f7ff ba95 	b.w	d4c1c <network_on>

000d56f2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d56f2:	2200      	movs	r2, #0
   d56f4:	6840      	ldr	r0, [r0, #4]
   d56f6:	4611      	mov	r1, r2
   d56f8:	f7ff ba78 	b.w	d4bec <network_connecting>

000d56fc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56fc:	6840      	ldr	r0, [r0, #4]
   d56fe:	2200      	movs	r2, #0
   d5700:	2102      	movs	r1, #2
   d5702:	f7ff ba7b 	b.w	d4bfc <network_disconnect>

000d5706 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5706:	2300      	movs	r3, #0
   d5708:	6840      	ldr	r0, [r0, #4]
   d570a:	461a      	mov	r2, r3
   d570c:	f7ff ba66 	b.w	d4bdc <network_connect>

000d5710 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5710:	4b02      	ldr	r3, [pc, #8]	; (d571c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5712:	2204      	movs	r2, #4
   d5714:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5716:	4a02      	ldr	r2, [pc, #8]	; (d5720 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5718:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d571a:	4770      	bx	lr
   d571c:	2003e71c 	.word	0x2003e71c
   d5720:	000d6bac 	.word	0x000d6bac

000d5724 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5724:	2300      	movs	r3, #0
   d5726:	6840      	ldr	r0, [r0, #4]
   d5728:	461a      	mov	r2, r3
   d572a:	f7ff ba57 	b.w	d4bdc <network_connect>

000d572e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	2200      	movs	r2, #0
   d5732:	2102      	movs	r1, #2
   d5734:	f7ff ba62 	b.w	d4bfc <network_disconnect>

000d5738 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5738:	2200      	movs	r2, #0
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	4611      	mov	r1, r2
   d573e:	f7ff ba55 	b.w	d4bec <network_connecting>

000d5742 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5742:	2200      	movs	r2, #0
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	4611      	mov	r1, r2
   d5748:	f7ff ba60 	b.w	d4c0c <network_ready>

000d574c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d574c:	2300      	movs	r3, #0
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	461a      	mov	r2, r3
   d5752:	4619      	mov	r1, r3
   d5754:	f7ff ba62 	b.w	d4c1c <network_on>

000d5758 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5758:	2300      	movs	r3, #0
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	461a      	mov	r2, r3
   d575e:	4619      	mov	r1, r3
   d5760:	f7ff ba64 	b.w	d4c2c <network_off>

000d5764 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5764:	6840      	ldr	r0, [r0, #4]
   d5766:	2100      	movs	r1, #0
   d5768:	f7ff ba88 	b.w	d4c7c <network_is_on>

000d576c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d576c:	6840      	ldr	r0, [r0, #4]
   d576e:	2100      	movs	r1, #0
   d5770:	f7ff ba8c 	b.w	d4c8c <network_is_off>

000d5774 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	2200      	movs	r2, #0
   d5778:	f081 0101 	eor.w	r1, r1, #1
   d577c:	f7ff ba5e 	b.w	d4c3c <network_listen>

000d5780 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	2200      	movs	r2, #0
   d5784:	f7ff ba6a 	b.w	d4c5c <network_set_listen_timeout>

000d5788 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5788:	2200      	movs	r2, #0
   d578a:	6840      	ldr	r0, [r0, #4]
   d578c:	4611      	mov	r1, r2
   d578e:	f7ff ba6d 	b.w	d4c6c <network_get_listen_timeout>

000d5792 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5792:	2200      	movs	r2, #0
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	4611      	mov	r1, r2
   d5798:	f7ff ba58 	b.w	d4c4c <network_listening>

000d579c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d579c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57a0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d57a2:	b095      	sub	sp, #84	; 0x54
   d57a4:	4616      	mov	r6, r2
   d57a6:	460d      	mov	r5, r1
   d57a8:	4607      	mov	r7, r0
    IPAddress addr;
   d57aa:	f7ff fe09 	bl	d53c0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d57ae:	4621      	mov	r1, r4
   d57b0:	2218      	movs	r2, #24
   d57b2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d57b4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d57b6:	f000 ffe9 	bl	d678c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d57ba:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d57bc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d57c0:	4621      	mov	r1, r4
   d57c2:	466b      	mov	r3, sp
   d57c4:	aa0c      	add	r2, sp, #48	; 0x30
   d57c6:	4630      	mov	r0, r6
   d57c8:	f7ff f864 	bl	d4894 <netdb_getaddrinfo>
    if (!r) {
   d57cc:	4604      	mov	r4, r0
   d57ce:	2800      	cmp	r0, #0
   d57d0:	d146      	bne.n	d5860 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57d2:	4602      	mov	r2, r0
   d57d4:	2101      	movs	r1, #1
   d57d6:	6868      	ldr	r0, [r5, #4]
   d57d8:	f7ff fa18 	bl	d4c0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57e0:	4622      	mov	r2, r4
   d57e2:	6868      	ldr	r0, [r5, #4]
   d57e4:	f7ff fa12 	bl	d4c0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57ea:	4681      	mov	r9, r0
        bool ok = false;
   d57ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57ee:	2e00      	cmp	r6, #0
   d57f0:	d036      	beq.n	d5860 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d57f2:	2900      	cmp	r1, #0
   d57f4:	d134      	bne.n	d5860 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57f6:	6873      	ldr	r3, [r6, #4]
   d57f8:	2b02      	cmp	r3, #2
   d57fa:	d003      	beq.n	d5804 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d57fc:	2b0a      	cmp	r3, #10
   d57fe:	d00b      	beq.n	d5818 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5800:	69f6      	ldr	r6, [r6, #28]
   d5802:	e7f4      	b.n	d57ee <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5804:	f1b8 0f00 	cmp.w	r8, #0
   d5808:	d004      	beq.n	d5814 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d580a:	6971      	ldr	r1, [r6, #20]
   d580c:	4638      	mov	r0, r7
   d580e:	3104      	adds	r1, #4
   d5810:	f7ff fe03 	bl	d541a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5814:	4641      	mov	r1, r8
   d5816:	e7f3      	b.n	d5800 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5818:	f1b9 0f00 	cmp.w	r9, #0
   d581c:	d101      	bne.n	d5822 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d581e:	4649      	mov	r1, r9
   d5820:	e7ee      	b.n	d5800 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5822:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5824:	2210      	movs	r2, #16
   d5826:	a801      	add	r0, sp, #4
   d5828:	f000 ffb0 	bl	d678c <memset>
                    a.v = 6;
   d582c:	2306      	movs	r3, #6
   d582e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5832:	ad01      	add	r5, sp, #4
   d5834:	f104 0308 	add.w	r3, r4, #8
   d5838:	3418      	adds	r4, #24
   d583a:	6818      	ldr	r0, [r3, #0]
   d583c:	6859      	ldr	r1, [r3, #4]
   d583e:	462a      	mov	r2, r5
   d5840:	c203      	stmia	r2!, {r0, r1}
   d5842:	3308      	adds	r3, #8
   d5844:	42a3      	cmp	r3, r4
   d5846:	4615      	mov	r5, r2
   d5848:	d1f7      	bne.n	d583a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d584a:	a901      	add	r1, sp, #4
   d584c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d584e:	ad07      	add	r5, sp, #28
   d5850:	f7ff fdc4 	bl	d53dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5856:	1d3c      	adds	r4, r7, #4
   d5858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d585a:	682b      	ldr	r3, [r5, #0]
   d585c:	7023      	strb	r3, [r4, #0]
   d585e:	e7de      	b.n	d581e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5860:	9800      	ldr	r0, [sp, #0]
   d5862:	f7ff f80f 	bl	d4884 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5866:	4638      	mov	r0, r7
   d5868:	b015      	add	sp, #84	; 0x54
   d586a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5870 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5870:	4b02      	ldr	r3, [pc, #8]	; (d587c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5872:	4a03      	ldr	r2, [pc, #12]	; (d5880 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5874:	601a      	str	r2, [r3, #0]
   d5876:	2200      	movs	r2, #0
   d5878:	605a      	str	r2, [r3, #4]

} // spark
   d587a:	4770      	bx	lr
   d587c:	2003e724 	.word	0x2003e724
   d5880:	000d6be8 	.word	0x000d6be8

000d5884 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5884:	f100 0310 	add.w	r3, r0, #16
   d5888:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d588a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d588e:	2901      	cmp	r1, #1
   d5890:	4618      	mov	r0, r3
   d5892:	d108      	bne.n	d58a6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5894:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d5898:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d589c:	3a01      	subs	r2, #1
   d589e:	f103 0310 	add.w	r3, r3, #16
   d58a2:	d1f2      	bne.n	d588a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d58a4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d58a6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d58a8:	bf04      	itt	eq
   d58aa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d58ae:	1852      	addeq	r2, r2, r1
   d58b0:	e7f4      	b.n	d589c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d58b2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d58b2:	4770      	bx	lr

000d58b4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d58b4:	2000      	movs	r0, #0
   d58b6:	4770      	bx	lr

000d58b8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d58b8:	b510      	push	{r4, lr}
   d58ba:	2110      	movs	r1, #16
   d58bc:	4604      	mov	r4, r0
   d58be:	f000 fb3b 	bl	d5f38 <_ZdlPvj>
   d58c2:	4620      	mov	r0, r4
   d58c4:	bd10      	pop	{r4, pc}

000d58c6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d58c6:	b508      	push	{r3, lr}
      { delete this; }
   d58c8:	f7ff fff6 	bl	d58b8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d58cc:	bd08      	pop	{r3, pc}

000d58ce <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d58ce:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d58d0:	68c4      	ldr	r4, [r0, #12]
   d58d2:	b17c      	cbz	r4, d58f4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d58d4:	6820      	ldr	r0, [r4, #0]
   d58d6:	b108      	cbz	r0, d58dc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d58d8:	f7fe fbe3 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d58dc:	7a23      	ldrb	r3, [r4, #8]
   d58de:	b11b      	cbz	r3, d58e8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d58e0:	6860      	ldr	r0, [r4, #4]
   d58e2:	b108      	cbz	r0, d58e8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d58e4:	f7fe fbdd 	bl	d40a2 <_ZdaPv>
   d58e8:	4620      	mov	r0, r4
   d58ea:	210c      	movs	r1, #12
   d58ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d58f0:	f000 bb22 	b.w	d5f38 <_ZdlPvj>
   d58f4:	bd10      	pop	{r4, pc}

000d58f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d58f6:	b510      	push	{r4, lr}
          _M_dispose();
   d58f8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d58fa:	4604      	mov	r4, r0
          _M_dispose();
   d58fc:	689b      	ldr	r3, [r3, #8]
   d58fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5900:	68a3      	ldr	r3, [r4, #8]
   d5902:	3b01      	subs	r3, #1
   d5904:	60a3      	str	r3, [r4, #8]
   d5906:	b92b      	cbnz	r3, d5914 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5908:	6823      	ldr	r3, [r4, #0]
   d590a:	4620      	mov	r0, r4
   d590c:	68db      	ldr	r3, [r3, #12]
    }
   d590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5912:	4718      	bx	r3
    }
   d5914:	bd10      	pop	{r4, pc}

000d5916 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5916:	b538      	push	{r3, r4, r5, lr}
   d5918:	680b      	ldr	r3, [r1, #0]
   d591a:	6003      	str	r3, [r0, #0]
   d591c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d591e:	6843      	ldr	r3, [r0, #4]
   d5920:	429d      	cmp	r5, r3
    class __shared_ptr
   d5922:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5924:	d00c      	beq.n	d5940 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5926:	b115      	cbz	r5, d592e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5928:	686b      	ldr	r3, [r5, #4]
   d592a:	3301      	adds	r3, #1
   d592c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d592e:	6860      	ldr	r0, [r4, #4]
   d5930:	b128      	cbz	r0, d593e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5932:	6843      	ldr	r3, [r0, #4]
   d5934:	3b01      	subs	r3, #1
   d5936:	6043      	str	r3, [r0, #4]
   d5938:	b90b      	cbnz	r3, d593e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d593a:	f7ff ffdc 	bl	d58f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d593e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5940:	4620      	mov	r0, r4
   d5942:	bd38      	pop	{r3, r4, r5, pc}

000d5944 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5944:	460b      	mov	r3, r1
   d5946:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5948:	2200      	movs	r2, #0
   d594a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d594c:	e9c0 2200 	strd	r2, r2, [r0]
   d5950:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5952:	6083      	str	r3, [r0, #8]
    if (t) {
   d5954:	b90b      	cbnz	r3, d595a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5956:	4620      	mov	r0, r4
   d5958:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d595a:	f7ff ffdc 	bl	d5916 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d595e:	e7fa      	b.n	d5956 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5960 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5960:	6883      	ldr	r3, [r0, #8]
   d5962:	b1eb      	cbz	r3, d59a0 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5964:	781a      	ldrb	r2, [r3, #0]
   d5966:	2a03      	cmp	r2, #3
   d5968:	d81a      	bhi.n	d59a0 <_ZNK5spark9JSONValue4typeEv+0x40>
   d596a:	e8df f002 	tbb	[pc, r2]
   d596e:	1704      	.short	0x1704
   d5970:	1b02      	.short	0x1b02
   d5972:	2005      	movs	r0, #5
   d5974:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5976:	6802      	ldr	r2, [r0, #0]
   d5978:	685b      	ldr	r3, [r3, #4]
   d597a:	6852      	ldr	r2, [r2, #4]
   d597c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d597e:	282d      	cmp	r0, #45	; 0x2d
   d5980:	d012      	beq.n	d59a8 <_ZNK5spark9JSONValue4typeEv+0x48>
   d5982:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5986:	2b09      	cmp	r3, #9
   d5988:	d90e      	bls.n	d59a8 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d598a:	2874      	cmp	r0, #116	; 0x74
   d598c:	d00e      	beq.n	d59ac <_ZNK5spark9JSONValue4typeEv+0x4c>
   d598e:	2866      	cmp	r0, #102	; 0x66
   d5990:	d00c      	beq.n	d59ac <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5992:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5996:	4258      	negs	r0, r3
   d5998:	4158      	adcs	r0, r3
   d599a:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d599c:	2006      	movs	r0, #6
   d599e:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d59a0:	2000      	movs	r0, #0
   d59a2:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d59a4:	2004      	movs	r0, #4
   d59a6:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d59a8:	2003      	movs	r0, #3
   d59aa:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d59ac:	2002      	movs	r0, #2
    }
}
   d59ae:	4770      	bx	lr

000d59b0 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d59b0:	b510      	push	{r4, lr}
   d59b2:	4604      	mov	r4, r0
    switch (type()) {
   d59b4:	f7ff ffd4 	bl	d5960 <_ZNK5spark9JSONValue4typeEv>
   d59b8:	2803      	cmp	r0, #3
   d59ba:	d00d      	beq.n	d59d8 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d59bc:	2804      	cmp	r0, #4
   d59be:	d01e      	beq.n	d59fe <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d59c0:	2802      	cmp	r0, #2
   d59c2:	d12b      	bne.n	d5a1c <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d59c4:	6822      	ldr	r2, [r4, #0]
   d59c6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d59c8:	6852      	ldr	r2, [r2, #4]
   d59ca:	685b      	ldr	r3, [r3, #4]
   d59cc:	5cd0      	ldrb	r0, [r2, r3]
   d59ce:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d59d2:	4258      	negs	r0, r3
   d59d4:	4158      	adcs	r0, r3
}
   d59d6:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d59d8:	68a3      	ldr	r3, [r4, #8]
   d59da:	6822      	ldr	r2, [r4, #0]
   d59dc:	685b      	ldr	r3, [r3, #4]
   d59de:	6854      	ldr	r4, [r2, #4]
   d59e0:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d59e2:	490f      	ldr	r1, [pc, #60]	; (d5a20 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d59e4:	4620      	mov	r0, r4
   d59e6:	f000 fefd 	bl	d67e4 <strcmp>
   d59ea:	2800      	cmp	r0, #0
   d59ec:	d0f3      	beq.n	d59d6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d59ee:	490d      	ldr	r1, [pc, #52]	; (d5a24 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d59f0:	4620      	mov	r0, r4
   d59f2:	f000 fef7 	bl	d67e4 <strcmp>
   d59f6:	3800      	subs	r0, #0
   d59f8:	bf18      	it	ne
   d59fa:	2001      	movne	r0, #1
   d59fc:	e7eb      	b.n	d59d6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d59fe:	6822      	ldr	r2, [r4, #0]
   d5a00:	68a3      	ldr	r3, [r4, #8]
   d5a02:	6852      	ldr	r2, [r2, #4]
   d5a04:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5a06:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d5a08:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5a0a:	2800      	cmp	r0, #0
   d5a0c:	d0e3      	beq.n	d59d6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5a0e:	4906      	ldr	r1, [pc, #24]	; (d5a28 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d5a10:	4620      	mov	r0, r4
   d5a12:	f000 fee7 	bl	d67e4 <strcmp>
   d5a16:	2800      	cmp	r0, #0
   d5a18:	d1e3      	bne.n	d59e2 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d5a1a:	e7dc      	b.n	d59d6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d5a1c:	2000      	movs	r0, #0
   d5a1e:	e7da      	b.n	d59d6 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5a20:	000d6c1e 	.word	0x000d6c1e
   d5a24:	000d6c1c 	.word	0x000d6c1c
   d5a28:	000d6c20 	.word	0x000d6c20

000d5a2c <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d5a2c:	b510      	push	{r4, lr}
   d5a2e:	4604      	mov	r4, r0
    switch (type()) {
   d5a30:	f7ff ff96 	bl	d5960 <_ZNK5spark9JSONValue4typeEv>
   d5a34:	2802      	cmp	r0, #2
   d5a36:	d00e      	beq.n	d5a56 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d5a38:	1ec3      	subs	r3, r0, #3
   d5a3a:	b2db      	uxtb	r3, r3
   d5a3c:	2b01      	cmp	r3, #1
   d5a3e:	d814      	bhi.n	d5a6a <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d5a40:	6822      	ldr	r2, [r4, #0]
   d5a42:	68a3      	ldr	r3, [r4, #8]
   d5a44:	6850      	ldr	r0, [r2, #4]
   d5a46:	685b      	ldr	r3, [r3, #4]
}
   d5a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d5a4c:	220a      	movs	r2, #10
   d5a4e:	2100      	movs	r1, #0
   d5a50:	4418      	add	r0, r3
   d5a52:	f000 bf5b 	b.w	d690c <strtol>
        const char* const s = d_->json + t_->start;
   d5a56:	6822      	ldr	r2, [r4, #0]
   d5a58:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5a5a:	6852      	ldr	r2, [r2, #4]
   d5a5c:	685b      	ldr	r3, [r3, #4]
   d5a5e:	5cd0      	ldrb	r0, [r2, r3]
   d5a60:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5a64:	4258      	negs	r0, r3
   d5a66:	4158      	adcs	r0, r3
}
   d5a68:	bd10      	pop	{r4, pc}
    switch (type()) {
   d5a6a:	2000      	movs	r0, #0
   d5a6c:	e7fc      	b.n	d5a68 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d5a70 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a74:	4699      	mov	r9, r3
   d5a76:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d5a78:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5a7a:	4607      	mov	r7, r0
   d5a7c:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d5a7e:	eb0d 0003 	add.w	r0, sp, r3
   d5a82:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5a84:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d5a86:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5a88:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d5a8a:	f7ff f85b 	bl	d4b44 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5a8e:	ab03      	add	r3, sp, #12
   d5a90:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d5a92:	f04f 36ff 	mov.w	r6, #4294967295
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5a96:	9400      	str	r4, [sp, #0]
   d5a98:	4623      	mov	r3, r4
   d5a9a:	4642      	mov	r2, r8
   d5a9c:	4639      	mov	r1, r7
   d5a9e:	a804      	add	r0, sp, #16
    int nExt = -1;
   d5aa0:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d5aa2:	f7ff f857 	bl	d4b54 <jsmn_parse_deprecated>
    if (n <= 0) {
   d5aa6:	1e05      	subs	r5, r0, #0
   d5aa8:	dd27      	ble.n	d5afa <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d5aaa:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5aac:	4914      	ldr	r1, [pc, #80]	; (d5b00 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d5aae:	4285      	cmp	r5, r0
   d5ab0:	bfb8      	it	lt
   d5ab2:	4605      	movlt	r5, r0
   d5ab4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d5ab8:	bfac      	ite	ge
   d5aba:	4630      	movge	r0, r6
   d5abc:	0128      	lsllt	r0, r5, #4
   d5abe:	f000 fa3f 	bl	d5f40 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5ac2:	4606      	mov	r6, r0
   d5ac4:	b198      	cbz	r0, d5aee <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5ac6:	2100      	movs	r1, #0
   d5ac8:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5aca:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d5acc:	f7ff f83a 	bl	d4b44 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5ad0:	e9cd 5400 	strd	r5, r4, [sp]
   d5ad4:	4633      	mov	r3, r6
   d5ad6:	4642      	mov	r2, r8
   d5ad8:	4639      	mov	r1, r7
   d5ada:	a804      	add	r0, sp, #16
   d5adc:	f7ff f83a 	bl	d4b54 <jsmn_parse_deprecated>
   d5ae0:	42a0      	cmp	r0, r4
   d5ae2:	dd07      	ble.n	d5af4 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d5ae4:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d5ae8:	2001      	movs	r0, #1
    *count = n;
   d5aea:	f8c9 5000 	str.w	r5, [r9]
}
   d5aee:	b008      	add	sp, #32
   d5af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5af4:	4630      	mov	r0, r6
   d5af6:	f7fe fad4 	bl	d40a2 <_ZdaPv>
      }
   d5afa:	4620      	mov	r0, r4
   d5afc:	e7f7      	b.n	d5aee <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d5afe:	bf00      	nop
   d5b00:	000d6c44 	.word	0x000d6c44

000d5b04 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5b08:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5b0a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5b0c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5b0e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5b10:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5b12:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5b14:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5b16:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5b18:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5b1c:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5b20:	42b4      	cmp	r4, r6
   d5b22:	d063      	beq.n	d5bec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5b24:	4625      	mov	r5, r4
   d5b26:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5b2a:	2a5c      	cmp	r2, #92	; 0x5c
   d5b2c:	d12b      	bne.n	d5b86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5b2e:	42a1      	cmp	r1, r4
   d5b30:	d007      	beq.n	d5b42 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5b32:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5b36:	4618      	mov	r0, r3
   d5b38:	465a      	mov	r2, fp
   d5b3a:	f000 fe0d 	bl	d6758 <memmove>
   d5b3e:	4603      	mov	r3, r0
                str += n;
   d5b40:	445b      	add	r3, fp
            if (s == end) {
   d5b42:	42b5      	cmp	r5, r6
   d5b44:	d039      	beq.n	d5bba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5b46:	7862      	ldrb	r2, [r4, #1]
   d5b48:	2a75      	cmp	r2, #117	; 0x75
   d5b4a:	d12a      	bne.n	d5ba2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5b4c:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5b4e:	1ab2      	subs	r2, r6, r2
   d5b50:	2a03      	cmp	r2, #3
   d5b52:	dd32      	ble.n	d5bba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5b54:	1da0      	adds	r0, r4, #6
   d5b56:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5b5a:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5b5e:	45ae      	cmp	lr, r5
   d5b60:	d053      	beq.n	d5c0a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5b62:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5b66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5b6a:	fa5f fb82 	uxtb.w	fp, r2
   d5b6e:	f1bb 0f09 	cmp.w	fp, #9
   d5b72:	d905      	bls.n	d5b80 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5b74:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5b78:	2a05      	cmp	r2, #5
   d5b7a:	d807      	bhi.n	d5b8c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5b7c:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5b80:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5b84:	e7eb      	b.n	d5b5e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d5b86:	4628      	mov	r0, r5
   d5b88:	4604      	mov	r4, r0
   d5b8a:	e7c9      	b.n	d5b20 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5b8c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5b90:	2a05      	cmp	r2, #5
   d5b92:	d812      	bhi.n	d5bba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5b94:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5b98:	e7f2      	b.n	d5b80 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5b9a:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5b9e:	4601      	mov	r1, r0
   d5ba0:	e7f2      	b.n	d5b88 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5ba2:	2a6e      	cmp	r2, #110	; 0x6e
   d5ba4:	d01c      	beq.n	d5be0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5ba6:	d80e      	bhi.n	d5bc6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5ba8:	2a62      	cmp	r2, #98	; 0x62
   d5baa:	d013      	beq.n	d5bd4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5bac:	d807      	bhi.n	d5bbe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5bae:	2a2f      	cmp	r2, #47	; 0x2f
   d5bb0:	d011      	beq.n	d5bd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5bb2:	2a5c      	cmp	r2, #92	; 0x5c
   d5bb4:	d00f      	beq.n	d5bd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5bb6:	2a22      	cmp	r2, #34	; 0x22
   d5bb8:	d00d      	beq.n	d5bd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5bba:	2000      	movs	r0, #0
   d5bbc:	e023      	b.n	d5c06 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5bbe:	2a66      	cmp	r2, #102	; 0x66
   d5bc0:	d1fb      	bne.n	d5bba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5bc2:	220c      	movs	r2, #12
   d5bc4:	e007      	b.n	d5bd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5bc6:	2a72      	cmp	r2, #114	; 0x72
   d5bc8:	d00d      	beq.n	d5be6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5bca:	2a74      	cmp	r2, #116	; 0x74
   d5bcc:	d1f5      	bne.n	d5bba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5bce:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5bd2:	e001      	b.n	d5bd8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5bd4:	2208      	movs	r2, #8
   d5bd6:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5bd8:	1ca1      	adds	r1, r4, #2
                ++str;
   d5bda:	3301      	adds	r3, #1
                ++s;
   d5bdc:	4608      	mov	r0, r1
   d5bde:	e7d3      	b.n	d5b88 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5be0:	f04f 020a 	mov.w	r2, #10
   d5be4:	e7f7      	b.n	d5bd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5be6:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5bea:	e7f5      	b.n	d5bd8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5bec:	42a1      	cmp	r1, r4
   d5bee:	d006      	beq.n	d5bfe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5bf0:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5bf2:	4618      	mov	r0, r3
   d5bf4:	4622      	mov	r2, r4
   d5bf6:	f000 fdaf 	bl	d6758 <memmove>
   d5bfa:	4603      	mov	r3, r0
        str += n;
   d5bfc:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5bfe:	eba3 0308 	sub.w	r3, r3, r8
   d5c02:	60bb      	str	r3, [r7, #8]
    return true;
   d5c04:	2001      	movs	r0, #1
}
   d5c06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5c0a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5c0e:	d9c4      	bls.n	d5b9a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5c10:	4621      	mov	r1, r4
   d5c12:	e7b9      	b.n	d5b88 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5c14 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c16:	4604      	mov	r4, r0
   d5c18:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5c1a:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5c1e:	2700      	movs	r7, #0
    while (t != end) {
   d5c20:	42b4      	cmp	r4, r6
   d5c22:	d010      	beq.n	d5c46 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5c24:	7823      	ldrb	r3, [r4, #0]
   d5c26:	2b03      	cmp	r3, #3
   d5c28:	d108      	bne.n	d5c3c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5c2a:	4629      	mov	r1, r5
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	f7ff ff69 	bl	d5b04 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5c32:	b148      	cbz	r0, d5c48 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5c34:	68a3      	ldr	r3, [r4, #8]
   d5c36:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5c38:	3410      	adds	r4, #16
    while (t != end) {
   d5c3a:	e7f1      	b.n	d5c20 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5c3c:	2b00      	cmp	r3, #0
   d5c3e:	d1fb      	bne.n	d5c38 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5c40:	68a2      	ldr	r2, [r4, #8]
   d5c42:	54ab      	strb	r3, [r5, r2]
   d5c44:	e7f8      	b.n	d5c38 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5c46:	2001      	movs	r0, #1
}
   d5c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5c4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5c4c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5c4e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5c50:	e9c0 3300 	strd	r3, r3, [r0]
   d5c54:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5c56:	480e      	ldr	r0, [pc, #56]	; (d5c90 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5c58:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5c5c:	b1a9      	cbz	r1, d5c8a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5c5e:	780b      	ldrb	r3, [r1, #0]
   d5c60:	2b03      	cmp	r3, #3
   d5c62:	d006      	beq.n	d5c72 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5c64:	b98b      	cbnz	r3, d5c8a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5c66:	6813      	ldr	r3, [r2, #0]
   d5c68:	6858      	ldr	r0, [r3, #4]
   d5c6a:	684b      	ldr	r3, [r1, #4]
   d5c6c:	5cc3      	ldrb	r3, [r0, r3]
   d5c6e:	2b6e      	cmp	r3, #110	; 0x6e
   d5c70:	d007      	beq.n	d5c82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5c72:	6813      	ldr	r3, [r2, #0]
   d5c74:	684d      	ldr	r5, [r1, #4]
   d5c76:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5c78:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5c7a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5c7c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5c7e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5c80:	60e3      	str	r3, [r4, #12]
   d5c82:	4611      	mov	r1, r2
   d5c84:	4620      	mov	r0, r4
   d5c86:	f7ff fe46 	bl	d5916 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	bd38      	pop	{r3, r4, r5, pc}
   d5c8e:	bf00      	nop
   d5c90:	000d6c1f 	.word	0x000d6c1f

000d5c94 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5c94:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5c96:	2500      	movs	r5, #0
   d5c98:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5c9a:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5c9e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5ca2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5ca6:	4604      	mov	r4, r0
   d5ca8:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5caa:	b14b      	cbz	r3, d5cc0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5cac:	781a      	ldrb	r2, [r3, #0]
   d5cae:	2a01      	cmp	r2, #1
   d5cb0:	d106      	bne.n	d5cc0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5cb2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5cb6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5cb8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5cba:	6143      	str	r3, [r0, #20]
   d5cbc:	f7ff fe2b 	bl	d5916 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	bd38      	pop	{r3, r4, r5, pc}

000d5cc4 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5cc4:	b510      	push	{r4, lr}
    if (!n_) {
   d5cc6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5cc8:	4604      	mov	r4, r0
    if (!n_) {
   d5cca:	b163      	cbz	r3, d5ce6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5ccc:	6880      	ldr	r0, [r0, #8]
   d5cce:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5cd0:	3b01      	subs	r3, #1
    ++t_;
   d5cd2:	3010      	adds	r0, #16
   d5cd4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5cd6:	6120      	str	r0, [r4, #16]
    --n_;
   d5cd8:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5cda:	b113      	cbz	r3, d5ce2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5cdc:	f7ff fdd2 	bl	d5884 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5ce0:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5ce2:	2001      	movs	r0, #1
   d5ce4:	e000      	b.n	d5ce8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5ce6:	4618      	mov	r0, r3
}
   d5ce8:	bd10      	pop	{r4, pc}
	...

000d5cec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5cec:	b538      	push	{r3, r4, r5, lr}
   d5cee:	2300      	movs	r3, #0
   d5cf0:	4604      	mov	r4, r0
   d5cf2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5cf4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5cf6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5cf8:	f7fe f9cd 	bl	d4096 <_Znwj>
   d5cfc:	b128      	cbz	r0, d5d0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5cfe:	2301      	movs	r3, #1
   d5d00:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5d04:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5d06:	6003      	str	r3, [r0, #0]
   d5d08:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d0a:	6020      	str	r0, [r4, #0]
	}
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	bd38      	pop	{r3, r4, r5, pc}
   d5d10:	000d6c30 	.word	0x000d6c30

000d5d14 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d16:	4604      	mov	r4, r0
   d5d18:	b087      	sub	sp, #28
   d5d1a:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5d1c:	200c      	movs	r0, #12
   d5d1e:	4927      	ldr	r1, [pc, #156]	; (d5dbc <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5d20:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5d22:	f000 f90b 	bl	d5f3c <_ZnwjRKSt9nothrow_t>
   d5d26:	4601      	mov	r1, r0
   d5d28:	b118      	cbz	r0, d5d32 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5d2a:	2300      	movs	r3, #0
   d5d2c:	e9c0 3300 	strd	r3, r3, [r0]
   d5d30:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5d32:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5d34:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5d36:	f7ff ffd9 	bl	d5cec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5d3a:	9a02      	ldr	r2, [sp, #8]
   d5d3c:	b942      	cbnz	r2, d5d50 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d3e:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5d42:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5d44:	a803      	add	r0, sp, #12
   d5d46:	f7fe fa12 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	b007      	add	sp, #28
   d5d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5d50:	2300      	movs	r3, #0
   d5d52:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5d54:	4629      	mov	r1, r5
   d5d56:	ab01      	add	r3, sp, #4
   d5d58:	4630      	mov	r0, r6
   d5d5a:	f7ff fe89 	bl	d5a70 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5d5e:	b918      	cbnz	r0, d5d68 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d60:	e9c4 0000 	strd	r0, r0, [r4]
   d5d64:	60a0      	str	r0, [r4, #8]
}
   d5d66:	e7ed      	b.n	d5d44 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5d68:	4914      	ldr	r1, [pc, #80]	; (d5dbc <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5d6a:	9f02      	ldr	r7, [sp, #8]
   d5d6c:	1c68      	adds	r0, r5, #1
   d5d6e:	f000 f8e7 	bl	d5f40 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5d72:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5d74:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5d76:	6858      	ldr	r0, [r3, #4]
   d5d78:	2800      	cmp	r0, #0
   d5d7a:	d0f1      	beq.n	d5d60 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5d7c:	462a      	mov	r2, r5
   d5d7e:	4631      	mov	r1, r6
   d5d80:	f000 fcdc 	bl	d673c <memcpy>
   d5d84:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5d86:	9901      	ldr	r1, [sp, #4]
   d5d88:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5d8a:	2201      	movs	r2, #1
   d5d8c:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5d8e:	685a      	ldr	r2, [r3, #4]
   d5d90:	f7ff ff40 	bl	d5c14 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5d94:	2800      	cmp	r0, #0
   d5d96:	d0e3      	beq.n	d5d60 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5d98:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5d9a:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d9c:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5d9e:	9b03      	ldr	r3, [sp, #12]
   d5da0:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5da2:	b113      	cbz	r3, d5daa <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5da4:	685a      	ldr	r2, [r3, #4]
   d5da6:	3201      	adds	r2, #1
   d5da8:	605a      	str	r2, [r3, #4]
   d5daa:	aa04      	add	r2, sp, #16
   d5dac:	4620      	mov	r0, r4
   d5dae:	f7ff fdc9 	bl	d5944 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5db2:	a805      	add	r0, sp, #20
   d5db4:	f7fe f9db 	bl	d416e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5db8:	e7c4      	b.n	d5d44 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5dba:	bf00      	nop
   d5dbc:	000d6c44 	.word	0x000d6c44

000d5dc0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5dc0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5dc2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5dc4:	d902      	bls.n	d5dcc <pinAvailable+0xc>
    return false;
   d5dc6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5dc8:	b002      	add	sp, #8
   d5dca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5dcc:	f1a0 030b 	sub.w	r3, r0, #11
   d5dd0:	2b02      	cmp	r3, #2
   d5dd2:	d81a      	bhi.n	d5e0a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5dd4:	4c17      	ldr	r4, [pc, #92]	; (d5e34 <pinAvailable+0x74>)
   d5dd6:	7821      	ldrb	r1, [r4, #0]
   d5dd8:	f3bf 8f5b 	dmb	ish
   d5ddc:	f011 0101 	ands.w	r1, r1, #1
   d5de0:	d10b      	bne.n	d5dfa <pinAvailable+0x3a>
   d5de2:	4620      	mov	r0, r4
   d5de4:	9101      	str	r1, [sp, #4]
   d5de6:	f7fe f95e 	bl	d40a6 <__cxa_guard_acquire>
   d5dea:	9901      	ldr	r1, [sp, #4]
   d5dec:	b128      	cbz	r0, d5dfa <pinAvailable+0x3a>
   d5dee:	4812      	ldr	r0, [pc, #72]	; (d5e38 <pinAvailable+0x78>)
   d5df0:	f7fe ffda 	bl	d4da8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5df4:	4620      	mov	r0, r4
   d5df6:	f7fe f95b 	bl	d40b0 <__cxa_guard_release>
   d5dfa:	4b0f      	ldr	r3, [pc, #60]	; (d5e38 <pinAvailable+0x78>)
   d5dfc:	7818      	ldrb	r0, [r3, #0]
   d5dfe:	f7fe fe29 	bl	d4a54 <hal_spi_is_enabled>
   d5e02:	2800      	cmp	r0, #0
   d5e04:	d1df      	bne.n	d5dc6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5e06:	2001      	movs	r0, #1
   d5e08:	e7de      	b.n	d5dc8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5e0a:	2801      	cmp	r0, #1
   d5e0c:	d809      	bhi.n	d5e22 <pinAvailable+0x62>
   d5e0e:	f000 f86f 	bl	d5ef0 <_Z19__fetch_global_Wirev>
   d5e12:	2100      	movs	r1, #0
   d5e14:	7c00      	ldrb	r0, [r0, #16]
   d5e16:	f7fe fe05 	bl	d4a24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5e1a:	f080 0001 	eor.w	r0, r0, #1
   d5e1e:	b2c0      	uxtb	r0, r0
   d5e20:	e7d2      	b.n	d5dc8 <pinAvailable+0x8>
   d5e22:	3809      	subs	r0, #9
   d5e24:	2801      	cmp	r0, #1
   d5e26:	d8ee      	bhi.n	d5e06 <pinAvailable+0x46>
   d5e28:	f7ff fbda 	bl	d55e0 <_Z22__fetch_global_Serial1v>
   d5e2c:	7c00      	ldrb	r0, [r0, #16]
   d5e2e:	f7fe fdc1 	bl	d49b4 <hal_usart_is_enabled>
   d5e32:	e7f2      	b.n	d5e1a <pinAvailable+0x5a>
   d5e34:	2003e72c 	.word	0x2003e72c
   d5e38:	2003e730 	.word	0x2003e730

000d5e3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5e3c:	2823      	cmp	r0, #35	; 0x23
{
   d5e3e:	b538      	push	{r3, r4, r5, lr}
   d5e40:	4604      	mov	r4, r0
   d5e42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5e44:	d80a      	bhi.n	d5e5c <pinMode+0x20>
   d5e46:	29ff      	cmp	r1, #255	; 0xff
   d5e48:	d008      	beq.n	d5e5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5e4a:	f7ff ffb9 	bl	d5dc0 <pinAvailable>
   d5e4e:	b128      	cbz	r0, d5e5c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5e50:	4629      	mov	r1, r5
   d5e52:	4620      	mov	r0, r4
}
   d5e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5e58:	f7fe bd2c 	b.w	d48b4 <HAL_Pin_Mode>
}
   d5e5c:	bd38      	pop	{r3, r4, r5, pc}

000d5e5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5e5e:	b538      	push	{r3, r4, r5, lr}
   d5e60:	4604      	mov	r4, r0
   d5e62:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e64:	f7fe fd2e 	bl	d48c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5e68:	28ff      	cmp	r0, #255	; 0xff
   d5e6a:	d010      	beq.n	d5e8e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5e6c:	2806      	cmp	r0, #6
   d5e6e:	d804      	bhi.n	d5e7a <digitalWrite+0x1c>
   d5e70:	234d      	movs	r3, #77	; 0x4d
   d5e72:	fa23 f000 	lsr.w	r0, r3, r0
   d5e76:	07c3      	lsls	r3, r0, #31
   d5e78:	d409      	bmi.n	d5e8e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f7ff ffa0 	bl	d5dc0 <pinAvailable>
   d5e80:	b128      	cbz	r0, d5e8e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e82:	4629      	mov	r1, r5
   d5e84:	4620      	mov	r0, r4
}
   d5e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5e8a:	f7fe bd23 	b.w	d48d4 <HAL_GPIO_Write>
}
   d5e8e:	bd38      	pop	{r3, r4, r5, pc}

000d5e90 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5e90:	280d      	cmp	r0, #13
{
   d5e92:	b510      	push	{r4, lr}
   d5e94:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5e96:	bf9c      	itt	ls
   d5e98:	340e      	addls	r4, #14
   d5e9a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5e9c:	4620      	mov	r0, r4
   d5e9e:	f7ff ff8f 	bl	d5dc0 <pinAvailable>
   d5ea2:	b150      	cbz	r0, d5eba <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5ea4:	2103      	movs	r1, #3
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	f7fe fcfc 	bl	d48a4 <HAL_Validate_Pin_Function>
   d5eac:	2803      	cmp	r0, #3
   d5eae:	d104      	bne.n	d5eba <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5eb0:	4620      	mov	r0, r4
}
   d5eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d5eb6:	f7fe bd15 	b.w	d48e4 <hal_adc_read>
}
   d5eba:	2000      	movs	r0, #0
   d5ebc:	bd10      	pop	{r4, pc}

000d5ebe <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ebe:	4770      	bx	lr

000d5ec0 <_Z17acquireWireBufferv>:
{
   d5ec0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5ec2:	2300      	movs	r3, #0
   d5ec4:	2520      	movs	r5, #32
   d5ec6:	8043      	strh	r3, [r0, #2]
   d5ec8:	2314      	movs	r3, #20
{
   d5eca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5ecc:	8003      	strh	r3, [r0, #0]
   d5ece:	6085      	str	r5, [r0, #8]
   d5ed0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ed2:	4906      	ldr	r1, [pc, #24]	; (d5eec <_Z17acquireWireBufferv+0x2c>)
   d5ed4:	4628      	mov	r0, r5
   d5ed6:	f000 f833 	bl	d5f40 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5eda:	4904      	ldr	r1, [pc, #16]	; (d5eec <_Z17acquireWireBufferv+0x2c>)
	};
   d5edc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ede:	4628      	mov	r0, r5
   d5ee0:	f000 f82e 	bl	d5f40 <_ZnajRKSt9nothrow_t>
	};
   d5ee4:	60e0      	str	r0, [r4, #12]
}
   d5ee6:	4620      	mov	r0, r4
   d5ee8:	bd38      	pop	{r3, r4, r5, pc}
   d5eea:	bf00      	nop
   d5eec:	000d6c44 	.word	0x000d6c44

000d5ef0 <_Z19__fetch_global_Wirev>:
{
   d5ef0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ef2:	4d0e      	ldr	r5, [pc, #56]	; (d5f2c <_Z19__fetch_global_Wirev+0x3c>)
   d5ef4:	7829      	ldrb	r1, [r5, #0]
   d5ef6:	f3bf 8f5b 	dmb	ish
   d5efa:	f011 0401 	ands.w	r4, r1, #1
{
   d5efe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5f00:	d111      	bne.n	d5f26 <_Z19__fetch_global_Wirev+0x36>
   d5f02:	4628      	mov	r0, r5
   d5f04:	f7fe f8cf 	bl	d40a6 <__cxa_guard_acquire>
   d5f08:	b168      	cbz	r0, d5f26 <_Z19__fetch_global_Wirev+0x36>
   d5f0a:	a801      	add	r0, sp, #4
   d5f0c:	f7ff ffd8 	bl	d5ec0 <_Z17acquireWireBufferv>
   d5f10:	aa01      	add	r2, sp, #4
   d5f12:	4621      	mov	r1, r4
   d5f14:	4806      	ldr	r0, [pc, #24]	; (d5f30 <_Z19__fetch_global_Wirev+0x40>)
   d5f16:	f7ff fbb5 	bl	d5684 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5f1a:	4628      	mov	r0, r5
   d5f1c:	f7fe f8c8 	bl	d40b0 <__cxa_guard_release>
   d5f20:	4804      	ldr	r0, [pc, #16]	; (d5f34 <_Z19__fetch_global_Wirev+0x44>)
   d5f22:	f000 fc05 	bl	d6730 <atexit>
	return wire;
}
   d5f26:	4802      	ldr	r0, [pc, #8]	; (d5f30 <_Z19__fetch_global_Wirev+0x40>)
   d5f28:	b007      	add	sp, #28
   d5f2a:	bd30      	pop	{r4, r5, pc}
   d5f2c:	2003e73c 	.word	0x2003e73c
   d5f30:	2003e740 	.word	0x2003e740
   d5f34:	000d5ebf 	.word	0x000d5ebf

000d5f38 <_ZdlPvj>:
   d5f38:	f7fe b8b1 	b.w	d409e <_ZdlPv>

000d5f3c <_ZnwjRKSt9nothrow_t>:
   d5f3c:	f7fe b8ab 	b.w	d4096 <_Znwj>

000d5f40 <_ZnajRKSt9nothrow_t>:
   d5f40:	f7fe b8ab 	b.w	d409a <_Znaj>

000d5f44 <__aeabi_drsub>:
   d5f44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5f48:	e002      	b.n	d5f50 <__adddf3>
   d5f4a:	bf00      	nop

000d5f4c <__aeabi_dsub>:
   d5f4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5f50 <__adddf3>:
   d5f50:	b530      	push	{r4, r5, lr}
   d5f52:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5f56:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5f5a:	ea94 0f05 	teq	r4, r5
   d5f5e:	bf08      	it	eq
   d5f60:	ea90 0f02 	teqeq	r0, r2
   d5f64:	bf1f      	itttt	ne
   d5f66:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5f6a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5f6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5f72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5f76:	f000 80e2 	beq.w	d613e <__adddf3+0x1ee>
   d5f7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5f7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5f82:	bfb8      	it	lt
   d5f84:	426d      	neglt	r5, r5
   d5f86:	dd0c      	ble.n	d5fa2 <__adddf3+0x52>
   d5f88:	442c      	add	r4, r5
   d5f8a:	ea80 0202 	eor.w	r2, r0, r2
   d5f8e:	ea81 0303 	eor.w	r3, r1, r3
   d5f92:	ea82 0000 	eor.w	r0, r2, r0
   d5f96:	ea83 0101 	eor.w	r1, r3, r1
   d5f9a:	ea80 0202 	eor.w	r2, r0, r2
   d5f9e:	ea81 0303 	eor.w	r3, r1, r3
   d5fa2:	2d36      	cmp	r5, #54	; 0x36
   d5fa4:	bf88      	it	hi
   d5fa6:	bd30      	pophi	{r4, r5, pc}
   d5fa8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5fac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5fb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5fb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5fb8:	d002      	beq.n	d5fc0 <__adddf3+0x70>
   d5fba:	4240      	negs	r0, r0
   d5fbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5fc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5fc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5fc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5fcc:	d002      	beq.n	d5fd4 <__adddf3+0x84>
   d5fce:	4252      	negs	r2, r2
   d5fd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5fd4:	ea94 0f05 	teq	r4, r5
   d5fd8:	f000 80a7 	beq.w	d612a <__adddf3+0x1da>
   d5fdc:	f1a4 0401 	sub.w	r4, r4, #1
   d5fe0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5fe4:	db0d      	blt.n	d6002 <__adddf3+0xb2>
   d5fe6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5fea:	fa22 f205 	lsr.w	r2, r2, r5
   d5fee:	1880      	adds	r0, r0, r2
   d5ff0:	f141 0100 	adc.w	r1, r1, #0
   d5ff4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5ff8:	1880      	adds	r0, r0, r2
   d5ffa:	fa43 f305 	asr.w	r3, r3, r5
   d5ffe:	4159      	adcs	r1, r3
   d6000:	e00e      	b.n	d6020 <__adddf3+0xd0>
   d6002:	f1a5 0520 	sub.w	r5, r5, #32
   d6006:	f10e 0e20 	add.w	lr, lr, #32
   d600a:	2a01      	cmp	r2, #1
   d600c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6010:	bf28      	it	cs
   d6012:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6016:	fa43 f305 	asr.w	r3, r3, r5
   d601a:	18c0      	adds	r0, r0, r3
   d601c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6020:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6024:	d507      	bpl.n	d6036 <__adddf3+0xe6>
   d6026:	f04f 0e00 	mov.w	lr, #0
   d602a:	f1dc 0c00 	rsbs	ip, ip, #0
   d602e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6032:	eb6e 0101 	sbc.w	r1, lr, r1
   d6036:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d603a:	d31b      	bcc.n	d6074 <__adddf3+0x124>
   d603c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6040:	d30c      	bcc.n	d605c <__adddf3+0x10c>
   d6042:	0849      	lsrs	r1, r1, #1
   d6044:	ea5f 0030 	movs.w	r0, r0, rrx
   d6048:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d604c:	f104 0401 	add.w	r4, r4, #1
   d6050:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6054:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6058:	f080 809a 	bcs.w	d6190 <__adddf3+0x240>
   d605c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6060:	bf08      	it	eq
   d6062:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6066:	f150 0000 	adcs.w	r0, r0, #0
   d606a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d606e:	ea41 0105 	orr.w	r1, r1, r5
   d6072:	bd30      	pop	{r4, r5, pc}
   d6074:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6078:	4140      	adcs	r0, r0
   d607a:	eb41 0101 	adc.w	r1, r1, r1
   d607e:	3c01      	subs	r4, #1
   d6080:	bf28      	it	cs
   d6082:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6086:	d2e9      	bcs.n	d605c <__adddf3+0x10c>
   d6088:	f091 0f00 	teq	r1, #0
   d608c:	bf04      	itt	eq
   d608e:	4601      	moveq	r1, r0
   d6090:	2000      	moveq	r0, #0
   d6092:	fab1 f381 	clz	r3, r1
   d6096:	bf08      	it	eq
   d6098:	3320      	addeq	r3, #32
   d609a:	f1a3 030b 	sub.w	r3, r3, #11
   d609e:	f1b3 0220 	subs.w	r2, r3, #32
   d60a2:	da0c      	bge.n	d60be <__adddf3+0x16e>
   d60a4:	320c      	adds	r2, #12
   d60a6:	dd08      	ble.n	d60ba <__adddf3+0x16a>
   d60a8:	f102 0c14 	add.w	ip, r2, #20
   d60ac:	f1c2 020c 	rsb	r2, r2, #12
   d60b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d60b4:	fa21 f102 	lsr.w	r1, r1, r2
   d60b8:	e00c      	b.n	d60d4 <__adddf3+0x184>
   d60ba:	f102 0214 	add.w	r2, r2, #20
   d60be:	bfd8      	it	le
   d60c0:	f1c2 0c20 	rsble	ip, r2, #32
   d60c4:	fa01 f102 	lsl.w	r1, r1, r2
   d60c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d60cc:	bfdc      	itt	le
   d60ce:	ea41 010c 	orrle.w	r1, r1, ip
   d60d2:	4090      	lslle	r0, r2
   d60d4:	1ae4      	subs	r4, r4, r3
   d60d6:	bfa2      	ittt	ge
   d60d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d60dc:	4329      	orrge	r1, r5
   d60de:	bd30      	popge	{r4, r5, pc}
   d60e0:	ea6f 0404 	mvn.w	r4, r4
   d60e4:	3c1f      	subs	r4, #31
   d60e6:	da1c      	bge.n	d6122 <__adddf3+0x1d2>
   d60e8:	340c      	adds	r4, #12
   d60ea:	dc0e      	bgt.n	d610a <__adddf3+0x1ba>
   d60ec:	f104 0414 	add.w	r4, r4, #20
   d60f0:	f1c4 0220 	rsb	r2, r4, #32
   d60f4:	fa20 f004 	lsr.w	r0, r0, r4
   d60f8:	fa01 f302 	lsl.w	r3, r1, r2
   d60fc:	ea40 0003 	orr.w	r0, r0, r3
   d6100:	fa21 f304 	lsr.w	r3, r1, r4
   d6104:	ea45 0103 	orr.w	r1, r5, r3
   d6108:	bd30      	pop	{r4, r5, pc}
   d610a:	f1c4 040c 	rsb	r4, r4, #12
   d610e:	f1c4 0220 	rsb	r2, r4, #32
   d6112:	fa20 f002 	lsr.w	r0, r0, r2
   d6116:	fa01 f304 	lsl.w	r3, r1, r4
   d611a:	ea40 0003 	orr.w	r0, r0, r3
   d611e:	4629      	mov	r1, r5
   d6120:	bd30      	pop	{r4, r5, pc}
   d6122:	fa21 f004 	lsr.w	r0, r1, r4
   d6126:	4629      	mov	r1, r5
   d6128:	bd30      	pop	{r4, r5, pc}
   d612a:	f094 0f00 	teq	r4, #0
   d612e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6132:	bf06      	itte	eq
   d6134:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6138:	3401      	addeq	r4, #1
   d613a:	3d01      	subne	r5, #1
   d613c:	e74e      	b.n	d5fdc <__adddf3+0x8c>
   d613e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6142:	bf18      	it	ne
   d6144:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6148:	d029      	beq.n	d619e <__adddf3+0x24e>
   d614a:	ea94 0f05 	teq	r4, r5
   d614e:	bf08      	it	eq
   d6150:	ea90 0f02 	teqeq	r0, r2
   d6154:	d005      	beq.n	d6162 <__adddf3+0x212>
   d6156:	ea54 0c00 	orrs.w	ip, r4, r0
   d615a:	bf04      	itt	eq
   d615c:	4619      	moveq	r1, r3
   d615e:	4610      	moveq	r0, r2
   d6160:	bd30      	pop	{r4, r5, pc}
   d6162:	ea91 0f03 	teq	r1, r3
   d6166:	bf1e      	ittt	ne
   d6168:	2100      	movne	r1, #0
   d616a:	2000      	movne	r0, #0
   d616c:	bd30      	popne	{r4, r5, pc}
   d616e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6172:	d105      	bne.n	d6180 <__adddf3+0x230>
   d6174:	0040      	lsls	r0, r0, #1
   d6176:	4149      	adcs	r1, r1
   d6178:	bf28      	it	cs
   d617a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d617e:	bd30      	pop	{r4, r5, pc}
   d6180:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6184:	bf3c      	itt	cc
   d6186:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d618a:	bd30      	popcc	{r4, r5, pc}
   d618c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6190:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6194:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6198:	f04f 0000 	mov.w	r0, #0
   d619c:	bd30      	pop	{r4, r5, pc}
   d619e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d61a2:	bf1a      	itte	ne
   d61a4:	4619      	movne	r1, r3
   d61a6:	4610      	movne	r0, r2
   d61a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d61ac:	bf1c      	itt	ne
   d61ae:	460b      	movne	r3, r1
   d61b0:	4602      	movne	r2, r0
   d61b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d61b6:	bf06      	itte	eq
   d61b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d61bc:	ea91 0f03 	teqeq	r1, r3
   d61c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d61c4:	bd30      	pop	{r4, r5, pc}
   d61c6:	bf00      	nop

000d61c8 <__aeabi_ui2d>:
   d61c8:	f090 0f00 	teq	r0, #0
   d61cc:	bf04      	itt	eq
   d61ce:	2100      	moveq	r1, #0
   d61d0:	4770      	bxeq	lr
   d61d2:	b530      	push	{r4, r5, lr}
   d61d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61dc:	f04f 0500 	mov.w	r5, #0
   d61e0:	f04f 0100 	mov.w	r1, #0
   d61e4:	e750      	b.n	d6088 <__adddf3+0x138>
   d61e6:	bf00      	nop

000d61e8 <__aeabi_i2d>:
   d61e8:	f090 0f00 	teq	r0, #0
   d61ec:	bf04      	itt	eq
   d61ee:	2100      	moveq	r1, #0
   d61f0:	4770      	bxeq	lr
   d61f2:	b530      	push	{r4, r5, lr}
   d61f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6200:	bf48      	it	mi
   d6202:	4240      	negmi	r0, r0
   d6204:	f04f 0100 	mov.w	r1, #0
   d6208:	e73e      	b.n	d6088 <__adddf3+0x138>
   d620a:	bf00      	nop

000d620c <__aeabi_f2d>:
   d620c:	0042      	lsls	r2, r0, #1
   d620e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6212:	ea4f 0131 	mov.w	r1, r1, rrx
   d6216:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d621a:	bf1f      	itttt	ne
   d621c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6220:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6224:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6228:	4770      	bxne	lr
   d622a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d622e:	bf08      	it	eq
   d6230:	4770      	bxeq	lr
   d6232:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6236:	bf04      	itt	eq
   d6238:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d623c:	4770      	bxeq	lr
   d623e:	b530      	push	{r4, r5, lr}
   d6240:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6248:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d624c:	e71c      	b.n	d6088 <__adddf3+0x138>
   d624e:	bf00      	nop

000d6250 <__aeabi_ul2d>:
   d6250:	ea50 0201 	orrs.w	r2, r0, r1
   d6254:	bf08      	it	eq
   d6256:	4770      	bxeq	lr
   d6258:	b530      	push	{r4, r5, lr}
   d625a:	f04f 0500 	mov.w	r5, #0
   d625e:	e00a      	b.n	d6276 <__aeabi_l2d+0x16>

000d6260 <__aeabi_l2d>:
   d6260:	ea50 0201 	orrs.w	r2, r0, r1
   d6264:	bf08      	it	eq
   d6266:	4770      	bxeq	lr
   d6268:	b530      	push	{r4, r5, lr}
   d626a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d626e:	d502      	bpl.n	d6276 <__aeabi_l2d+0x16>
   d6270:	4240      	negs	r0, r0
   d6272:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6276:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d627a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d627e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6282:	f43f aed8 	beq.w	d6036 <__adddf3+0xe6>
   d6286:	f04f 0203 	mov.w	r2, #3
   d628a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d628e:	bf18      	it	ne
   d6290:	3203      	addne	r2, #3
   d6292:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6296:	bf18      	it	ne
   d6298:	3203      	addne	r2, #3
   d629a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d629e:	f1c2 0320 	rsb	r3, r2, #32
   d62a2:	fa00 fc03 	lsl.w	ip, r0, r3
   d62a6:	fa20 f002 	lsr.w	r0, r0, r2
   d62aa:	fa01 fe03 	lsl.w	lr, r1, r3
   d62ae:	ea40 000e 	orr.w	r0, r0, lr
   d62b2:	fa21 f102 	lsr.w	r1, r1, r2
   d62b6:	4414      	add	r4, r2
   d62b8:	e6bd      	b.n	d6036 <__adddf3+0xe6>
   d62ba:	bf00      	nop

000d62bc <__aeabi_dmul>:
   d62bc:	b570      	push	{r4, r5, r6, lr}
   d62be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d62c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d62c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d62ca:	bf1d      	ittte	ne
   d62cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d62d0:	ea94 0f0c 	teqne	r4, ip
   d62d4:	ea95 0f0c 	teqne	r5, ip
   d62d8:	f000 f8de 	bleq	d6498 <__aeabi_dmul+0x1dc>
   d62dc:	442c      	add	r4, r5
   d62de:	ea81 0603 	eor.w	r6, r1, r3
   d62e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d62e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d62ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d62ee:	bf18      	it	ne
   d62f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d62f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d62fc:	d038      	beq.n	d6370 <__aeabi_dmul+0xb4>
   d62fe:	fba0 ce02 	umull	ip, lr, r0, r2
   d6302:	f04f 0500 	mov.w	r5, #0
   d6306:	fbe1 e502 	umlal	lr, r5, r1, r2
   d630a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d630e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6312:	f04f 0600 	mov.w	r6, #0
   d6316:	fbe1 5603 	umlal	r5, r6, r1, r3
   d631a:	f09c 0f00 	teq	ip, #0
   d631e:	bf18      	it	ne
   d6320:	f04e 0e01 	orrne.w	lr, lr, #1
   d6324:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6328:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d632c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6330:	d204      	bcs.n	d633c <__aeabi_dmul+0x80>
   d6332:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6336:	416d      	adcs	r5, r5
   d6338:	eb46 0606 	adc.w	r6, r6, r6
   d633c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6340:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6344:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6348:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d634c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6350:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6354:	bf88      	it	hi
   d6356:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d635a:	d81e      	bhi.n	d639a <__aeabi_dmul+0xde>
   d635c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6360:	bf08      	it	eq
   d6362:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6366:	f150 0000 	adcs.w	r0, r0, #0
   d636a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d636e:	bd70      	pop	{r4, r5, r6, pc}
   d6370:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6374:	ea46 0101 	orr.w	r1, r6, r1
   d6378:	ea40 0002 	orr.w	r0, r0, r2
   d637c:	ea81 0103 	eor.w	r1, r1, r3
   d6380:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6384:	bfc2      	ittt	gt
   d6386:	ebd4 050c 	rsbsgt	r5, r4, ip
   d638a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d638e:	bd70      	popgt	{r4, r5, r6, pc}
   d6390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6394:	f04f 0e00 	mov.w	lr, #0
   d6398:	3c01      	subs	r4, #1
   d639a:	f300 80ab 	bgt.w	d64f4 <__aeabi_dmul+0x238>
   d639e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d63a2:	bfde      	ittt	le
   d63a4:	2000      	movle	r0, #0
   d63a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d63aa:	bd70      	pople	{r4, r5, r6, pc}
   d63ac:	f1c4 0400 	rsb	r4, r4, #0
   d63b0:	3c20      	subs	r4, #32
   d63b2:	da35      	bge.n	d6420 <__aeabi_dmul+0x164>
   d63b4:	340c      	adds	r4, #12
   d63b6:	dc1b      	bgt.n	d63f0 <__aeabi_dmul+0x134>
   d63b8:	f104 0414 	add.w	r4, r4, #20
   d63bc:	f1c4 0520 	rsb	r5, r4, #32
   d63c0:	fa00 f305 	lsl.w	r3, r0, r5
   d63c4:	fa20 f004 	lsr.w	r0, r0, r4
   d63c8:	fa01 f205 	lsl.w	r2, r1, r5
   d63cc:	ea40 0002 	orr.w	r0, r0, r2
   d63d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d63d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d63d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d63dc:	fa21 f604 	lsr.w	r6, r1, r4
   d63e0:	eb42 0106 	adc.w	r1, r2, r6
   d63e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d63e8:	bf08      	it	eq
   d63ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d63ee:	bd70      	pop	{r4, r5, r6, pc}
   d63f0:	f1c4 040c 	rsb	r4, r4, #12
   d63f4:	f1c4 0520 	rsb	r5, r4, #32
   d63f8:	fa00 f304 	lsl.w	r3, r0, r4
   d63fc:	fa20 f005 	lsr.w	r0, r0, r5
   d6400:	fa01 f204 	lsl.w	r2, r1, r4
   d6404:	ea40 0002 	orr.w	r0, r0, r2
   d6408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d640c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6410:	f141 0100 	adc.w	r1, r1, #0
   d6414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6418:	bf08      	it	eq
   d641a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d641e:	bd70      	pop	{r4, r5, r6, pc}
   d6420:	f1c4 0520 	rsb	r5, r4, #32
   d6424:	fa00 f205 	lsl.w	r2, r0, r5
   d6428:	ea4e 0e02 	orr.w	lr, lr, r2
   d642c:	fa20 f304 	lsr.w	r3, r0, r4
   d6430:	fa01 f205 	lsl.w	r2, r1, r5
   d6434:	ea43 0302 	orr.w	r3, r3, r2
   d6438:	fa21 f004 	lsr.w	r0, r1, r4
   d643c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6440:	fa21 f204 	lsr.w	r2, r1, r4
   d6444:	ea20 0002 	bic.w	r0, r0, r2
   d6448:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d644c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6450:	bf08      	it	eq
   d6452:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6456:	bd70      	pop	{r4, r5, r6, pc}
   d6458:	f094 0f00 	teq	r4, #0
   d645c:	d10f      	bne.n	d647e <__aeabi_dmul+0x1c2>
   d645e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6462:	0040      	lsls	r0, r0, #1
   d6464:	eb41 0101 	adc.w	r1, r1, r1
   d6468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d646c:	bf08      	it	eq
   d646e:	3c01      	subeq	r4, #1
   d6470:	d0f7      	beq.n	d6462 <__aeabi_dmul+0x1a6>
   d6472:	ea41 0106 	orr.w	r1, r1, r6
   d6476:	f095 0f00 	teq	r5, #0
   d647a:	bf18      	it	ne
   d647c:	4770      	bxne	lr
   d647e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6482:	0052      	lsls	r2, r2, #1
   d6484:	eb43 0303 	adc.w	r3, r3, r3
   d6488:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d648c:	bf08      	it	eq
   d648e:	3d01      	subeq	r5, #1
   d6490:	d0f7      	beq.n	d6482 <__aeabi_dmul+0x1c6>
   d6492:	ea43 0306 	orr.w	r3, r3, r6
   d6496:	4770      	bx	lr
   d6498:	ea94 0f0c 	teq	r4, ip
   d649c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d64a0:	bf18      	it	ne
   d64a2:	ea95 0f0c 	teqne	r5, ip
   d64a6:	d00c      	beq.n	d64c2 <__aeabi_dmul+0x206>
   d64a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d64ac:	bf18      	it	ne
   d64ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d64b2:	d1d1      	bne.n	d6458 <__aeabi_dmul+0x19c>
   d64b4:	ea81 0103 	eor.w	r1, r1, r3
   d64b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64bc:	f04f 0000 	mov.w	r0, #0
   d64c0:	bd70      	pop	{r4, r5, r6, pc}
   d64c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d64c6:	bf06      	itte	eq
   d64c8:	4610      	moveq	r0, r2
   d64ca:	4619      	moveq	r1, r3
   d64cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d64d0:	d019      	beq.n	d6506 <__aeabi_dmul+0x24a>
   d64d2:	ea94 0f0c 	teq	r4, ip
   d64d6:	d102      	bne.n	d64de <__aeabi_dmul+0x222>
   d64d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d64dc:	d113      	bne.n	d6506 <__aeabi_dmul+0x24a>
   d64de:	ea95 0f0c 	teq	r5, ip
   d64e2:	d105      	bne.n	d64f0 <__aeabi_dmul+0x234>
   d64e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d64e8:	bf1c      	itt	ne
   d64ea:	4610      	movne	r0, r2
   d64ec:	4619      	movne	r1, r3
   d64ee:	d10a      	bne.n	d6506 <__aeabi_dmul+0x24a>
   d64f0:	ea81 0103 	eor.w	r1, r1, r3
   d64f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d64fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6500:	f04f 0000 	mov.w	r0, #0
   d6504:	bd70      	pop	{r4, r5, r6, pc}
   d6506:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d650a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d650e:	bd70      	pop	{r4, r5, r6, pc}

000d6510 <__aeabi_ddiv>:
   d6510:	b570      	push	{r4, r5, r6, lr}
   d6512:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d651a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d651e:	bf1d      	ittte	ne
   d6520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6524:	ea94 0f0c 	teqne	r4, ip
   d6528:	ea95 0f0c 	teqne	r5, ip
   d652c:	f000 f8a7 	bleq	d667e <__aeabi_ddiv+0x16e>
   d6530:	eba4 0405 	sub.w	r4, r4, r5
   d6534:	ea81 0e03 	eor.w	lr, r1, r3
   d6538:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d653c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6540:	f000 8088 	beq.w	d6654 <__aeabi_ddiv+0x144>
   d6544:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6548:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d654c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6550:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6554:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6558:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d655c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6560:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6564:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6568:	429d      	cmp	r5, r3
   d656a:	bf08      	it	eq
   d656c:	4296      	cmpeq	r6, r2
   d656e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6572:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6576:	d202      	bcs.n	d657e <__aeabi_ddiv+0x6e>
   d6578:	085b      	lsrs	r3, r3, #1
   d657a:	ea4f 0232 	mov.w	r2, r2, rrx
   d657e:	1ab6      	subs	r6, r6, r2
   d6580:	eb65 0503 	sbc.w	r5, r5, r3
   d6584:	085b      	lsrs	r3, r3, #1
   d6586:	ea4f 0232 	mov.w	r2, r2, rrx
   d658a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d658e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6592:	ebb6 0e02 	subs.w	lr, r6, r2
   d6596:	eb75 0e03 	sbcs.w	lr, r5, r3
   d659a:	bf22      	ittt	cs
   d659c:	1ab6      	subcs	r6, r6, r2
   d659e:	4675      	movcs	r5, lr
   d65a0:	ea40 000c 	orrcs.w	r0, r0, ip
   d65a4:	085b      	lsrs	r3, r3, #1
   d65a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d65aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d65ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d65b2:	bf22      	ittt	cs
   d65b4:	1ab6      	subcs	r6, r6, r2
   d65b6:	4675      	movcs	r5, lr
   d65b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d65bc:	085b      	lsrs	r3, r3, #1
   d65be:	ea4f 0232 	mov.w	r2, r2, rrx
   d65c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d65c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d65ca:	bf22      	ittt	cs
   d65cc:	1ab6      	subcs	r6, r6, r2
   d65ce:	4675      	movcs	r5, lr
   d65d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d65d4:	085b      	lsrs	r3, r3, #1
   d65d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d65da:	ebb6 0e02 	subs.w	lr, r6, r2
   d65de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d65e2:	bf22      	ittt	cs
   d65e4:	1ab6      	subcs	r6, r6, r2
   d65e6:	4675      	movcs	r5, lr
   d65e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d65ec:	ea55 0e06 	orrs.w	lr, r5, r6
   d65f0:	d018      	beq.n	d6624 <__aeabi_ddiv+0x114>
   d65f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d65f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d65fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d65fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6602:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6606:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d660a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d660e:	d1c0      	bne.n	d6592 <__aeabi_ddiv+0x82>
   d6610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6614:	d10b      	bne.n	d662e <__aeabi_ddiv+0x11e>
   d6616:	ea41 0100 	orr.w	r1, r1, r0
   d661a:	f04f 0000 	mov.w	r0, #0
   d661e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6622:	e7b6      	b.n	d6592 <__aeabi_ddiv+0x82>
   d6624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6628:	bf04      	itt	eq
   d662a:	4301      	orreq	r1, r0
   d662c:	2000      	moveq	r0, #0
   d662e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6632:	bf88      	it	hi
   d6634:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6638:	f63f aeaf 	bhi.w	d639a <__aeabi_dmul+0xde>
   d663c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6640:	bf04      	itt	eq
   d6642:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d664a:	f150 0000 	adcs.w	r0, r0, #0
   d664e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6652:	bd70      	pop	{r4, r5, r6, pc}
   d6654:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6658:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d665c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6660:	bfc2      	ittt	gt
   d6662:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d666a:	bd70      	popgt	{r4, r5, r6, pc}
   d666c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6670:	f04f 0e00 	mov.w	lr, #0
   d6674:	3c01      	subs	r4, #1
   d6676:	e690      	b.n	d639a <__aeabi_dmul+0xde>
   d6678:	ea45 0e06 	orr.w	lr, r5, r6
   d667c:	e68d      	b.n	d639a <__aeabi_dmul+0xde>
   d667e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6682:	ea94 0f0c 	teq	r4, ip
   d6686:	bf08      	it	eq
   d6688:	ea95 0f0c 	teqeq	r5, ip
   d668c:	f43f af3b 	beq.w	d6506 <__aeabi_dmul+0x24a>
   d6690:	ea94 0f0c 	teq	r4, ip
   d6694:	d10a      	bne.n	d66ac <__aeabi_ddiv+0x19c>
   d6696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d669a:	f47f af34 	bne.w	d6506 <__aeabi_dmul+0x24a>
   d669e:	ea95 0f0c 	teq	r5, ip
   d66a2:	f47f af25 	bne.w	d64f0 <__aeabi_dmul+0x234>
   d66a6:	4610      	mov	r0, r2
   d66a8:	4619      	mov	r1, r3
   d66aa:	e72c      	b.n	d6506 <__aeabi_dmul+0x24a>
   d66ac:	ea95 0f0c 	teq	r5, ip
   d66b0:	d106      	bne.n	d66c0 <__aeabi_ddiv+0x1b0>
   d66b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d66b6:	f43f aefd 	beq.w	d64b4 <__aeabi_dmul+0x1f8>
   d66ba:	4610      	mov	r0, r2
   d66bc:	4619      	mov	r1, r3
   d66be:	e722      	b.n	d6506 <__aeabi_dmul+0x24a>
   d66c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d66c4:	bf18      	it	ne
   d66c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d66ca:	f47f aec5 	bne.w	d6458 <__aeabi_dmul+0x19c>
   d66ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d66d2:	f47f af0d 	bne.w	d64f0 <__aeabi_dmul+0x234>
   d66d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d66da:	f47f aeeb 	bne.w	d64b4 <__aeabi_dmul+0x1f8>
   d66de:	e712      	b.n	d6506 <__aeabi_dmul+0x24a>

000d66e0 <__aeabi_d2iz>:
   d66e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d66e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d66e8:	d215      	bcs.n	d6716 <__aeabi_d2iz+0x36>
   d66ea:	d511      	bpl.n	d6710 <__aeabi_d2iz+0x30>
   d66ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d66f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d66f4:	d912      	bls.n	d671c <__aeabi_d2iz+0x3c>
   d66f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d66fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d66fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6702:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6706:	fa23 f002 	lsr.w	r0, r3, r2
   d670a:	bf18      	it	ne
   d670c:	4240      	negne	r0, r0
   d670e:	4770      	bx	lr
   d6710:	f04f 0000 	mov.w	r0, #0
   d6714:	4770      	bx	lr
   d6716:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d671a:	d105      	bne.n	d6728 <__aeabi_d2iz+0x48>
   d671c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6720:	bf08      	it	eq
   d6722:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6726:	4770      	bx	lr
   d6728:	f04f 0000 	mov.w	r0, #0
   d672c:	4770      	bx	lr
   d672e:	bf00      	nop

000d6730 <atexit>:
   d6730:	2300      	movs	r3, #0
   d6732:	4601      	mov	r1, r0
   d6734:	461a      	mov	r2, r3
   d6736:	4618      	mov	r0, r3
   d6738:	f000 b8f2 	b.w	d6920 <__register_exitproc>

000d673c <memcpy>:
   d673c:	440a      	add	r2, r1
   d673e:	4291      	cmp	r1, r2
   d6740:	f100 33ff 	add.w	r3, r0, #4294967295
   d6744:	d100      	bne.n	d6748 <memcpy+0xc>
   d6746:	4770      	bx	lr
   d6748:	b510      	push	{r4, lr}
   d674a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d674e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6752:	4291      	cmp	r1, r2
   d6754:	d1f9      	bne.n	d674a <memcpy+0xe>
   d6756:	bd10      	pop	{r4, pc}

000d6758 <memmove>:
   d6758:	4288      	cmp	r0, r1
   d675a:	b510      	push	{r4, lr}
   d675c:	eb01 0402 	add.w	r4, r1, r2
   d6760:	d902      	bls.n	d6768 <memmove+0x10>
   d6762:	4284      	cmp	r4, r0
   d6764:	4623      	mov	r3, r4
   d6766:	d807      	bhi.n	d6778 <memmove+0x20>
   d6768:	1e43      	subs	r3, r0, #1
   d676a:	42a1      	cmp	r1, r4
   d676c:	d008      	beq.n	d6780 <memmove+0x28>
   d676e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6772:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6776:	e7f8      	b.n	d676a <memmove+0x12>
   d6778:	4402      	add	r2, r0
   d677a:	4601      	mov	r1, r0
   d677c:	428a      	cmp	r2, r1
   d677e:	d100      	bne.n	d6782 <memmove+0x2a>
   d6780:	bd10      	pop	{r4, pc}
   d6782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6786:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d678a:	e7f7      	b.n	d677c <memmove+0x24>

000d678c <memset>:
   d678c:	4402      	add	r2, r0
   d678e:	4603      	mov	r3, r0
   d6790:	4293      	cmp	r3, r2
   d6792:	d100      	bne.n	d6796 <memset+0xa>
   d6794:	4770      	bx	lr
   d6796:	f803 1b01 	strb.w	r1, [r3], #1
   d679a:	e7f9      	b.n	d6790 <memset+0x4>

000d679c <srand>:
   d679c:	b538      	push	{r3, r4, r5, lr}
   d679e:	4b0d      	ldr	r3, [pc, #52]	; (d67d4 <srand+0x38>)
   d67a0:	681d      	ldr	r5, [r3, #0]
   d67a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d67a4:	4604      	mov	r4, r0
   d67a6:	b97b      	cbnz	r3, d67c8 <srand+0x2c>
   d67a8:	2018      	movs	r0, #24
   d67aa:	f7fe fa97 	bl	d4cdc <malloc>
   d67ae:	4a0a      	ldr	r2, [pc, #40]	; (d67d8 <srand+0x3c>)
   d67b0:	4b0a      	ldr	r3, [pc, #40]	; (d67dc <srand+0x40>)
   d67b2:	63a8      	str	r0, [r5, #56]	; 0x38
   d67b4:	e9c0 2300 	strd	r2, r3, [r0]
   d67b8:	4b09      	ldr	r3, [pc, #36]	; (d67e0 <srand+0x44>)
   d67ba:	6083      	str	r3, [r0, #8]
   d67bc:	230b      	movs	r3, #11
   d67be:	8183      	strh	r3, [r0, #12]
   d67c0:	2201      	movs	r2, #1
   d67c2:	2300      	movs	r3, #0
   d67c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d67ca:	2200      	movs	r2, #0
   d67cc:	611c      	str	r4, [r3, #16]
   d67ce:	615a      	str	r2, [r3, #20]
   d67d0:	bd38      	pop	{r3, r4, r5, pc}
   d67d2:	bf00      	nop
   d67d4:	2003e4ec 	.word	0x2003e4ec
   d67d8:	abcd330e 	.word	0xabcd330e
   d67dc:	e66d1234 	.word	0xe66d1234
   d67e0:	0005deec 	.word	0x0005deec

000d67e4 <strcmp>:
   d67e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d67e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d67ec:	2a01      	cmp	r2, #1
   d67ee:	bf28      	it	cs
   d67f0:	429a      	cmpcs	r2, r3
   d67f2:	d0f7      	beq.n	d67e4 <strcmp>
   d67f4:	1ad0      	subs	r0, r2, r3
   d67f6:	4770      	bx	lr

000d67f8 <strcpy>:
   d67f8:	4603      	mov	r3, r0
   d67fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d67fe:	f803 2b01 	strb.w	r2, [r3], #1
   d6802:	2a00      	cmp	r2, #0
   d6804:	d1f9      	bne.n	d67fa <strcpy+0x2>
   d6806:	4770      	bx	lr

000d6808 <strlen>:
   d6808:	4603      	mov	r3, r0
   d680a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d680e:	2a00      	cmp	r2, #0
   d6810:	d1fb      	bne.n	d680a <strlen+0x2>
   d6812:	1a18      	subs	r0, r3, r0
   d6814:	3801      	subs	r0, #1
   d6816:	4770      	bx	lr

000d6818 <_strtol_l.isra.0>:
   d6818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d681c:	4e3a      	ldr	r6, [pc, #232]	; (d6908 <_strtol_l.isra.0+0xf0>)
   d681e:	4686      	mov	lr, r0
   d6820:	468c      	mov	ip, r1
   d6822:	4660      	mov	r0, ip
   d6824:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6828:	5da5      	ldrb	r5, [r4, r6]
   d682a:	f015 0508 	ands.w	r5, r5, #8
   d682e:	d1f8      	bne.n	d6822 <_strtol_l.isra.0+0xa>
   d6830:	2c2d      	cmp	r4, #45	; 0x2d
   d6832:	d133      	bne.n	d689c <_strtol_l.isra.0+0x84>
   d6834:	f89c 4000 	ldrb.w	r4, [ip]
   d6838:	f04f 0801 	mov.w	r8, #1
   d683c:	f100 0c02 	add.w	ip, r0, #2
   d6840:	2b00      	cmp	r3, #0
   d6842:	d05c      	beq.n	d68fe <_strtol_l.isra.0+0xe6>
   d6844:	2b10      	cmp	r3, #16
   d6846:	d10c      	bne.n	d6862 <_strtol_l.isra.0+0x4a>
   d6848:	2c30      	cmp	r4, #48	; 0x30
   d684a:	d10a      	bne.n	d6862 <_strtol_l.isra.0+0x4a>
   d684c:	f89c 0000 	ldrb.w	r0, [ip]
   d6850:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6854:	2858      	cmp	r0, #88	; 0x58
   d6856:	d14d      	bne.n	d68f4 <_strtol_l.isra.0+0xdc>
   d6858:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d685c:	2310      	movs	r3, #16
   d685e:	f10c 0c02 	add.w	ip, ip, #2
   d6862:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6866:	3f01      	subs	r7, #1
   d6868:	2600      	movs	r6, #0
   d686a:	fbb7 f9f3 	udiv	r9, r7, r3
   d686e:	4630      	mov	r0, r6
   d6870:	fb03 7a19 	mls	sl, r3, r9, r7
   d6874:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6878:	2d09      	cmp	r5, #9
   d687a:	d818      	bhi.n	d68ae <_strtol_l.isra.0+0x96>
   d687c:	462c      	mov	r4, r5
   d687e:	42a3      	cmp	r3, r4
   d6880:	dd24      	ble.n	d68cc <_strtol_l.isra.0+0xb4>
   d6882:	1c75      	adds	r5, r6, #1
   d6884:	d007      	beq.n	d6896 <_strtol_l.isra.0+0x7e>
   d6886:	4581      	cmp	r9, r0
   d6888:	d31d      	bcc.n	d68c6 <_strtol_l.isra.0+0xae>
   d688a:	d101      	bne.n	d6890 <_strtol_l.isra.0+0x78>
   d688c:	45a2      	cmp	sl, r4
   d688e:	db1a      	blt.n	d68c6 <_strtol_l.isra.0+0xae>
   d6890:	fb00 4003 	mla	r0, r0, r3, r4
   d6894:	2601      	movs	r6, #1
   d6896:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d689a:	e7eb      	b.n	d6874 <_strtol_l.isra.0+0x5c>
   d689c:	2c2b      	cmp	r4, #43	; 0x2b
   d689e:	bf08      	it	eq
   d68a0:	f89c 4000 	ldrbeq.w	r4, [ip]
   d68a4:	46a8      	mov	r8, r5
   d68a6:	bf08      	it	eq
   d68a8:	f100 0c02 	addeq.w	ip, r0, #2
   d68ac:	e7c8      	b.n	d6840 <_strtol_l.isra.0+0x28>
   d68ae:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d68b2:	2d19      	cmp	r5, #25
   d68b4:	d801      	bhi.n	d68ba <_strtol_l.isra.0+0xa2>
   d68b6:	3c37      	subs	r4, #55	; 0x37
   d68b8:	e7e1      	b.n	d687e <_strtol_l.isra.0+0x66>
   d68ba:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d68be:	2d19      	cmp	r5, #25
   d68c0:	d804      	bhi.n	d68cc <_strtol_l.isra.0+0xb4>
   d68c2:	3c57      	subs	r4, #87	; 0x57
   d68c4:	e7db      	b.n	d687e <_strtol_l.isra.0+0x66>
   d68c6:	f04f 36ff 	mov.w	r6, #4294967295
   d68ca:	e7e4      	b.n	d6896 <_strtol_l.isra.0+0x7e>
   d68cc:	1c73      	adds	r3, r6, #1
   d68ce:	d106      	bne.n	d68de <_strtol_l.isra.0+0xc6>
   d68d0:	2322      	movs	r3, #34	; 0x22
   d68d2:	f8ce 3000 	str.w	r3, [lr]
   d68d6:	4638      	mov	r0, r7
   d68d8:	b942      	cbnz	r2, d68ec <_strtol_l.isra.0+0xd4>
   d68da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68de:	f1b8 0f00 	cmp.w	r8, #0
   d68e2:	d000      	beq.n	d68e6 <_strtol_l.isra.0+0xce>
   d68e4:	4240      	negs	r0, r0
   d68e6:	2a00      	cmp	r2, #0
   d68e8:	d0f7      	beq.n	d68da <_strtol_l.isra.0+0xc2>
   d68ea:	b10e      	cbz	r6, d68f0 <_strtol_l.isra.0+0xd8>
   d68ec:	f10c 31ff 	add.w	r1, ip, #4294967295
   d68f0:	6011      	str	r1, [r2, #0]
   d68f2:	e7f2      	b.n	d68da <_strtol_l.isra.0+0xc2>
   d68f4:	2430      	movs	r4, #48	; 0x30
   d68f6:	2b00      	cmp	r3, #0
   d68f8:	d1b3      	bne.n	d6862 <_strtol_l.isra.0+0x4a>
   d68fa:	2308      	movs	r3, #8
   d68fc:	e7b1      	b.n	d6862 <_strtol_l.isra.0+0x4a>
   d68fe:	2c30      	cmp	r4, #48	; 0x30
   d6900:	d0a4      	beq.n	d684c <_strtol_l.isra.0+0x34>
   d6902:	230a      	movs	r3, #10
   d6904:	e7ad      	b.n	d6862 <_strtol_l.isra.0+0x4a>
   d6906:	bf00      	nop
   d6908:	000d6c46 	.word	0x000d6c46

000d690c <strtol>:
   d690c:	4613      	mov	r3, r2
   d690e:	460a      	mov	r2, r1
   d6910:	4601      	mov	r1, r0
   d6912:	4802      	ldr	r0, [pc, #8]	; (d691c <strtol+0x10>)
   d6914:	6800      	ldr	r0, [r0, #0]
   d6916:	f7ff bf7f 	b.w	d6818 <_strtol_l.isra.0>
   d691a:	bf00      	nop
   d691c:	2003e4ec 	.word	0x2003e4ec

000d6920 <__register_exitproc>:
   d6920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6924:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d69e0 <__register_exitproc+0xc0>
   d6928:	4606      	mov	r6, r0
   d692a:	f8d8 0000 	ldr.w	r0, [r8]
   d692e:	461f      	mov	r7, r3
   d6930:	460d      	mov	r5, r1
   d6932:	4691      	mov	r9, r2
   d6934:	f000 f856 	bl	d69e4 <__retarget_lock_acquire_recursive>
   d6938:	4b25      	ldr	r3, [pc, #148]	; (d69d0 <__register_exitproc+0xb0>)
   d693a:	681c      	ldr	r4, [r3, #0]
   d693c:	b934      	cbnz	r4, d694c <__register_exitproc+0x2c>
   d693e:	4c25      	ldr	r4, [pc, #148]	; (d69d4 <__register_exitproc+0xb4>)
   d6940:	601c      	str	r4, [r3, #0]
   d6942:	4b25      	ldr	r3, [pc, #148]	; (d69d8 <__register_exitproc+0xb8>)
   d6944:	b113      	cbz	r3, d694c <__register_exitproc+0x2c>
   d6946:	681b      	ldr	r3, [r3, #0]
   d6948:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d694c:	6863      	ldr	r3, [r4, #4]
   d694e:	2b1f      	cmp	r3, #31
   d6950:	dd07      	ble.n	d6962 <__register_exitproc+0x42>
   d6952:	f8d8 0000 	ldr.w	r0, [r8]
   d6956:	f000 f847 	bl	d69e8 <__retarget_lock_release_recursive>
   d695a:	f04f 30ff 	mov.w	r0, #4294967295
   d695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6962:	b34e      	cbz	r6, d69b8 <__register_exitproc+0x98>
   d6964:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6968:	b988      	cbnz	r0, d698e <__register_exitproc+0x6e>
   d696a:	4b1c      	ldr	r3, [pc, #112]	; (d69dc <__register_exitproc+0xbc>)
   d696c:	b923      	cbnz	r3, d6978 <__register_exitproc+0x58>
   d696e:	f8d8 0000 	ldr.w	r0, [r8]
   d6972:	f000 f838 	bl	d69e6 <__retarget_lock_release>
   d6976:	e7f0      	b.n	d695a <__register_exitproc+0x3a>
   d6978:	f44f 7084 	mov.w	r0, #264	; 0x108
   d697c:	f7fe f9ae 	bl	d4cdc <malloc>
   d6980:	2800      	cmp	r0, #0
   d6982:	d0f4      	beq.n	d696e <__register_exitproc+0x4e>
   d6984:	2300      	movs	r3, #0
   d6986:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d698a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d698e:	6863      	ldr	r3, [r4, #4]
   d6990:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6994:	2201      	movs	r2, #1
   d6996:	409a      	lsls	r2, r3
   d6998:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d699c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d69a0:	4313      	orrs	r3, r2
   d69a2:	2e02      	cmp	r6, #2
   d69a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d69a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d69ac:	bf02      	ittt	eq
   d69ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d69b2:	431a      	orreq	r2, r3
   d69b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d69b8:	6863      	ldr	r3, [r4, #4]
   d69ba:	f8d8 0000 	ldr.w	r0, [r8]
   d69be:	1c5a      	adds	r2, r3, #1
   d69c0:	3302      	adds	r3, #2
   d69c2:	6062      	str	r2, [r4, #4]
   d69c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d69c8:	f000 f80e 	bl	d69e8 <__retarget_lock_release_recursive>
   d69cc:	2000      	movs	r0, #0
   d69ce:	e7c6      	b.n	d695e <__register_exitproc+0x3e>
   d69d0:	2003e7e0 	.word	0x2003e7e0
   d69d4:	2003e754 	.word	0x2003e754
   d69d8:	00000000 	.word	0x00000000
   d69dc:	000d4cdd 	.word	0x000d4cdd
   d69e0:	2003e550 	.word	0x2003e550

000d69e4 <__retarget_lock_acquire_recursive>:
   d69e4:	4770      	bx	lr

000d69e6 <__retarget_lock_release>:
   d69e6:	4770      	bx	lr

000d69e8 <__retarget_lock_release_recursive>:
   d69e8:	4770      	bx	lr

000d69ea <link_code_end>:
	...

000d69ec <dynalib_user>:
   d69ec:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d69fc:	0000 0000 7d7b 7b00 7422 3a22 6425 222c     ....{}.{"t":%d,"
   d6a0c:	2270 253a 2c64 7322 3a22 6425 222c 2268     p":%d,"s":%d,"h"
   d6a1c:	253a 7d64 6600 6572 7571 6e65 7963 7300     :%d}.frequency.s
   d6a2c:	616d 7472 696c 6867 0074 656c 0064 227b     martlight.led.{"
   d6a3c:	2274 253a 2c64 6c22 6769 7468 3a22 7325     t":%d,"light":%s
   d6a4c:	222c 656c 2264 253a 2c73 6322 2274 253a     ,"led":%s,"ct":%
   d6a5c:	646c 007d 227b 304c 3a22 6425 222c 314c     ld}.{"L0":%d,"L1
   d6a6c:	3a22 6425 222c 2262 253a 2c64 7322 3a22     ":%d,"b":%d,"s":
   d6a7c:	6425 222c 226d 253a 2c64 4d22 3a22 6425     %d,"m":%d,"M":%d
   d6a8c:	007d 6e6f 6100 7475 006f 7262 6769 7468     }.on.auto.bright
   d6a9c:	656e 7373 6d00 6e69 6d00 7861 0000 0000     ness.min.max....

000d6aac <_ZTVN5spark13EthernetClassE>:
	...
   d6ab4:	4d8b 000d 4d81 000d 4d77 000d 4d6d 000d     .M...M..wM..mM..
   d6ac4:	4d61 000d 4d55 000d 5765 000d 576d 000d     aM..UM..eW..mW..
   d6ad4:	4d49 000d 4d41 000d 4d37 000d 4d2d 000d     IM..AM..7M..-M..
   d6ae4:	579d 000d 7061 0070 5925 252d 2d6d 6425     .W..app.%Y-%m-%d
   d6af4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d6b04:	6d69 0065                                   ime.

000d6b08 <_ZTV9IPAddress>:
	...
   d6b10:	535d 000d 534d 000d 534f 000d               ]S..MS..OS..

000d6b1c <_ZTV9USBSerial>:
	...
   d6b24:	5435 000d 549d 000d 5473 000d 4ff9 000d     5T...T..sT...O..
   d6b34:	5465 000d 5437 000d 5447 000d 5497 000d     eT..7T..GT...T..
   d6b44:	5457 000d 542f 000d                         WT../T..

000d6b4c <_ZTV11USARTSerial>:
	...
   d6b54:	5539 000d 55a7 000d 557f 000d 4ff9 000d     9U...U...U...O..
   d6b64:	554f 000d 556b 000d 555d 000d 5579 000d     OU..kU..]U..yU..
   d6b74:	553b 000d 5541 000d                         ;U..AU..

000d6b7c <_ZTV7TwoWire>:
	...
   d6b84:	562d 000d 5677 000d 564f 000d 562f 000d     -V..wV..OV../V..
   d6b94:	5657 000d 565f 000d 5667 000d 566f 000d     WV.._V..gV..oV..

000d6ba4 <_ZTVN5spark9WiFiClassE>:
	...
   d6bac:	5707 000d 56fd 000d 56f3 000d 56a9 000d     .W...V...V...V..
   d6bbc:	56e7 000d 56db 000d 5765 000d 576d 000d     .V...V..eW..mW..
   d6bcc:	56cf 000d 56c7 000d 56bd 000d 56b3 000d     .V...V...V...V..
   d6bdc:	579d 000d                                   .W..

000d6be0 <_ZTVN5spark12NetworkClassE>:
	...
   d6be8:	5725 000d 572f 000d 5739 000d 5743 000d     %W../W..9W..CW..
   d6bf8:	574d 000d 5759 000d 5765 000d 576d 000d     MW..YW..eW..mW..
   d6c08:	5775 000d 5781 000d 5789 000d 5793 000d     uW...W...W...W..
   d6c18:	579d 000d 2e30 0030 6166 736c 0065 0000     .W..0.0.false...

000d6c28 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6c30:	58b3 000d 58b9 000d 58cf 000d 58c7 000d     .X...X...X...X..
   d6c40:	58b5 000d                                   .X..

000d6c44 <_ZSt7nothrow>:
	...

000d6c45 <_ctype_>:
   d6c45:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d6c55:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6c65:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6c75:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d6c85:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d6c95:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d6ca5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d6cb5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6cc5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6d46 <link_const_variable_data_end>:
	...

000d6d48 <link_constructors_location>:
   d6d48:	000d44f1 	.word	0x000d44f1
   d6d4c:	000d4d95 	.word	0x000d4d95
   d6d50:	000d4dbd 	.word	0x000d4dbd
   d6d54:	000d4fe9 	.word	0x000d4fe9
   d6d58:	000d5105 	.word	0x000d5105
   d6d5c:	000d5189 	.word	0x000d5189
   d6d60:	000d5209 	.word	0x000d5209
   d6d64:	000d5711 	.word	0x000d5711
   d6d68:	000d5871 	.word	0x000d5871

000d6d6c <link_constructors_end>:
   d6d6c:	00000000 	.word	0x00000000
