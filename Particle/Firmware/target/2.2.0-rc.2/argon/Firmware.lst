
h:/Documents/Masters/ECE513/Project/ECE513/Particle/Firmware/target/2.2.0-rc.2/argon/Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004000  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8020  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e50c  000d8024  0001e50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000274  2003e580  2003e580  0002e580  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d8094  000d8094  00028094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d80bc  000d80bc  000280bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012c2a7  00000000  00000000  000280c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014733  00000000  00000000  00154367  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026357  00000000  00000000  00168a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002688  00000000  00000000  0018edf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006bd8  00000000  00000000  00191479  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036f80  00000000  00000000  00198051  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000334a9  00000000  00000000  001cefd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102b6d  00000000  00000000  0020247a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006c60  00000000  00000000  00304fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fdff 	bl	d7c34 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fe07 	bl	d7c50 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e50c 	.word	0x2003e50c
   d404c:	000d8024 	.word	0x000d8024
   d4050:	2003e57c 	.word	0x2003e57c
   d4054:	2003e580 	.word	0x2003e580
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fa37 	bl	d54d4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7ffc 	.word	0x000d7ffc
   d4080:	000d8020 	.word	0x000d8020

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc30 	b.w	d48e8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc43 	bl	d4914 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 b9d7 	b.w	d5444 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f000 beed 	b.w	d4e74 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bef3 	b.w	d4e84 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b8:	d904      	bls.n	d40c4 <nrf_gpio_pin_port_decode+0x14>
   d40ba:	4a07      	ldr	r2, [pc, #28]	; (d40d8 <nrf_gpio_pin_port_decode+0x28>)
   d40bc:	2100      	movs	r1, #0
   d40be:	200a      	movs	r0, #10
   d40c0:	f000 fe1c 	bl	d4cfc <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	bf83      	ittte	hi
   d40ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40ce:	4803      	ldrhi	r0, [pc, #12]	; (d40dc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d4b1d 	.word	0x000d4b1d
   d40dc:	50000300 	.word	0x50000300

000d40e0 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d40e0:	b507      	push	{r0, r1, r2, lr}
   d40e2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d40e4:	a801      	add	r0, sp, #4
   d40e6:	f7ff ffe3 	bl	d40b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d40ea:	9a01      	ldr	r2, [sp, #4]
   d40ec:	2301      	movs	r3, #1
   d40ee:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d40f0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d40f4:	b003      	add	sp, #12
   d40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d40fa <nrf_gpio_pin_read>:
{
   d40fa:	b507      	push	{r0, r1, r2, lr}
   d40fc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d40fe:	a801      	add	r0, sp, #4
   d4100:	f7ff ffd6 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4104:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4106:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d410a:	40d8      	lsrs	r0, r3
}
   d410c:	f000 0001 	and.w	r0, r0, #1
   d4110:	b003      	add	sp, #12
   d4112:	f85d fb04 	ldr.w	pc, [sp], #4

000d4116 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4116:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4118:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d411a:	2301      	movs	r3, #1
	_pin = pin;
   d411c:	7181      	strb	r1, [r0, #6]
	_type = type;
   d411e:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4120:	7403      	strb	r3, [r0, #16]
}
   d4122:	bd10      	pop	{r4, pc}

000d4124 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4128:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d412a:	4c1e      	ldr	r4, [pc, #120]	; (d41a4 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d412c:	7980      	ldrb	r0, [r0, #6]
   d412e:	f8df 8078 	ldr.w	r8, [pc, #120]	; d41a8 <_ZN3DHT5beginEv+0x84>
   d4132:	2100      	movs	r1, #0
   d4134:	f001 fcde 	bl	d5af4 <pinMode>
	pinSetFast(_pin);
   d4138:	79ae      	ldrb	r6, [r5, #6]
   d413a:	7823      	ldrb	r3, [r4, #0]
   d413c:	f3bf 8f5b 	dmb	ish
   d4140:	f013 0f01 	tst.w	r3, #1
   d4144:	d10a      	bne.n	d415c <_ZN3DHT5beginEv+0x38>
   d4146:	4620      	mov	r0, r4
   d4148:	f7ff ffa9 	bl	d409e <__cxa_guard_acquire>
   d414c:	b130      	cbz	r0, d415c <_ZN3DHT5beginEv+0x38>
   d414e:	f000 fcbd 	bl	d4acc <HAL_Pin_Map>
   d4152:	f8c8 0000 	str.w	r0, [r8]
   d4156:	4620      	mov	r0, r4
   d4158:	f7ff ffa6 	bl	d40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d415c:	f8d8 3000 	ldr.w	r3, [r8]
   d4160:	0136      	lsls	r6, r6, #4
   d4162:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4164:	7823      	ldrb	r3, [r4, #0]
   d4166:	f3bf 8f5b 	dmb	ish
   d416a:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d416c:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4170:	d40a      	bmi.n	d4188 <_ZN3DHT5beginEv+0x64>
   d4172:	480c      	ldr	r0, [pc, #48]	; (d41a4 <_ZN3DHT5beginEv+0x80>)
   d4174:	f7ff ff93 	bl	d409e <__cxa_guard_acquire>
   d4178:	b130      	cbz	r0, d4188 <_ZN3DHT5beginEv+0x64>
   d417a:	f000 fca7 	bl	d4acc <HAL_Pin_Map>
   d417e:	f8c8 0000 	str.w	r0, [r8]
   d4182:	4808      	ldr	r0, [pc, #32]	; (d41a4 <_ZN3DHT5beginEv+0x80>)
   d4184:	f7ff ff90 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4188:	f8d8 3000 	ldr.w	r3, [r8]
   d418c:	4433      	add	r3, r6
   d418e:	785b      	ldrb	r3, [r3, #1]
   d4190:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4194:	ea43 0007 	orr.w	r0, r3, r7
   d4198:	f7ff ffa2 	bl	d40e0 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d419c:	2300      	movs	r3, #0
   d419e:	60eb      	str	r3, [r5, #12]
}
   d41a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d41a4:	2003e580 	.word	0x2003e580
   d41a8:	2003e584 	.word	0x2003e584

000d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   d41ac:	b510      	push	{r4, lr}
   d41ae:	ed2d 8b02 	vpush	{d8}
   d41b2:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d41b6:	f003 f95f 	bl	d7478 <__aeabi_i2d>
   d41ba:	ec41 0b18 	vmov	d8, r0, r1
   d41be:	4620      	mov	r0, r4
   d41c0:	f003 f96c 	bl	d749c <__aeabi_f2d>
   d41c4:	eeb0 1a48 	vmov.f32	s2, s16
   d41c8:	eef0 1a68 	vmov.f32	s3, s17
    }
   d41cc:	ecbd 8b02 	vpop	{d8}
      return pow(__type(__x), __type(__y));
   d41d0:	ec41 0b10 	vmov	d0, r0, r1
    }
   d41d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
   d41d8:	f001 bcde 	b.w	d5b98 <pow>
   d41dc:	0000      	movs	r0, r0
	...

000d41e0 <_ZN3DHT16computeHeatIndexEff>:
		}
	}
	return NAN;
}

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d41e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d41e4:	ee10 0a10 	vmov	r0, s0
float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d41e8:	ed2d 8b02 	vpush	{d8}
   d41ec:	eeb0 8a60 	vmov.f32	s16, s1
   d41f0:	eef0 8a40 	vmov.f32	s17, s0
		 2.04901523 * tempFahrenheit + 
   d41f4:	f003 f952 	bl	d749c <__aeabi_f2d>
   d41f8:	4604      	mov	r4, r0
		10.14333127 * percentHumidity +
   d41fa:	ee18 0a10 	vmov	r0, s16
		 2.04901523 * tempFahrenheit + 
   d41fe:	460d      	mov	r5, r1
		10.14333127 * percentHumidity +
   d4200:	f003 f94c 	bl	d749c <__aeabi_f2d>
		 2.04901523 * tempFahrenheit + 
   d4204:	a354      	add	r3, pc, #336	; (adr r3, d4358 <_ZN3DHT16computeHeatIndexEff+0x178>)
   d4206:	e9d3 2300 	ldrd	r2, r3, [r3]
		10.14333127 * percentHumidity +
   d420a:	4606      	mov	r6, r0
   d420c:	460f      	mov	r7, r1
		 2.04901523 * tempFahrenheit + 
   d420e:	4620      	mov	r0, r4
   d4210:	4629      	mov	r1, r5
   d4212:	f003 f99b 	bl	d754c <__aeabi_dmul>
	return -42.379 + 
   d4216:	a352      	add	r3, pc, #328	; (adr r3, d4360 <_ZN3DHT16computeHeatIndexEff+0x180>)
   d4218:	e9d3 2300 	ldrd	r2, r3, [r3]
   d421c:	f002 ffde 	bl	d71dc <__aeabi_dsub>
		10.14333127 * percentHumidity +
   d4220:	a351      	add	r3, pc, #324	; (adr r3, d4368 <_ZN3DHT16computeHeatIndexEff+0x188>)
   d4222:	e9d3 2300 	ldrd	r2, r3, [r3]
	return -42.379 + 
   d4226:	4680      	mov	r8, r0
   d4228:	4689      	mov	r9, r1
		10.14333127 * percentHumidity +
   d422a:	4630      	mov	r0, r6
   d422c:	4639      	mov	r1, r7
   d422e:	f003 f98d 	bl	d754c <__aeabi_dmul>
   d4232:	4602      	mov	r2, r0
   d4234:	460b      	mov	r3, r1
		 2.04901523 * tempFahrenheit + 
   d4236:	4640      	mov	r0, r8
   d4238:	4649      	mov	r1, r9
   d423a:	f002 ffd1 	bl	d71e0 <__adddf3>
		-0.22475541 * tempFahrenheit * percentHumidity +
   d423e:	a34c      	add	r3, pc, #304	; (adr r3, d4370 <_ZN3DHT16computeHeatIndexEff+0x190>)
   d4240:	e9d3 2300 	ldrd	r2, r3, [r3]
		 2.04901523 * tempFahrenheit + 
   d4244:	4680      	mov	r8, r0
   d4246:	4689      	mov	r9, r1
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4248:	4620      	mov	r0, r4
   d424a:	4629      	mov	r1, r5
   d424c:	f003 f97e 	bl	d754c <__aeabi_dmul>
   d4250:	4632      	mov	r2, r6
   d4252:	463b      	mov	r3, r7
   d4254:	f003 f97a 	bl	d754c <__aeabi_dmul>
   d4258:	4602      	mov	r2, r0
   d425a:	460b      	mov	r3, r1
		10.14333127 * percentHumidity +
   d425c:	4640      	mov	r0, r8
   d425e:	4649      	mov	r1, r9
   d4260:	f002 ffbe 	bl	d71e0 <__adddf3>
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4264:	eeb0 0a68 	vmov.f32	s0, s17
		10.14333127 * percentHumidity +
   d4268:	4680      	mov	r8, r0
		-0.00683783 * pow(tempFahrenheit, 2) +
   d426a:	2002      	movs	r0, #2
		10.14333127 * percentHumidity +
   d426c:	4689      	mov	r9, r1
		-0.00683783 * pow(tempFahrenheit, 2) +
   d426e:	f7ff ff9d 	bl	d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4272:	a341      	add	r3, pc, #260	; (adr r3, d4378 <_ZN3DHT16computeHeatIndexEff+0x198>)
   d4274:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4278:	ec51 0b10 	vmov	r0, r1, d0
   d427c:	f003 f966 	bl	d754c <__aeabi_dmul>
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4280:	4642      	mov	r2, r8
   d4282:	464b      	mov	r3, r9
   d4284:	f002 ffac 	bl	d71e0 <__adddf3>
		-0.05481717 * pow(percentHumidity, 2) + 
   d4288:	eeb0 0a48 	vmov.f32	s0, s16
		-0.22475541 * tempFahrenheit * percentHumidity +
   d428c:	4680      	mov	r8, r0
		-0.05481717 * pow(percentHumidity, 2) + 
   d428e:	2002      	movs	r0, #2
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4290:	4689      	mov	r9, r1
		-0.05481717 * pow(percentHumidity, 2) + 
   d4292:	f7ff ff8b 	bl	d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4296:	a33a      	add	r3, pc, #232	; (adr r3, d4380 <_ZN3DHT16computeHeatIndexEff+0x1a0>)
   d4298:	e9d3 2300 	ldrd	r2, r3, [r3]
   d429c:	ec51 0b10 	vmov	r0, r1, d0
   d42a0:	f003 f954 	bl	d754c <__aeabi_dmul>
		-0.00683783 * pow(tempFahrenheit, 2) +
   d42a4:	4642      	mov	r2, r8
   d42a6:	464b      	mov	r3, r9
   d42a8:	f002 ff9a 	bl	d71e0 <__adddf3>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d42ac:	eeb0 0a68 	vmov.f32	s0, s17
		-0.00683783 * pow(tempFahrenheit, 2) +
   d42b0:	4680      	mov	r8, r0
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d42b2:	2002      	movs	r0, #2
		-0.00683783 * pow(tempFahrenheit, 2) +
   d42b4:	4689      	mov	r9, r1
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d42b6:	f7ff ff79 	bl	d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d42ba:	a333      	add	r3, pc, #204	; (adr r3, d4388 <_ZN3DHT16computeHeatIndexEff+0x1a8>)
   d42bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42c0:	ec51 0b10 	vmov	r0, r1, d0
   d42c4:	f003 f942 	bl	d754c <__aeabi_dmul>
   d42c8:	4632      	mov	r2, r6
   d42ca:	463b      	mov	r3, r7
   d42cc:	f003 f93e 	bl	d754c <__aeabi_dmul>
		-0.05481717 * pow(percentHumidity, 2) + 
   d42d0:	4642      	mov	r2, r8
   d42d2:	464b      	mov	r3, r9
   d42d4:	f002 ff84 	bl	d71e0 <__adddf3>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d42d8:	eeb0 0a48 	vmov.f32	s0, s16
		-0.05481717 * pow(percentHumidity, 2) + 
   d42dc:	4606      	mov	r6, r0
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d42de:	2002      	movs	r0, #2
		-0.05481717 * pow(percentHumidity, 2) + 
   d42e0:	460f      	mov	r7, r1
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d42e2:	f7ff ff63 	bl	d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d42e6:	ec59 8b10 	vmov	r8, r9, d0
   d42ea:	a329      	add	r3, pc, #164	; (adr r3, d4390 <_ZN3DHT16computeHeatIndexEff+0x1b0>)
   d42ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42f0:	4620      	mov	r0, r4
   d42f2:	4629      	mov	r1, r5
   d42f4:	f003 f92a 	bl	d754c <__aeabi_dmul>
   d42f8:	4642      	mov	r2, r8
   d42fa:	464b      	mov	r3, r9
   d42fc:	f003 f926 	bl	d754c <__aeabi_dmul>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4300:	4632      	mov	r2, r6
   d4302:	463b      	mov	r3, r7
   d4304:	f002 ff6c 	bl	d71e0 <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4308:	eeb0 0a68 	vmov.f32	s0, s17
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d430c:	4604      	mov	r4, r0
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d430e:	2002      	movs	r0, #2
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4310:	460d      	mov	r5, r1
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4312:	f7ff ff4b 	bl	d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4316:	2002      	movs	r0, #2
   d4318:	ec59 8b10 	vmov	r8, r9, d0
   d431c:	eeb0 0a48 	vmov.f32	s0, s16
   d4320:	f7ff ff44 	bl	d41ac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4324:	ec57 6b10 	vmov	r6, r7, d0
   d4328:	a31b      	add	r3, pc, #108	; (adr r3, d4398 <_ZN3DHT16computeHeatIndexEff+0x1b8>)
   d432a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d432e:	4640      	mov	r0, r8
   d4330:	4649      	mov	r1, r9
   d4332:	f003 f90b 	bl	d754c <__aeabi_dmul>
   d4336:	4632      	mov	r2, r6
   d4338:	463b      	mov	r3, r7
   d433a:	f003 f907 	bl	d754c <__aeabi_dmul>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d433e:	4622      	mov	r2, r4
   d4340:	462b      	mov	r3, r5
   d4342:	f002 ff4d 	bl	d71e0 <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4346:	f003 fbf9 	bl	d7b3c <__aeabi_d2f>
}
   d434a:	ecbd 8b02 	vpop	{d8}
   d434e:	ee00 0a10 	vmov	s0, r0
   d4352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4356:	bf00      	nop
   d4358:	18ced8ec 	.word	0x18ced8ec
   d435c:	40006462 	.word	0x40006462
   d4360:	126e978d 	.word	0x126e978d
   d4364:	40453083 	.word	0x40453083
   d4368:	b75a49cd 	.word	0xb75a49cd
   d436c:	40244962 	.word	0x40244962
   d4370:	07c647f8 	.word	0x07c647f8
   d4374:	bfccc4c9 	.word	0xbfccc4c9
   d4378:	039c16cc 	.word	0x039c16cc
   d437c:	bf7c01fc 	.word	0xbf7c01fc
   d4380:	00d18c24 	.word	0x00d18c24
   d4384:	bfac10ff 	.word	0xbfac10ff
   d4388:	8760dce5 	.word	0x8760dce5
   d438c:	3f5421b5 	.word	0x3f5421b5
   d4390:	013330da 	.word	0x013330da
   d4394:	3f4bf1f9 	.word	0x3f4bf1f9
   d4398:	11d3bd01 	.word	0x11d3bd01
   d439c:	bec0b17e 	.word	0xbec0b17e

000d43a0 <_ZN3DHT15computeDewPointEff>:

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   d43a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d43a4:	ee10 0a10 	vmov	r0, s0
   d43a8:	ed2d 8b02 	vpush	{d8}
   d43ac:	eeb0 8a60 	vmov.f32	s16, s1
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d43b0:	f003 f874 	bl	d749c <__aeabi_f2d>
  { return __builtin_logf(__x); }
   d43b4:	ed9f 0a28 	vldr	s0, [pc, #160]	; d4458 <_ZN3DHT15computeDewPointEff+0xb8>
   d43b8:	ee88 0a00 	vdiv.f32	s0, s16, s0
   d43bc:	4604      	mov	r4, r0
   d43be:	460d      	mov	r5, r1
   d43c0:	f001 fda0 	bl	d5f04 <logf>
   d43c4:	a320      	add	r3, pc, #128	; (adr r3, d4448 <_ZN3DHT15computeDewPointEff+0xa8>)
   d43c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43ca:	4620      	mov	r0, r4
   d43cc:	4629      	mov	r1, r5
   d43ce:	ee10 6a10 	vmov	r6, s0
   d43d2:	f003 f8bb 	bl	d754c <__aeabi_dmul>
   d43d6:	a31e      	add	r3, pc, #120	; (adr r3, d4450 <_ZN3DHT15computeDewPointEff+0xb0>)
   d43d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43dc:	4680      	mov	r8, r0
   d43de:	4689      	mov	r9, r1
   d43e0:	4620      	mov	r0, r4
   d43e2:	4629      	mov	r1, r5
   d43e4:	f002 fefc 	bl	d71e0 <__adddf3>
   d43e8:	4602      	mov	r2, r0
   d43ea:	460b      	mov	r3, r1
   d43ec:	4640      	mov	r0, r8
   d43ee:	4649      	mov	r1, r9
   d43f0:	f003 f9d6 	bl	d77a0 <__aeabi_ddiv>
   d43f4:	4604      	mov	r4, r0
   d43f6:	4630      	mov	r0, r6
   d43f8:	460d      	mov	r5, r1
   d43fa:	f003 f84f 	bl	d749c <__aeabi_f2d>
   d43fe:	4602      	mov	r2, r0
   d4400:	460b      	mov	r3, r1
   d4402:	4620      	mov	r0, r4
   d4404:	4629      	mov	r1, r5
   d4406:	f002 feeb 	bl	d71e0 <__adddf3>
	double Td = (b * tC) / (a - tC);
   d440a:	a311      	add	r3, pc, #68	; (adr r3, d4450 <_ZN3DHT15computeDewPointEff+0xb0>)
   d440c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d4410:	4606      	mov	r6, r0
   d4412:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
   d4414:	f003 f89a 	bl	d754c <__aeabi_dmul>
   d4418:	4632      	mov	r2, r6
   d441a:	4604      	mov	r4, r0
   d441c:	460d      	mov	r5, r1
   d441e:	463b      	mov	r3, r7
   d4420:	a109      	add	r1, pc, #36	; (adr r1, d4448 <_ZN3DHT15computeDewPointEff+0xa8>)
   d4422:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4426:	f002 fed9 	bl	d71dc <__aeabi_dsub>
   d442a:	4602      	mov	r2, r0
   d442c:	460b      	mov	r3, r1
   d442e:	4620      	mov	r0, r4
   d4430:	4629      	mov	r1, r5
   d4432:	f003 f9b5 	bl	d77a0 <__aeabi_ddiv>
	return Td;
   d4436:	f003 fb81 	bl	d7b3c <__aeabi_d2f>
}
   d443a:	ecbd 8b02 	vpop	{d8}
   d443e:	ee00 0a10 	vmov	s0, r0
   d4442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4446:	bf00      	nop
   d4448:	4189374c 	.word	0x4189374c
   d444c:	40314560 	.word	0x40314560
   d4450:	66666666 	.word	0x66666666
   d4454:	406db666 	.word	0x406db666
   d4458:	42c80000 	.word	0x42c80000

000d445c <_ZN3DHT4readEv>:

boolean DHT::read(void) {
   d445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4460:	4604      	mov	r4, r0
   d4462:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4464:	f000 fb62 	bl	d4b2c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4468:	68e3      	ldr	r3, [r4, #12]
   d446a:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d446c:	bf84      	itt	hi
   d446e:	2300      	movhi	r3, #0
   d4470:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4472:	7c23      	ldrb	r3, [r4, #16]
   d4474:	b92b      	cbnz	r3, d4482 <_ZN3DHT4readEv+0x26>
   d4476:	68e3      	ldr	r3, [r4, #12]
   d4478:	1ac0      	subs	r0, r0, r3
   d447a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d447e:	f0c0 8160 	bcc.w	d4742 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4482:	2500      	movs	r5, #0
   d4484:	7425      	strb	r5, [r4, #16]
   d4486:	f000 fb51 	bl	d4b2c <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d448a:	4eb0      	ldr	r6, [pc, #704]	; (d474c <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d448c:	6025      	str	r5, [r4, #0]
   d448e:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4490:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4492:	79a7      	ldrb	r7, [r4, #6]
   d4494:	7833      	ldrb	r3, [r6, #0]
   d4496:	4dae      	ldr	r5, [pc, #696]	; (d4750 <_ZN3DHT4readEv+0x2f4>)
   d4498:	f3bf 8f5b 	dmb	ish
   d449c:	f013 0f01 	tst.w	r3, #1
   d44a0:	d109      	bne.n	d44b6 <_ZN3DHT4readEv+0x5a>
   d44a2:	4630      	mov	r0, r6
   d44a4:	f7ff fdfb 	bl	d409e <__cxa_guard_acquire>
   d44a8:	b128      	cbz	r0, d44b6 <_ZN3DHT4readEv+0x5a>
   d44aa:	f000 fb0f 	bl	d4acc <HAL_Pin_Map>
   d44ae:	6028      	str	r0, [r5, #0]
   d44b0:	4630      	mov	r0, r6
   d44b2:	f7ff fdf9 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44b6:	682b      	ldr	r3, [r5, #0]
   d44b8:	013f      	lsls	r7, r7, #4
   d44ba:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44be:	7833      	ldrb	r3, [r6, #0]
   d44c0:	f3bf 8f5b 	dmb	ish
   d44c4:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44c6:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44ca:	d409      	bmi.n	d44e0 <_ZN3DHT4readEv+0x84>
   d44cc:	489f      	ldr	r0, [pc, #636]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d44ce:	f7ff fde6 	bl	d409e <__cxa_guard_acquire>
   d44d2:	b128      	cbz	r0, d44e0 <_ZN3DHT4readEv+0x84>
   d44d4:	f000 fafa 	bl	d4acc <HAL_Pin_Map>
   d44d8:	6028      	str	r0, [r5, #0]
   d44da:	489c      	ldr	r0, [pc, #624]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d44dc:	f7ff fde4 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44e0:	682b      	ldr	r3, [r5, #0]
   d44e2:	441f      	add	r7, r3
   d44e4:	7878      	ldrb	r0, [r7, #1]
   d44e6:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d44ea:	ea40 0008 	orr.w	r0, r0, r8
   d44ee:	f7ff fdf7 	bl	d40e0 <nrf_gpio_pin_set>
	delay(250);
   d44f2:	20fa      	movs	r0, #250	; 0xfa
   d44f4:	f000 ff7a 	bl	d53ec <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d44f8:	79a0      	ldrb	r0, [r4, #6]
   d44fa:	2101      	movs	r1, #1
   d44fc:	f001 fafa 	bl	d5af4 <pinMode>
	pinResetFast(_pin);
   d4500:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4502:	7833      	ldrb	r3, [r6, #0]
   d4504:	f3bf 8f5b 	dmb	ish
   d4508:	07da      	lsls	r2, r3, #31
   d450a:	d409      	bmi.n	d4520 <_ZN3DHT4readEv+0xc4>
   d450c:	488f      	ldr	r0, [pc, #572]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d450e:	f7ff fdc6 	bl	d409e <__cxa_guard_acquire>
   d4512:	b128      	cbz	r0, d4520 <_ZN3DHT4readEv+0xc4>
   d4514:	f000 fada 	bl	d4acc <HAL_Pin_Map>
   d4518:	6028      	str	r0, [r5, #0]
   d451a:	488c      	ldr	r0, [pc, #560]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d451c:	f7ff fdc4 	bl	d40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4520:	682b      	ldr	r3, [r5, #0]
   d4522:	013f      	lsls	r7, r7, #4
   d4524:	5ddb      	ldrb	r3, [r3, r7]
   d4526:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d452a:	7833      	ldrb	r3, [r6, #0]
   d452c:	f3bf 8f5b 	dmb	ish
   d4530:	07db      	lsls	r3, r3, #31
   d4532:	d409      	bmi.n	d4548 <_ZN3DHT4readEv+0xec>
   d4534:	4885      	ldr	r0, [pc, #532]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d4536:	f7ff fdb2 	bl	d409e <__cxa_guard_acquire>
   d453a:	b128      	cbz	r0, d4548 <_ZN3DHT4readEv+0xec>
   d453c:	f000 fac6 	bl	d4acc <HAL_Pin_Map>
   d4540:	6028      	str	r0, [r5, #0]
   d4542:	4882      	ldr	r0, [pc, #520]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d4544:	f7ff fdb0 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4548:	682b      	ldr	r3, [r5, #0]
   d454a:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d454c:	a803      	add	r0, sp, #12
   d454e:	787b      	ldrb	r3, [r7, #1]
   d4550:	f003 031f 	and.w	r3, r3, #31
   d4554:	ea43 0308 	orr.w	r3, r3, r8
   d4558:	9303      	str	r3, [sp, #12]
   d455a:	f7ff fda9 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d455e:	9a03      	ldr	r2, [sp, #12]
   d4560:	2301      	movs	r3, #1
   d4562:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4564:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4568:	2014      	movs	r0, #20
   d456a:	f000 ff3f 	bl	d53ec <delay>
	noInterrupts();
   d456e:	f001 f8d9 	bl	d5724 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4572:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4574:	7833      	ldrb	r3, [r6, #0]
   d4576:	f3bf 8f5b 	dmb	ish
   d457a:	07d8      	lsls	r0, r3, #31
   d457c:	d409      	bmi.n	d4592 <_ZN3DHT4readEv+0x136>
   d457e:	4873      	ldr	r0, [pc, #460]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d4580:	f7ff fd8d 	bl	d409e <__cxa_guard_acquire>
   d4584:	b128      	cbz	r0, d4592 <_ZN3DHT4readEv+0x136>
   d4586:	f000 faa1 	bl	d4acc <HAL_Pin_Map>
   d458a:	6028      	str	r0, [r5, #0]
   d458c:	486f      	ldr	r0, [pc, #444]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d458e:	f7ff fd8b 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4592:	682b      	ldr	r3, [r5, #0]
   d4594:	013f      	lsls	r7, r7, #4
   d4596:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d459a:	7833      	ldrb	r3, [r6, #0]
   d459c:	f3bf 8f5b 	dmb	ish
   d45a0:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45a2:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45a6:	d409      	bmi.n	d45bc <_ZN3DHT4readEv+0x160>
   d45a8:	4868      	ldr	r0, [pc, #416]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d45aa:	f7ff fd78 	bl	d409e <__cxa_guard_acquire>
   d45ae:	b128      	cbz	r0, d45bc <_ZN3DHT4readEv+0x160>
   d45b0:	f000 fa8c 	bl	d4acc <HAL_Pin_Map>
   d45b4:	6028      	str	r0, [r5, #0]
   d45b6:	4865      	ldr	r0, [pc, #404]	; (d474c <_ZN3DHT4readEv+0x2f0>)
   d45b8:	f7ff fd76 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45bc:	682b      	ldr	r3, [r5, #0]
   d45be:	441f      	add	r7, r3
   d45c0:	7878      	ldrb	r0, [r7, #1]
   d45c2:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d45c6:	ea40 0008 	orr.w	r0, r0, r8
   d45ca:	f7ff fd89 	bl	d40e0 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d45ce:	2028      	movs	r0, #40	; 0x28
   d45d0:	f000 faa4 	bl	d4b1c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d45d4:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45d6:	f8df 8174 	ldr.w	r8, [pc, #372]	; d474c <_ZN3DHT4readEv+0x2f0>
   d45da:	2100      	movs	r1, #0
   d45dc:	f001 fa8a 	bl	d5af4 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d45e0:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d45e2:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d45e4:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d45e6:	9300      	str	r3, [sp, #0]
		counter = 0;
   d45e8:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d45ec:	f894 b006 	ldrb.w	fp, [r4, #6]
   d45f0:	7833      	ldrb	r3, [r6, #0]
   d45f2:	f3bf 8f5b 	dmb	ish
   d45f6:	07da      	lsls	r2, r3, #31
   d45f8:	d409      	bmi.n	d460e <_ZN3DHT4readEv+0x1b2>
   d45fa:	4640      	mov	r0, r8
   d45fc:	f7ff fd4f 	bl	d409e <__cxa_guard_acquire>
   d4600:	b128      	cbz	r0, d460e <_ZN3DHT4readEv+0x1b2>
   d4602:	f000 fa63 	bl	d4acc <HAL_Pin_Map>
   d4606:	6028      	str	r0, [r5, #0]
   d4608:	4640      	mov	r0, r8
   d460a:	f7ff fd4d 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d460e:	682b      	ldr	r3, [r5, #0]
   d4610:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4614:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4618:	015b      	lsls	r3, r3, #5
   d461a:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d461c:	7833      	ldrb	r3, [r6, #0]
   d461e:	f3bf 8f5b 	dmb	ish
   d4622:	07db      	lsls	r3, r3, #31
   d4624:	d409      	bmi.n	d463a <_ZN3DHT4readEv+0x1de>
   d4626:	4640      	mov	r0, r8
   d4628:	f7ff fd39 	bl	d409e <__cxa_guard_acquire>
   d462c:	b128      	cbz	r0, d463a <_ZN3DHT4readEv+0x1de>
   d462e:	f000 fa4d 	bl	d4acc <HAL_Pin_Map>
   d4632:	6028      	str	r0, [r5, #0]
   d4634:	4640      	mov	r0, r8
   d4636:	f7ff fd37 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d463a:	682b      	ldr	r3, [r5, #0]
   d463c:	445b      	add	r3, fp
   d463e:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4642:	9b01      	ldr	r3, [sp, #4]
   d4644:	f00b 0b1f 	and.w	fp, fp, #31
   d4648:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d464c:	4658      	mov	r0, fp
   d464e:	f7ff fd54 	bl	d40fa <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4652:	4658      	mov	r0, fp
   d4654:	f7ff fd51 	bl	d40fa <nrf_gpio_pin_read>
   d4658:	9b00      	ldr	r3, [sp, #0]
   d465a:	4283      	cmp	r3, r0
   d465c:	d109      	bne.n	d4672 <_ZN3DHT4readEv+0x216>
			counter++;
   d465e:	f109 0901 	add.w	r9, r9, #1
   d4662:	fa5f f989 	uxtb.w	r9, r9
   d4666:	2001      	movs	r0, #1
   d4668:	f000 fa58 	bl	d4b1c <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d466c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4670:	d1bc      	bne.n	d45ec <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4672:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4676:	7833      	ldrb	r3, [r6, #0]
   d4678:	f3bf 8f5b 	dmb	ish
   d467c:	07d8      	lsls	r0, r3, #31
   d467e:	d409      	bmi.n	d4694 <_ZN3DHT4readEv+0x238>
   d4680:	4640      	mov	r0, r8
   d4682:	f7ff fd0c 	bl	d409e <__cxa_guard_acquire>
   d4686:	b128      	cbz	r0, d4694 <_ZN3DHT4readEv+0x238>
   d4688:	f000 fa20 	bl	d4acc <HAL_Pin_Map>
   d468c:	6028      	str	r0, [r5, #0]
   d468e:	4640      	mov	r0, r8
   d4690:	f7ff fd0a 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4694:	682b      	ldr	r3, [r5, #0]
   d4696:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d469a:	f813 300b 	ldrb.w	r3, [r3, fp]
   d469e:	015b      	lsls	r3, r3, #5
   d46a0:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46a2:	7833      	ldrb	r3, [r6, #0]
   d46a4:	f3bf 8f5b 	dmb	ish
   d46a8:	07d9      	lsls	r1, r3, #31
   d46aa:	d409      	bmi.n	d46c0 <_ZN3DHT4readEv+0x264>
   d46ac:	4640      	mov	r0, r8
   d46ae:	f7ff fcf6 	bl	d409e <__cxa_guard_acquire>
   d46b2:	b128      	cbz	r0, d46c0 <_ZN3DHT4readEv+0x264>
   d46b4:	f000 fa0a 	bl	d4acc <HAL_Pin_Map>
   d46b8:	6028      	str	r0, [r5, #0]
   d46ba:	4640      	mov	r0, r8
   d46bc:	f7ff fcf4 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46c0:	682b      	ldr	r3, [r5, #0]
   d46c2:	445b      	add	r3, fp
   d46c4:	f893 b001 	ldrb.w	fp, [r3, #1]
   d46c8:	9b00      	ldr	r3, [sp, #0]
   d46ca:	f00b 0b1f 	and.w	fp, fp, #31
   d46ce:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d46d2:	4658      	mov	r0, fp
   d46d4:	f7ff fd11 	bl	d40fa <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d46d8:	4658      	mov	r0, fp
   d46da:	f7ff fd0e 	bl	d40fa <nrf_gpio_pin_read>

		if (counter == 255) break;
   d46de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d46e2:	b2c3      	uxtb	r3, r0
   d46e4:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d46e6:	d018      	beq.n	d471a <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d46e8:	2f03      	cmp	r7, #3
   d46ea:	d911      	bls.n	d4710 <_ZN3DHT4readEv+0x2b4>
   d46ec:	07fa      	lsls	r2, r7, #31
   d46ee:	d40f      	bmi.n	d4710 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d46f0:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d46f4:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d46f8:	5ca3      	ldrb	r3, [r4, r2]
   d46fa:	005b      	lsls	r3, r3, #1
   d46fc:	b2db      	uxtb	r3, r3
   d46fe:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4700:	7a21      	ldrb	r1, [r4, #8]
   d4702:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4704:	bf3c      	itt	cc
   d4706:	f043 0301 	orrcc.w	r3, r3, #1
   d470a:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d470c:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4710:	3701      	adds	r7, #1
   d4712:	b2ff      	uxtb	r7, r7
   d4714:	2f55      	cmp	r7, #85	; 0x55
   d4716:	f47f af67 	bne.w	d45e8 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d471a:	f001 f805 	bl	d5728 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d471e:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4722:	d910      	bls.n	d4746 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4724:	7863      	ldrb	r3, [r4, #1]
   d4726:	7820      	ldrb	r0, [r4, #0]
   d4728:	4418      	add	r0, r3
   d472a:	78a3      	ldrb	r3, [r4, #2]
   d472c:	4418      	add	r0, r3
   d472e:	78e3      	ldrb	r3, [r4, #3]
   d4730:	4418      	add	r0, r3
   d4732:	7923      	ldrb	r3, [r4, #4]
   d4734:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4736:	1ac3      	subs	r3, r0, r3
   d4738:	4258      	negs	r0, r3
   d473a:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

   d473c:	b005      	add	sp, #20
   d473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4742:	2001      	movs	r0, #1
   d4744:	e7fa      	b.n	d473c <_ZN3DHT4readEv+0x2e0>
	return false;
   d4746:	2000      	movs	r0, #0
   d4748:	e7f8      	b.n	d473c <_ZN3DHT4readEv+0x2e0>
   d474a:	bf00      	nop
   d474c:	2003e580 	.word	0x2003e580
   d4750:	2003e584 	.word	0x2003e584

000d4754 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4754:	b510      	push	{r4, lr}
   d4756:	4604      	mov	r4, r0
	if (read()) {
   d4758:	f7ff fe80 	bl	d445c <_ZN3DHT4readEv>
   d475c:	b320      	cbz	r0, d47a8 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d475e:	79e3      	ldrb	r3, [r4, #7]
   d4760:	2b0b      	cmp	r3, #11
   d4762:	d01b      	beq.n	d479c <_ZN3DHT15readTemperatureEv+0x48>
   d4764:	3b15      	subs	r3, #21
   d4766:	2b01      	cmp	r3, #1
   d4768:	d81e      	bhi.n	d47a8 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d476a:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d476c:	eddf 6a10 	vldr	s13, [pc, #64]	; d47b0 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4770:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4774:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4778:	78e2      	ldrb	r2, [r4, #3]
   d477a:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d477e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4786:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4788:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d478c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4790:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4794:	d507      	bpl.n	d47a6 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4796:	eeb1 0a40 	vneg.f32	s0, s0
   d479a:	e004      	b.n	d47a6 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d479c:	78a3      	ldrb	r3, [r4, #2]
   d479e:	ee00 3a10 	vmov	s0, r3
   d47a2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d47a6:	bd10      	pop	{r4, pc}
		switch (_type) {
   d47a8:	ed9f 0a02 	vldr	s0, [pc, #8]	; d47b4 <_ZN3DHT15readTemperatureEv+0x60>
   d47ac:	e7fb      	b.n	d47a6 <_ZN3DHT15readTemperatureEv+0x52>
   d47ae:	bf00      	nop
   d47b0:	43800000 	.word	0x43800000
   d47b4:	7fc00000 	.word	0x7fc00000

000d47b8 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d47b8:	f7ff bfcc 	b.w	d4754 <_ZN3DHT15readTemperatureEv>

000d47bc <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d47bc:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d47be:	f7ff ffc9 	bl	d4754 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d47c2:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d47c6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d47ca:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d47ce:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d47d2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d47dc <_ZN3DHT16getTempFarenheitEv+0x20>
   d47d6:	ee37 0a00 	vadd.f32	s0, s14, s0
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	42000000 	.word	0x42000000

000d47e0 <_ZN3DHT13getTempKelvinEv>:
float DHT::getTempKelvin() {
   d47e0:	b508      	push	{r3, lr}
	return convertCtoK(readTemperature());
   d47e2:	f7ff ffb7 	bl	d4754 <_ZN3DHT15readTemperatureEv>
   d47e6:	ee10 0a10 	vmov	r0, s0
	return c + 273.15;
   d47ea:	f002 fe57 	bl	d749c <__aeabi_f2d>
   d47ee:	a306      	add	r3, pc, #24	; (adr r3, d4808 <_ZN3DHT13getTempKelvinEv+0x28>)
   d47f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47f4:	f002 fcf4 	bl	d71e0 <__adddf3>
   d47f8:	f003 f9a0 	bl	d7b3c <__aeabi_d2f>
}
   d47fc:	ee00 0a10 	vmov	s0, r0
   d4800:	bd08      	pop	{r3, pc}
   d4802:	bf00      	nop
   d4804:	f3af 8000 	nop.w
   d4808:	66666666 	.word	0x66666666
   d480c:	40711266 	.word	0x40711266

000d4810 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4810:	b510      	push	{r4, lr}
   d4812:	4604      	mov	r4, r0
	if (read()) {
   d4814:	f7ff fe22 	bl	d445c <_ZN3DHT4readEv>
   d4818:	b1f0      	cbz	r0, d4858 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d481a:	79e3      	ldrb	r3, [r4, #7]
   d481c:	2b0b      	cmp	r3, #11
   d481e:	d015      	beq.n	d484c <_ZN3DHT12readHumidityEv+0x3c>
   d4820:	3b15      	subs	r3, #21
   d4822:	2b01      	cmp	r3, #1
   d4824:	d818      	bhi.n	d4858 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4826:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4828:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4860 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d482c:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4830:	7863      	ldrb	r3, [r4, #1]
   d4832:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4836:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d483e:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4842:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4846:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d484a:	bd10      	pop	{r4, pc}
				f = data[0];
   d484c:	7823      	ldrb	r3, [r4, #0]
   d484e:	ee00 3a10 	vmov	s0, r3
   d4852:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4856:	e7f8      	b.n	d484a <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4858:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4864 <_ZN3DHT12readHumidityEv+0x54>
   d485c:	e7f5      	b.n	d484a <_ZN3DHT12readHumidityEv+0x3a>
   d485e:	bf00      	nop
   d4860:	43800000 	.word	0x43800000
   d4864:	7fc00000 	.word	0x7fc00000

000d4868 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4868:	f7ff bfd2 	b.w	d4810 <_ZN3DHT12readHumidityEv>

000d486c <_ZN3DHT12getHeatIndexEv>:
float DHT::getHeatIndex() {
   d486c:	b510      	push	{r4, lr}
   d486e:	ed2d 8b04 	vpush	{d8-d9}
   d4872:	4604      	mov	r4, r0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4874:	f7ff ff6e 	bl	d4754 <_ZN3DHT15readTemperatureEv>
   d4878:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   d487a:	eef2 8a02 	vmov.f32	s17, #34	; 0x41100000  9.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d487e:	eeb0 8a40 	vmov.f32	s16, s0
   d4882:	f7ff ffc5 	bl	d4810 <_ZN3DHT12readHumidityEv>
	return c * 9 / 5 + 32;
   d4886:	ee28 8a28 	vmul.f32	s16, s16, s17
   d488a:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d488e:	eef0 0a40 	vmov.f32	s1, s0
	return c * 9 / 5 + 32;
   d4892:	ee88 0a09 	vdiv.f32	s0, s16, s18
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4896:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   d4898:	ed9f 8a07 	vldr	s16, [pc, #28]	; d48b8 <_ZN3DHT12getHeatIndexEv+0x4c>
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d489c:	ee30 0a08 	vadd.f32	s0, s0, s16
   d48a0:	f7ff fc9e 	bl	d41e0 <_ZN3DHT16computeHeatIndexEff>
	return (f - 32) * 5 / 9;
   d48a4:	ee30 0a48 	vsub.f32	s0, s0, s16
   d48a8:	ee20 0a09 	vmul.f32	s0, s0, s18
}
   d48ac:	ee80 0a28 	vdiv.f32	s0, s0, s17
   d48b0:	ecbd 8b04 	vpop	{d8-d9}
   d48b4:	bd10      	pop	{r4, pc}
   d48b6:	bf00      	nop
   d48b8:	42000000 	.word	0x42000000

000d48bc <_ZN3DHT11getDewPointEv>:
float DHT::getDewPoint() {
   d48bc:	b510      	push	{r4, lr}
   d48be:	ed2d 8b02 	vpush	{d8}
   d48c2:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
   d48c4:	f7ff ff46 	bl	d4754 <_ZN3DHT15readTemperatureEv>
   d48c8:	4620      	mov	r0, r4
   d48ca:	eeb0 8a40 	vmov.f32	s16, s0
   d48ce:	f7ff ff9f 	bl	d4810 <_ZN3DHT12readHumidityEv>
   d48d2:	eef0 0a40 	vmov.f32	s1, s0
   d48d6:	eeb0 0a48 	vmov.f32	s0, s16
}
   d48da:	ecbd 8b02 	vpop	{d8}
	return computeDewPoint(readTemperature(), readHumidity());
   d48de:	4620      	mov	r0, r4
}
   d48e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return computeDewPoint(readTemperature(), readHumidity());
   d48e4:	f7ff bd5c 	b.w	d43a0 <_ZN3DHT15computeDewPointEff>

000d48e8 <setup>:
// Connect pin 4 (on the right) of the sensor to GROUND
// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor

DHT dht(DHTPIN, DHTTYPE);

void setup() {
   d48e8:	b508      	push	{r3, lr}
	Serial.begin(9600); 
   d48ea:	f000 fef5 	bl	d56d8 <_Z16_fetch_usbserialv>
   d48ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d48f2:	f000 fee5 	bl	d56c0 <_ZN9USBSerial5beginEl>
	Serial.println("DHTxx test!");
   d48f6:	f000 feef 	bl	d56d8 <_Z16_fetch_usbserialv>
   d48fa:	4904      	ldr	r1, [pc, #16]	; (d490c <setup+0x24>)
   d48fc:	f000 fbef 	bl	d50de <_ZN5Print7printlnEPKc>

	dht.begin();
}
   d4900:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dht.begin();
   d4904:	4802      	ldr	r0, [pc, #8]	; (d4910 <setup+0x28>)
   d4906:	f7ff bc0d 	b.w	d4124 <_ZN3DHT5beginEv>
   d490a:	bf00      	nop
   d490c:	000d7d98 	.word	0x000d7d98
   d4910:	2003e588 	.word	0x2003e588

000d4914 <loop>:

void loop() {
   d4914:	b510      	push	{r4, lr}
   d4916:	ed2d 8b06 	vpush	{d8-d10}
// Wait a few seconds between measurements.
	delay(2000);
   d491a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void loop() {
   d491e:	b084      	sub	sp, #16
	delay(2000);
   d4920:	f000 fd64 	bl	d53ec <delay>

// Reading temperature or humidity takes about 250 milliseconds!
// Sensor readings may also be up to 2 seconds 'old' (its a 
// very slow sensor)
	float h = dht.getHumidity();
   d4924:	4851      	ldr	r0, [pc, #324]	; (d4a6c <loop+0x158>)
   d4926:	f7ff ff9f 	bl	d4868 <_ZN3DHT11getHumidityEv>
// Read temperature as Celsius
	float t = dht.getTempCelcius();
   d492a:	4850      	ldr	r0, [pc, #320]	; (d4a6c <loop+0x158>)
	float h = dht.getHumidity();
   d492c:	eeb0 9a40 	vmov.f32	s18, s0
	float t = dht.getTempCelcius();
   d4930:	f7ff ff42 	bl	d47b8 <_ZN3DHT14getTempCelciusEv>
// Read temperature as Farenheit
	float f = dht.getTempFarenheit();
   d4934:	484d      	ldr	r0, [pc, #308]	; (d4a6c <loop+0x158>)
	float t = dht.getTempCelcius();
   d4936:	eef0 8a40 	vmov.f32	s17, s0
	float f = dht.getTempFarenheit();
   d493a:	f7ff ff3f 	bl	d47bc <_ZN3DHT16getTempFarenheitEv>
  
// Check if any reads failed and exit early (to try again).
	if (isnan(h) || isnan(t) || isnan(f)) {
   d493e:	eeb4 9a49 	vcmp.f32	s18, s18
   d4942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float f = dht.getTempFarenheit();
   d4946:	eeb0 8a40 	vmov.f32	s16, s0
	if (isnan(h) || isnan(t) || isnan(f)) {
   d494a:	d609      	bvs.n	d4960 <loop+0x4c>
   d494c:	eef4 8a68 	vcmp.f32	s17, s17
   d4950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4954:	d604      	bvs.n	d4960 <loop+0x4c>
   d4956:	eeb4 0a40 	vcmp.f32	s0, s0
   d495a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d495e:	d708      	bvc.n	d4972 <loop+0x5e>
		Serial.println("Failed to read from DHT sensor!");
   d4960:	f000 feba 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4964:	4942      	ldr	r1, [pc, #264]	; (d4a70 <loop+0x15c>)
   d4966:	f000 fbba 	bl	d50de <_ZN5Print7printlnEPKc>
	Serial.print("*C - ");
	Serial.print("HeatI: ");
	Serial.print(hi);
	Serial.println("*C");
	Serial.println(Time.timeStr());
}
   d496a:	b004      	add	sp, #16
   d496c:	ecbd 8b06 	vpop	{d8-d10}
   d4970:	bd10      	pop	{r4, pc}
	float hi = dht.getHeatIndex();
   d4972:	483e      	ldr	r0, [pc, #248]	; (d4a6c <loop+0x158>)
   d4974:	f7ff ff7a 	bl	d486c <_ZN3DHT12getHeatIndexEv>
	float dp = dht.getDewPoint();
   d4978:	483c      	ldr	r0, [pc, #240]	; (d4a6c <loop+0x158>)
	float hi = dht.getHeatIndex();
   d497a:	eef0 9a40 	vmov.f32	s19, s0
	float dp = dht.getDewPoint();
   d497e:	f7ff ff9d 	bl	d48bc <_ZN3DHT11getDewPointEv>
	float k = dht.getTempKelvin();
   d4982:	483a      	ldr	r0, [pc, #232]	; (d4a6c <loop+0x158>)
	float dp = dht.getDewPoint();
   d4984:	eeb0 aa40 	vmov.f32	s20, s0
	float k = dht.getTempKelvin();
   d4988:	f7ff ff2a 	bl	d47e0 <_ZN3DHT13getTempKelvinEv>
   d498c:	eef0 aa40 	vmov.f32	s21, s0
	Serial.print("Humid: "); 
   d4990:	f000 fea2 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4994:	4937      	ldr	r1, [pc, #220]	; (d4a74 <loop+0x160>)
   d4996:	f000 fb8f 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print(h);
   d499a:	f000 fe9d 	bl	d56d8 <_Z16_fetch_usbserialv>
   d499e:	eeb0 0a49 	vmov.f32	s0, s18
   d49a2:	2102      	movs	r1, #2
   d49a4:	f000 fc8c 	bl	d52c0 <_ZN5Print5printEfi>
	Serial.print("% - ");
   d49a8:	f000 fe96 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49ac:	4932      	ldr	r1, [pc, #200]	; (d4a78 <loop+0x164>)
   d49ae:	f000 fb83 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print("Temp: "); 
   d49b2:	f000 fe91 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49b6:	4931      	ldr	r1, [pc, #196]	; (d4a7c <loop+0x168>)
   d49b8:	f000 fb7e 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print(t);
   d49bc:	f000 fe8c 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49c0:	eeb0 0a68 	vmov.f32	s0, s17
   d49c4:	2102      	movs	r1, #2
   d49c6:	f000 fc7b 	bl	d52c0 <_ZN5Print5printEfi>
	Serial.print("*C ");
   d49ca:	f000 fe85 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49ce:	492c      	ldr	r1, [pc, #176]	; (d4a80 <loop+0x16c>)
   d49d0:	f000 fb72 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print(f);
   d49d4:	f000 fe80 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49d8:	eeb0 0a48 	vmov.f32	s0, s16
   d49dc:	2102      	movs	r1, #2
   d49de:	f000 fc6f 	bl	d52c0 <_ZN5Print5printEfi>
	Serial.print("*F ");
   d49e2:	f000 fe79 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49e6:	4927      	ldr	r1, [pc, #156]	; (d4a84 <loop+0x170>)
   d49e8:	f000 fb66 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print(k);
   d49ec:	f000 fe74 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49f0:	eeb0 0a6a 	vmov.f32	s0, s21
   d49f4:	2102      	movs	r1, #2
   d49f6:	f000 fc63 	bl	d52c0 <_ZN5Print5printEfi>
	Serial.print("*K - ");
   d49fa:	f000 fe6d 	bl	d56d8 <_Z16_fetch_usbserialv>
   d49fe:	4922      	ldr	r1, [pc, #136]	; (d4a88 <loop+0x174>)
   d4a00:	f000 fb5a 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print("DewP: ");
   d4a04:	f000 fe68 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a08:	4920      	ldr	r1, [pc, #128]	; (d4a8c <loop+0x178>)
   d4a0a:	f000 fb55 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print(dp);
   d4a0e:	f000 fe63 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a12:	eeb0 0a4a 	vmov.f32	s0, s20
   d4a16:	2102      	movs	r1, #2
   d4a18:	f000 fc52 	bl	d52c0 <_ZN5Print5printEfi>
	Serial.print("*C - ");
   d4a1c:	f000 fe5c 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a20:	491b      	ldr	r1, [pc, #108]	; (d4a90 <loop+0x17c>)
   d4a22:	f000 fb49 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print("HeatI: ");
   d4a26:	f000 fe57 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a2a:	491a      	ldr	r1, [pc, #104]	; (d4a94 <loop+0x180>)
   d4a2c:	f000 fb44 	bl	d50b8 <_ZN5Print5printEPKc>
	Serial.print(hi);
   d4a30:	f000 fe52 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a34:	eeb0 0a69 	vmov.f32	s0, s19
   d4a38:	2102      	movs	r1, #2
   d4a3a:	f000 fc41 	bl	d52c0 <_ZN5Print5printEfi>
	Serial.println("*C");
   d4a3e:	f000 fe4b 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a42:	4915      	ldr	r1, [pc, #84]	; (d4a98 <loop+0x184>)
   d4a44:	f000 fb4b 	bl	d50de <_ZN5Print7printlnEPKc>
	Serial.println(Time.timeStr());
   d4a48:	f000 fe46 	bl	d56d8 <_Z16_fetch_usbserialv>
   d4a4c:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4a4e:	f000 fcb2 	bl	d53b6 <_ZN9TimeClass3nowEv>
   d4a52:	4602      	mov	r2, r0
   d4a54:	17c3      	asrs	r3, r0, #31
   d4a56:	4668      	mov	r0, sp
   d4a58:	f000 fc58 	bl	d530c <_ZN9TimeClass7timeStrEx>
   d4a5c:	9900      	ldr	r1, [sp, #0]
   d4a5e:	4620      	mov	r0, r4
   d4a60:	f000 fb3d 	bl	d50de <_ZN5Print7printlnEPKc>
   d4a64:	4668      	mov	r0, sp
   d4a66:	f000 fa97 	bl	d4f98 <_ZN6StringD1Ev>
   d4a6a:	e77e      	b.n	d496a <loop+0x56>
   d4a6c:	2003e588 	.word	0x2003e588
   d4a70:	000d7da4 	.word	0x000d7da4
   d4a74:	000d7dc4 	.word	0x000d7dc4
   d4a78:	000d7dcc 	.word	0x000d7dcc
   d4a7c:	000d7dd1 	.word	0x000d7dd1
   d4a80:	000d7dd8 	.word	0x000d7dd8
   d4a84:	000d7ddc 	.word	0x000d7ddc
   d4a88:	000d7de0 	.word	0x000d7de0
   d4a8c:	000d7de6 	.word	0x000d7de6
   d4a90:	000d7ded 	.word	0x000d7ded
   d4a94:	000d7df3 	.word	0x000d7df3
   d4a98:	000d7dfb 	.word	0x000d7dfb

000d4a9c <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTTYPE);
   d4a9c:	4802      	ldr	r0, [pc, #8]	; (d4aa8 <_GLOBAL__sub_I_dht+0xc>)
   d4a9e:	2306      	movs	r3, #6
   d4aa0:	220b      	movs	r2, #11
   d4aa2:	2102      	movs	r1, #2
   d4aa4:	f7ff bb37 	b.w	d4116 <_ZN3DHTC1Ehhh>
   d4aa8:	2003e588 	.word	0x2003e588

000d4aac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <netdb_freeaddrinfo+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	689b      	ldr	r3, [r3, #8]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030268 	.word	0x00030268

000d4abc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <netdb_getaddrinfo+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	68db      	ldr	r3, [r3, #12]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030268 	.word	0x00030268

000d4acc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <HAL_Pin_Map+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	681b      	ldr	r3, [r3, #0]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003022c 	.word	0x0003022c

000d4adc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <HAL_Pin_Mode+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	689b      	ldr	r3, [r3, #8]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003022c 	.word	0x0003022c

000d4aec <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <HAL_Interrupts_Enable_All+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	6a1b      	ldr	r3, [r3, #32]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003022c 	.word	0x0003022c

000d4afc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <HAL_Interrupts_Disable_All+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003022c 	.word	0x0003022c

000d4b0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <HAL_RNG_GetRandomNumber+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	685b      	ldr	r3, [r3, #4]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030218 	.word	0x00030218

000d4b1c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_Delay_Microseconds+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	68db      	ldr	r3, [r3, #12]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030218 	.word	0x00030218

000d4b2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	695b      	ldr	r3, [r3, #20]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030218 	.word	0x00030218

000d4b3c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <hal_rtc_time_is_valid+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030218 	.word	0x00030218

000d4b4c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <hal_rtc_get_time+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030218 	.word	0x00030218

000d4b5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <os_mutex_recursive_create+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030248 	.word	0x00030248

000d4b6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <inet_inet_ntop+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	695b      	ldr	r3, [r3, #20]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030264 	.word	0x00030264

000d4b7c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <hal_usart_init+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	681b      	ldr	r3, [r3, #0]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003023c 	.word	0x0003023c

000d4b8c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <hal_usart_write+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	68db      	ldr	r3, [r3, #12]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003023c 	.word	0x0003023c

000d4b9c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <hal_usart_available+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	691b      	ldr	r3, [r3, #16]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003023c 	.word	0x0003023c

000d4bac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <hal_usart_read+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	695b      	ldr	r3, [r3, #20]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003023c 	.word	0x0003023c

000d4bbc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <hal_usart_peek+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	699b      	ldr	r3, [r3, #24]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	0003023c 	.word	0x0003023c

000d4bcc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <hal_usart_flush+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	69db      	ldr	r3, [r3, #28]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	0003023c 	.word	0x0003023c

000d4bdc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <hal_usart_is_enabled+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	6a1b      	ldr	r3, [r3, #32]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	0003023c 	.word	0x0003023c

000d4bec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <hal_usart_available_data_for_write+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	0003023c 	.word	0x0003023c

000d4bfc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <hal_i2c_write+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6a1b      	ldr	r3, [r3, #32]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030228 	.word	0x00030228

000d4c0c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <hal_i2c_available+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030228 	.word	0x00030228

000d4c1c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <hal_i2c_read+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030228 	.word	0x00030228

000d4c2c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <hal_i2c_peek+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030228 	.word	0x00030228

000d4c3c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <hal_i2c_flush+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030228 	.word	0x00030228

000d4c4c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <hal_i2c_is_enabled+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030228 	.word	0x00030228

000d4c5c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <hal_i2c_init+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030228 	.word	0x00030228

000d4c6c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <hal_spi_init+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	69db      	ldr	r3, [r3, #28]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030230 	.word	0x00030230

000d4c7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <hal_spi_is_enabled+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6a1b      	ldr	r3, [r3, #32]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030230 	.word	0x00030230

000d4c8c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <HAL_USB_USART_Init+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	681b      	ldr	r3, [r3, #0]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003024c 	.word	0x0003024c

000d4c9c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <HAL_USB_USART_Begin+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	685b      	ldr	r3, [r3, #4]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003024c 	.word	0x0003024c

000d4cac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_USB_USART_Available_Data+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	691b      	ldr	r3, [r3, #16]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003024c 	.word	0x0003024c

000d4cbc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	695b      	ldr	r3, [r3, #20]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	0003024c 	.word	0x0003024c

000d4ccc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <HAL_USB_USART_Receive_Data+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	699b      	ldr	r3, [r3, #24]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	0003024c 	.word	0x0003024c

000d4cdc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <HAL_USB_USART_Send_Data+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	69db      	ldr	r3, [r3, #28]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	0003024c 	.word	0x0003024c

000d4cec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <HAL_USB_USART_Flush_Data+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a1b      	ldr	r3, [r3, #32]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	0003024c 	.word	0x0003024c

000d4cfc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <panic_+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030260 	.word	0x00030260

000d4d0c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <system_mode+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	681b      	ldr	r3, [r3, #0]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030220 	.word	0x00030220

000d4d1c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <set_system_mode+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	685b      	ldr	r3, [r3, #4]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030220 	.word	0x00030220

000d4d2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <system_delay_ms+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	695b      	ldr	r3, [r3, #20]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030220 	.word	0x00030220

000d4d3c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <system_thread_get_state+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030220 	.word	0x00030220

000d4d4c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b03      	ldr	r3, [pc, #12]	; (d4d5c <system_ctrl_set_app_request_handler+0x10>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4d56:	9301      	str	r3, [sp, #4]
   d4d58:	bd08      	pop	{r3, pc}
   d4d5a:	0000      	.short	0x0000
   d4d5c:	00030220 	.word	0x00030220

000d4d60 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b03      	ldr	r3, [pc, #12]	; (d4d70 <system_ctrl_set_result+0x10>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4d6a:	9301      	str	r3, [sp, #4]
   d4d6c:	bd08      	pop	{r3, pc}
   d4d6e:	0000      	.short	0x0000
   d4d70:	00030220 	.word	0x00030220

000d4d74 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <network_connect+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	685b      	ldr	r3, [r3, #4]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030240 	.word	0x00030240

000d4d84 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <network_connecting+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	689b      	ldr	r3, [r3, #8]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030240 	.word	0x00030240

000d4d94 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <network_disconnect+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	68db      	ldr	r3, [r3, #12]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030240 	.word	0x00030240

000d4da4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <network_ready+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	691b      	ldr	r3, [r3, #16]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030240 	.word	0x00030240

000d4db4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <network_on+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	695b      	ldr	r3, [r3, #20]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030240 	.word	0x00030240

000d4dc4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <network_off+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	699b      	ldr	r3, [r3, #24]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030240 	.word	0x00030240

000d4dd4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <network_listen+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	69db      	ldr	r3, [r3, #28]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030240 	.word	0x00030240

000d4de4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <network_listening+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6a1b      	ldr	r3, [r3, #32]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030240 	.word	0x00030240

000d4df4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <network_set_listen_timeout+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030240 	.word	0x00030240

000d4e04 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <network_get_listen_timeout+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030240 	.word	0x00030240

000d4e14 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <network_is_on+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030240 	.word	0x00030240

000d4e24 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <network_is_off+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030240 	.word	0x00030240

000d4e34 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <spark_process+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	689b      	ldr	r3, [r3, #8]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030244 	.word	0x00030244

000d4e44 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <spark_cloud_flag_connected+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	695b      	ldr	r3, [r3, #20]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030244 	.word	0x00030244

000d4e54 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <spark_sync_time_pending+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030244 	.word	0x00030244

000d4e64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030244 	.word	0x00030244

000d4e74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <malloc+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	681b      	ldr	r3, [r3, #0]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003021c 	.word	0x0003021c

000d4e84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <free+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	685b      	ldr	r3, [r3, #4]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003021c 	.word	0x0003021c

000d4e94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <realloc+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	689b      	ldr	r3, [r3, #8]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003021c 	.word	0x0003021c

000d4ea4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <siprintf+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	691b      	ldr	r3, [r3, #16]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003021c 	.word	0x0003021c

000d4eb4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <__errno+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003021c 	.word	0x0003021c

000d4ec4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <newlib_impure_ptr_callback+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003021c 	.word	0x0003021c

000d4ed4 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <localtime_r+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	0003021c 	.word	0x0003021c

000d4ee4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ee4:	2200      	movs	r2, #0
   d4ee6:	6840      	ldr	r0, [r0, #4]
   d4ee8:	4611      	mov	r1, r2
   d4eea:	f7ff bf7b 	b.w	d4de4 <network_listening>

000d4eee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4eee:	2200      	movs	r2, #0
   d4ef0:	6840      	ldr	r0, [r0, #4]
   d4ef2:	4611      	mov	r1, r2
   d4ef4:	f7ff bf86 	b.w	d4e04 <network_get_listen_timeout>

000d4ef8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ef8:	6840      	ldr	r0, [r0, #4]
   d4efa:	2200      	movs	r2, #0
   d4efc:	f7ff bf7a 	b.w	d4df4 <network_set_listen_timeout>

000d4f00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f00:	6840      	ldr	r0, [r0, #4]
   d4f02:	2200      	movs	r2, #0
   d4f04:	f081 0101 	eor.w	r1, r1, #1
   d4f08:	f7ff bf64 	b.w	d4dd4 <network_listen>

000d4f0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4f0c:	2300      	movs	r3, #0
   d4f0e:	6840      	ldr	r0, [r0, #4]
   d4f10:	461a      	mov	r2, r3
   d4f12:	4619      	mov	r1, r3
   d4f14:	f7ff bf56 	b.w	d4dc4 <network_off>

000d4f18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4f18:	2300      	movs	r3, #0
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	461a      	mov	r2, r3
   d4f1e:	4619      	mov	r1, r3
   d4f20:	f7ff bf48 	b.w	d4db4 <network_on>

000d4f24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f24:	2200      	movs	r2, #0
   d4f26:	6840      	ldr	r0, [r0, #4]
   d4f28:	4611      	mov	r1, r2
   d4f2a:	f7ff bf3b 	b.w	d4da4 <network_ready>

000d4f2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4f2e:	2200      	movs	r2, #0
   d4f30:	6840      	ldr	r0, [r0, #4]
   d4f32:	4611      	mov	r1, r2
   d4f34:	f7ff bf26 	b.w	d4d84 <network_connecting>

000d4f38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f38:	6840      	ldr	r0, [r0, #4]
   d4f3a:	2200      	movs	r2, #0
   d4f3c:	2102      	movs	r1, #2
   d4f3e:	f7ff bf29 	b.w	d4d94 <network_disconnect>

000d4f42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4f42:	2300      	movs	r3, #0
   d4f44:	6840      	ldr	r0, [r0, #4]
   d4f46:	461a      	mov	r2, r3
   d4f48:	f7ff bf14 	b.w	d4d74 <network_connect>

000d4f4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f4c:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f4e:	2203      	movs	r2, #3
   d4f50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f52:	4a02      	ldr	r2, [pc, #8]	; (d4f5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4f56:	4770      	bx	lr
   d4f58:	2003e59c 	.word	0x2003e59c
   d4f5c:	000d7e08 	.word	0x000d7e08

000d4f60 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4f60:	b510      	push	{r4, lr}
   d4f62:	4604      	mov	r4, r0
   d4f64:	4608      	mov	r0, r1
{
    _spi = spi;
   d4f66:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4f68:	f7ff fe80 	bl	d4c6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4f6c:	2300      	movs	r3, #0
   d4f6e:	6063      	str	r3, [r4, #4]
}
   d4f70:	4620      	mov	r0, r4
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4f74:	4b05      	ldr	r3, [pc, #20]	; (d4f8c <_GLOBAL__sub_I_System+0x18>)
   d4f76:	2202      	movs	r2, #2
   d4f78:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f7a:	4b05      	ldr	r3, [pc, #20]	; (d4f90 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4f7c:	4a05      	ldr	r2, [pc, #20]	; (d4f94 <_GLOBAL__sub_I_System+0x20>)
   d4f7e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4f80:	2000      	movs	r0, #0
   d4f82:	6018      	str	r0, [r3, #0]
   d4f84:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4f86:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f88:	f7ff bec8 	b.w	d4d1c <set_system_mode>
   d4f8c:	2003e5b0 	.word	0x2003e5b0
   d4f90:	2003e5a4 	.word	0x2003e5a4
   d4f94:	ffff0000 	.word	0xffff0000

000d4f98 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f98:	b510      	push	{r4, lr}
   d4f9a:	4604      	mov	r4, r0
{
	free(buffer);
   d4f9c:	6800      	ldr	r0, [r0, #0]
   d4f9e:	f7ff ff71 	bl	d4e84 <free>
}
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	bd10      	pop	{r4, pc}

000d4fa6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4fa6:	b510      	push	{r4, lr}
   d4fa8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4faa:	6800      	ldr	r0, [r0, #0]
   d4fac:	b108      	cbz	r0, d4fb2 <_ZN6String10invalidateEv+0xc>
   d4fae:	f7ff ff69 	bl	d4e84 <free>
	buffer = NULL;
   d4fb2:	2300      	movs	r3, #0
	capacity = len = 0;
   d4fb4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4fb8:	6023      	str	r3, [r4, #0]
}
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4fbc:	b538      	push	{r3, r4, r5, lr}
   d4fbe:	4604      	mov	r4, r0
   d4fc0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4fc2:	6800      	ldr	r0, [r0, #0]
   d4fc4:	3101      	adds	r1, #1
   d4fc6:	f7ff ff65 	bl	d4e94 <realloc>
	if (newbuffer) {
   d4fca:	b110      	cbz	r0, d4fd2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4fcc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4fd0:	2001      	movs	r0, #1
	}
	return 0;
}
   d4fd2:	bd38      	pop	{r3, r4, r5, pc}

000d4fd4 <_ZN6String7reserveEj>:
{
   d4fd4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4fd6:	6803      	ldr	r3, [r0, #0]
{
   d4fd8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4fda:	b123      	cbz	r3, d4fe6 <_ZN6String7reserveEj+0x12>
   d4fdc:	6843      	ldr	r3, [r0, #4]
   d4fde:	428b      	cmp	r3, r1
   d4fe0:	d301      	bcc.n	d4fe6 <_ZN6String7reserveEj+0x12>
   d4fe2:	2001      	movs	r0, #1
}
   d4fe4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	f7ff ffe8 	bl	d4fbc <_ZN6String12changeBufferEj>
   d4fec:	2800      	cmp	r0, #0
   d4fee:	d0f9      	beq.n	d4fe4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4ff0:	68a3      	ldr	r3, [r4, #8]
   d4ff2:	2b00      	cmp	r3, #0
   d4ff4:	d1f5      	bne.n	d4fe2 <_ZN6String7reserveEj+0xe>
   d4ff6:	6822      	ldr	r2, [r4, #0]
   d4ff8:	7013      	strb	r3, [r2, #0]
   d4ffa:	e7f2      	b.n	d4fe2 <_ZN6String7reserveEj+0xe>

000d4ffc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4ffe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5000:	4611      	mov	r1, r2
   d5002:	9201      	str	r2, [sp, #4]
{
   d5004:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5006:	f7ff ffe5 	bl	d4fd4 <_ZN6String7reserveEj>
   d500a:	9a01      	ldr	r2, [sp, #4]
   d500c:	b928      	cbnz	r0, d501a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d500e:	4620      	mov	r0, r4
   d5010:	f7ff ffc9 	bl	d4fa6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5014:	4620      	mov	r0, r4
   d5016:	b003      	add	sp, #12
   d5018:	bd30      	pop	{r4, r5, pc}
	len = length;
   d501a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d501c:	4629      	mov	r1, r5
   d501e:	6820      	ldr	r0, [r4, #0]
   d5020:	f002 fe08 	bl	d7c34 <memcpy>
	buffer[len] = 0;
   d5024:	6822      	ldr	r2, [r4, #0]
   d5026:	68a3      	ldr	r3, [r4, #8]
   d5028:	2100      	movs	r1, #0
   d502a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d502c:	e7f2      	b.n	d5014 <_ZN6String4copyEPKcj+0x18>

000d502e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d502e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5030:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5032:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5036:	4604      	mov	r4, r0
	len = 0;
   d5038:	6083      	str	r3, [r0, #8]
	flags = 0;
   d503a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d503c:	b141      	cbz	r1, d5050 <_ZN6StringC1EPKc+0x22>
   d503e:	4608      	mov	r0, r1
   d5040:	9101      	str	r1, [sp, #4]
   d5042:	f002 fe31 	bl	d7ca8 <strlen>
   d5046:	9901      	ldr	r1, [sp, #4]
   d5048:	4602      	mov	r2, r0
   d504a:	4620      	mov	r0, r4
   d504c:	f7ff ffd6 	bl	d4ffc <_ZN6String4copyEPKcj>
}
   d5050:	4620      	mov	r0, r4
   d5052:	b002      	add	sp, #8
   d5054:	bd10      	pop	{r4, pc}
	...

000d5058 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5058:	4802      	ldr	r0, [pc, #8]	; (d5064 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d505a:	2300      	movs	r3, #0
   d505c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d505e:	f7ff bd7d 	b.w	d4b5c <os_mutex_recursive_create>
   d5062:	bf00      	nop
   d5064:	2003e5b4 	.word	0x2003e5b4

000d5068 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d506a:	4606      	mov	r6, r0
   d506c:	460d      	mov	r5, r1
  size_t n = 0;
   d506e:	188f      	adds	r7, r1, r2
   d5070:	2400      	movs	r4, #0
  while (size--) {
   d5072:	42bd      	cmp	r5, r7
   d5074:	d00c      	beq.n	d5090 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5076:	6833      	ldr	r3, [r6, #0]
   d5078:	f815 1b01 	ldrb.w	r1, [r5], #1
   d507c:	689b      	ldr	r3, [r3, #8]
   d507e:	4630      	mov	r0, r6
   d5080:	4798      	blx	r3
     if (chunk>=0)
   d5082:	1e03      	subs	r3, r0, #0
   d5084:	db01      	blt.n	d508a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5086:	441c      	add	r4, r3
  while (size--) {
   d5088:	e7f3      	b.n	d5072 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d508a:	2c00      	cmp	r4, #0
   d508c:	bf08      	it	eq
   d508e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5090:	4620      	mov	r0, r4
   d5092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5094 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5094:	b513      	push	{r0, r1, r4, lr}
   d5096:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5098:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d509a:	b159      	cbz	r1, d50b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d509c:	9101      	str	r1, [sp, #4]
   d509e:	f002 fe03 	bl	d7ca8 <strlen>
   d50a2:	6823      	ldr	r3, [r4, #0]
   d50a4:	9901      	ldr	r1, [sp, #4]
   d50a6:	68db      	ldr	r3, [r3, #12]
   d50a8:	4602      	mov	r2, r0
   d50aa:	4620      	mov	r0, r4
    }
   d50ac:	b002      	add	sp, #8
   d50ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d50b2:	4718      	bx	r3
    }
   d50b4:	b002      	add	sp, #8
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d50b8:	b508      	push	{r3, lr}
  return write(str);
   d50ba:	f7ff ffeb 	bl	d5094 <_ZN5Print5writeEPKc>
}
   d50be:	bd08      	pop	{r3, pc}

000d50c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d50c0:	6803      	ldr	r3, [r0, #0]
   d50c2:	689b      	ldr	r3, [r3, #8]
   d50c4:	4718      	bx	r3

000d50c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50c8:	210d      	movs	r1, #13
{
   d50ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50cc:	f7ff fff8 	bl	d50c0 <_ZN5Print5printEc>
  n += print('\n');
   d50d0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d50d2:	4604      	mov	r4, r0
  n += print('\n');
   d50d4:	4628      	mov	r0, r5
   d50d6:	f7ff fff3 	bl	d50c0 <_ZN5Print5printEc>
  return n;
}
   d50da:	4420      	add	r0, r4
   d50dc:	bd38      	pop	{r3, r4, r5, pc}

000d50de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d50de:	b538      	push	{r3, r4, r5, lr}
   d50e0:	4605      	mov	r5, r0
  return write(str);
   d50e2:	f7ff ffd7 	bl	d5094 <_ZN5Print5writeEPKc>
   d50e6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d50e8:	4628      	mov	r0, r5
   d50ea:	f7ff ffec 	bl	d50c6 <_ZN5Print7printlnEv>
  return n;
}
   d50ee:	4420      	add	r0, r4
   d50f0:	bd38      	pop	{r3, r4, r5, pc}

000d50f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50f2:	b530      	push	{r4, r5, lr}
   d50f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50f6:	2300      	movs	r3, #0
   d50f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50fc:	2a01      	cmp	r2, #1
   d50fe:	bf98      	it	ls
   d5100:	220a      	movls	r2, #10
   d5102:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5104:	460d      	mov	r5, r1
   d5106:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d510a:	fb01 5312 	mls	r3, r1, r2, r5
   d510e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5112:	2b09      	cmp	r3, #9
   d5114:	bf94      	ite	ls
   d5116:	3330      	addls	r3, #48	; 0x30
   d5118:	3337      	addhi	r3, #55	; 0x37
   d511a:	b2db      	uxtb	r3, r3
  } while(n);
   d511c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d511e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5122:	d9ef      	bls.n	d5104 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5124:	4621      	mov	r1, r4
   d5126:	f7ff ffb5 	bl	d5094 <_ZN5Print5writeEPKc>
}
   d512a:	b00b      	add	sp, #44	; 0x2c
   d512c:	bd30      	pop	{r4, r5, pc}
	...

000d5130 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5134:	ec55 4b10 	vmov	r4, r5, d0
   d5138:	4606      	mov	r6, r0
   d513a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d513c:	ee10 2a10 	vmov	r2, s0
   d5140:	ee10 0a10 	vmov	r0, s0
   d5144:	462b      	mov	r3, r5
   d5146:	4629      	mov	r1, r5
   d5148:	f002 fc9a 	bl	d7a80 <__aeabi_dcmpun>
   d514c:	b140      	cbz	r0, d5160 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d514e:	4953      	ldr	r1, [pc, #332]	; (d529c <_ZN5Print10printFloatEdh+0x16c>)
   d5150:	4630      	mov	r0, r6
   d5152:	f7ff ff9f 	bl	d5094 <_ZN5Print5writeEPKc>
   d5156:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5158:	4650      	mov	r0, sl
   d515a:	b003      	add	sp, #12
   d515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5160:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5164:	4b4e      	ldr	r3, [pc, #312]	; (d52a0 <_ZN5Print10printFloatEdh+0x170>)
   d5166:	f04f 32ff 	mov.w	r2, #4294967295
   d516a:	4620      	mov	r0, r4
   d516c:	4649      	mov	r1, r9
   d516e:	f002 fc87 	bl	d7a80 <__aeabi_dcmpun>
   d5172:	b948      	cbnz	r0, d5188 <_ZN5Print10printFloatEdh+0x58>
   d5174:	4b4a      	ldr	r3, [pc, #296]	; (d52a0 <_ZN5Print10printFloatEdh+0x170>)
   d5176:	f04f 32ff 	mov.w	r2, #4294967295
   d517a:	4620      	mov	r0, r4
   d517c:	4649      	mov	r1, r9
   d517e:	f002 fc61 	bl	d7a44 <__aeabi_dcmple>
   d5182:	b908      	cbnz	r0, d5188 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5184:	4947      	ldr	r1, [pc, #284]	; (d52a4 <_ZN5Print10printFloatEdh+0x174>)
   d5186:	e7e3      	b.n	d5150 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5188:	4b47      	ldr	r3, [pc, #284]	; (d52a8 <_ZN5Print10printFloatEdh+0x178>)
   d518a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d518e:	4620      	mov	r0, r4
   d5190:	4629      	mov	r1, r5
   d5192:	f002 fc6b 	bl	d7a6c <__aeabi_dcmpgt>
   d5196:	b108      	cbz	r0, d519c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5198:	4944      	ldr	r1, [pc, #272]	; (d52ac <_ZN5Print10printFloatEdh+0x17c>)
   d519a:	e7d9      	b.n	d5150 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d519c:	4b44      	ldr	r3, [pc, #272]	; (d52b0 <_ZN5Print10printFloatEdh+0x180>)
   d519e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d51a2:	4620      	mov	r0, r4
   d51a4:	4629      	mov	r1, r5
   d51a6:	f002 fc43 	bl	d7a30 <__aeabi_dcmplt>
   d51aa:	2800      	cmp	r0, #0
   d51ac:	d1f4      	bne.n	d5198 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d51ae:	2200      	movs	r2, #0
   d51b0:	2300      	movs	r3, #0
   d51b2:	4620      	mov	r0, r4
   d51b4:	4629      	mov	r1, r5
   d51b6:	f002 fc3b 	bl	d7a30 <__aeabi_dcmplt>
   d51ba:	b1d0      	cbz	r0, d51f2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d51bc:	212d      	movs	r1, #45	; 0x2d
   d51be:	4630      	mov	r0, r6
   d51c0:	f7ff ff7e 	bl	d50c0 <_ZN5Print5printEc>
     number = -number;
   d51c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d51c8:	4682      	mov	sl, r0
     number = -number;
   d51ca:	461d      	mov	r5, r3
  double rounding = 0.5;
   d51cc:	4939      	ldr	r1, [pc, #228]	; (d52b4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d51ce:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d52bc <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d51d2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d51d6:	2000      	movs	r0, #0
    rounding /= 10.0;
   d51d8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d51dc:	fa5f f38b 	uxtb.w	r3, fp
   d51e0:	429f      	cmp	r7, r3
   d51e2:	d908      	bls.n	d51f6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d51e4:	4642      	mov	r2, r8
   d51e6:	464b      	mov	r3, r9
   d51e8:	f002 fada 	bl	d77a0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d51ec:	f10b 0b01 	add.w	fp, fp, #1
   d51f0:	e7f4      	b.n	d51dc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d51f2:	4682      	mov	sl, r0
   d51f4:	e7ea      	b.n	d51cc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d51f6:	4622      	mov	r2, r4
   d51f8:	462b      	mov	r3, r5
   d51fa:	f001 fff1 	bl	d71e0 <__adddf3>
   d51fe:	460d      	mov	r5, r1
   d5200:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5202:	f002 fc7b 	bl	d7afc <__aeabi_d2uiz>
   d5206:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5208:	f002 f926 	bl	d7458 <__aeabi_ui2d>
   d520c:	4602      	mov	r2, r0
   d520e:	460b      	mov	r3, r1
   d5210:	4620      	mov	r0, r4
   d5212:	4629      	mov	r1, r5
   d5214:	f001 ffe2 	bl	d71dc <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5218:	220a      	movs	r2, #10
   d521a:	4604      	mov	r4, r0
   d521c:	460d      	mov	r5, r1
   d521e:	4630      	mov	r0, r6
   d5220:	4641      	mov	r1, r8
   d5222:	f7ff ff66 	bl	d50f2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5226:	4482      	add	sl, r0
  if (digits > 0) {
   d5228:	b127      	cbz	r7, d5234 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d522a:	4923      	ldr	r1, [pc, #140]	; (d52b8 <_ZN5Print10printFloatEdh+0x188>)
   d522c:	4630      	mov	r0, r6
   d522e:	f7ff ff31 	bl	d5094 <_ZN5Print5writeEPKc>
    n += print(".");
   d5232:	4482      	add	sl, r0
    remainder *= 10.0;
   d5234:	f8df 9084 	ldr.w	r9, [pc, #132]	; d52bc <_ZN5Print10printFloatEdh+0x18c>
   d5238:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d523c:	3f01      	subs	r7, #1
   d523e:	b2ff      	uxtb	r7, r7
   d5240:	2fff      	cmp	r7, #255	; 0xff
   d5242:	d089      	beq.n	d5158 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5244:	4642      	mov	r2, r8
   d5246:	464b      	mov	r3, r9
   d5248:	4620      	mov	r0, r4
   d524a:	4629      	mov	r1, r5
   d524c:	f002 f97e 	bl	d754c <__aeabi_dmul>
   d5250:	4604      	mov	r4, r0
   d5252:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5254:	f002 fc2a 	bl	d7aac <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5258:	f1b0 0b00 	subs.w	fp, r0, #0
   d525c:	da1a      	bge.n	d5294 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d525e:	212d      	movs	r1, #45	; 0x2d
   d5260:	4630      	mov	r0, r6
   d5262:	f7ff ff2d 	bl	d50c0 <_ZN5Print5printEc>
            val = -n;
   d5266:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d526a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d526c:	220a      	movs	r2, #10
   d526e:	4630      	mov	r0, r6
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	f7ff ff3e 	bl	d50f2 <_ZN5Print11printNumberEmh>
   d5276:	9b01      	ldr	r3, [sp, #4]
   d5278:	4418      	add	r0, r3
    n += print(toPrint);
   d527a:	4482      	add	sl, r0
    remainder -= toPrint;
   d527c:	4658      	mov	r0, fp
   d527e:	f002 f8fb 	bl	d7478 <__aeabi_i2d>
   d5282:	4602      	mov	r2, r0
   d5284:	460b      	mov	r3, r1
   d5286:	4620      	mov	r0, r4
   d5288:	4629      	mov	r1, r5
   d528a:	f001 ffa7 	bl	d71dc <__aeabi_dsub>
   d528e:	4604      	mov	r4, r0
   d5290:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5292:	e7d3      	b.n	d523c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5294:	4659      	mov	r1, fp
        size_t t = 0;
   d5296:	2300      	movs	r3, #0
   d5298:	e7e8      	b.n	d526c <_ZN5Print10printFloatEdh+0x13c>
   d529a:	bf00      	nop
   d529c:	000d7e3c 	.word	0x000d7e3c
   d52a0:	7fefffff 	.word	0x7fefffff
   d52a4:	000d7e40 	.word	0x000d7e40
   d52a8:	41efffff 	.word	0x41efffff
   d52ac:	000d7e44 	.word	0x000d7e44
   d52b0:	c1efffff 	.word	0xc1efffff
   d52b4:	3fe00000 	.word	0x3fe00000
   d52b8:	000d7e48 	.word	0x000d7e48
   d52bc:	40240000 	.word	0x40240000

000d52c0 <_ZN5Print5printEfi>:
{
   d52c0:	b538      	push	{r3, r4, r5, lr}
   d52c2:	4604      	mov	r4, r0
   d52c4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d52c8:	b2cd      	uxtb	r5, r1
   d52ca:	f002 f8e7 	bl	d749c <__aeabi_f2d>
   d52ce:	ec41 0b10 	vmov	d0, r0, r1
   d52d2:	4629      	mov	r1, r5
   d52d4:	4620      	mov	r0, r4
}
   d52d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d52da:	f7ff bf29 	b.w	d5130 <_ZN5Print10printFloatEdh>
	...

000d52e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d52e0:	4b01      	ldr	r3, [pc, #4]	; (d52e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d52e2:	4a02      	ldr	r2, [pc, #8]	; (d52ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d52e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d52e6:	4770      	bx	lr
   d52e8:	2003e5b8 	.word	0x2003e5b8
   d52ec:	000d7e4a 	.word	0x000d7e4a

000d52f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d52f0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d52f2:	2000      	movs	r0, #0
   d52f4:	f7ff fdae 	bl	d4e54 <spark_sync_time_pending>
   d52f8:	b128      	cbz	r0, d5306 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52fa:	f7ff fda3 	bl	d4e44 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d52fe:	f080 0001 	eor.w	r0, r0, #1
   d5302:	b2c0      	uxtb	r0, r0
    }
   d5304:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5306:	2001      	movs	r0, #1
   d5308:	e7fc      	b.n	d5304 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d530c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d530c:	b530      	push	{r4, r5, lr}
   d530e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d5310:	4818      	ldr	r0, [pc, #96]	; (d5374 <_ZN9TimeClass7timeStrEx+0x68>)
   d5312:	e9d0 1000 	ldrd	r1, r0, [r0]
   d5316:	1852      	adds	r2, r2, r1
   d5318:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d531c:	4816      	ldr	r0, [pc, #88]	; (d5378 <_ZN9TimeClass7timeStrEx+0x6c>)
   d531e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d5322:	1852      	adds	r2, r2, r1
{
   d5324:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d5326:	eb40 0303 	adc.w	r3, r0, r3
   d532a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d532e:	2224      	movs	r2, #36	; 0x24
   d5330:	eb0d 0002 	add.w	r0, sp, r2
   d5334:	2100      	movs	r1, #0
   d5336:	f002 fc8b 	bl	d7c50 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d533a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d533c:	a909      	add	r1, sp, #36	; 0x24
   d533e:	4668      	mov	r0, sp
   d5340:	f7ff fdc8 	bl	d4ed4 <localtime_r>
    char ascstr[26] = {};
   d5344:	2216      	movs	r2, #22
   d5346:	4629      	mov	r1, r5
   d5348:	a803      	add	r0, sp, #12
   d534a:	9502      	str	r5, [sp, #8]
   d534c:	f002 fc80 	bl	d7c50 <memset>
    asctime_r(&calendar_time, ascstr);
   d5350:	a902      	add	r1, sp, #8
   d5352:	a809      	add	r0, sp, #36	; 0x24
   d5354:	f002 fc42 	bl	d7bdc <asctime_r>
    int len = strlen(ascstr);
   d5358:	a802      	add	r0, sp, #8
   d535a:	f002 fca5 	bl	d7ca8 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d535e:	ab12      	add	r3, sp, #72	; 0x48
   d5360:	4418      	add	r0, r3
    return String(ascstr);
   d5362:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d5364:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d5368:	4620      	mov	r0, r4
   d536a:	f7ff fe60 	bl	d502e <_ZN6StringC1EPKc>
}
   d536e:	4620      	mov	r0, r4
   d5370:	b013      	add	sp, #76	; 0x4c
   d5372:	bd30      	pop	{r4, r5, pc}
   d5374:	2003e5c8 	.word	0x2003e5c8
   d5378:	2003e5c0 	.word	0x2003e5c0

000d537c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d537c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d537e:	2000      	movs	r0, #0
   d5380:	f7ff fbdc 	bl	d4b3c <hal_rtc_time_is_valid>
    if (rtcstate)
   d5384:	4604      	mov	r4, r0
   d5386:	b9a0      	cbnz	r0, d53b2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5388:	f7ff fcc0 	bl	d4d0c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d538c:	2801      	cmp	r0, #1
   d538e:	d110      	bne.n	d53b2 <_ZN9TimeClass7isValidEv+0x36>
   d5390:	4620      	mov	r0, r4
   d5392:	f7ff fcd3 	bl	d4d3c <system_thread_get_state>
   d5396:	b960      	cbnz	r0, d53b2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5398:	f7ff ffaa 	bl	d52f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d539c:	b910      	cbnz	r0, d53a4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d539e:	f7ff fd49 	bl	d4e34 <spark_process>
        while (_while() && !_condition()) {
   d53a2:	e7f9      	b.n	d5398 <_ZN9TimeClass7isValidEv+0x1c>
   d53a4:	f7ff ffa4 	bl	d52f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d53a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d53ac:	2000      	movs	r0, #0
   d53ae:	f7ff bbc5 	b.w	d4b3c <hal_rtc_time_is_valid>
}
   d53b2:	4620      	mov	r0, r4
   d53b4:	bd10      	pop	{r4, pc}

000d53b6 <_ZN9TimeClass3nowEv>:
{
   d53b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d53b8:	f7ff ffe0 	bl	d537c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d53bc:	2210      	movs	r2, #16
   d53be:	2100      	movs	r1, #0
   d53c0:	4668      	mov	r0, sp
   d53c2:	f002 fc45 	bl	d7c50 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d53c6:	2100      	movs	r1, #0
   d53c8:	4668      	mov	r0, sp
   d53ca:	f7ff fbbf 	bl	d4b4c <hal_rtc_get_time>
}
   d53ce:	9800      	ldr	r0, [sp, #0]
   d53d0:	b005      	add	sp, #20
   d53d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d53d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d53d8:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d53de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d53e0:	4770      	bx	lr
   d53e2:	bf00      	nop
   d53e4:	2003e50c 	.word	0x2003e50c
   d53e8:	2003e5bc 	.word	0x2003e5bc

000d53ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7ff bc9d 	b.w	d4d2c <system_delay_ms>
	...

000d53f4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d53f4:	4b01      	ldr	r3, [pc, #4]	; (d53fc <_GLOBAL__sub_I_RGB+0x8>)
   d53f6:	2200      	movs	r2, #0
   d53f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d53fa:	4770      	bx	lr
   d53fc:	2003e5d0 	.word	0x2003e5d0

000d5400 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5400:	4b01      	ldr	r3, [pc, #4]	; (d5408 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5402:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5404:	4770      	bx	lr
   d5406:	bf00      	nop
   d5408:	2003e514 	.word	0x2003e514

000d540c <serialEventRun>:
{
   d540c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d540e:	4b0b      	ldr	r3, [pc, #44]	; (d543c <serialEventRun+0x30>)
   d5410:	b143      	cbz	r3, d5424 <serialEventRun+0x18>
   d5412:	f000 f961 	bl	d56d8 <_Z16_fetch_usbserialv>
   d5416:	6803      	ldr	r3, [r0, #0]
   d5418:	691b      	ldr	r3, [r3, #16]
   d541a:	4798      	blx	r3
   d541c:	2800      	cmp	r0, #0
   d541e:	dd01      	ble.n	d5424 <serialEventRun+0x18>
        serialEvent();
   d5420:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5424:	4b06      	ldr	r3, [pc, #24]	; (d5440 <serialEventRun+0x34>)
   d5426:	b143      	cbz	r3, d543a <serialEventRun+0x2e>
   d5428:	f000 f9d4 	bl	d57d4 <_Z22__fetch_global_Serial1v>
   d542c:	6803      	ldr	r3, [r0, #0]
   d542e:	691b      	ldr	r3, [r3, #16]
   d5430:	4798      	blx	r3
   d5432:	2800      	cmp	r0, #0
   d5434:	dd01      	ble.n	d543a <serialEventRun+0x2e>
        serialEvent1();
   d5436:	f3af 8000 	nop.w
}
   d543a:	bd08      	pop	{r3, pc}
	...

000d5444 <_post_loop>:
{
   d5444:	b508      	push	{r3, lr}
	serialEventRun();
   d5446:	f7ff ffe1 	bl	d540c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d544a:	f7ff fb6f 	bl	d4b2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d544e:	4b01      	ldr	r3, [pc, #4]	; (d5454 <_post_loop+0x10>)
   d5450:	6018      	str	r0, [r3, #0]
}
   d5452:	bd08      	pop	{r3, pc}
   d5454:	2003e73c 	.word	0x2003e73c

000d5458 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5458:	4805      	ldr	r0, [pc, #20]	; (d5470 <_Z33system_initialize_user_backup_ramv+0x18>)
   d545a:	4a06      	ldr	r2, [pc, #24]	; (d5474 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d545c:	4906      	ldr	r1, [pc, #24]	; (d5478 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d545e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5460:	1a12      	subs	r2, r2, r0
   d5462:	f002 fbe7 	bl	d7c34 <memcpy>
    __backup_sram_signature = signature;
   d5466:	4b05      	ldr	r3, [pc, #20]	; (d547c <_Z33system_initialize_user_backup_ramv+0x24>)
   d5468:	4a05      	ldr	r2, [pc, #20]	; (d5480 <_Z33system_initialize_user_backup_ramv+0x28>)
   d546a:	601a      	str	r2, [r3, #0]
}
   d546c:	bd08      	pop	{r3, pc}
   d546e:	bf00      	nop
   d5470:	2003f400 	.word	0x2003f400
   d5474:	2003f404 	.word	0x2003f404
   d5478:	000d8020 	.word	0x000d8020
   d547c:	2003f400 	.word	0x2003f400
   d5480:	9a271c1e 	.word	0x9a271c1e

000d5484 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5484:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5486:	2300      	movs	r3, #0
   d5488:	9300      	str	r3, [sp, #0]
   d548a:	461a      	mov	r2, r3
   d548c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5490:	f7ff fc66 	bl	d4d60 <system_ctrl_set_result>
}
   d5494:	b003      	add	sp, #12
   d5496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d549c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d549c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d549e:	8843      	ldrh	r3, [r0, #2]
   d54a0:	2b0a      	cmp	r3, #10
   d54a2:	d008      	beq.n	d54b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d54a4:	2b50      	cmp	r3, #80	; 0x50
   d54a6:	d10b      	bne.n	d54c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d54a8:	4b09      	ldr	r3, [pc, #36]	; (d54d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d54aa:	681b      	ldr	r3, [r3, #0]
   d54ac:	b14b      	cbz	r3, d54c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d54ae:	b003      	add	sp, #12
   d54b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d54b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d54b6:	f7ff ffe5 	bl	d5484 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d54ba:	b003      	add	sp, #12
   d54bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54c0:	2300      	movs	r3, #0
   d54c2:	9300      	str	r3, [sp, #0]
   d54c4:	461a      	mov	r2, r3
   d54c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54ca:	f7ff fc49 	bl	d4d60 <system_ctrl_set_result>
}
   d54ce:	e7f4      	b.n	d54ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d54d0:	2003e5e4 	.word	0x2003e5e4

000d54d4 <module_user_init_hook>:
{
   d54d4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d54d6:	4812      	ldr	r0, [pc, #72]	; (d5520 <module_user_init_hook+0x4c>)
   d54d8:	2100      	movs	r1, #0
   d54da:	f7ff fcf3 	bl	d4ec4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d54de:	4b11      	ldr	r3, [pc, #68]	; (d5524 <module_user_init_hook+0x50>)
   d54e0:	681a      	ldr	r2, [r3, #0]
   d54e2:	4b11      	ldr	r3, [pc, #68]	; (d5528 <module_user_init_hook+0x54>)
   d54e4:	429a      	cmp	r2, r3
   d54e6:	4b11      	ldr	r3, [pc, #68]	; (d552c <module_user_init_hook+0x58>)
   d54e8:	bf0c      	ite	eq
   d54ea:	2201      	moveq	r2, #1
   d54ec:	2200      	movne	r2, #0
   d54ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d54f0:	d001      	beq.n	d54f6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d54f2:	f7ff ffb1 	bl	d5458 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d54f6:	f7ff fb09 	bl	d4b0c <HAL_RNG_GetRandomNumber>
   d54fa:	4604      	mov	r4, r0
    srand(seed);
   d54fc:	f002 fbb0 	bl	d7c60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5500:	4b0b      	ldr	r3, [pc, #44]	; (d5530 <module_user_init_hook+0x5c>)
   d5502:	b113      	cbz	r3, d550a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5504:	4620      	mov	r0, r4
   d5506:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d550a:	2100      	movs	r1, #0
   d550c:	4808      	ldr	r0, [pc, #32]	; (d5530 <module_user_init_hook+0x5c>)
   d550e:	f7ff fca9 	bl	d4e64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5516:	4807      	ldr	r0, [pc, #28]	; (d5534 <module_user_init_hook+0x60>)
   d5518:	2100      	movs	r1, #0
   d551a:	f7ff bc17 	b.w	d4d4c <system_ctrl_set_app_request_handler>
   d551e:	bf00      	nop
   d5520:	000d5401 	.word	0x000d5401
   d5524:	2003f400 	.word	0x2003f400
   d5528:	9a271c1e 	.word	0x9a271c1e
   d552c:	2003e5e0 	.word	0x2003e5e0
   d5530:	00000000 	.word	0x00000000
   d5534:	000d549d 	.word	0x000d549d

000d5538 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5538:	4770      	bx	lr

000d553a <_ZN9IPAddressD0Ev>:
   d553a:	b510      	push	{r4, lr}
   d553c:	2118      	movs	r1, #24
   d553e:	4604      	mov	r4, r0
   d5540:	f000 fb26 	bl	d5b90 <_ZdlPvj>
   d5544:	4620      	mov	r0, r4
   d5546:	bd10      	pop	{r4, pc}

000d5548 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5548:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d554a:	7d03      	ldrb	r3, [r0, #20]
   d554c:	2b06      	cmp	r3, #6
{
   d554e:	b08d      	sub	sp, #52	; 0x34
   d5550:	460e      	mov	r6, r1
   d5552:	f100 0704 	add.w	r7, r0, #4
   d5556:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d555a:	d012      	beq.n	d5582 <_ZNK9IPAddress7printToER5Print+0x3a>
   d555c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d5560:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5564:	220a      	movs	r2, #10
   d5566:	4630      	mov	r0, r6
   d5568:	f7ff fdc3 	bl	d50f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d556c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d556e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5570:	d019      	beq.n	d55a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5572:	2c00      	cmp	r4, #0
   d5574:	d0f4      	beq.n	d5560 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5576:	212e      	movs	r1, #46	; 0x2e
   d5578:	4630      	mov	r0, r6
   d557a:	f7ff fda1 	bl	d50c0 <_ZN5Print5printEc>
   d557e:	4404      	add	r4, r0
   d5580:	e7ee      	b.n	d5560 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5582:	232f      	movs	r3, #47	; 0x2f
   d5584:	466a      	mov	r2, sp
   d5586:	4639      	mov	r1, r7
   d5588:	200a      	movs	r0, #10
		buf[0] = 0;
   d558a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d558e:	f7ff faed 	bl	d4b6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5592:	4668      	mov	r0, sp
   d5594:	f002 fb88 	bl	d7ca8 <strlen>
   d5598:	6833      	ldr	r3, [r6, #0]
   d559a:	4602      	mov	r2, r0
   d559c:	68db      	ldr	r3, [r3, #12]
   d559e:	4669      	mov	r1, sp
   d55a0:	4630      	mov	r0, r6
   d55a2:	4798      	blx	r3
   d55a4:	4604      	mov	r4, r0
    }
    return n;
}
   d55a6:	4620      	mov	r0, r4
   d55a8:	b00d      	add	sp, #52	; 0x34
   d55aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d55ac:	b510      	push	{r4, lr}
   d55ae:	4b05      	ldr	r3, [pc, #20]	; (d55c4 <_ZN9IPAddressC1Ev+0x18>)
   d55b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55b2:	2211      	movs	r2, #17
   d55b4:	f840 3b04 	str.w	r3, [r0], #4
   d55b8:	2100      	movs	r1, #0
   d55ba:	f002 fb49 	bl	d7c50 <memset>
}
   d55be:	4620      	mov	r0, r4
   d55c0:	bd10      	pop	{r4, pc}
   d55c2:	bf00      	nop
   d55c4:	000d7e74 	.word	0x000d7e74

000d55c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d55c8:	4603      	mov	r3, r0
   d55ca:	4a07      	ldr	r2, [pc, #28]	; (d55e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d55cc:	b510      	push	{r4, lr}
   d55ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d55d2:	f101 0210 	add.w	r2, r1, #16
   d55d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d55da:	f843 4b04 	str.w	r4, [r3], #4
   d55de:	4291      	cmp	r1, r2
   d55e0:	d1f9      	bne.n	d55d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d55e2:	780a      	ldrb	r2, [r1, #0]
   d55e4:	701a      	strb	r2, [r3, #0]
}
   d55e6:	bd10      	pop	{r4, pc}
   d55e8:	000d7e74 	.word	0x000d7e74

000d55ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d55ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d55ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d55f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d55f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d55fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d55fe:	2304      	movs	r3, #4
   d5600:	6041      	str	r1, [r0, #4]
   d5602:	7503      	strb	r3, [r0, #20]
}
   d5604:	bd10      	pop	{r4, pc}

000d5606 <_ZN9IPAddressaSEPKh>:
{
   d5606:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5608:	78cb      	ldrb	r3, [r1, #3]
   d560a:	9300      	str	r3, [sp, #0]
   d560c:	788b      	ldrb	r3, [r1, #2]
   d560e:	784a      	ldrb	r2, [r1, #1]
   d5610:	7809      	ldrb	r1, [r1, #0]
   d5612:	f7ff ffeb 	bl	d55ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5616:	b002      	add	sp, #8
   d5618:	bd10      	pop	{r4, pc}

000d561a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d561a:	7441      	strb	r1, [r0, #17]
}
   d561c:	4770      	bx	lr

000d561e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d561e:	4770      	bx	lr

000d5620 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5620:	4770      	bx	lr

000d5622 <_ZN9USBSerial4readEv>:
{
   d5622:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5624:	2100      	movs	r1, #0
   d5626:	7c00      	ldrb	r0, [r0, #16]
   d5628:	f7ff fb50 	bl	d4ccc <HAL_USB_USART_Receive_Data>
}
   d562c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5630:	bd08      	pop	{r3, pc}

000d5632 <_ZN9USBSerial4peekEv>:
{
   d5632:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5634:	2101      	movs	r1, #1
   d5636:	7c00      	ldrb	r0, [r0, #16]
   d5638:	f7ff fb48 	bl	d4ccc <HAL_USB_USART_Receive_Data>
}
   d563c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5640:	bd08      	pop	{r3, pc}

000d5642 <_ZN9USBSerial17availableForWriteEv>:
{
   d5642:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5644:	7c00      	ldrb	r0, [r0, #16]
   d5646:	f7ff fb39 	bl	d4cbc <HAL_USB_USART_Available_Data_For_Write>
}
   d564a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d564e:	bd08      	pop	{r3, pc}

000d5650 <_ZN9USBSerial9availableEv>:
{
   d5650:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5652:	7c00      	ldrb	r0, [r0, #16]
   d5654:	f7ff fb2a 	bl	d4cac <HAL_USB_USART_Available_Data>
}
   d5658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d565c:	bd08      	pop	{r3, pc}

000d565e <_ZN9USBSerial5writeEh>:
{
   d565e:	b513      	push	{r0, r1, r4, lr}
   d5660:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5662:	7c00      	ldrb	r0, [r0, #16]
{
   d5664:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5666:	f7ff fb29 	bl	d4cbc <HAL_USB_USART_Available_Data_For_Write>
   d566a:	2800      	cmp	r0, #0
   d566c:	9901      	ldr	r1, [sp, #4]
   d566e:	dc01      	bgt.n	d5674 <_ZN9USBSerial5writeEh+0x16>
   d5670:	7c60      	ldrb	r0, [r4, #17]
   d5672:	b120      	cbz	r0, d567e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5674:	7c20      	ldrb	r0, [r4, #16]
   d5676:	f7ff fb31 	bl	d4cdc <HAL_USB_USART_Send_Data>
   d567a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d567e:	b002      	add	sp, #8
   d5680:	bd10      	pop	{r4, pc}

000d5682 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5682:	7c00      	ldrb	r0, [r0, #16]
   d5684:	f7ff bb32 	b.w	d4cec <HAL_USB_USART_Flush_Data>

000d5688 <_ZN9USBSerialD0Ev>:
   d5688:	b510      	push	{r4, lr}
   d568a:	2114      	movs	r1, #20
   d568c:	4604      	mov	r4, r0
   d568e:	f000 fa7f 	bl	d5b90 <_ZdlPvj>
   d5692:	4620      	mov	r0, r4
   d5694:	bd10      	pop	{r4, pc}
	...

000d5698 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5698:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d569a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d569e:	4604      	mov	r4, r0
   d56a0:	4608      	mov	r0, r1
   d56a2:	2100      	movs	r1, #0
   d56a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d56a8:	4b04      	ldr	r3, [pc, #16]	; (d56bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d56aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d56ac:	2301      	movs	r3, #1
  _serial = serial;
   d56ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d56b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d56b2:	4611      	mov	r1, r2
   d56b4:	f7ff faea 	bl	d4c8c <HAL_USB_USART_Init>
}
   d56b8:	4620      	mov	r0, r4
   d56ba:	bd10      	pop	{r4, pc}
   d56bc:	000d7e88 	.word	0x000d7e88

000d56c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d56c0:	7c00      	ldrb	r0, [r0, #16]
   d56c2:	2200      	movs	r2, #0
   d56c4:	f7ff baea 	b.w	d4c9c <HAL_USB_USART_Begin>

000d56c8 <_Z19acquireSerialBufferv>:
{
   d56c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56ca:	2214      	movs	r2, #20
{
   d56cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56ce:	2100      	movs	r1, #0
   d56d0:	f002 fabe 	bl	d7c50 <memset>
}
   d56d4:	4620      	mov	r0, r4
   d56d6:	bd10      	pop	{r4, pc}

000d56d8 <_Z16_fetch_usbserialv>:
{
   d56d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56da:	4c0f      	ldr	r4, [pc, #60]	; (d5718 <_Z16_fetch_usbserialv+0x40>)
{
   d56dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56de:	a803      	add	r0, sp, #12
   d56e0:	f7ff fff2 	bl	d56c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56e4:	7821      	ldrb	r1, [r4, #0]
   d56e6:	f3bf 8f5b 	dmb	ish
   d56ea:	f011 0101 	ands.w	r1, r1, #1
   d56ee:	d10f      	bne.n	d5710 <_Z16_fetch_usbserialv+0x38>
   d56f0:	4620      	mov	r0, r4
   d56f2:	9101      	str	r1, [sp, #4]
   d56f4:	f7fe fcd3 	bl	d409e <__cxa_guard_acquire>
   d56f8:	9901      	ldr	r1, [sp, #4]
   d56fa:	b148      	cbz	r0, d5710 <_Z16_fetch_usbserialv+0x38>
   d56fc:	aa03      	add	r2, sp, #12
   d56fe:	4807      	ldr	r0, [pc, #28]	; (d571c <_Z16_fetch_usbserialv+0x44>)
   d5700:	f7ff ffca 	bl	d5698 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5704:	4620      	mov	r0, r4
   d5706:	f7fe fccf 	bl	d40a8 <__cxa_guard_release>
   d570a:	4805      	ldr	r0, [pc, #20]	; (d5720 <_Z16_fetch_usbserialv+0x48>)
   d570c:	f002 fa8c 	bl	d7c28 <atexit>
	return _usbserial;
}
   d5710:	4802      	ldr	r0, [pc, #8]	; (d571c <_Z16_fetch_usbserialv+0x44>)
   d5712:	b008      	add	sp, #32
   d5714:	bd10      	pop	{r4, pc}
   d5716:	bf00      	nop
   d5718:	2003e5e8 	.word	0x2003e5e8
   d571c:	2003e5ec 	.word	0x2003e5ec
   d5720:	000d561f 	.word	0x000d561f

000d5724 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5724:	f7ff b9ea 	b.w	d4afc <HAL_Interrupts_Disable_All>

000d5728 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5728:	f7ff b9e0 	b.w	d4aec <HAL_Interrupts_Enable_All>

000d572c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d572c:	4770      	bx	lr

000d572e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d572e:	7441      	strb	r1, [r0, #17]
}
   d5730:	4770      	bx	lr

000d5732 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5732:	4770      	bx	lr

000d5734 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5734:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5736:	7c00      	ldrb	r0, [r0, #16]
   d5738:	f7ff fa58 	bl	d4bec <hal_usart_available_data_for_write>
}
   d573c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5740:	bd08      	pop	{r3, pc}

000d5742 <_ZN11USARTSerial9availableEv>:
{
   d5742:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5744:	7c00      	ldrb	r0, [r0, #16]
   d5746:	f7ff fa29 	bl	d4b9c <hal_usart_available>
}
   d574a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d574e:	bd08      	pop	{r3, pc}

000d5750 <_ZN11USARTSerial4peekEv>:
{
   d5750:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5752:	7c00      	ldrb	r0, [r0, #16]
   d5754:	f7ff fa32 	bl	d4bbc <hal_usart_peek>
}
   d5758:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d575c:	bd08      	pop	{r3, pc}

000d575e <_ZN11USARTSerial4readEv>:
{
   d575e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5760:	7c00      	ldrb	r0, [r0, #16]
   d5762:	f7ff fa23 	bl	d4bac <hal_usart_read>
}
   d5766:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d576a:	bd08      	pop	{r3, pc}

000d576c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d576c:	7c00      	ldrb	r0, [r0, #16]
   d576e:	f7ff ba2d 	b.w	d4bcc <hal_usart_flush>

000d5772 <_ZN11USARTSerial5writeEh>:
{
   d5772:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5774:	7c45      	ldrb	r5, [r0, #17]
{
   d5776:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5778:	b12d      	cbz	r5, d5786 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d577a:	7c20      	ldrb	r0, [r4, #16]
}
   d577c:	b003      	add	sp, #12
   d577e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5782:	f7ff ba03 	b.w	d4b8c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5786:	7c00      	ldrb	r0, [r0, #16]
   d5788:	9101      	str	r1, [sp, #4]
   d578a:	f7ff fa2f 	bl	d4bec <hal_usart_available_data_for_write>
   d578e:	2800      	cmp	r0, #0
   d5790:	9901      	ldr	r1, [sp, #4]
   d5792:	dcf2      	bgt.n	d577a <_ZN11USARTSerial5writeEh+0x8>
}
   d5794:	4628      	mov	r0, r5
   d5796:	b003      	add	sp, #12
   d5798:	bd30      	pop	{r4, r5, pc}

000d579a <_ZN11USARTSerialD0Ev>:
   d579a:	b510      	push	{r4, lr}
   d579c:	2114      	movs	r1, #20
   d579e:	4604      	mov	r4, r0
   d57a0:	f000 f9f6 	bl	d5b90 <_ZdlPvj>
   d57a4:	4620      	mov	r0, r4
   d57a6:	bd10      	pop	{r4, pc}

000d57a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d57a8:	b510      	push	{r4, lr}
   d57aa:	f04f 0c00 	mov.w	ip, #0
   d57ae:	4604      	mov	r4, r0
   d57b0:	4608      	mov	r0, r1
   d57b2:	4611      	mov	r1, r2
   d57b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d57bc:	4a04      	ldr	r2, [pc, #16]	; (d57d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d57be:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d57c0:	2201      	movs	r2, #1
  _serial = serial;
   d57c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d57c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d57c6:	461a      	mov	r2, r3
   d57c8:	f7ff f9d8 	bl	d4b7c <hal_usart_init>
}
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}
   d57d0:	000d7eb8 	.word	0x000d7eb8

000d57d4 <_Z22__fetch_global_Serial1v>:
{
   d57d4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d57d6:	4c0d      	ldr	r4, [pc, #52]	; (d580c <_Z22__fetch_global_Serial1v+0x38>)
   d57d8:	7821      	ldrb	r1, [r4, #0]
   d57da:	f3bf 8f5b 	dmb	ish
   d57de:	f011 0101 	ands.w	r1, r1, #1
   d57e2:	d110      	bne.n	d5806 <_Z22__fetch_global_Serial1v+0x32>
   d57e4:	4620      	mov	r0, r4
   d57e6:	9101      	str	r1, [sp, #4]
   d57e8:	f7fe fc59 	bl	d409e <__cxa_guard_acquire>
   d57ec:	9901      	ldr	r1, [sp, #4]
   d57ee:	b150      	cbz	r0, d5806 <_Z22__fetch_global_Serial1v+0x32>
   d57f0:	4b07      	ldr	r3, [pc, #28]	; (d5810 <_Z22__fetch_global_Serial1v+0x3c>)
   d57f2:	4a08      	ldr	r2, [pc, #32]	; (d5814 <_Z22__fetch_global_Serial1v+0x40>)
   d57f4:	4808      	ldr	r0, [pc, #32]	; (d5818 <_Z22__fetch_global_Serial1v+0x44>)
   d57f6:	f7ff ffd7 	bl	d57a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d57fa:	4620      	mov	r0, r4
   d57fc:	f7fe fc54 	bl	d40a8 <__cxa_guard_release>
   d5800:	4806      	ldr	r0, [pc, #24]	; (d581c <_Z22__fetch_global_Serial1v+0x48>)
   d5802:	f002 fa11 	bl	d7c28 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5806:	4804      	ldr	r0, [pc, #16]	; (d5818 <_Z22__fetch_global_Serial1v+0x44>)
   d5808:	b002      	add	sp, #8
   d580a:	bd10      	pop	{r4, pc}
   d580c:	2003e600 	.word	0x2003e600
   d5810:	2003e688 	.word	0x2003e688
   d5814:	2003e604 	.word	0x2003e604
   d5818:	2003e70c 	.word	0x2003e70c
   d581c:	000d5733 	.word	0x000d5733

000d5820 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5820:	4770      	bx	lr

000d5822 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5824:	4606      	mov	r6, r0
   d5826:	4615      	mov	r5, r2
   d5828:	460c      	mov	r4, r1
   d582a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d582c:	42bc      	cmp	r4, r7
   d582e:	d006      	beq.n	d583e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5830:	6833      	ldr	r3, [r6, #0]
   d5832:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5836:	689b      	ldr	r3, [r3, #8]
   d5838:	4630      	mov	r0, r6
   d583a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d583c:	e7f6      	b.n	d582c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d583e:	4628      	mov	r0, r5
   d5840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5842 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5842:	7c00      	ldrb	r0, [r0, #16]
   d5844:	2200      	movs	r2, #0
   d5846:	f7ff b9d9 	b.w	d4bfc <hal_i2c_write>

000d584a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d584a:	7c00      	ldrb	r0, [r0, #16]
   d584c:	2100      	movs	r1, #0
   d584e:	f7ff b9dd 	b.w	d4c0c <hal_i2c_available>

000d5852 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5852:	7c00      	ldrb	r0, [r0, #16]
   d5854:	2100      	movs	r1, #0
   d5856:	f7ff b9e1 	b.w	d4c1c <hal_i2c_read>

000d585a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d585a:	7c00      	ldrb	r0, [r0, #16]
   d585c:	2100      	movs	r1, #0
   d585e:	f7ff b9e5 	b.w	d4c2c <hal_i2c_peek>

000d5862 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5862:	7c00      	ldrb	r0, [r0, #16]
   d5864:	2100      	movs	r1, #0
   d5866:	f7ff b9e9 	b.w	d4c3c <hal_i2c_flush>

000d586a <_ZN7TwoWireD0Ev>:
   d586a:	b510      	push	{r4, lr}
   d586c:	2114      	movs	r1, #20
   d586e:	4604      	mov	r4, r0
   d5870:	f000 f98e 	bl	d5b90 <_ZdlPvj>
   d5874:	4620      	mov	r0, r4
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5878:	b510      	push	{r4, lr}
   d587a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d587e:	4604      	mov	r4, r0
   d5880:	4608      	mov	r0, r1
   d5882:	2100      	movs	r1, #0
   d5884:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5888:	4b03      	ldr	r3, [pc, #12]	; (d5898 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d588a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d588c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d588e:	4611      	mov	r1, r2
   d5890:	f7ff f9e4 	bl	d4c5c <hal_i2c_init>
}
   d5894:	4620      	mov	r0, r4
   d5896:	bd10      	pop	{r4, pc}
   d5898:	000d7ee8 	.word	0x000d7ee8

000d589c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d589c:	2200      	movs	r2, #0
   d589e:	6840      	ldr	r0, [r0, #4]
   d58a0:	4611      	mov	r1, r2
   d58a2:	f7ff ba7f 	b.w	d4da4 <network_ready>

000d58a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58a6:	2200      	movs	r2, #0
   d58a8:	6840      	ldr	r0, [r0, #4]
   d58aa:	4611      	mov	r1, r2
   d58ac:	f7ff ba9a 	b.w	d4de4 <network_listening>

000d58b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d58b0:	2200      	movs	r2, #0
   d58b2:	6840      	ldr	r0, [r0, #4]
   d58b4:	4611      	mov	r1, r2
   d58b6:	f7ff baa5 	b.w	d4e04 <network_get_listen_timeout>

000d58ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d58ba:	6840      	ldr	r0, [r0, #4]
   d58bc:	2200      	movs	r2, #0
   d58be:	f7ff ba99 	b.w	d4df4 <network_set_listen_timeout>

000d58c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d58c2:	6840      	ldr	r0, [r0, #4]
   d58c4:	2200      	movs	r2, #0
   d58c6:	f081 0101 	eor.w	r1, r1, #1
   d58ca:	f7ff ba83 	b.w	d4dd4 <network_listen>

000d58ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d58ce:	2300      	movs	r3, #0
   d58d0:	6840      	ldr	r0, [r0, #4]
   d58d2:	461a      	mov	r2, r3
   d58d4:	4619      	mov	r1, r3
   d58d6:	f7ff ba75 	b.w	d4dc4 <network_off>

000d58da <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d58da:	2300      	movs	r3, #0
   d58dc:	6840      	ldr	r0, [r0, #4]
   d58de:	461a      	mov	r2, r3
   d58e0:	4619      	mov	r1, r3
   d58e2:	f7ff ba67 	b.w	d4db4 <network_on>

000d58e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d58e6:	2200      	movs	r2, #0
   d58e8:	6840      	ldr	r0, [r0, #4]
   d58ea:	4611      	mov	r1, r2
   d58ec:	f7ff ba4a 	b.w	d4d84 <network_connecting>

000d58f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58f0:	6840      	ldr	r0, [r0, #4]
   d58f2:	2200      	movs	r2, #0
   d58f4:	2102      	movs	r1, #2
   d58f6:	f7ff ba4d 	b.w	d4d94 <network_disconnect>

000d58fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d58fa:	2300      	movs	r3, #0
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	461a      	mov	r2, r3
   d5900:	f7ff ba38 	b.w	d4d74 <network_connect>

000d5904 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5904:	4b02      	ldr	r3, [pc, #8]	; (d5910 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5906:	2204      	movs	r2, #4
   d5908:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d590a:	4a02      	ldr	r2, [pc, #8]	; (d5914 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d590c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d590e:	4770      	bx	lr
   d5910:	2003e720 	.word	0x2003e720
   d5914:	000d7f10 	.word	0x000d7f10

000d5918 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5918:	2300      	movs	r3, #0
   d591a:	6840      	ldr	r0, [r0, #4]
   d591c:	461a      	mov	r2, r3
   d591e:	f7ff ba29 	b.w	d4d74 <network_connect>

000d5922 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5922:	6840      	ldr	r0, [r0, #4]
   d5924:	2200      	movs	r2, #0
   d5926:	2102      	movs	r1, #2
   d5928:	f7ff ba34 	b.w	d4d94 <network_disconnect>

000d592c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d592c:	2200      	movs	r2, #0
   d592e:	6840      	ldr	r0, [r0, #4]
   d5930:	4611      	mov	r1, r2
   d5932:	f7ff ba27 	b.w	d4d84 <network_connecting>

000d5936 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5936:	2200      	movs	r2, #0
   d5938:	6840      	ldr	r0, [r0, #4]
   d593a:	4611      	mov	r1, r2
   d593c:	f7ff ba32 	b.w	d4da4 <network_ready>

000d5940 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5940:	2300      	movs	r3, #0
   d5942:	6840      	ldr	r0, [r0, #4]
   d5944:	461a      	mov	r2, r3
   d5946:	4619      	mov	r1, r3
   d5948:	f7ff ba34 	b.w	d4db4 <network_on>

000d594c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d594c:	2300      	movs	r3, #0
   d594e:	6840      	ldr	r0, [r0, #4]
   d5950:	461a      	mov	r2, r3
   d5952:	4619      	mov	r1, r3
   d5954:	f7ff ba36 	b.w	d4dc4 <network_off>

000d5958 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5958:	6840      	ldr	r0, [r0, #4]
   d595a:	2100      	movs	r1, #0
   d595c:	f7ff ba5a 	b.w	d4e14 <network_is_on>

000d5960 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5960:	6840      	ldr	r0, [r0, #4]
   d5962:	2100      	movs	r1, #0
   d5964:	f7ff ba5e 	b.w	d4e24 <network_is_off>

000d5968 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5968:	6840      	ldr	r0, [r0, #4]
   d596a:	2200      	movs	r2, #0
   d596c:	f081 0101 	eor.w	r1, r1, #1
   d5970:	f7ff ba30 	b.w	d4dd4 <network_listen>

000d5974 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5974:	6840      	ldr	r0, [r0, #4]
   d5976:	2200      	movs	r2, #0
   d5978:	f7ff ba3c 	b.w	d4df4 <network_set_listen_timeout>

000d597c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d597c:	2200      	movs	r2, #0
   d597e:	6840      	ldr	r0, [r0, #4]
   d5980:	4611      	mov	r1, r2
   d5982:	f7ff ba3f 	b.w	d4e04 <network_get_listen_timeout>

000d5986 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5986:	2200      	movs	r2, #0
   d5988:	6840      	ldr	r0, [r0, #4]
   d598a:	4611      	mov	r1, r2
   d598c:	f7ff ba2a 	b.w	d4de4 <network_listening>

000d5990 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5994:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5996:	b095      	sub	sp, #84	; 0x54
   d5998:	4616      	mov	r6, r2
   d599a:	460d      	mov	r5, r1
   d599c:	4607      	mov	r7, r0
    IPAddress addr;
   d599e:	f7ff fe05 	bl	d55ac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d59a2:	4621      	mov	r1, r4
   d59a4:	2218      	movs	r2, #24
   d59a6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d59a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d59aa:	f002 f951 	bl	d7c50 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d59ae:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d59b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d59b4:	4621      	mov	r1, r4
   d59b6:	466b      	mov	r3, sp
   d59b8:	aa0c      	add	r2, sp, #48	; 0x30
   d59ba:	4630      	mov	r0, r6
   d59bc:	f7ff f87e 	bl	d4abc <netdb_getaddrinfo>
    if (!r) {
   d59c0:	4604      	mov	r4, r0
   d59c2:	2800      	cmp	r0, #0
   d59c4:	d146      	bne.n	d5a54 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59c6:	4602      	mov	r2, r0
   d59c8:	2101      	movs	r1, #1
   d59ca:	6868      	ldr	r0, [r5, #4]
   d59cc:	f7ff f9ea 	bl	d4da4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59d4:	4622      	mov	r2, r4
   d59d6:	6868      	ldr	r0, [r5, #4]
   d59d8:	f7ff f9e4 	bl	d4da4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59de:	4681      	mov	r9, r0
        bool ok = false;
   d59e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59e2:	2e00      	cmp	r6, #0
   d59e4:	d036      	beq.n	d5a54 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d59e6:	2900      	cmp	r1, #0
   d59e8:	d134      	bne.n	d5a54 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59ea:	6873      	ldr	r3, [r6, #4]
   d59ec:	2b02      	cmp	r3, #2
   d59ee:	d003      	beq.n	d59f8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d59f0:	2b0a      	cmp	r3, #10
   d59f2:	d00b      	beq.n	d5a0c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59f4:	69f6      	ldr	r6, [r6, #28]
   d59f6:	e7f4      	b.n	d59e2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d59f8:	f1b8 0f00 	cmp.w	r8, #0
   d59fc:	d004      	beq.n	d5a08 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59fe:	6971      	ldr	r1, [r6, #20]
   d5a00:	4638      	mov	r0, r7
   d5a02:	3104      	adds	r1, #4
   d5a04:	f7ff fdff 	bl	d5606 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5a08:	4641      	mov	r1, r8
   d5a0a:	e7f3      	b.n	d59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a0c:	f1b9 0f00 	cmp.w	r9, #0
   d5a10:	d101      	bne.n	d5a16 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5a12:	4649      	mov	r1, r9
   d5a14:	e7ee      	b.n	d59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a18:	2210      	movs	r2, #16
   d5a1a:	a801      	add	r0, sp, #4
   d5a1c:	f002 f918 	bl	d7c50 <memset>
                    a.v = 6;
   d5a20:	2306      	movs	r3, #6
   d5a22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a26:	ad01      	add	r5, sp, #4
   d5a28:	f104 0308 	add.w	r3, r4, #8
   d5a2c:	3418      	adds	r4, #24
   d5a2e:	6818      	ldr	r0, [r3, #0]
   d5a30:	6859      	ldr	r1, [r3, #4]
   d5a32:	462a      	mov	r2, r5
   d5a34:	c203      	stmia	r2!, {r0, r1}
   d5a36:	3308      	adds	r3, #8
   d5a38:	42a3      	cmp	r3, r4
   d5a3a:	4615      	mov	r5, r2
   d5a3c:	d1f7      	bne.n	d5a2e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5a3e:	a901      	add	r1, sp, #4
   d5a40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5a42:	ad07      	add	r5, sp, #28
   d5a44:	f7ff fdc0 	bl	d55c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a4a:	1d3c      	adds	r4, r7, #4
   d5a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a4e:	682b      	ldr	r3, [r5, #0]
   d5a50:	7023      	strb	r3, [r4, #0]
   d5a52:	e7de      	b.n	d5a12 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a54:	9800      	ldr	r0, [sp, #0]
   d5a56:	f7ff f829 	bl	d4aac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a5a:	4638      	mov	r0, r7
   d5a5c:	b015      	add	sp, #84	; 0x54
   d5a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5a64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a64:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a66:	4a03      	ldr	r2, [pc, #12]	; (d5a74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a68:	601a      	str	r2, [r3, #0]
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	605a      	str	r2, [r3, #4]

} // spark
   d5a6e:	4770      	bx	lr
   d5a70:	2003e728 	.word	0x2003e728
   d5a74:	000d7f4c 	.word	0x000d7f4c

000d5a78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5a78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5a7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5a7c:	d902      	bls.n	d5a84 <pinAvailable+0xc>
    return false;
   d5a7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5a80:	b002      	add	sp, #8
   d5a82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5a84:	f1a0 030b 	sub.w	r3, r0, #11
   d5a88:	2b02      	cmp	r3, #2
   d5a8a:	d81a      	bhi.n	d5ac2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5a8c:	4c17      	ldr	r4, [pc, #92]	; (d5aec <pinAvailable+0x74>)
   d5a8e:	7821      	ldrb	r1, [r4, #0]
   d5a90:	f3bf 8f5b 	dmb	ish
   d5a94:	f011 0101 	ands.w	r1, r1, #1
   d5a98:	d10b      	bne.n	d5ab2 <pinAvailable+0x3a>
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	9101      	str	r1, [sp, #4]
   d5a9e:	f7fe fafe 	bl	d409e <__cxa_guard_acquire>
   d5aa2:	9901      	ldr	r1, [sp, #4]
   d5aa4:	b128      	cbz	r0, d5ab2 <pinAvailable+0x3a>
   d5aa6:	4812      	ldr	r0, [pc, #72]	; (d5af0 <pinAvailable+0x78>)
   d5aa8:	f7ff fa5a 	bl	d4f60 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5aac:	4620      	mov	r0, r4
   d5aae:	f7fe fafb 	bl	d40a8 <__cxa_guard_release>
   d5ab2:	4b0f      	ldr	r3, [pc, #60]	; (d5af0 <pinAvailable+0x78>)
   d5ab4:	7818      	ldrb	r0, [r3, #0]
   d5ab6:	f7ff f8e1 	bl	d4c7c <hal_spi_is_enabled>
   d5aba:	2800      	cmp	r0, #0
   d5abc:	d1df      	bne.n	d5a7e <pinAvailable+0x6>
  return true; // 'pin' is available
   d5abe:	2001      	movs	r0, #1
   d5ac0:	e7de      	b.n	d5a80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5ac2:	2801      	cmp	r0, #1
   d5ac4:	d809      	bhi.n	d5ada <pinAvailable+0x62>
   d5ac6:	f000 f83f 	bl	d5b48 <_Z19__fetch_global_Wirev>
   d5aca:	2100      	movs	r1, #0
   d5acc:	7c00      	ldrb	r0, [r0, #16]
   d5ace:	f7ff f8bd 	bl	d4c4c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5ad2:	f080 0001 	eor.w	r0, r0, #1
   d5ad6:	b2c0      	uxtb	r0, r0
   d5ad8:	e7d2      	b.n	d5a80 <pinAvailable+0x8>
   d5ada:	3809      	subs	r0, #9
   d5adc:	2801      	cmp	r0, #1
   d5ade:	d8ee      	bhi.n	d5abe <pinAvailable+0x46>
   d5ae0:	f7ff fe78 	bl	d57d4 <_Z22__fetch_global_Serial1v>
   d5ae4:	7c00      	ldrb	r0, [r0, #16]
   d5ae6:	f7ff f879 	bl	d4bdc <hal_usart_is_enabled>
   d5aea:	e7f2      	b.n	d5ad2 <pinAvailable+0x5a>
   d5aec:	2003e730 	.word	0x2003e730
   d5af0:	2003e734 	.word	0x2003e734

000d5af4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5af4:	2823      	cmp	r0, #35	; 0x23
{
   d5af6:	b538      	push	{r3, r4, r5, lr}
   d5af8:	4604      	mov	r4, r0
   d5afa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5afc:	d80a      	bhi.n	d5b14 <pinMode+0x20>
   d5afe:	29ff      	cmp	r1, #255	; 0xff
   d5b00:	d008      	beq.n	d5b14 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5b02:	f7ff ffb9 	bl	d5a78 <pinAvailable>
   d5b06:	b128      	cbz	r0, d5b14 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5b08:	4629      	mov	r1, r5
   d5b0a:	4620      	mov	r0, r4
}
   d5b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5b10:	f7fe bfe4 	b.w	d4adc <HAL_Pin_Mode>
}
   d5b14:	bd38      	pop	{r3, r4, r5, pc}

000d5b16 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b16:	4770      	bx	lr

000d5b18 <_Z17acquireWireBufferv>:
{
   d5b18:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	2520      	movs	r5, #32
   d5b1e:	8043      	strh	r3, [r0, #2]
   d5b20:	2314      	movs	r3, #20
{
   d5b22:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5b24:	8003      	strh	r3, [r0, #0]
   d5b26:	6085      	str	r5, [r0, #8]
   d5b28:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b2a:	4906      	ldr	r1, [pc, #24]	; (d5b44 <_Z17acquireWireBufferv+0x2c>)
   d5b2c:	4628      	mov	r0, r5
   d5b2e:	f000 f831 	bl	d5b94 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b32:	4904      	ldr	r1, [pc, #16]	; (d5b44 <_Z17acquireWireBufferv+0x2c>)
	};
   d5b34:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b36:	4628      	mov	r0, r5
   d5b38:	f000 f82c 	bl	d5b94 <_ZnajRKSt9nothrow_t>
	};
   d5b3c:	60e0      	str	r0, [r4, #12]
}
   d5b3e:	4620      	mov	r0, r4
   d5b40:	bd38      	pop	{r3, r4, r5, pc}
   d5b42:	bf00      	nop
   d5b44:	000d7f80 	.word	0x000d7f80

000d5b48 <_Z19__fetch_global_Wirev>:
{
   d5b48:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b4a:	4d0e      	ldr	r5, [pc, #56]	; (d5b84 <_Z19__fetch_global_Wirev+0x3c>)
   d5b4c:	7829      	ldrb	r1, [r5, #0]
   d5b4e:	f3bf 8f5b 	dmb	ish
   d5b52:	f011 0401 	ands.w	r4, r1, #1
{
   d5b56:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5b58:	d111      	bne.n	d5b7e <_Z19__fetch_global_Wirev+0x36>
   d5b5a:	4628      	mov	r0, r5
   d5b5c:	f7fe fa9f 	bl	d409e <__cxa_guard_acquire>
   d5b60:	b168      	cbz	r0, d5b7e <_Z19__fetch_global_Wirev+0x36>
   d5b62:	a801      	add	r0, sp, #4
   d5b64:	f7ff ffd8 	bl	d5b18 <_Z17acquireWireBufferv>
   d5b68:	aa01      	add	r2, sp, #4
   d5b6a:	4621      	mov	r1, r4
   d5b6c:	4806      	ldr	r0, [pc, #24]	; (d5b88 <_Z19__fetch_global_Wirev+0x40>)
   d5b6e:	f7ff fe83 	bl	d5878 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5b72:	4628      	mov	r0, r5
   d5b74:	f7fe fa98 	bl	d40a8 <__cxa_guard_release>
   d5b78:	4804      	ldr	r0, [pc, #16]	; (d5b8c <_Z19__fetch_global_Wirev+0x44>)
   d5b7a:	f002 f855 	bl	d7c28 <atexit>
	return wire;
}
   d5b7e:	4802      	ldr	r0, [pc, #8]	; (d5b88 <_Z19__fetch_global_Wirev+0x40>)
   d5b80:	b007      	add	sp, #28
   d5b82:	bd30      	pop	{r4, r5, pc}
   d5b84:	2003e740 	.word	0x2003e740
   d5b88:	2003e744 	.word	0x2003e744
   d5b8c:	000d5b17 	.word	0x000d5b17

000d5b90 <_ZdlPvj>:
   d5b90:	f7fe ba83 	b.w	d409a <_ZdlPv>

000d5b94 <_ZnajRKSt9nothrow_t>:
   d5b94:	f7fe ba7f 	b.w	d4096 <_Znaj>

000d5b98 <pow>:
   d5b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b9c:	ed2d 8b02 	vpush	{d8}
   d5ba0:	b08d      	sub	sp, #52	; 0x34
   d5ba2:	ec57 6b10 	vmov	r6, r7, d0
   d5ba6:	ec55 4b11 	vmov	r4, r5, d1
   d5baa:	f000 fa2d 	bl	d6008 <__ieee754_pow>
   d5bae:	4bae      	ldr	r3, [pc, #696]	; (d5e68 <pow+0x2d0>)
   d5bb0:	eeb0 8a40 	vmov.f32	s16, s0
   d5bb4:	eef0 8a60 	vmov.f32	s17, s1
   d5bb8:	f993 9000 	ldrsb.w	r9, [r3]
   d5bbc:	f1b9 3fff 	cmp.w	r9, #4294967295
   d5bc0:	d037      	beq.n	d5c32 <pow+0x9a>
   d5bc2:	4622      	mov	r2, r4
   d5bc4:	462b      	mov	r3, r5
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	4629      	mov	r1, r5
   d5bca:	f001 ff59 	bl	d7a80 <__aeabi_dcmpun>
   d5bce:	4683      	mov	fp, r0
   d5bd0:	bb78      	cbnz	r0, d5c32 <pow+0x9a>
   d5bd2:	4632      	mov	r2, r6
   d5bd4:	463b      	mov	r3, r7
   d5bd6:	4630      	mov	r0, r6
   d5bd8:	4639      	mov	r1, r7
   d5bda:	f001 ff51 	bl	d7a80 <__aeabi_dcmpun>
   d5bde:	4680      	mov	r8, r0
   d5be0:	2800      	cmp	r0, #0
   d5be2:	f040 8093 	bne.w	d5d0c <pow+0x174>
   d5be6:	f04f 0a00 	mov.w	sl, #0
   d5bea:	f04f 0b00 	mov.w	fp, #0
   d5bee:	4630      	mov	r0, r6
   d5bf0:	4639      	mov	r1, r7
   d5bf2:	4652      	mov	r2, sl
   d5bf4:	465b      	mov	r3, fp
   d5bf6:	f001 ff11 	bl	d7a1c <__aeabi_dcmpeq>
   d5bfa:	b318      	cbz	r0, d5c44 <pow+0xac>
   d5bfc:	4652      	mov	r2, sl
   d5bfe:	465b      	mov	r3, fp
   d5c00:	4620      	mov	r0, r4
   d5c02:	4629      	mov	r1, r5
   d5c04:	f001 ff0a 	bl	d7a1c <__aeabi_dcmpeq>
   d5c08:	9000      	str	r0, [sp, #0]
   d5c0a:	2800      	cmp	r0, #0
   d5c0c:	d057      	beq.n	d5cbe <pow+0x126>
   d5c0e:	4b97      	ldr	r3, [pc, #604]	; (d5e6c <pow+0x2d4>)
   d5c10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5c14:	2201      	movs	r2, #1
   d5c16:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d5c1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d5c1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d5c22:	9202      	str	r2, [sp, #8]
   d5c24:	9303      	str	r3, [sp, #12]
   d5c26:	f1b9 0f00 	cmp.w	r9, #0
   d5c2a:	f000 8089 	beq.w	d5d40 <pow+0x1a8>
   d5c2e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d5e58 <pow+0x2c0>
   d5c32:	eeb0 0a48 	vmov.f32	s0, s16
   d5c36:	eef0 0a68 	vmov.f32	s1, s17
   d5c3a:	b00d      	add	sp, #52	; 0x34
   d5c3c:	ecbd 8b02 	vpop	{d8}
   d5c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c44:	eeb0 0a48 	vmov.f32	s0, s16
   d5c48:	eef0 0a68 	vmov.f32	s1, s17
   d5c4c:	f001 f984 	bl	d6f58 <finite>
   d5c50:	4680      	mov	r8, r0
   d5c52:	2800      	cmp	r0, #0
   d5c54:	f000 8082 	beq.w	d5d5c <pow+0x1c4>
   d5c58:	f04f 0800 	mov.w	r8, #0
   d5c5c:	f04f 0900 	mov.w	r9, #0
   d5c60:	ec51 0b18 	vmov	r0, r1, d8
   d5c64:	4642      	mov	r2, r8
   d5c66:	464b      	mov	r3, r9
   d5c68:	f001 fed8 	bl	d7a1c <__aeabi_dcmpeq>
   d5c6c:	2800      	cmp	r0, #0
   d5c6e:	d0e0      	beq.n	d5c32 <pow+0x9a>
   d5c70:	ec47 6b10 	vmov	d0, r6, r7
   d5c74:	f001 f970 	bl	d6f58 <finite>
   d5c78:	2800      	cmp	r0, #0
   d5c7a:	d0da      	beq.n	d5c32 <pow+0x9a>
   d5c7c:	ec45 4b10 	vmov	d0, r4, r5
   d5c80:	f001 f96a 	bl	d6f58 <finite>
   d5c84:	2800      	cmp	r0, #0
   d5c86:	d0d4      	beq.n	d5c32 <pow+0x9a>
   d5c88:	4b77      	ldr	r3, [pc, #476]	; (d5e68 <pow+0x2d0>)
   d5c8a:	4a78      	ldr	r2, [pc, #480]	; (d5e6c <pow+0x2d4>)
   d5c8c:	f993 3000 	ldrsb.w	r3, [r3]
   d5c90:	9203      	str	r2, [sp, #12]
   d5c92:	2104      	movs	r1, #4
   d5c94:	2200      	movs	r2, #0
   d5c96:	2b02      	cmp	r3, #2
   d5c98:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d5c9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d5ca0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d5ca4:	9102      	str	r1, [sp, #8]
   d5ca6:	920a      	str	r2, [sp, #40]	; 0x28
   d5ca8:	d004      	beq.n	d5cb4 <pow+0x11c>
   d5caa:	a802      	add	r0, sp, #8
   d5cac:	f001 f960 	bl	d6f70 <matherr>
   d5cb0:	2800      	cmp	r0, #0
   d5cb2:	d14a      	bne.n	d5d4a <pow+0x1b2>
   d5cb4:	f7ff f8fe 	bl	d4eb4 <__errno>
   d5cb8:	2322      	movs	r3, #34	; 0x22
   d5cba:	6003      	str	r3, [r0, #0]
   d5cbc:	e045      	b.n	d5d4a <pow+0x1b2>
   d5cbe:	ec45 4b10 	vmov	d0, r4, r5
   d5cc2:	f001 f949 	bl	d6f58 <finite>
   d5cc6:	2800      	cmp	r0, #0
   d5cc8:	d0b3      	beq.n	d5c32 <pow+0x9a>
   d5cca:	4652      	mov	r2, sl
   d5ccc:	465b      	mov	r3, fp
   d5cce:	4620      	mov	r0, r4
   d5cd0:	4629      	mov	r1, r5
   d5cd2:	f001 fead 	bl	d7a30 <__aeabi_dcmplt>
   d5cd6:	2800      	cmp	r0, #0
   d5cd8:	d0ab      	beq.n	d5c32 <pow+0x9a>
   d5cda:	4b63      	ldr	r3, [pc, #396]	; (d5e68 <pow+0x2d0>)
   d5cdc:	9900      	ldr	r1, [sp, #0]
   d5cde:	4a63      	ldr	r2, [pc, #396]	; (d5e6c <pow+0x2d4>)
   d5ce0:	f993 3000 	ldrsb.w	r3, [r3]
   d5ce4:	910a      	str	r1, [sp, #40]	; 0x28
   d5ce6:	2101      	movs	r1, #1
   d5ce8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d5cec:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d5cf0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d5cf4:	2b00      	cmp	r3, #0
   d5cf6:	d16f      	bne.n	d5dd8 <pow+0x240>
   d5cf8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d5cfc:	a802      	add	r0, sp, #8
   d5cfe:	f001 f937 	bl	d6f70 <matherr>
   d5d02:	2800      	cmp	r0, #0
   d5d04:	d06e      	beq.n	d5de4 <pow+0x24c>
   d5d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5d08:	b32b      	cbz	r3, d5d56 <pow+0x1be>
   d5d0a:	e020      	b.n	d5d4e <pow+0x1b6>
   d5d0c:	2200      	movs	r2, #0
   d5d0e:	2300      	movs	r3, #0
   d5d10:	4620      	mov	r0, r4
   d5d12:	4629      	mov	r1, r5
   d5d14:	f001 fe82 	bl	d7a1c <__aeabi_dcmpeq>
   d5d18:	2800      	cmp	r0, #0
   d5d1a:	d08a      	beq.n	d5c32 <pow+0x9a>
   d5d1c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d5e58 <pow+0x2c0>
   d5d20:	4b52      	ldr	r3, [pc, #328]	; (d5e6c <pow+0x2d4>)
   d5d22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d5d26:	2201      	movs	r2, #1
   d5d28:	f1b9 0f02 	cmp.w	r9, #2
   d5d2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d5d30:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d5d34:	ed8d 8b08 	vstr	d8, [sp, #32]
   d5d38:	9202      	str	r2, [sp, #8]
   d5d3a:	9303      	str	r3, [sp, #12]
   d5d3c:	f43f af79 	beq.w	d5c32 <pow+0x9a>
   d5d40:	a802      	add	r0, sp, #8
   d5d42:	f001 f915 	bl	d6f70 <matherr>
   d5d46:	2800      	cmp	r0, #0
   d5d48:	d051      	beq.n	d5dee <pow+0x256>
   d5d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5d4c:	b11b      	cbz	r3, d5d56 <pow+0x1be>
   d5d4e:	f7ff f8b1 	bl	d4eb4 <__errno>
   d5d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5d54:	6003      	str	r3, [r0, #0]
   d5d56:	ed9d 8b08 	vldr	d8, [sp, #32]
   d5d5a:	e76a      	b.n	d5c32 <pow+0x9a>
   d5d5c:	ec47 6b10 	vmov	d0, r6, r7
   d5d60:	f001 f8fa 	bl	d6f58 <finite>
   d5d64:	2800      	cmp	r0, #0
   d5d66:	f43f af77 	beq.w	d5c58 <pow+0xc0>
   d5d6a:	ec45 4b10 	vmov	d0, r4, r5
   d5d6e:	f001 f8f3 	bl	d6f58 <finite>
   d5d72:	2800      	cmp	r0, #0
   d5d74:	f43f af70 	beq.w	d5c58 <pow+0xc0>
   d5d78:	ec53 2b18 	vmov	r2, r3, d8
   d5d7c:	ee18 0a10 	vmov	r0, s16
   d5d80:	4619      	mov	r1, r3
   d5d82:	f001 fe7d 	bl	d7a80 <__aeabi_dcmpun>
   d5d86:	4b38      	ldr	r3, [pc, #224]	; (d5e68 <pow+0x2d0>)
   d5d88:	2800      	cmp	r0, #0
   d5d8a:	f040 8096 	bne.w	d5eba <pow+0x322>
   d5d8e:	f993 8000 	ldrsb.w	r8, [r3]
   d5d92:	900a      	str	r0, [sp, #40]	; 0x28
   d5d94:	2303      	movs	r3, #3
   d5d96:	9302      	str	r3, [sp, #8]
   d5d98:	4b34      	ldr	r3, [pc, #208]	; (d5e6c <pow+0x2d4>)
   d5d9a:	9303      	str	r3, [sp, #12]
   d5d9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d5da0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d5da4:	f1b8 0f00 	cmp.w	r8, #0
   d5da8:	d126      	bne.n	d5df8 <pow+0x260>
   d5daa:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d5e7c <pow+0x2e4>
   d5dae:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d5db2:	4652      	mov	r2, sl
   d5db4:	465b      	mov	r3, fp
   d5db6:	4630      	mov	r0, r6
   d5db8:	4639      	mov	r1, r7
   d5dba:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d5dbe:	f001 fe37 	bl	d7a30 <__aeabi_dcmplt>
   d5dc2:	bb48      	cbnz	r0, d5e18 <pow+0x280>
   d5dc4:	a802      	add	r0, sp, #8
   d5dc6:	f001 f8d3 	bl	d6f70 <matherr>
   d5dca:	2800      	cmp	r0, #0
   d5dcc:	d19b      	bne.n	d5d06 <pow+0x16e>
   d5dce:	f7ff f871 	bl	d4eb4 <__errno>
   d5dd2:	2322      	movs	r3, #34	; 0x22
   d5dd4:	6003      	str	r3, [r0, #0]
   d5dd6:	e796      	b.n	d5d06 <pow+0x16e>
   d5dd8:	4925      	ldr	r1, [pc, #148]	; (d5e70 <pow+0x2d8>)
   d5dda:	2000      	movs	r0, #0
   d5ddc:	2b02      	cmp	r3, #2
   d5dde:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d5de2:	d18b      	bne.n	d5cfc <pow+0x164>
   d5de4:	f7ff f866 	bl	d4eb4 <__errno>
   d5de8:	2321      	movs	r3, #33	; 0x21
   d5dea:	6003      	str	r3, [r0, #0]
   d5dec:	e78b      	b.n	d5d06 <pow+0x16e>
   d5dee:	f7ff f861 	bl	d4eb4 <__errno>
   d5df2:	2321      	movs	r3, #33	; 0x21
   d5df4:	6003      	str	r3, [r0, #0]
   d5df6:	e7a8      	b.n	d5d4a <pow+0x1b2>
   d5df8:	ed9f 7b19 	vldr	d7, [pc, #100]	; d5e60 <pow+0x2c8>
   d5dfc:	4652      	mov	r2, sl
   d5dfe:	465b      	mov	r3, fp
   d5e00:	4630      	mov	r0, r6
   d5e02:	4639      	mov	r1, r7
   d5e04:	ed8d 7b08 	vstr	d7, [sp, #32]
   d5e08:	f001 fe12 	bl	d7a30 <__aeabi_dcmplt>
   d5e0c:	2800      	cmp	r0, #0
   d5e0e:	d137      	bne.n	d5e80 <pow+0x2e8>
   d5e10:	f1b8 0f02 	cmp.w	r8, #2
   d5e14:	d0db      	beq.n	d5dce <pow+0x236>
   d5e16:	e7d5      	b.n	d5dc4 <pow+0x22c>
   d5e18:	4b16      	ldr	r3, [pc, #88]	; (d5e74 <pow+0x2dc>)
   d5e1a:	2200      	movs	r2, #0
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	4629      	mov	r1, r5
   d5e20:	f001 fb94 	bl	d754c <__aeabi_dmul>
   d5e24:	4602      	mov	r2, r0
   d5e26:	460b      	mov	r3, r1
   d5e28:	ec43 2b10 	vmov	d0, r2, r3
   d5e2c:	e9cd 2300 	strd	r2, r3, [sp]
   d5e30:	f001 f8aa 	bl	d6f88 <rint>
   d5e34:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5e38:	ec51 0b10 	vmov	r0, r1, d0
   d5e3c:	f001 fdee 	bl	d7a1c <__aeabi_dcmpeq>
   d5e40:	2800      	cmp	r0, #0
   d5e42:	d136      	bne.n	d5eb2 <pow+0x31a>
   d5e44:	4b0c      	ldr	r3, [pc, #48]	; (d5e78 <pow+0x2e0>)
   d5e46:	4908      	ldr	r1, [pc, #32]	; (d5e68 <pow+0x2d0>)
   d5e48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5e4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d5e50:	f991 8000 	ldrsb.w	r8, [r1]
   d5e54:	e7dc      	b.n	d5e10 <pow+0x278>
   d5e56:	bf00      	nop
   d5e58:	00000000 	.word	0x00000000
   d5e5c:	3ff00000 	.word	0x3ff00000
   d5e60:	00000000 	.word	0x00000000
   d5e64:	7ff00000 	.word	0x7ff00000
   d5e68:	2003e510 	.word	0x2003e510
   d5e6c:	000d7f84 	.word	0x000d7f84
   d5e70:	fff00000 	.word	0xfff00000
   d5e74:	3fe00000 	.word	0x3fe00000
   d5e78:	c7efffff 	.word	0xc7efffff
   d5e7c:	47efffff 	.word	0x47efffff
   d5e80:	4b1c      	ldr	r3, [pc, #112]	; (d5ef4 <pow+0x35c>)
   d5e82:	2200      	movs	r2, #0
   d5e84:	4620      	mov	r0, r4
   d5e86:	4629      	mov	r1, r5
   d5e88:	f001 fb60 	bl	d754c <__aeabi_dmul>
   d5e8c:	4602      	mov	r2, r0
   d5e8e:	460b      	mov	r3, r1
   d5e90:	ec43 2b10 	vmov	d0, r2, r3
   d5e94:	e9cd 2300 	strd	r2, r3, [sp]
   d5e98:	f001 f876 	bl	d6f88 <rint>
   d5e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5ea0:	ec51 0b10 	vmov	r0, r1, d0
   d5ea4:	f001 fdba 	bl	d7a1c <__aeabi_dcmpeq>
   d5ea8:	b918      	cbnz	r0, d5eb2 <pow+0x31a>
   d5eaa:	4b13      	ldr	r3, [pc, #76]	; (d5ef8 <pow+0x360>)
   d5eac:	2200      	movs	r2, #0
   d5eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d5eb2:	4b12      	ldr	r3, [pc, #72]	; (d5efc <pow+0x364>)
   d5eb4:	f993 8000 	ldrsb.w	r8, [r3]
   d5eb8:	e7aa      	b.n	d5e10 <pow+0x278>
   d5eba:	f993 9000 	ldrsb.w	r9, [r3]
   d5ebe:	4b10      	ldr	r3, [pc, #64]	; (d5f00 <pow+0x368>)
   d5ec0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5ec4:	2201      	movs	r2, #1
   d5ec6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d5eca:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d5ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5ed2:	f1b9 0f00 	cmp.w	r9, #0
   d5ed6:	f43f af0f 	beq.w	d5cf8 <pow+0x160>
   d5eda:	4652      	mov	r2, sl
   d5edc:	465b      	mov	r3, fp
   d5ede:	4650      	mov	r0, sl
   d5ee0:	4659      	mov	r1, fp
   d5ee2:	f001 fc5d 	bl	d77a0 <__aeabi_ddiv>
   d5ee6:	f1b9 0f02 	cmp.w	r9, #2
   d5eea:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d5eee:	f43f af79 	beq.w	d5de4 <pow+0x24c>
   d5ef2:	e703      	b.n	d5cfc <pow+0x164>
   d5ef4:	3fe00000 	.word	0x3fe00000
   d5ef8:	fff00000 	.word	0xfff00000
   d5efc:	2003e510 	.word	0x2003e510
   d5f00:	000d7f84 	.word	0x000d7f84

000d5f04 <logf>:
   d5f04:	b510      	push	{r4, lr}
   d5f06:	ed2d 8b02 	vpush	{d8}
   d5f0a:	b08a      	sub	sp, #40	; 0x28
   d5f0c:	eeb0 8a40 	vmov.f32	s16, s0
   d5f10:	f000 ff18 	bl	d6d44 <__ieee754_logf>
   d5f14:	4b37      	ldr	r3, [pc, #220]	; (d5ff4 <logf+0xf0>)
   d5f16:	f993 4000 	ldrsb.w	r4, [r3]
   d5f1a:	1c63      	adds	r3, r4, #1
   d5f1c:	d033      	beq.n	d5f86 <logf+0x82>
   d5f1e:	eeb4 8a48 	vcmp.f32	s16, s16
   d5f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f26:	d62e      	bvs.n	d5f86 <logf+0x82>
   d5f28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d5f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f30:	dc29      	bgt.n	d5f86 <logf+0x82>
   d5f32:	4b31      	ldr	r3, [pc, #196]	; (d5ff8 <logf+0xf4>)
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	ee18 0a10 	vmov	r0, s16
   d5f3a:	2300      	movs	r3, #0
   d5f3c:	9308      	str	r3, [sp, #32]
   d5f3e:	f001 faad 	bl	d749c <__aeabi_f2d>
   d5f42:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d5f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5f4a:	b304      	cbz	r4, d5f8e <logf+0x8a>
   d5f4c:	4b2b      	ldr	r3, [pc, #172]	; (d5ffc <logf+0xf8>)
   d5f4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5f52:	2200      	movs	r2, #0
   d5f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5f5c:	d141      	bne.n	d5fe2 <logf+0xde>
   d5f5e:	2302      	movs	r3, #2
   d5f60:	429c      	cmp	r4, r3
   d5f62:	9300      	str	r3, [sp, #0]
   d5f64:	d137      	bne.n	d5fd6 <logf+0xd2>
   d5f66:	f7fe ffa5 	bl	d4eb4 <__errno>
   d5f6a:	2322      	movs	r3, #34	; 0x22
   d5f6c:	6003      	str	r3, [r0, #0]
   d5f6e:	9b08      	ldr	r3, [sp, #32]
   d5f70:	b32b      	cbz	r3, d5fbe <logf+0xba>
   d5f72:	f7fe ff9f 	bl	d4eb4 <__errno>
   d5f76:	9b08      	ldr	r3, [sp, #32]
   d5f78:	6003      	str	r3, [r0, #0]
   d5f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5f7e:	f001 fddd 	bl	d7b3c <__aeabi_d2f>
   d5f82:	ee00 0a10 	vmov	s0, r0
   d5f86:	b00a      	add	sp, #40	; 0x28
   d5f88:	ecbd 8b02 	vpop	{d8}
   d5f8c:	bd10      	pop	{r4, pc}
   d5f8e:	4b1c      	ldr	r3, [pc, #112]	; (d6000 <logf+0xfc>)
   d5f90:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5f94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5fa0:	d017      	beq.n	d5fd2 <logf+0xce>
   d5fa2:	2301      	movs	r3, #1
   d5fa4:	9300      	str	r3, [sp, #0]
   d5fa6:	4668      	mov	r0, sp
   d5fa8:	f000 ffe2 	bl	d6f70 <matherr>
   d5fac:	b1e8      	cbz	r0, d5fea <logf+0xe6>
   d5fae:	4815      	ldr	r0, [pc, #84]	; (d6004 <logf+0x100>)
   d5fb0:	f000 ffe2 	bl	d6f78 <nan>
   d5fb4:	ed8d 0b06 	vstr	d0, [sp, #24]
   d5fb8:	9b08      	ldr	r3, [sp, #32]
   d5fba:	2b00      	cmp	r3, #0
   d5fbc:	d1d9      	bne.n	d5f72 <logf+0x6e>
   d5fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5fc2:	f001 fdbb 	bl	d7b3c <__aeabi_d2f>
   d5fc6:	ee00 0a10 	vmov	s0, r0
   d5fca:	b00a      	add	sp, #40	; 0x28
   d5fcc:	ecbd 8b02 	vpop	{d8}
   d5fd0:	bd10      	pop	{r4, pc}
   d5fd2:	2302      	movs	r3, #2
   d5fd4:	9300      	str	r3, [sp, #0]
   d5fd6:	4668      	mov	r0, sp
   d5fd8:	f000 ffca 	bl	d6f70 <matherr>
   d5fdc:	2800      	cmp	r0, #0
   d5fde:	d1eb      	bne.n	d5fb8 <logf+0xb4>
   d5fe0:	e7c1      	b.n	d5f66 <logf+0x62>
   d5fe2:	2301      	movs	r3, #1
   d5fe4:	2c02      	cmp	r4, #2
   d5fe6:	9300      	str	r3, [sp, #0]
   d5fe8:	d1dd      	bne.n	d5fa6 <logf+0xa2>
   d5fea:	f7fe ff63 	bl	d4eb4 <__errno>
   d5fee:	2321      	movs	r3, #33	; 0x21
   d5ff0:	6003      	str	r3, [r0, #0]
   d5ff2:	e7dc      	b.n	d5fae <logf+0xaa>
   d5ff4:	2003e510 	.word	0x2003e510
   d5ff8:	000d7f88 	.word	0x000d7f88
   d5ffc:	fff00000 	.word	0xfff00000
   d6000:	c7efffff 	.word	0xc7efffff
   d6004:	000d7f8c 	.word	0x000d7f8c

000d6008 <__ieee754_pow>:
   d6008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d600c:	ec57 6b11 	vmov	r6, r7, d1
   d6010:	ed2d 8b0a 	vpush	{d8-d12}
   d6014:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d6018:	ea5a 0206 	orrs.w	r2, sl, r6
   d601c:	b089      	sub	sp, #36	; 0x24
   d601e:	d03d      	beq.n	d609c <__ieee754_pow+0x94>
   d6020:	ec55 4b10 	vmov	r4, r5, d0
   d6024:	4976      	ldr	r1, [pc, #472]	; (d6200 <__ieee754_pow+0x1f8>)
   d6026:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d602a:	4588      	cmp	r8, r1
   d602c:	ee10 2a10 	vmov	r2, s0
   d6030:	46a9      	mov	r9, r5
   d6032:	dc2c      	bgt.n	d608e <__ieee754_pow+0x86>
   d6034:	ee11 3a10 	vmov	r3, s2
   d6038:	46bb      	mov	fp, r7
   d603a:	d03a      	beq.n	d60b2 <__ieee754_pow+0xaa>
   d603c:	458a      	cmp	sl, r1
   d603e:	dc26      	bgt.n	d608e <__ieee754_pow+0x86>
   d6040:	496f      	ldr	r1, [pc, #444]	; (d6200 <__ieee754_pow+0x1f8>)
   d6042:	458a      	cmp	sl, r1
   d6044:	d021      	beq.n	d608a <__ieee754_pow+0x82>
   d6046:	f1b9 0f00 	cmp.w	r9, #0
   d604a:	db3d      	blt.n	d60c8 <__ieee754_pow+0xc0>
   d604c:	2100      	movs	r1, #0
   d604e:	9103      	str	r1, [sp, #12]
   d6050:	2b00      	cmp	r3, #0
   d6052:	d155      	bne.n	d6100 <__ieee754_pow+0xf8>
   d6054:	4b6a      	ldr	r3, [pc, #424]	; (d6200 <__ieee754_pow+0x1f8>)
   d6056:	459a      	cmp	sl, r3
   d6058:	f000 80a8 	beq.w	d61ac <__ieee754_pow+0x1a4>
   d605c:	4b69      	ldr	r3, [pc, #420]	; (d6204 <__ieee754_pow+0x1fc>)
   d605e:	459a      	cmp	sl, r3
   d6060:	f000 80b6 	beq.w	d61d0 <__ieee754_pow+0x1c8>
   d6064:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d6068:	f000 8501 	beq.w	d6a6e <__ieee754_pow+0xa66>
   d606c:	4b66      	ldr	r3, [pc, #408]	; (d6208 <__ieee754_pow+0x200>)
   d606e:	459b      	cmp	fp, r3
   d6070:	d146      	bne.n	d6100 <__ieee754_pow+0xf8>
   d6072:	f1b9 0f00 	cmp.w	r9, #0
   d6076:	db43      	blt.n	d6100 <__ieee754_pow+0xf8>
   d6078:	ec45 4b10 	vmov	d0, r4, r5
   d607c:	b009      	add	sp, #36	; 0x24
   d607e:	ecbd 8b0a 	vpop	{d8-d12}
   d6082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6086:	f000 bd99 	b.w	d6bbc <__ieee754_sqrt>
   d608a:	2b00      	cmp	r3, #0
   d608c:	d0db      	beq.n	d6046 <__ieee754_pow+0x3e>
   d608e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6092:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6096:	ea58 0302 	orrs.w	r3, r8, r2
   d609a:	d10d      	bne.n	d60b8 <__ieee754_pow+0xb0>
   d609c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d61f0 <__ieee754_pow+0x1e8>
   d60a0:	ed8d 7b00 	vstr	d7, [sp]
   d60a4:	ed9d 0b00 	vldr	d0, [sp]
   d60a8:	b009      	add	sp, #36	; 0x24
   d60aa:	ecbd 8b0a 	vpop	{d8-d12}
   d60ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60b2:	b90c      	cbnz	r4, d60b8 <__ieee754_pow+0xb0>
   d60b4:	45c2      	cmp	sl, r8
   d60b6:	ddc3      	ble.n	d6040 <__ieee754_pow+0x38>
   d60b8:	4854      	ldr	r0, [pc, #336]	; (d620c <__ieee754_pow+0x204>)
   d60ba:	b009      	add	sp, #36	; 0x24
   d60bc:	ecbd 8b0a 	vpop	{d8-d12}
   d60c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60c4:	f000 bf58 	b.w	d6f78 <nan>
   d60c8:	4951      	ldr	r1, [pc, #324]	; (d6210 <__ieee754_pow+0x208>)
   d60ca:	458a      	cmp	sl, r1
   d60cc:	f300 8087 	bgt.w	d61de <__ieee754_pow+0x1d6>
   d60d0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d60d4:	458a      	cmp	sl, r1
   d60d6:	dd0f      	ble.n	d60f8 <__ieee754_pow+0xf0>
   d60d8:	ea4f 512a 	mov.w	r1, sl, asr #20
   d60dc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d60e0:	2914      	cmp	r1, #20
   d60e2:	f340 84ce 	ble.w	d6a82 <__ieee754_pow+0xa7a>
   d60e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d60ea:	fa23 f001 	lsr.w	r0, r3, r1
   d60ee:	fa00 f101 	lsl.w	r1, r0, r1
   d60f2:	4299      	cmp	r1, r3
   d60f4:	f000 8520 	beq.w	d6b38 <__ieee754_pow+0xb30>
   d60f8:	2100      	movs	r1, #0
   d60fa:	9103      	str	r1, [sp, #12]
   d60fc:	2b00      	cmp	r3, #0
   d60fe:	d0ad      	beq.n	d605c <__ieee754_pow+0x54>
   d6100:	ec45 4b10 	vmov	d0, r4, r5
   d6104:	9206      	str	r2, [sp, #24]
   d6106:	f000 ff1d 	bl	d6f44 <fabs>
   d610a:	9a06      	ldr	r2, [sp, #24]
   d610c:	ed8d 0b00 	vstr	d0, [sp]
   d6110:	bb5a      	cbnz	r2, d616a <__ieee754_pow+0x162>
   d6112:	f1b8 0f00 	cmp.w	r8, #0
   d6116:	d004      	beq.n	d6122 <__ieee754_pow+0x11a>
   d6118:	4b3a      	ldr	r3, [pc, #232]	; (d6204 <__ieee754_pow+0x1fc>)
   d611a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d611e:	429a      	cmp	r2, r3
   d6120:	d123      	bne.n	d616a <__ieee754_pow+0x162>
   d6122:	f1bb 0f00 	cmp.w	fp, #0
   d6126:	da07      	bge.n	d6138 <__ieee754_pow+0x130>
   d6128:	e9dd 2300 	ldrd	r2, r3, [sp]
   d612c:	4935      	ldr	r1, [pc, #212]	; (d6204 <__ieee754_pow+0x1fc>)
   d612e:	2000      	movs	r0, #0
   d6130:	f001 fb36 	bl	d77a0 <__aeabi_ddiv>
   d6134:	e9cd 0100 	strd	r0, r1, [sp]
   d6138:	f1b9 0f00 	cmp.w	r9, #0
   d613c:	dab2      	bge.n	d60a4 <__ieee754_pow+0x9c>
   d613e:	9b03      	ldr	r3, [sp, #12]
   d6140:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6144:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6148:	ea58 0303 	orrs.w	r3, r8, r3
   d614c:	f040 84be 	bne.w	d6acc <__ieee754_pow+0xac4>
   d6150:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6154:	4610      	mov	r0, r2
   d6156:	4619      	mov	r1, r3
   d6158:	f001 f840 	bl	d71dc <__aeabi_dsub>
   d615c:	4602      	mov	r2, r0
   d615e:	460b      	mov	r3, r1
   d6160:	f001 fb1e 	bl	d77a0 <__aeabi_ddiv>
   d6164:	e9cd 0100 	strd	r0, r1, [sp]
   d6168:	e79c      	b.n	d60a4 <__ieee754_pow+0x9c>
   d616a:	9a03      	ldr	r2, [sp, #12]
   d616c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d6170:	3b01      	subs	r3, #1
   d6172:	9306      	str	r3, [sp, #24]
   d6174:	4313      	orrs	r3, r2
   d6176:	d035      	beq.n	d61e4 <__ieee754_pow+0x1dc>
   d6178:	4b26      	ldr	r3, [pc, #152]	; (d6214 <__ieee754_pow+0x20c>)
   d617a:	459a      	cmp	sl, r3
   d617c:	dd4e      	ble.n	d621c <__ieee754_pow+0x214>
   d617e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d6182:	459a      	cmp	sl, r3
   d6184:	4b24      	ldr	r3, [pc, #144]	; (d6218 <__ieee754_pow+0x210>)
   d6186:	f340 83ed 	ble.w	d6964 <__ieee754_pow+0x95c>
   d618a:	4598      	cmp	r8, r3
   d618c:	f340 836b 	ble.w	d6866 <__ieee754_pow+0x85e>
   d6190:	f1bb 0f00 	cmp.w	fp, #0
   d6194:	f340 836b 	ble.w	d686e <__ieee754_pow+0x866>
   d6198:	a317      	add	r3, pc, #92	; (adr r3, d61f8 <__ieee754_pow+0x1f0>)
   d619a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d619e:	4610      	mov	r0, r2
   d61a0:	4619      	mov	r1, r3
   d61a2:	f001 f9d3 	bl	d754c <__aeabi_dmul>
   d61a6:	e9cd 0100 	strd	r0, r1, [sp]
   d61aa:	e77b      	b.n	d60a4 <__ieee754_pow+0x9c>
   d61ac:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d61b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d61b4:	4313      	orrs	r3, r2
   d61b6:	f43f af71 	beq.w	d609c <__ieee754_pow+0x94>
   d61ba:	4b17      	ldr	r3, [pc, #92]	; (d6218 <__ieee754_pow+0x210>)
   d61bc:	4598      	cmp	r8, r3
   d61be:	f340 8388 	ble.w	d68d2 <__ieee754_pow+0x8ca>
   d61c2:	f1bb 0f00 	cmp.w	fp, #0
   d61c6:	f2c0 8352 	blt.w	d686e <__ieee754_pow+0x866>
   d61ca:	e9cd 6700 	strd	r6, r7, [sp]
   d61ce:	e769      	b.n	d60a4 <__ieee754_pow+0x9c>
   d61d0:	f1bb 0f00 	cmp.w	fp, #0
   d61d4:	f2c0 8441 	blt.w	d6a5a <__ieee754_pow+0xa52>
   d61d8:	e9cd 4500 	strd	r4, r5, [sp]
   d61dc:	e762      	b.n	d60a4 <__ieee754_pow+0x9c>
   d61de:	2102      	movs	r1, #2
   d61e0:	9103      	str	r1, [sp, #12]
   d61e2:	e735      	b.n	d6050 <__ieee754_pow+0x48>
   d61e4:	4622      	mov	r2, r4
   d61e6:	462b      	mov	r3, r5
   d61e8:	e7b4      	b.n	d6154 <__ieee754_pow+0x14c>
   d61ea:	bf00      	nop
   d61ec:	f3af 8000 	nop.w
   d61f0:	00000000 	.word	0x00000000
   d61f4:	3ff00000 	.word	0x3ff00000
   d61f8:	8800759c 	.word	0x8800759c
   d61fc:	7e37e43c 	.word	0x7e37e43c
   d6200:	7ff00000 	.word	0x7ff00000
   d6204:	3ff00000 	.word	0x3ff00000
   d6208:	3fe00000 	.word	0x3fe00000
   d620c:	000d7f8c 	.word	0x000d7f8c
   d6210:	433fffff 	.word	0x433fffff
   d6214:	41e00000 	.word	0x41e00000
   d6218:	3fefffff 	.word	0x3fefffff
   d621c:	4be4      	ldr	r3, [pc, #912]	; (d65b0 <__ieee754_pow+0x5a8>)
   d621e:	ea09 0303 	and.w	r3, r9, r3
   d6222:	2b00      	cmp	r3, #0
   d6224:	f040 8416 	bne.w	d6a54 <__ieee754_pow+0xa4c>
   d6228:	e9dd 0100 	ldrd	r0, r1, [sp]
   d622c:	4be1      	ldr	r3, [pc, #900]	; (d65b4 <__ieee754_pow+0x5ac>)
   d622e:	2200      	movs	r2, #0
   d6230:	f001 f98c 	bl	d754c <__aeabi_dmul>
   d6234:	e9cd 0100 	strd	r0, r1, [sp]
   d6238:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d623c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d6240:	ea4f 5328 	mov.w	r3, r8, asr #20
   d6244:	49dc      	ldr	r1, [pc, #880]	; (d65b8 <__ieee754_pow+0x5b0>)
   d6246:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d624a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d624e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d6252:	1818      	adds	r0, r3, r0
   d6254:	428a      	cmp	r2, r1
   d6256:	9007      	str	r0, [sp, #28]
   d6258:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d625c:	f340 83e9 	ble.w	d6a32 <__ieee754_pow+0xa2a>
   d6260:	4bd6      	ldr	r3, [pc, #856]	; (d65bc <__ieee754_pow+0x5b4>)
   d6262:	429a      	cmp	r2, r3
   d6264:	f340 843e 	ble.w	d6ae4 <__ieee754_pow+0xadc>
   d6268:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d6558 <__ieee754_pow+0x550>
   d626c:	eeb0 ba47 	vmov.f32	s22, s14
   d6270:	eef0 ba67 	vmov.f32	s23, s15
   d6274:	eeb0 ca47 	vmov.f32	s24, s14
   d6278:	eef0 ca67 	vmov.f32	s25, s15
   d627c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d6560 <__ieee754_pow+0x558>
   d6280:	3001      	adds	r0, #1
   d6282:	ec54 3b17 	vmov	r3, r4, d7
   d6286:	9007      	str	r0, [sp, #28]
   d6288:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d628c:	f04f 0900 	mov.w	r9, #0
   d6290:	e9dd ab00 	ldrd	sl, fp, [sp]
   d6294:	ec44 3b18 	vmov	d8, r3, r4
   d6298:	461a      	mov	r2, r3
   d629a:	4650      	mov	r0, sl
   d629c:	4623      	mov	r3, r4
   d629e:	4641      	mov	r1, r8
   d62a0:	f000 ff9c 	bl	d71dc <__aeabi_dsub>
   d62a4:	ec53 2b18 	vmov	r2, r3, d8
   d62a8:	4604      	mov	r4, r0
   d62aa:	460d      	mov	r5, r1
   d62ac:	4650      	mov	r0, sl
   d62ae:	4641      	mov	r1, r8
   d62b0:	f000 ff96 	bl	d71e0 <__adddf3>
   d62b4:	4602      	mov	r2, r0
   d62b6:	460b      	mov	r3, r1
   d62b8:	2000      	movs	r0, #0
   d62ba:	49c1      	ldr	r1, [pc, #772]	; (d65c0 <__ieee754_pow+0x5b8>)
   d62bc:	f001 fa70 	bl	d77a0 <__aeabi_ddiv>
   d62c0:	ec45 4b1a 	vmov	d10, r4, r5
   d62c4:	ec41 0b19 	vmov	d9, r0, r1
   d62c8:	ec51 0b1a 	vmov	r0, r1, d10
   d62cc:	ec53 2b19 	vmov	r2, r3, d9
   d62d0:	f001 f93c 	bl	d754c <__aeabi_dmul>
   d62d4:	46c3      	mov	fp, r8
   d62d6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d62da:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d62de:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d62e2:	eb03 0509 	add.w	r5, r3, r9
   d62e6:	460a      	mov	r2, r1
   d62e8:	2300      	movs	r3, #0
   d62ea:	4601      	mov	r1, r0
   d62ec:	e9cd 1200 	strd	r1, r2, [sp]
   d62f0:	9300      	str	r3, [sp, #0]
   d62f2:	e9dd 8900 	ldrd	r8, r9, [sp]
   d62f6:	2400      	movs	r4, #0
   d62f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d62fc:	462b      	mov	r3, r5
   d62fe:	4622      	mov	r2, r4
   d6300:	4640      	mov	r0, r8
   d6302:	4649      	mov	r1, r9
   d6304:	f001 f922 	bl	d754c <__aeabi_dmul>
   d6308:	4602      	mov	r2, r0
   d630a:	460b      	mov	r3, r1
   d630c:	ec51 0b1a 	vmov	r0, r1, d10
   d6310:	f000 ff64 	bl	d71dc <__aeabi_dsub>
   d6314:	ec41 0b17 	vmov	d7, r0, r1
   d6318:	ec53 2b18 	vmov	r2, r3, d8
   d631c:	4620      	mov	r0, r4
   d631e:	4629      	mov	r1, r5
   d6320:	ec55 4b17 	vmov	r4, r5, d7
   d6324:	f000 ff5a 	bl	d71dc <__aeabi_dsub>
   d6328:	4602      	mov	r2, r0
   d632a:	460b      	mov	r3, r1
   d632c:	4650      	mov	r0, sl
   d632e:	4659      	mov	r1, fp
   d6330:	f000 ff54 	bl	d71dc <__aeabi_dsub>
   d6334:	4642      	mov	r2, r8
   d6336:	464b      	mov	r3, r9
   d6338:	f001 f908 	bl	d754c <__aeabi_dmul>
   d633c:	4602      	mov	r2, r0
   d633e:	460b      	mov	r3, r1
   d6340:	4620      	mov	r0, r4
   d6342:	4629      	mov	r1, r5
   d6344:	f000 ff4a 	bl	d71dc <__aeabi_dsub>
   d6348:	ec53 2b19 	vmov	r2, r3, d9
   d634c:	f001 f8fe 	bl	d754c <__aeabi_dmul>
   d6350:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d6354:	4604      	mov	r4, r0
   d6356:	460d      	mov	r5, r1
   d6358:	4652      	mov	r2, sl
   d635a:	465b      	mov	r3, fp
   d635c:	4650      	mov	r0, sl
   d635e:	4659      	mov	r1, fp
   d6360:	f001 f8f4 	bl	d754c <__aeabi_dmul>
   d6364:	a380      	add	r3, pc, #512	; (adr r3, d6568 <__ieee754_pow+0x560>)
   d6366:	e9d3 2300 	ldrd	r2, r3, [r3]
   d636a:	ec45 4b1a 	vmov	d10, r4, r5
   d636e:	4604      	mov	r4, r0
   d6370:	460d      	mov	r5, r1
   d6372:	f001 f8eb 	bl	d754c <__aeabi_dmul>
   d6376:	a37e      	add	r3, pc, #504	; (adr r3, d6570 <__ieee754_pow+0x568>)
   d6378:	e9d3 2300 	ldrd	r2, r3, [r3]
   d637c:	f000 ff30 	bl	d71e0 <__adddf3>
   d6380:	4622      	mov	r2, r4
   d6382:	462b      	mov	r3, r5
   d6384:	f001 f8e2 	bl	d754c <__aeabi_dmul>
   d6388:	a37b      	add	r3, pc, #492	; (adr r3, d6578 <__ieee754_pow+0x570>)
   d638a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d638e:	f000 ff27 	bl	d71e0 <__adddf3>
   d6392:	4622      	mov	r2, r4
   d6394:	462b      	mov	r3, r5
   d6396:	f001 f8d9 	bl	d754c <__aeabi_dmul>
   d639a:	a379      	add	r3, pc, #484	; (adr r3, d6580 <__ieee754_pow+0x578>)
   d639c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d63a0:	f000 ff1e 	bl	d71e0 <__adddf3>
   d63a4:	4622      	mov	r2, r4
   d63a6:	462b      	mov	r3, r5
   d63a8:	f001 f8d0 	bl	d754c <__aeabi_dmul>
   d63ac:	a376      	add	r3, pc, #472	; (adr r3, d6588 <__ieee754_pow+0x580>)
   d63ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d63b2:	f000 ff15 	bl	d71e0 <__adddf3>
   d63b6:	4622      	mov	r2, r4
   d63b8:	462b      	mov	r3, r5
   d63ba:	f001 f8c7 	bl	d754c <__aeabi_dmul>
   d63be:	a374      	add	r3, pc, #464	; (adr r3, d6590 <__ieee754_pow+0x588>)
   d63c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d63c4:	f000 ff0c 	bl	d71e0 <__adddf3>
   d63c8:	4622      	mov	r2, r4
   d63ca:	462b      	mov	r3, r5
   d63cc:	4604      	mov	r4, r0
   d63ce:	460d      	mov	r5, r1
   d63d0:	4610      	mov	r0, r2
   d63d2:	4619      	mov	r1, r3
   d63d4:	f001 f8ba 	bl	d754c <__aeabi_dmul>
   d63d8:	4602      	mov	r2, r0
   d63da:	460b      	mov	r3, r1
   d63dc:	4620      	mov	r0, r4
   d63de:	4629      	mov	r1, r5
   d63e0:	f001 f8b4 	bl	d754c <__aeabi_dmul>
   d63e4:	4642      	mov	r2, r8
   d63e6:	4604      	mov	r4, r0
   d63e8:	460d      	mov	r5, r1
   d63ea:	464b      	mov	r3, r9
   d63ec:	4650      	mov	r0, sl
   d63ee:	4659      	mov	r1, fp
   d63f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d63f4:	f000 fef4 	bl	d71e0 <__adddf3>
   d63f8:	ec53 2b1a 	vmov	r2, r3, d10
   d63fc:	f001 f8a6 	bl	d754c <__aeabi_dmul>
   d6400:	4622      	mov	r2, r4
   d6402:	462b      	mov	r3, r5
   d6404:	f000 feec 	bl	d71e0 <__adddf3>
   d6408:	4642      	mov	r2, r8
   d640a:	4604      	mov	r4, r0
   d640c:	460d      	mov	r5, r1
   d640e:	464b      	mov	r3, r9
   d6410:	4640      	mov	r0, r8
   d6412:	4649      	mov	r1, r9
   d6414:	f001 f89a 	bl	d754c <__aeabi_dmul>
   d6418:	ec45 4b19 	vmov	d9, r4, r5
   d641c:	4b69      	ldr	r3, [pc, #420]	; (d65c4 <__ieee754_pow+0x5bc>)
   d641e:	2200      	movs	r2, #0
   d6420:	4682      	mov	sl, r0
   d6422:	468b      	mov	fp, r1
   d6424:	f000 fedc 	bl	d71e0 <__adddf3>
   d6428:	ec53 2b19 	vmov	r2, r3, d9
   d642c:	f000 fed8 	bl	d71e0 <__adddf3>
   d6430:	9c00      	ldr	r4, [sp, #0]
   d6432:	460d      	mov	r5, r1
   d6434:	4622      	mov	r2, r4
   d6436:	462b      	mov	r3, r5
   d6438:	4640      	mov	r0, r8
   d643a:	4649      	mov	r1, r9
   d643c:	f001 f886 	bl	d754c <__aeabi_dmul>
   d6440:	4b60      	ldr	r3, [pc, #384]	; (d65c4 <__ieee754_pow+0x5bc>)
   d6442:	4680      	mov	r8, r0
   d6444:	4689      	mov	r9, r1
   d6446:	2200      	movs	r2, #0
   d6448:	4620      	mov	r0, r4
   d644a:	4629      	mov	r1, r5
   d644c:	f000 fec6 	bl	d71dc <__aeabi_dsub>
   d6450:	4652      	mov	r2, sl
   d6452:	465b      	mov	r3, fp
   d6454:	f000 fec2 	bl	d71dc <__aeabi_dsub>
   d6458:	4602      	mov	r2, r0
   d645a:	460b      	mov	r3, r1
   d645c:	ec51 0b19 	vmov	r0, r1, d9
   d6460:	f000 febc 	bl	d71dc <__aeabi_dsub>
   d6464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d6468:	f001 f870 	bl	d754c <__aeabi_dmul>
   d646c:	ec49 8b18 	vmov	d8, r8, r9
   d6470:	4622      	mov	r2, r4
   d6472:	4680      	mov	r8, r0
   d6474:	4689      	mov	r9, r1
   d6476:	462b      	mov	r3, r5
   d6478:	ec51 0b1a 	vmov	r0, r1, d10
   d647c:	f001 f866 	bl	d754c <__aeabi_dmul>
   d6480:	4602      	mov	r2, r0
   d6482:	460b      	mov	r3, r1
   d6484:	4640      	mov	r0, r8
   d6486:	4649      	mov	r1, r9
   d6488:	f000 feaa 	bl	d71e0 <__adddf3>
   d648c:	4682      	mov	sl, r0
   d648e:	468b      	mov	fp, r1
   d6490:	4652      	mov	r2, sl
   d6492:	465b      	mov	r3, fp
   d6494:	ec51 0b18 	vmov	r0, r1, d8
   d6498:	f000 fea2 	bl	d71e0 <__adddf3>
   d649c:	9c00      	ldr	r4, [sp, #0]
   d649e:	a33e      	add	r3, pc, #248	; (adr r3, d6598 <__ieee754_pow+0x590>)
   d64a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d64a4:	4620      	mov	r0, r4
   d64a6:	460d      	mov	r5, r1
   d64a8:	f001 f850 	bl	d754c <__aeabi_dmul>
   d64ac:	ec53 2b18 	vmov	r2, r3, d8
   d64b0:	4680      	mov	r8, r0
   d64b2:	4689      	mov	r9, r1
   d64b4:	4620      	mov	r0, r4
   d64b6:	4629      	mov	r1, r5
   d64b8:	f000 fe90 	bl	d71dc <__aeabi_dsub>
   d64bc:	4602      	mov	r2, r0
   d64be:	460b      	mov	r3, r1
   d64c0:	4650      	mov	r0, sl
   d64c2:	4659      	mov	r1, fp
   d64c4:	f000 fe8a 	bl	d71dc <__aeabi_dsub>
   d64c8:	a335      	add	r3, pc, #212	; (adr r3, d65a0 <__ieee754_pow+0x598>)
   d64ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d64ce:	f001 f83d 	bl	d754c <__aeabi_dmul>
   d64d2:	ec49 8b19 	vmov	d9, r8, r9
   d64d6:	a334      	add	r3, pc, #208	; (adr r3, d65a8 <__ieee754_pow+0x5a0>)
   d64d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d64dc:	4680      	mov	r8, r0
   d64de:	4689      	mov	r9, r1
   d64e0:	4620      	mov	r0, r4
   d64e2:	4629      	mov	r1, r5
   d64e4:	f001 f832 	bl	d754c <__aeabi_dmul>
   d64e8:	4602      	mov	r2, r0
   d64ea:	460b      	mov	r3, r1
   d64ec:	4640      	mov	r0, r8
   d64ee:	4649      	mov	r1, r9
   d64f0:	f000 fe76 	bl	d71e0 <__adddf3>
   d64f4:	ec53 2b1c 	vmov	r2, r3, d12
   d64f8:	f000 fe72 	bl	d71e0 <__adddf3>
   d64fc:	4682      	mov	sl, r0
   d64fe:	9807      	ldr	r0, [sp, #28]
   d6500:	468b      	mov	fp, r1
   d6502:	f000 ffb9 	bl	d7478 <__aeabi_i2d>
   d6506:	4652      	mov	r2, sl
   d6508:	4680      	mov	r8, r0
   d650a:	4689      	mov	r9, r1
   d650c:	465b      	mov	r3, fp
   d650e:	ec51 0b19 	vmov	r0, r1, d9
   d6512:	f000 fe65 	bl	d71e0 <__adddf3>
   d6516:	ec53 2b1b 	vmov	r2, r3, d11
   d651a:	f000 fe61 	bl	d71e0 <__adddf3>
   d651e:	4642      	mov	r2, r8
   d6520:	464b      	mov	r3, r9
   d6522:	f000 fe5d 	bl	d71e0 <__adddf3>
   d6526:	9c00      	ldr	r4, [sp, #0]
   d6528:	4642      	mov	r2, r8
   d652a:	464b      	mov	r3, r9
   d652c:	4620      	mov	r0, r4
   d652e:	460d      	mov	r5, r1
   d6530:	f000 fe54 	bl	d71dc <__aeabi_dsub>
   d6534:	ec53 2b1b 	vmov	r2, r3, d11
   d6538:	f000 fe50 	bl	d71dc <__aeabi_dsub>
   d653c:	ec53 2b19 	vmov	r2, r3, d9
   d6540:	f000 fe4c 	bl	d71dc <__aeabi_dsub>
   d6544:	4602      	mov	r2, r0
   d6546:	460b      	mov	r3, r1
   d6548:	4650      	mov	r0, sl
   d654a:	4659      	mov	r1, fp
   d654c:	f000 fe46 	bl	d71dc <__aeabi_dsub>
   d6550:	4682      	mov	sl, r0
   d6552:	468b      	mov	fp, r1
   d6554:	e038      	b.n	d65c8 <__ieee754_pow+0x5c0>
   d6556:	bf00      	nop
	...
   d6564:	3ff00000 	.word	0x3ff00000
   d6568:	4a454eef 	.word	0x4a454eef
   d656c:	3fca7e28 	.word	0x3fca7e28
   d6570:	93c9db65 	.word	0x93c9db65
   d6574:	3fcd864a 	.word	0x3fcd864a
   d6578:	a91d4101 	.word	0xa91d4101
   d657c:	3fd17460 	.word	0x3fd17460
   d6580:	518f264d 	.word	0x518f264d
   d6584:	3fd55555 	.word	0x3fd55555
   d6588:	db6fabff 	.word	0xdb6fabff
   d658c:	3fdb6db6 	.word	0x3fdb6db6
   d6590:	33333303 	.word	0x33333303
   d6594:	3fe33333 	.word	0x3fe33333
   d6598:	e0000000 	.word	0xe0000000
   d659c:	3feec709 	.word	0x3feec709
   d65a0:	dc3a03fd 	.word	0xdc3a03fd
   d65a4:	3feec709 	.word	0x3feec709
   d65a8:	145b01f5 	.word	0x145b01f5
   d65ac:	be3e2fe0 	.word	0xbe3e2fe0
   d65b0:	7ff00000 	.word	0x7ff00000
   d65b4:	43400000 	.word	0x43400000
   d65b8:	0003988e 	.word	0x0003988e
   d65bc:	000bb679 	.word	0x000bb679
   d65c0:	3ff00000 	.word	0x3ff00000
   d65c4:	40080000 	.word	0x40080000
   d65c8:	9b03      	ldr	r3, [sp, #12]
   d65ca:	9a06      	ldr	r2, [sp, #24]
   d65cc:	3b01      	subs	r3, #1
   d65ce:	4313      	orrs	r3, r2
   d65d0:	f040 8178 	bne.w	d68c4 <__ieee754_pow+0x8bc>
   d65d4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d68e8 <__ieee754_pow+0x8e0>
   d65d8:	eeb0 9a47 	vmov.f32	s18, s14
   d65dc:	eef0 9a67 	vmov.f32	s19, s15
   d65e0:	2300      	movs	r3, #0
   d65e2:	e9cd 6700 	strd	r6, r7, [sp]
   d65e6:	9300      	str	r3, [sp, #0]
   d65e8:	e9dd 8900 	ldrd	r8, r9, [sp]
   d65ec:	4630      	mov	r0, r6
   d65ee:	4642      	mov	r2, r8
   d65f0:	4639      	mov	r1, r7
   d65f2:	464b      	mov	r3, r9
   d65f4:	f000 fdf2 	bl	d71dc <__aeabi_dsub>
   d65f8:	4622      	mov	r2, r4
   d65fa:	462b      	mov	r3, r5
   d65fc:	f000 ffa6 	bl	d754c <__aeabi_dmul>
   d6600:	4632      	mov	r2, r6
   d6602:	463b      	mov	r3, r7
   d6604:	4606      	mov	r6, r0
   d6606:	460f      	mov	r7, r1
   d6608:	4650      	mov	r0, sl
   d660a:	4659      	mov	r1, fp
   d660c:	f000 ff9e 	bl	d754c <__aeabi_dmul>
   d6610:	4602      	mov	r2, r0
   d6612:	460b      	mov	r3, r1
   d6614:	4630      	mov	r0, r6
   d6616:	4639      	mov	r1, r7
   d6618:	f000 fde2 	bl	d71e0 <__adddf3>
   d661c:	4642      	mov	r2, r8
   d661e:	4682      	mov	sl, r0
   d6620:	468b      	mov	fp, r1
   d6622:	464b      	mov	r3, r9
   d6624:	4620      	mov	r0, r4
   d6626:	4629      	mov	r1, r5
   d6628:	f000 ff90 	bl	d754c <__aeabi_dmul>
   d662c:	4606      	mov	r6, r0
   d662e:	460f      	mov	r7, r1
   d6630:	463b      	mov	r3, r7
   d6632:	4650      	mov	r0, sl
   d6634:	4659      	mov	r1, fp
   d6636:	4632      	mov	r2, r6
   d6638:	f000 fdd2 	bl	d71e0 <__adddf3>
   d663c:	4bc4      	ldr	r3, [pc, #784]	; (d6950 <__ieee754_pow+0x948>)
   d663e:	4299      	cmp	r1, r3
   d6640:	4604      	mov	r4, r0
   d6642:	460d      	mov	r5, r1
   d6644:	4688      	mov	r8, r1
   d6646:	f340 8117 	ble.w	d6878 <__ieee754_pow+0x870>
   d664a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d664e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d6652:	4303      	orrs	r3, r0
   d6654:	f040 822a 	bne.w	d6aac <__ieee754_pow+0xaa4>
   d6658:	a3a5      	add	r3, pc, #660	; (adr r3, d68f0 <__ieee754_pow+0x8e8>)
   d665a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d665e:	4650      	mov	r0, sl
   d6660:	4659      	mov	r1, fp
   d6662:	f000 fdbd 	bl	d71e0 <__adddf3>
   d6666:	4632      	mov	r2, r6
   d6668:	ec41 0b18 	vmov	d8, r0, r1
   d666c:	463b      	mov	r3, r7
   d666e:	4620      	mov	r0, r4
   d6670:	4629      	mov	r1, r5
   d6672:	f000 fdb3 	bl	d71dc <__aeabi_dsub>
   d6676:	4602      	mov	r2, r0
   d6678:	460b      	mov	r3, r1
   d667a:	ec51 0b18 	vmov	r0, r1, d8
   d667e:	f001 f9f5 	bl	d7a6c <__aeabi_dcmpgt>
   d6682:	2800      	cmp	r0, #0
   d6684:	f040 8212 	bne.w	d6aac <__ieee754_pow+0xaa4>
   d6688:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d668c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d6690:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d6694:	fa42 f303 	asr.w	r3, r2, r3
   d6698:	4443      	add	r3, r8
   d669a:	49ae      	ldr	r1, [pc, #696]	; (d6954 <__ieee754_pow+0x94c>)
   d669c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d66a0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d66a4:	fa41 fc02 	asr.w	ip, r1, r2
   d66a8:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d66ac:	ea23 010c 	bic.w	r1, r3, ip
   d66b0:	f1c2 0414 	rsb	r4, r2, #20
   d66b4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d66b8:	f1b8 0f00 	cmp.w	r8, #0
   d66bc:	460b      	mov	r3, r1
   d66be:	fa45 f104 	asr.w	r1, r5, r4
   d66c2:	9103      	str	r1, [sp, #12]
   d66c4:	f04f 0000 	mov.w	r0, #0
   d66c8:	bfb8      	it	lt
   d66ca:	4249      	neglt	r1, r1
   d66cc:	4602      	mov	r2, r0
   d66ce:	bfb8      	it	lt
   d66d0:	9103      	strlt	r1, [sp, #12]
   d66d2:	4630      	mov	r0, r6
   d66d4:	4639      	mov	r1, r7
   d66d6:	f000 fd81 	bl	d71dc <__aeabi_dsub>
   d66da:	4606      	mov	r6, r0
   d66dc:	460f      	mov	r7, r1
   d66de:	463b      	mov	r3, r7
   d66e0:	4650      	mov	r0, sl
   d66e2:	4659      	mov	r1, fp
   d66e4:	4632      	mov	r2, r6
   d66e6:	f000 fd7b 	bl	d71e0 <__adddf3>
   d66ea:	9b03      	ldr	r3, [sp, #12]
   d66ec:	051b      	lsls	r3, r3, #20
   d66ee:	9300      	str	r3, [sp, #0]
   d66f0:	460d      	mov	r5, r1
   d66f2:	2400      	movs	r4, #0
   d66f4:	a380      	add	r3, pc, #512	; (adr r3, d68f8 <__ieee754_pow+0x8f0>)
   d66f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d66fa:	4620      	mov	r0, r4
   d66fc:	4629      	mov	r1, r5
   d66fe:	f000 ff25 	bl	d754c <__aeabi_dmul>
   d6702:	4632      	mov	r2, r6
   d6704:	4680      	mov	r8, r0
   d6706:	4689      	mov	r9, r1
   d6708:	463b      	mov	r3, r7
   d670a:	4620      	mov	r0, r4
   d670c:	4629      	mov	r1, r5
   d670e:	f000 fd65 	bl	d71dc <__aeabi_dsub>
   d6712:	4602      	mov	r2, r0
   d6714:	460b      	mov	r3, r1
   d6716:	4650      	mov	r0, sl
   d6718:	4659      	mov	r1, fp
   d671a:	f000 fd5f 	bl	d71dc <__aeabi_dsub>
   d671e:	a378      	add	r3, pc, #480	; (adr r3, d6900 <__ieee754_pow+0x8f8>)
   d6720:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6724:	f000 ff12 	bl	d754c <__aeabi_dmul>
   d6728:	a377      	add	r3, pc, #476	; (adr r3, d6908 <__ieee754_pow+0x900>)
   d672a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d672e:	4606      	mov	r6, r0
   d6730:	460f      	mov	r7, r1
   d6732:	4620      	mov	r0, r4
   d6734:	4629      	mov	r1, r5
   d6736:	f000 ff09 	bl	d754c <__aeabi_dmul>
   d673a:	4602      	mov	r2, r0
   d673c:	460b      	mov	r3, r1
   d673e:	4630      	mov	r0, r6
   d6740:	4639      	mov	r1, r7
   d6742:	f000 fd4d 	bl	d71e0 <__adddf3>
   d6746:	4606      	mov	r6, r0
   d6748:	460f      	mov	r7, r1
   d674a:	4632      	mov	r2, r6
   d674c:	463b      	mov	r3, r7
   d674e:	4640      	mov	r0, r8
   d6750:	4649      	mov	r1, r9
   d6752:	f000 fd45 	bl	d71e0 <__adddf3>
   d6756:	4642      	mov	r2, r8
   d6758:	464b      	mov	r3, r9
   d675a:	4604      	mov	r4, r0
   d675c:	460d      	mov	r5, r1
   d675e:	f000 fd3d 	bl	d71dc <__aeabi_dsub>
   d6762:	4602      	mov	r2, r0
   d6764:	460b      	mov	r3, r1
   d6766:	4630      	mov	r0, r6
   d6768:	4639      	mov	r1, r7
   d676a:	f000 fd37 	bl	d71dc <__aeabi_dsub>
   d676e:	4622      	mov	r2, r4
   d6770:	4682      	mov	sl, r0
   d6772:	468b      	mov	fp, r1
   d6774:	462b      	mov	r3, r5
   d6776:	4620      	mov	r0, r4
   d6778:	4629      	mov	r1, r5
   d677a:	f000 fee7 	bl	d754c <__aeabi_dmul>
   d677e:	a364      	add	r3, pc, #400	; (adr r3, d6910 <__ieee754_pow+0x908>)
   d6780:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6784:	4606      	mov	r6, r0
   d6786:	460f      	mov	r7, r1
   d6788:	f000 fee0 	bl	d754c <__aeabi_dmul>
   d678c:	a362      	add	r3, pc, #392	; (adr r3, d6918 <__ieee754_pow+0x910>)
   d678e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6792:	f000 fd23 	bl	d71dc <__aeabi_dsub>
   d6796:	4632      	mov	r2, r6
   d6798:	463b      	mov	r3, r7
   d679a:	f000 fed7 	bl	d754c <__aeabi_dmul>
   d679e:	a360      	add	r3, pc, #384	; (adr r3, d6920 <__ieee754_pow+0x918>)
   d67a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67a4:	f000 fd1c 	bl	d71e0 <__adddf3>
   d67a8:	4632      	mov	r2, r6
   d67aa:	463b      	mov	r3, r7
   d67ac:	f000 fece 	bl	d754c <__aeabi_dmul>
   d67b0:	a35d      	add	r3, pc, #372	; (adr r3, d6928 <__ieee754_pow+0x920>)
   d67b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67b6:	f000 fd11 	bl	d71dc <__aeabi_dsub>
   d67ba:	4632      	mov	r2, r6
   d67bc:	463b      	mov	r3, r7
   d67be:	f000 fec5 	bl	d754c <__aeabi_dmul>
   d67c2:	a35b      	add	r3, pc, #364	; (adr r3, d6930 <__ieee754_pow+0x928>)
   d67c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d67c8:	f000 fd0a 	bl	d71e0 <__adddf3>
   d67cc:	4632      	mov	r2, r6
   d67ce:	463b      	mov	r3, r7
   d67d0:	f000 febc 	bl	d754c <__aeabi_dmul>
   d67d4:	4602      	mov	r2, r0
   d67d6:	460b      	mov	r3, r1
   d67d8:	4620      	mov	r0, r4
   d67da:	4629      	mov	r1, r5
   d67dc:	f000 fcfe 	bl	d71dc <__aeabi_dsub>
   d67e0:	4606      	mov	r6, r0
   d67e2:	460f      	mov	r7, r1
   d67e4:	4632      	mov	r2, r6
   d67e6:	463b      	mov	r3, r7
   d67e8:	4620      	mov	r0, r4
   d67ea:	4629      	mov	r1, r5
   d67ec:	f000 feae 	bl	d754c <__aeabi_dmul>
   d67f0:	2200      	movs	r2, #0
   d67f2:	4680      	mov	r8, r0
   d67f4:	4689      	mov	r9, r1
   d67f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d67fa:	4630      	mov	r0, r6
   d67fc:	4639      	mov	r1, r7
   d67fe:	f000 fced 	bl	d71dc <__aeabi_dsub>
   d6802:	4602      	mov	r2, r0
   d6804:	460b      	mov	r3, r1
   d6806:	4640      	mov	r0, r8
   d6808:	4649      	mov	r1, r9
   d680a:	f000 ffc9 	bl	d77a0 <__aeabi_ddiv>
   d680e:	4652      	mov	r2, sl
   d6810:	4606      	mov	r6, r0
   d6812:	460f      	mov	r7, r1
   d6814:	465b      	mov	r3, fp
   d6816:	4620      	mov	r0, r4
   d6818:	4629      	mov	r1, r5
   d681a:	f000 fe97 	bl	d754c <__aeabi_dmul>
   d681e:	4652      	mov	r2, sl
   d6820:	465b      	mov	r3, fp
   d6822:	f000 fcdd 	bl	d71e0 <__adddf3>
   d6826:	4602      	mov	r2, r0
   d6828:	460b      	mov	r3, r1
   d682a:	4630      	mov	r0, r6
   d682c:	4639      	mov	r1, r7
   d682e:	f000 fcd5 	bl	d71dc <__aeabi_dsub>
   d6832:	4622      	mov	r2, r4
   d6834:	462b      	mov	r3, r5
   d6836:	f000 fcd1 	bl	d71dc <__aeabi_dsub>
   d683a:	4602      	mov	r2, r0
   d683c:	460b      	mov	r3, r1
   d683e:	2000      	movs	r0, #0
   d6840:	4945      	ldr	r1, [pc, #276]	; (d6958 <__ieee754_pow+0x950>)
   d6842:	f000 fccb 	bl	d71dc <__aeabi_dsub>
   d6846:	460b      	mov	r3, r1
   d6848:	9900      	ldr	r1, [sp, #0]
   d684a:	4419      	add	r1, r3
   d684c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6850:	4602      	mov	r2, r0
   d6852:	f2c0 8169 	blt.w	d6b28 <__ieee754_pow+0xb20>
   d6856:	4610      	mov	r0, r2
   d6858:	ec53 2b19 	vmov	r2, r3, d9
   d685c:	f000 fe76 	bl	d754c <__aeabi_dmul>
   d6860:	e9cd 0100 	strd	r0, r1, [sp]
   d6864:	e41e      	b.n	d60a4 <__ieee754_pow+0x9c>
   d6866:	f1bb 0f00 	cmp.w	fp, #0
   d686a:	f6ff ac95 	blt.w	d6198 <__ieee754_pow+0x190>
   d686e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d6938 <__ieee754_pow+0x930>
   d6872:	ed8d 7b00 	vstr	d7, [sp]
   d6876:	e415      	b.n	d60a4 <__ieee754_pow+0x9c>
   d6878:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d6960 <__ieee754_pow+0x958>
   d687c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d6880:	4563      	cmp	r3, ip
   d6882:	f340 810b 	ble.w	d6a9c <__ieee754_pow+0xa94>
   d6886:	4b35      	ldr	r3, [pc, #212]	; (d695c <__ieee754_pow+0x954>)
   d6888:	440b      	add	r3, r1
   d688a:	4303      	orrs	r3, r0
   d688c:	d10a      	bne.n	d68a4 <__ieee754_pow+0x89c>
   d688e:	4632      	mov	r2, r6
   d6890:	463b      	mov	r3, r7
   d6892:	f000 fca3 	bl	d71dc <__aeabi_dsub>
   d6896:	4652      	mov	r2, sl
   d6898:	465b      	mov	r3, fp
   d689a:	f001 f8dd 	bl	d7a58 <__aeabi_dcmpge>
   d689e:	2800      	cmp	r0, #0
   d68a0:	f43f aef2 	beq.w	d6688 <__ieee754_pow+0x680>
   d68a4:	a326      	add	r3, pc, #152	; (adr r3, d6940 <__ieee754_pow+0x938>)
   d68a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d68aa:	ec51 0b19 	vmov	r0, r1, d9
   d68ae:	f000 fe4d 	bl	d754c <__aeabi_dmul>
   d68b2:	a323      	add	r3, pc, #140	; (adr r3, d6940 <__ieee754_pow+0x938>)
   d68b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d68b8:	f000 fe48 	bl	d754c <__aeabi_dmul>
   d68bc:	e9cd 0100 	strd	r0, r1, [sp]
   d68c0:	f7ff bbf0 	b.w	d60a4 <__ieee754_pow+0x9c>
   d68c4:	ed9f 7b20 	vldr	d7, [pc, #128]	; d6948 <__ieee754_pow+0x940>
   d68c8:	eeb0 9a47 	vmov.f32	s18, s14
   d68cc:	eef0 9a67 	vmov.f32	s19, s15
   d68d0:	e686      	b.n	d65e0 <__ieee754_pow+0x5d8>
   d68d2:	f1bb 0f00 	cmp.w	fp, #0
   d68d6:	daca      	bge.n	d686e <__ieee754_pow+0x866>
   d68d8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d68dc:	9600      	str	r6, [sp, #0]
   d68de:	9301      	str	r3, [sp, #4]
   d68e0:	f7ff bbe0 	b.w	d60a4 <__ieee754_pow+0x9c>
   d68e4:	f3af 8000 	nop.w
   d68e8:	00000000 	.word	0x00000000
   d68ec:	bff00000 	.word	0xbff00000
   d68f0:	652b82fe 	.word	0x652b82fe
   d68f4:	3c971547 	.word	0x3c971547
   d68f8:	00000000 	.word	0x00000000
   d68fc:	3fe62e43 	.word	0x3fe62e43
   d6900:	fefa39ef 	.word	0xfefa39ef
   d6904:	3fe62e42 	.word	0x3fe62e42
   d6908:	0ca86c39 	.word	0x0ca86c39
   d690c:	be205c61 	.word	0xbe205c61
   d6910:	72bea4d0 	.word	0x72bea4d0
   d6914:	3e663769 	.word	0x3e663769
   d6918:	c5d26bf1 	.word	0xc5d26bf1
   d691c:	3ebbbd41 	.word	0x3ebbbd41
   d6920:	af25de2c 	.word	0xaf25de2c
   d6924:	3f11566a 	.word	0x3f11566a
   d6928:	16bebd93 	.word	0x16bebd93
   d692c:	3f66c16c 	.word	0x3f66c16c
   d6930:	5555553e 	.word	0x5555553e
   d6934:	3fc55555 	.word	0x3fc55555
	...
   d6940:	c2f8f359 	.word	0xc2f8f359
   d6944:	01a56e1f 	.word	0x01a56e1f
   d6948:	00000000 	.word	0x00000000
   d694c:	3ff00000 	.word	0x3ff00000
   d6950:	408fffff 	.word	0x408fffff
   d6954:	000fffff 	.word	0x000fffff
   d6958:	3ff00000 	.word	0x3ff00000
   d695c:	3f6f3400 	.word	0x3f6f3400
   d6960:	4090cbff 	.word	0x4090cbff
   d6964:	4598      	cmp	r8, r3
   d6966:	f6ff af7e 	blt.w	d6866 <__ieee754_pow+0x85e>
   d696a:	4b91      	ldr	r3, [pc, #580]	; (d6bb0 <__ieee754_pow+0xba8>)
   d696c:	4598      	cmp	r8, r3
   d696e:	f73f ac0f 	bgt.w	d6190 <__ieee754_pow+0x188>
   d6972:	4b8f      	ldr	r3, [pc, #572]	; (d6bb0 <__ieee754_pow+0xba8>)
   d6974:	2200      	movs	r2, #0
   d6976:	e9dd 0100 	ldrd	r0, r1, [sp]
   d697a:	f000 fc2f 	bl	d71dc <__aeabi_dsub>
   d697e:	a378      	add	r3, pc, #480	; (adr r3, d6b60 <__ieee754_pow+0xb58>)
   d6980:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6984:	4604      	mov	r4, r0
   d6986:	460d      	mov	r5, r1
   d6988:	f000 fde0 	bl	d754c <__aeabi_dmul>
   d698c:	a376      	add	r3, pc, #472	; (adr r3, d6b68 <__ieee754_pow+0xb60>)
   d698e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6992:	4682      	mov	sl, r0
   d6994:	468b      	mov	fp, r1
   d6996:	4620      	mov	r0, r4
   d6998:	4629      	mov	r1, r5
   d699a:	f000 fdd7 	bl	d754c <__aeabi_dmul>
   d699e:	4b85      	ldr	r3, [pc, #532]	; (d6bb4 <__ieee754_pow+0xbac>)
   d69a0:	4680      	mov	r8, r0
   d69a2:	4689      	mov	r9, r1
   d69a4:	2200      	movs	r2, #0
   d69a6:	4620      	mov	r0, r4
   d69a8:	4629      	mov	r1, r5
   d69aa:	f000 fdcf 	bl	d754c <__aeabi_dmul>
   d69ae:	4602      	mov	r2, r0
   d69b0:	460b      	mov	r3, r1
   d69b2:	a16f      	add	r1, pc, #444	; (adr r1, d6b70 <__ieee754_pow+0xb68>)
   d69b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d69b8:	f000 fc10 	bl	d71dc <__aeabi_dsub>
   d69bc:	4622      	mov	r2, r4
   d69be:	462b      	mov	r3, r5
   d69c0:	f000 fdc4 	bl	d754c <__aeabi_dmul>
   d69c4:	4602      	mov	r2, r0
   d69c6:	460b      	mov	r3, r1
   d69c8:	2000      	movs	r0, #0
   d69ca:	497b      	ldr	r1, [pc, #492]	; (d6bb8 <__ieee754_pow+0xbb0>)
   d69cc:	f000 fc06 	bl	d71dc <__aeabi_dsub>
   d69d0:	4622      	mov	r2, r4
   d69d2:	462b      	mov	r3, r5
   d69d4:	4604      	mov	r4, r0
   d69d6:	460d      	mov	r5, r1
   d69d8:	4610      	mov	r0, r2
   d69da:	4619      	mov	r1, r3
   d69dc:	f000 fdb6 	bl	d754c <__aeabi_dmul>
   d69e0:	4602      	mov	r2, r0
   d69e2:	460b      	mov	r3, r1
   d69e4:	4620      	mov	r0, r4
   d69e6:	4629      	mov	r1, r5
   d69e8:	f000 fdb0 	bl	d754c <__aeabi_dmul>
   d69ec:	a362      	add	r3, pc, #392	; (adr r3, d6b78 <__ieee754_pow+0xb70>)
   d69ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69f2:	f000 fdab 	bl	d754c <__aeabi_dmul>
   d69f6:	4602      	mov	r2, r0
   d69f8:	460b      	mov	r3, r1
   d69fa:	4640      	mov	r0, r8
   d69fc:	4649      	mov	r1, r9
   d69fe:	f000 fbed 	bl	d71dc <__aeabi_dsub>
   d6a02:	4680      	mov	r8, r0
   d6a04:	4689      	mov	r9, r1
   d6a06:	4650      	mov	r0, sl
   d6a08:	4659      	mov	r1, fp
   d6a0a:	4642      	mov	r2, r8
   d6a0c:	464b      	mov	r3, r9
   d6a0e:	f000 fbe7 	bl	d71e0 <__adddf3>
   d6a12:	2400      	movs	r4, #0
   d6a14:	4652      	mov	r2, sl
   d6a16:	465b      	mov	r3, fp
   d6a18:	4620      	mov	r0, r4
   d6a1a:	460d      	mov	r5, r1
   d6a1c:	f000 fbde 	bl	d71dc <__aeabi_dsub>
   d6a20:	4602      	mov	r2, r0
   d6a22:	460b      	mov	r3, r1
   d6a24:	4640      	mov	r0, r8
   d6a26:	4649      	mov	r1, r9
   d6a28:	f000 fbd8 	bl	d71dc <__aeabi_dsub>
   d6a2c:	4682      	mov	sl, r0
   d6a2e:	468b      	mov	fp, r1
   d6a30:	e5ca      	b.n	d65c8 <__ieee754_pow+0x5c0>
   d6a32:	ed9f 7b53 	vldr	d7, [pc, #332]	; d6b80 <__ieee754_pow+0xb78>
   d6a36:	eeb0 ba47 	vmov.f32	s22, s14
   d6a3a:	eef0 ba67 	vmov.f32	s23, s15
   d6a3e:	eeb0 ca47 	vmov.f32	s24, s14
   d6a42:	eef0 ca67 	vmov.f32	s25, s15
   d6a46:	ed9f 7b50 	vldr	d7, [pc, #320]	; d6b88 <__ieee754_pow+0xb80>
   d6a4a:	f04f 0900 	mov.w	r9, #0
   d6a4e:	ec54 3b17 	vmov	r3, r4, d7
   d6a52:	e41d      	b.n	d6290 <__ieee754_pow+0x288>
   d6a54:	2000      	movs	r0, #0
   d6a56:	f7ff bbf3 	b.w	d6240 <__ieee754_pow+0x238>
   d6a5a:	4955      	ldr	r1, [pc, #340]	; (d6bb0 <__ieee754_pow+0xba8>)
   d6a5c:	4622      	mov	r2, r4
   d6a5e:	462b      	mov	r3, r5
   d6a60:	2000      	movs	r0, #0
   d6a62:	f000 fe9d 	bl	d77a0 <__aeabi_ddiv>
   d6a66:	e9cd 0100 	strd	r0, r1, [sp]
   d6a6a:	f7ff bb1b 	b.w	d60a4 <__ieee754_pow+0x9c>
   d6a6e:	4622      	mov	r2, r4
   d6a70:	462b      	mov	r3, r5
   d6a72:	4620      	mov	r0, r4
   d6a74:	4629      	mov	r1, r5
   d6a76:	f000 fd69 	bl	d754c <__aeabi_dmul>
   d6a7a:	e9cd 0100 	strd	r0, r1, [sp]
   d6a7e:	f7ff bb11 	b.w	d60a4 <__ieee754_pow+0x9c>
   d6a82:	2b00      	cmp	r3, #0
   d6a84:	d142      	bne.n	d6b0c <__ieee754_pow+0xb04>
   d6a86:	f1c1 0114 	rsb	r1, r1, #20
   d6a8a:	fa4a f001 	asr.w	r0, sl, r1
   d6a8e:	fa00 f101 	lsl.w	r1, r0, r1
   d6a92:	4551      	cmp	r1, sl
   d6a94:	d05a      	beq.n	d6b4c <__ieee754_pow+0xb44>
   d6a96:	9303      	str	r3, [sp, #12]
   d6a98:	f7ff bae0 	b.w	d605c <__ieee754_pow+0x54>
   d6a9c:	4a46      	ldr	r2, [pc, #280]	; (d6bb8 <__ieee754_pow+0xbb0>)
   d6a9e:	4293      	cmp	r3, r2
   d6aa0:	dc5b      	bgt.n	d6b5a <__ieee754_pow+0xb52>
   d6aa2:	e9dd 1200 	ldrd	r1, r2, [sp]
   d6aa6:	9100      	str	r1, [sp, #0]
   d6aa8:	9103      	str	r1, [sp, #12]
   d6aaa:	e622      	b.n	d66f2 <__ieee754_pow+0x6ea>
   d6aac:	a338      	add	r3, pc, #224	; (adr r3, d6b90 <__ieee754_pow+0xb88>)
   d6aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ab2:	ec51 0b19 	vmov	r0, r1, d9
   d6ab6:	f000 fd49 	bl	d754c <__aeabi_dmul>
   d6aba:	a335      	add	r3, pc, #212	; (adr r3, d6b90 <__ieee754_pow+0xb88>)
   d6abc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ac0:	f000 fd44 	bl	d754c <__aeabi_dmul>
   d6ac4:	e9cd 0100 	strd	r0, r1, [sp]
   d6ac8:	f7ff baec 	b.w	d60a4 <__ieee754_pow+0x9c>
   d6acc:	9b03      	ldr	r3, [sp, #12]
   d6ace:	2b01      	cmp	r3, #1
   d6ad0:	f47f aae8 	bne.w	d60a4 <__ieee754_pow+0x9c>
   d6ad4:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6ad8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6adc:	e9cd 2300 	strd	r2, r3, [sp]
   d6ae0:	f7ff bae0 	b.w	d60a4 <__ieee754_pow+0x9c>
   d6ae4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d6b98 <__ieee754_pow+0xb90>
   d6ae8:	eeb0 ba47 	vmov.f32	s22, s14
   d6aec:	eef0 ba67 	vmov.f32	s23, s15
   d6af0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d6ba0 <__ieee754_pow+0xb98>
   d6af4:	eeb0 ca47 	vmov.f32	s24, s14
   d6af8:	eef0 ca67 	vmov.f32	s25, s15
   d6afc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d6ba8 <__ieee754_pow+0xba0>
   d6b00:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d6b04:	ec54 3b17 	vmov	r3, r4, d7
   d6b08:	f7ff bbc2 	b.w	d6290 <__ieee754_pow+0x288>
   d6b0c:	ec45 4b10 	vmov	d0, r4, r5
   d6b10:	9203      	str	r2, [sp, #12]
   d6b12:	f000 fa17 	bl	d6f44 <fabs>
   d6b16:	9a03      	ldr	r2, [sp, #12]
   d6b18:	ed8d 0b00 	vstr	d0, [sp]
   d6b1c:	2a00      	cmp	r2, #0
   d6b1e:	f47f ab61 	bne.w	d61e4 <__ieee754_pow+0x1dc>
   d6b22:	9203      	str	r2, [sp, #12]
   d6b24:	f7ff baf5 	b.w	d6112 <__ieee754_pow+0x10a>
   d6b28:	9803      	ldr	r0, [sp, #12]
   d6b2a:	ec43 2b10 	vmov	d0, r2, r3
   d6b2e:	f000 fabf 	bl	d70b0 <scalbn>
   d6b32:	ec51 0b10 	vmov	r0, r1, d0
   d6b36:	e68f      	b.n	d6858 <__ieee754_pow+0x850>
   d6b38:	f000 0001 	and.w	r0, r0, #1
   d6b3c:	f1c0 0102 	rsb	r1, r0, #2
   d6b40:	9103      	str	r1, [sp, #12]
   d6b42:	2b00      	cmp	r3, #0
   d6b44:	f43f aa8a 	beq.w	d605c <__ieee754_pow+0x54>
   d6b48:	f7ff bada 	b.w	d6100 <__ieee754_pow+0xf8>
   d6b4c:	f000 0001 	and.w	r0, r0, #1
   d6b50:	f1c0 0302 	rsb	r3, r0, #2
   d6b54:	9303      	str	r3, [sp, #12]
   d6b56:	f7ff ba81 	b.w	d605c <__ieee754_pow+0x54>
   d6b5a:	151b      	asrs	r3, r3, #20
   d6b5c:	e596      	b.n	d668c <__ieee754_pow+0x684>
   d6b5e:	bf00      	nop
   d6b60:	60000000 	.word	0x60000000
   d6b64:	3ff71547 	.word	0x3ff71547
   d6b68:	f85ddf44 	.word	0xf85ddf44
   d6b6c:	3e54ae0b 	.word	0x3e54ae0b
   d6b70:	55555555 	.word	0x55555555
   d6b74:	3fd55555 	.word	0x3fd55555
   d6b78:	652b82fe 	.word	0x652b82fe
   d6b7c:	3ff71547 	.word	0x3ff71547
	...
   d6b8c:	3ff00000 	.word	0x3ff00000
   d6b90:	8800759c 	.word	0x8800759c
   d6b94:	7e37e43c 	.word	0x7e37e43c
   d6b98:	40000000 	.word	0x40000000
   d6b9c:	3fe2b803 	.word	0x3fe2b803
   d6ba0:	43cfd006 	.word	0x43cfd006
   d6ba4:	3e4cfdeb 	.word	0x3e4cfdeb
   d6ba8:	00000000 	.word	0x00000000
   d6bac:	3ff80000 	.word	0x3ff80000
   d6bb0:	3ff00000 	.word	0x3ff00000
   d6bb4:	3fd00000 	.word	0x3fd00000
   d6bb8:	3fe00000 	.word	0x3fe00000

000d6bbc <__ieee754_sqrt>:
   d6bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6bc0:	4a5f      	ldr	r2, [pc, #380]	; (d6d40 <__ieee754_sqrt+0x184>)
   d6bc2:	ec57 6b10 	vmov	r6, r7, d0
   d6bc6:	43ba      	bics	r2, r7
   d6bc8:	f000 8098 	beq.w	d6cfc <__ieee754_sqrt+0x140>
   d6bcc:	2f00      	cmp	r7, #0
   d6bce:	ee10 4a10 	vmov	r4, s0
   d6bd2:	463b      	mov	r3, r7
   d6bd4:	dd4e      	ble.n	d6c74 <__ieee754_sqrt+0xb8>
   d6bd6:	1539      	asrs	r1, r7, #20
   d6bd8:	d05b      	beq.n	d6c92 <__ieee754_sqrt+0xd6>
   d6bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6bde:	07ca      	lsls	r2, r1, #31
   d6be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6be4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d6be8:	d403      	bmi.n	d6bf2 <__ieee754_sqrt+0x36>
   d6bea:	005b      	lsls	r3, r3, #1
   d6bec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d6bf0:	0064      	lsls	r4, r4, #1
   d6bf2:	0fe2      	lsrs	r2, r4, #31
   d6bf4:	f04f 0c00 	mov.w	ip, #0
   d6bf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d6bfc:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d6c00:	0064      	lsls	r4, r4, #1
   d6c02:	4666      	mov	r6, ip
   d6c04:	2516      	movs	r5, #22
   d6c06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d6c0a:	18b1      	adds	r1, r6, r2
   d6c0c:	4299      	cmp	r1, r3
   d6c0e:	dc02      	bgt.n	d6c16 <__ieee754_sqrt+0x5a>
   d6c10:	1a5b      	subs	r3, r3, r1
   d6c12:	188e      	adds	r6, r1, r2
   d6c14:	4494      	add	ip, r2
   d6c16:	005b      	lsls	r3, r3, #1
   d6c18:	3d01      	subs	r5, #1
   d6c1a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d6c1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d6c22:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d6c26:	d1f0      	bne.n	d6c0a <__ieee754_sqrt+0x4e>
   d6c28:	462f      	mov	r7, r5
   d6c2a:	2020      	movs	r0, #32
   d6c2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d6c30:	e009      	b.n	d6c46 <__ieee754_sqrt+0x8a>
   d6c32:	d03e      	beq.n	d6cb2 <__ieee754_sqrt+0xf6>
   d6c34:	0fe1      	lsrs	r1, r4, #31
   d6c36:	3801      	subs	r0, #1
   d6c38:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d6c3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d6c40:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d6c44:	d03e      	beq.n	d6cc4 <__ieee754_sqrt+0x108>
   d6c46:	42b3      	cmp	r3, r6
   d6c48:	eb02 0105 	add.w	r1, r2, r5
   d6c4c:	ddf1      	ble.n	d6c32 <__ieee754_sqrt+0x76>
   d6c4e:	2900      	cmp	r1, #0
   d6c50:	eb01 0502 	add.w	r5, r1, r2
   d6c54:	db09      	blt.n	d6c6a <__ieee754_sqrt+0xae>
   d6c56:	46b0      	mov	r8, r6
   d6c58:	1b9b      	subs	r3, r3, r6
   d6c5a:	42a1      	cmp	r1, r4
   d6c5c:	bf88      	it	hi
   d6c5e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d6c62:	1a64      	subs	r4, r4, r1
   d6c64:	4417      	add	r7, r2
   d6c66:	4646      	mov	r6, r8
   d6c68:	e7e4      	b.n	d6c34 <__ieee754_sqrt+0x78>
   d6c6a:	2d00      	cmp	r5, #0
   d6c6c:	dbf3      	blt.n	d6c56 <__ieee754_sqrt+0x9a>
   d6c6e:	f106 0801 	add.w	r8, r6, #1
   d6c72:	e7f1      	b.n	d6c58 <__ieee754_sqrt+0x9c>
   d6c74:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d6c78:	4332      	orrs	r2, r6
   d6c7a:	d036      	beq.n	d6cea <__ieee754_sqrt+0x12e>
   d6c7c:	2f00      	cmp	r7, #0
   d6c7e:	d14d      	bne.n	d6d1c <__ieee754_sqrt+0x160>
   d6c80:	4639      	mov	r1, r7
   d6c82:	0ae2      	lsrs	r2, r4, #11
   d6c84:	3915      	subs	r1, #21
   d6c86:	0564      	lsls	r4, r4, #21
   d6c88:	4613      	mov	r3, r2
   d6c8a:	2a00      	cmp	r2, #0
   d6c8c:	d0f9      	beq.n	d6c82 <__ieee754_sqrt+0xc6>
   d6c8e:	02d7      	lsls	r7, r2, #11
   d6c90:	d451      	bmi.n	d6d36 <__ieee754_sqrt+0x17a>
   d6c92:	2000      	movs	r0, #0
   d6c94:	005b      	lsls	r3, r3, #1
   d6c96:	02de      	lsls	r6, r3, #11
   d6c98:	4605      	mov	r5, r0
   d6c9a:	f100 0001 	add.w	r0, r0, #1
   d6c9e:	d5f9      	bpl.n	d6c94 <__ieee754_sqrt+0xd8>
   d6ca0:	461a      	mov	r2, r3
   d6ca2:	4623      	mov	r3, r4
   d6ca4:	4084      	lsls	r4, r0
   d6ca6:	f1c0 0020 	rsb	r0, r0, #32
   d6caa:	40c3      	lsrs	r3, r0
   d6cac:	4313      	orrs	r3, r2
   d6cae:	1b49      	subs	r1, r1, r5
   d6cb0:	e793      	b.n	d6bda <__ieee754_sqrt+0x1e>
   d6cb2:	42a1      	cmp	r1, r4
   d6cb4:	d8be      	bhi.n	d6c34 <__ieee754_sqrt+0x78>
   d6cb6:	2900      	cmp	r1, #0
   d6cb8:	eb01 0502 	add.w	r5, r1, r2
   d6cbc:	dbd5      	blt.n	d6c6a <__ieee754_sqrt+0xae>
   d6cbe:	4698      	mov	r8, r3
   d6cc0:	2300      	movs	r3, #0
   d6cc2:	e7ce      	b.n	d6c62 <__ieee754_sqrt+0xa6>
   d6cc4:	4323      	orrs	r3, r4
   d6cc6:	d112      	bne.n	d6cee <__ieee754_sqrt+0x132>
   d6cc8:	0878      	lsrs	r0, r7, #1
   d6cca:	ea4f 016c 	mov.w	r1, ip, asr #1
   d6cce:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6cd2:	f01c 0f01 	tst.w	ip, #1
   d6cd6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6cda:	bf18      	it	ne
   d6cdc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d6ce0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d6ce4:	4602      	mov	r2, r0
   d6ce6:	ec43 2b10 	vmov	d0, r2, r3
   d6cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6cee:	1c7b      	adds	r3, r7, #1
   d6cf0:	bf16      	itet	ne
   d6cf2:	1c78      	addne	r0, r7, #1
   d6cf4:	f10c 0c01 	addeq.w	ip, ip, #1
   d6cf8:	0840      	lsrne	r0, r0, #1
   d6cfa:	e7e6      	b.n	d6cca <__ieee754_sqrt+0x10e>
   d6cfc:	ee10 2a10 	vmov	r2, s0
   d6d00:	ee10 0a10 	vmov	r0, s0
   d6d04:	463b      	mov	r3, r7
   d6d06:	4639      	mov	r1, r7
   d6d08:	f000 fc20 	bl	d754c <__aeabi_dmul>
   d6d0c:	4632      	mov	r2, r6
   d6d0e:	463b      	mov	r3, r7
   d6d10:	f000 fa66 	bl	d71e0 <__adddf3>
   d6d14:	ec41 0b10 	vmov	d0, r0, r1
   d6d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6d1c:	ee10 2a10 	vmov	r2, s0
   d6d20:	4630      	mov	r0, r6
   d6d22:	4639      	mov	r1, r7
   d6d24:	f000 fa5a 	bl	d71dc <__aeabi_dsub>
   d6d28:	4602      	mov	r2, r0
   d6d2a:	460b      	mov	r3, r1
   d6d2c:	f000 fd38 	bl	d77a0 <__aeabi_ddiv>
   d6d30:	ec41 0b10 	vmov	d0, r0, r1
   d6d34:	e7d9      	b.n	d6cea <__ieee754_sqrt+0x12e>
   d6d36:	4623      	mov	r3, r4
   d6d38:	2020      	movs	r0, #32
   d6d3a:	f04f 35ff 	mov.w	r5, #4294967295
   d6d3e:	e7b4      	b.n	d6caa <__ieee754_sqrt+0xee>
   d6d40:	7ff00000 	.word	0x7ff00000

000d6d44 <__ieee754_logf>:
   d6d44:	ee10 3a10 	vmov	r3, s0
   d6d48:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   d6d4c:	d02d      	beq.n	d6daa <__ieee754_logf+0x66>
   d6d4e:	2b00      	cmp	r3, #0
   d6d50:	db32      	blt.n	d6db8 <__ieee754_logf+0x74>
   d6d52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d6d56:	da3f      	bge.n	d6dd8 <__ieee754_logf+0x94>
   d6d58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   d6d5c:	b430      	push	{r4, r5}
   d6d5e:	db32      	blt.n	d6dc6 <__ieee754_logf+0x82>
   d6d60:	2500      	movs	r5, #0
   d6d62:	4868      	ldr	r0, [pc, #416]	; (d6f04 <__ieee754_logf+0x1c0>)
   d6d64:	4c68      	ldr	r4, [pc, #416]	; (d6f08 <__ieee754_logf+0x1c4>)
   d6d66:	f3c3 0116 	ubfx	r1, r3, #0, #23
   d6d6a:	4408      	add	r0, r1
   d6d6c:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   d6d70:	15db      	asrs	r3, r3, #23
   d6d72:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   d6d76:	3b7f      	subs	r3, #127	; 0x7f
   d6d78:	430a      	orrs	r2, r1
   d6d7a:	442b      	add	r3, r5
   d6d7c:	ee00 2a10 	vmov	s0, r2
   d6d80:	f101 050f 	add.w	r5, r1, #15
   d6d84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d6d88:	402c      	ands	r4, r5
   d6d8a:	ee30 0a67 	vsub.f32	s0, s0, s15
   d6d8e:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   d6d92:	bb24      	cbnz	r4, d6dde <__ieee754_logf+0x9a>
   d6d94:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d6d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d9c:	d161      	bne.n	d6e62 <__ieee754_logf+0x11e>
   d6d9e:	2b00      	cmp	r3, #0
   d6da0:	f040 8093 	bne.w	d6eca <__ieee754_logf+0x186>
   d6da4:	ed9f 0a59 	vldr	s0, [pc, #356]	; d6f0c <__ieee754_logf+0x1c8>
   d6da8:	e059      	b.n	d6e5e <__ieee754_logf+0x11a>
   d6daa:	ed9f 7a59 	vldr	s14, [pc, #356]	; d6f10 <__ieee754_logf+0x1cc>
   d6dae:	eddf 7a57 	vldr	s15, [pc, #348]	; d6f0c <__ieee754_logf+0x1c8>
   d6db2:	ee87 0a27 	vdiv.f32	s0, s14, s15
   d6db6:	4770      	bx	lr
   d6db8:	ee70 7a40 	vsub.f32	s15, s0, s0
   d6dbc:	ed9f 7a53 	vldr	s14, [pc, #332]	; d6f0c <__ieee754_logf+0x1c8>
   d6dc0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d6dc4:	4770      	bx	lr
   d6dc6:	eddf 7a53 	vldr	s15, [pc, #332]	; d6f14 <__ieee754_logf+0x1d0>
   d6dca:	ee60 7a27 	vmul.f32	s15, s0, s15
   d6dce:	f06f 0518 	mvn.w	r5, #24
   d6dd2:	ee17 3a90 	vmov	r3, s15
   d6dd6:	e7c4      	b.n	d6d62 <__ieee754_logf+0x1e>
   d6dd8:	ee30 0a00 	vadd.f32	s0, s0, s0
   d6ddc:	4770      	bx	lr
   d6dde:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d6de2:	ee30 7a07 	vadd.f32	s14, s0, s14
   d6de6:	ed9f 3a4c 	vldr	s6, [pc, #304]	; d6f18 <__ieee754_logf+0x1d4>
   d6dea:	eddf 4a4c 	vldr	s9, [pc, #304]	; d6f1c <__ieee754_logf+0x1d8>
   d6dee:	eddf 5a4c 	vldr	s11, [pc, #304]	; d6f20 <__ieee754_logf+0x1dc>
   d6df2:	eddf 3a4c 	vldr	s7, [pc, #304]	; d6f24 <__ieee754_logf+0x1e0>
   d6df6:	ed9f 5a4c 	vldr	s10, [pc, #304]	; d6f28 <__ieee754_logf+0x1e4>
   d6dfa:	eddf 7a4c 	vldr	s15, [pc, #304]	; d6f2c <__ieee754_logf+0x1e8>
   d6dfe:	eddf 6a4c 	vldr	s13, [pc, #304]	; d6f30 <__ieee754_logf+0x1ec>
   d6e02:	484c      	ldr	r0, [pc, #304]	; (d6f34 <__ieee754_logf+0x1f0>)
   d6e04:	ee80 4a07 	vdiv.f32	s8, s0, s14
   d6e08:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   d6e0c:	4408      	add	r0, r1
   d6e0e:	f502 7222 	add.w	r2, r2, #648	; 0x288
   d6e12:	4302      	orrs	r2, r0
   d6e14:	2a00      	cmp	r2, #0
   d6e16:	ee07 3a10 	vmov	s14, r3
   d6e1a:	ee24 6a04 	vmul.f32	s12, s8, s8
   d6e1e:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   d6e22:	ee26 7a06 	vmul.f32	s14, s12, s12
   d6e26:	eee7 4a03 	vfma.f32	s9, s14, s6
   d6e2a:	eea7 5a23 	vfma.f32	s10, s14, s7
   d6e2e:	eee4 5a87 	vfma.f32	s11, s9, s14
   d6e32:	eee5 6a07 	vfma.f32	s13, s10, s14
   d6e36:	eee5 7a87 	vfma.f32	s15, s11, s14
   d6e3a:	ee67 7a86 	vmul.f32	s15, s15, s12
   d6e3e:	eee6 7a87 	vfma.f32	s15, s13, s14
   d6e42:	dd2b      	ble.n	d6e9c <__ieee754_logf+0x158>
   d6e44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d6e48:	ee20 7a07 	vmul.f32	s14, s0, s14
   d6e4c:	ee27 7a00 	vmul.f32	s14, s14, s0
   d6e50:	bb53      	cbnz	r3, d6ea8 <__ieee754_logf+0x164>
   d6e52:	ee77 7a87 	vadd.f32	s15, s15, s14
   d6e56:	eea7 7ac4 	vfms.f32	s14, s15, s8
   d6e5a:	ee30 0a47 	vsub.f32	s0, s0, s14
   d6e5e:	bc30      	pop	{r4, r5}
   d6e60:	4770      	bx	lr
   d6e62:	eddf 7a35 	vldr	s15, [pc, #212]	; d6f38 <__ieee754_logf+0x1f4>
   d6e66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d6e6a:	eea0 7a67 	vfms.f32	s14, s0, s15
   d6e6e:	eef0 7a47 	vmov.f32	s15, s14
   d6e72:	ee20 7a00 	vmul.f32	s14, s0, s0
   d6e76:	ee27 7a27 	vmul.f32	s14, s14, s15
   d6e7a:	2b00      	cmp	r3, #0
   d6e7c:	d0ed      	beq.n	d6e5a <__ieee754_logf+0x116>
   d6e7e:	ee07 3a90 	vmov	s15, r3
   d6e82:	ed9f 6a2e 	vldr	s12, [pc, #184]	; d6f3c <__ieee754_logf+0x1f8>
   d6e86:	eddf 6a2e 	vldr	s13, [pc, #184]	; d6f40 <__ieee754_logf+0x1fc>
   d6e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6e8e:	eea7 7ac6 	vfms.f32	s14, s15, s12
   d6e92:	ee37 0a40 	vsub.f32	s0, s14, s0
   d6e96:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   d6e9a:	e7e0      	b.n	d6e5e <__ieee754_logf+0x11a>
   d6e9c:	bb13      	cbnz	r3, d6ee4 <__ieee754_logf+0x1a0>
   d6e9e:	ee70 7a67 	vsub.f32	s15, s0, s15
   d6ea2:	eea7 0ac4 	vfms.f32	s0, s15, s8
   d6ea6:	e7da      	b.n	d6e5e <__ieee754_logf+0x11a>
   d6ea8:	eddf 6a24 	vldr	s13, [pc, #144]	; d6f3c <__ieee754_logf+0x1f8>
   d6eac:	ed9f 6a24 	vldr	s12, [pc, #144]	; d6f40 <__ieee754_logf+0x1fc>
   d6eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
   d6eb4:	ee62 6aa6 	vmul.f32	s13, s5, s13
   d6eb8:	eee7 6a84 	vfma.f32	s13, s15, s8
   d6ebc:	ee37 7a66 	vsub.f32	s14, s14, s13
   d6ec0:	ee37 0a40 	vsub.f32	s0, s14, s0
   d6ec4:	ee92 0a86 	vfnms.f32	s0, s5, s12
   d6ec8:	e7c9      	b.n	d6e5e <__ieee754_logf+0x11a>
   d6eca:	ee07 3a90 	vmov	s15, r3
   d6ece:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d6f3c <__ieee754_logf+0x1f8>
   d6ed2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d6f40 <__ieee754_logf+0x1fc>
   d6ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6eda:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6ede:	eea7 0a87 	vfma.f32	s0, s15, s14
   d6ee2:	e7bc      	b.n	d6e5e <__ieee754_logf+0x11a>
   d6ee4:	ed9f 7a15 	vldr	s14, [pc, #84]	; d6f3c <__ieee754_logf+0x1f8>
   d6ee8:	eddf 6a15 	vldr	s13, [pc, #84]	; d6f40 <__ieee754_logf+0x1fc>
   d6eec:	ee70 7a67 	vsub.f32	s15, s0, s15
   d6ef0:	ee27 7a62 	vnmul.f32	s14, s14, s5
   d6ef4:	eea7 7a84 	vfma.f32	s14, s15, s8
   d6ef8:	ee37 0a40 	vsub.f32	s0, s14, s0
   d6efc:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   d6f00:	e7ad      	b.n	d6e5e <__ieee754_logf+0x11a>
   d6f02:	bf00      	nop
   d6f04:	004afb20 	.word	0x004afb20
   d6f08:	007ffff0 	.word	0x007ffff0
   d6f0c:	00000000 	.word	0x00000000
   d6f10:	cc000000 	.word	0xcc000000
   d6f14:	4c000000 	.word	0x4c000000
   d6f18:	3e178897 	.word	0x3e178897
   d6f1c:	3e3a3325 	.word	0x3e3a3325
   d6f20:	3e924925 	.word	0x3e924925
   d6f24:	3e1cd04f 	.word	0x3e1cd04f
   d6f28:	3e638e29 	.word	0x3e638e29
   d6f2c:	3f2aaaab 	.word	0x3f2aaaab
   d6f30:	3ecccccd 	.word	0x3ecccccd
   d6f34:	ffcf5c30 	.word	0xffcf5c30
   d6f38:	3eaaaaab 	.word	0x3eaaaaab
   d6f3c:	3717f7d1 	.word	0x3717f7d1
   d6f40:	3f317180 	.word	0x3f317180

000d6f44 <fabs>:
   d6f44:	ec51 0b10 	vmov	r0, r1, d0
   d6f48:	ee10 2a10 	vmov	r2, s0
   d6f4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d6f50:	ec43 2b10 	vmov	d0, r2, r3
   d6f54:	4770      	bx	lr
   d6f56:	bf00      	nop

000d6f58 <finite>:
   d6f58:	b082      	sub	sp, #8
   d6f5a:	ed8d 0b00 	vstr	d0, [sp]
   d6f5e:	9801      	ldr	r0, [sp, #4]
   d6f60:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d6f64:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d6f68:	0fc0      	lsrs	r0, r0, #31
   d6f6a:	b002      	add	sp, #8
   d6f6c:	4770      	bx	lr
   d6f6e:	bf00      	nop

000d6f70 <matherr>:
   d6f70:	2000      	movs	r0, #0
   d6f72:	4770      	bx	lr
   d6f74:	0000      	movs	r0, r0
	...

000d6f78 <nan>:
   d6f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; d6f80 <nan+0x8>
   d6f7c:	4770      	bx	lr
   d6f7e:	bf00      	nop
   d6f80:	00000000 	.word	0x00000000
   d6f84:	7ff80000 	.word	0x7ff80000

000d6f88 <rint>:
   d6f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f8a:	ec53 2b10 	vmov	r2, r3, d0
   d6f8e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d6f92:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d6f96:	2813      	cmp	r0, #19
   d6f98:	ee10 5a10 	vmov	r5, s0
   d6f9c:	b083      	sub	sp, #12
   d6f9e:	4619      	mov	r1, r3
   d6fa0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d6fa4:	dc31      	bgt.n	d700a <rint+0x82>
   d6fa6:	2800      	cmp	r0, #0
   d6fa8:	db4c      	blt.n	d7044 <rint+0xbc>
   d6faa:	4e3e      	ldr	r6, [pc, #248]	; (d70a4 <rint+0x11c>)
   d6fac:	4106      	asrs	r6, r0
   d6fae:	ea03 0706 	and.w	r7, r3, r6
   d6fb2:	4317      	orrs	r7, r2
   d6fb4:	d02e      	beq.n	d7014 <rint+0x8c>
   d6fb6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d6fba:	431d      	orrs	r5, r3
   d6fbc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d6fc0:	d00c      	beq.n	d6fdc <rint+0x54>
   d6fc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d6fc6:	2813      	cmp	r0, #19
   d6fc8:	ea21 0606 	bic.w	r6, r1, r6
   d6fcc:	fa43 f100 	asr.w	r1, r3, r0
   d6fd0:	ea41 0106 	orr.w	r1, r1, r6
   d6fd4:	bf0c      	ite	eq
   d6fd6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d6fda:	2500      	movne	r5, #0
   d6fdc:	4832      	ldr	r0, [pc, #200]	; (d70a8 <rint+0x120>)
   d6fde:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d6fe2:	462a      	mov	r2, r5
   d6fe4:	e9d4 4500 	ldrd	r4, r5, [r4]
   d6fe8:	460b      	mov	r3, r1
   d6fea:	4620      	mov	r0, r4
   d6fec:	4629      	mov	r1, r5
   d6fee:	f000 f8f7 	bl	d71e0 <__adddf3>
   d6ff2:	e9cd 0100 	strd	r0, r1, [sp]
   d6ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6ffa:	4622      	mov	r2, r4
   d6ffc:	462b      	mov	r3, r5
   d6ffe:	f000 f8ed 	bl	d71dc <__aeabi_dsub>
   d7002:	ec41 0b10 	vmov	d0, r0, r1
   d7006:	b003      	add	sp, #12
   d7008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d700a:	2833      	cmp	r0, #51	; 0x33
   d700c:	dd06      	ble.n	d701c <rint+0x94>
   d700e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7012:	d040      	beq.n	d7096 <rint+0x10e>
   d7014:	ec43 2b10 	vmov	d0, r2, r3
   d7018:	b003      	add	sp, #12
   d701a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d701c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7020:	f04f 30ff 	mov.w	r0, #4294967295
   d7024:	40f0      	lsrs	r0, r6
   d7026:	4202      	tst	r2, r0
   d7028:	d0f4      	beq.n	d7014 <rint+0x8c>
   d702a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d702e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7032:	d0d3      	beq.n	d6fdc <rint+0x54>
   d7034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d7038:	ea25 0503 	bic.w	r5, r5, r3
   d703c:	fa42 f606 	asr.w	r6, r2, r6
   d7040:	4335      	orrs	r5, r6
   d7042:	e7cb      	b.n	d6fdc <rint+0x54>
   d7044:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7048:	4310      	orrs	r0, r2
   d704a:	d0e3      	beq.n	d7014 <rint+0x8c>
   d704c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d7050:	4310      	orrs	r0, r2
   d7052:	4245      	negs	r5, r0
   d7054:	4305      	orrs	r5, r0
   d7056:	4814      	ldr	r0, [pc, #80]	; (d70a8 <rint+0x120>)
   d7058:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d705c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d7060:	0c59      	lsrs	r1, r3, #17
   d7062:	0b2d      	lsrs	r5, r5, #12
   d7064:	0449      	lsls	r1, r1, #17
   d7066:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d706a:	ea45 0301 	orr.w	r3, r5, r1
   d706e:	4630      	mov	r0, r6
   d7070:	4639      	mov	r1, r7
   d7072:	f000 f8b5 	bl	d71e0 <__adddf3>
   d7076:	e9cd 0100 	strd	r0, r1, [sp]
   d707a:	463b      	mov	r3, r7
   d707c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7080:	4632      	mov	r2, r6
   d7082:	f000 f8ab 	bl	d71dc <__aeabi_dsub>
   d7086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d708a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d708e:	ec41 0b10 	vmov	d0, r0, r1
   d7092:	b003      	add	sp, #12
   d7094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7096:	ee10 0a10 	vmov	r0, s0
   d709a:	f000 f8a1 	bl	d71e0 <__adddf3>
   d709e:	ec41 0b10 	vmov	d0, r0, r1
   d70a2:	e7b9      	b.n	d7018 <rint+0x90>
   d70a4:	000fffff 	.word	0x000fffff
   d70a8:	000d7f90 	.word	0x000d7f90
   d70ac:	00000000 	.word	0x00000000

000d70b0 <scalbn>:
   d70b0:	b538      	push	{r3, r4, r5, lr}
   d70b2:	ec53 2b10 	vmov	r2, r3, d0
   d70b6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d70ba:	461c      	mov	r4, r3
   d70bc:	4605      	mov	r5, r0
   d70be:	bb81      	cbnz	r1, d7122 <scalbn+0x72>
   d70c0:	ee10 1a10 	vmov	r1, s0
   d70c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d70c8:	4321      	orrs	r1, r4
   d70ca:	d029      	beq.n	d7120 <scalbn+0x70>
   d70cc:	4619      	mov	r1, r3
   d70ce:	2200      	movs	r2, #0
   d70d0:	4b3d      	ldr	r3, [pc, #244]	; (d71c8 <scalbn+0x118>)
   d70d2:	4c3e      	ldr	r4, [pc, #248]	; (d71cc <scalbn+0x11c>)
   d70d4:	ee10 0a10 	vmov	r0, s0
   d70d8:	f000 fa38 	bl	d754c <__aeabi_dmul>
   d70dc:	42a5      	cmp	r5, r4
   d70de:	4602      	mov	r2, r0
   d70e0:	460b      	mov	r3, r1
   d70e2:	db16      	blt.n	d7112 <scalbn+0x62>
   d70e4:	460c      	mov	r4, r1
   d70e6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d70ea:	3936      	subs	r1, #54	; 0x36
   d70ec:	4429      	add	r1, r5
   d70ee:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d70f2:	4281      	cmp	r1, r0
   d70f4:	dc21      	bgt.n	d713a <scalbn+0x8a>
   d70f6:	2900      	cmp	r1, #0
   d70f8:	dc47      	bgt.n	d718a <scalbn+0xda>
   d70fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d70fe:	da34      	bge.n	d716a <scalbn+0xba>
   d7100:	f24c 3150 	movw	r1, #50000	; 0xc350
   d7104:	428d      	cmp	r5, r1
   d7106:	dc18      	bgt.n	d713a <scalbn+0x8a>
   d7108:	2b00      	cmp	r3, #0
   d710a:	a127      	add	r1, pc, #156	; (adr r1, d71a8 <scalbn+0xf8>)
   d710c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7110:	db44      	blt.n	d719c <scalbn+0xec>
   d7112:	a325      	add	r3, pc, #148	; (adr r3, d71a8 <scalbn+0xf8>)
   d7114:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7118:	f000 fa18 	bl	d754c <__aeabi_dmul>
   d711c:	ec41 0b10 	vmov	d0, r0, r1
   d7120:	bd38      	pop	{r3, r4, r5, pc}
   d7122:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7126:	4281      	cmp	r1, r0
   d7128:	d1e0      	bne.n	d70ec <scalbn+0x3c>
   d712a:	ee10 0a10 	vmov	r0, s0
   d712e:	4619      	mov	r1, r3
   d7130:	f000 f856 	bl	d71e0 <__adddf3>
   d7134:	ec41 0b10 	vmov	d0, r0, r1
   d7138:	bd38      	pop	{r3, r4, r5, pc}
   d713a:	2b00      	cmp	r3, #0
   d713c:	a11c      	add	r1, pc, #112	; (adr r1, d71b0 <scalbn+0x100>)
   d713e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7142:	db07      	blt.n	d7154 <scalbn+0xa4>
   d7144:	a31a      	add	r3, pc, #104	; (adr r3, d71b0 <scalbn+0x100>)
   d7146:	e9d3 2300 	ldrd	r2, r3, [r3]
   d714a:	f000 f9ff 	bl	d754c <__aeabi_dmul>
   d714e:	ec41 0b10 	vmov	d0, r0, r1
   d7152:	bd38      	pop	{r3, r4, r5, pc}
   d7154:	a118      	add	r1, pc, #96	; (adr r1, d71b8 <scalbn+0x108>)
   d7156:	e9d1 0100 	ldrd	r0, r1, [r1]
   d715a:	a315      	add	r3, pc, #84	; (adr r3, d71b0 <scalbn+0x100>)
   d715c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7160:	f000 f9f4 	bl	d754c <__aeabi_dmul>
   d7164:	ec41 0b10 	vmov	d0, r0, r1
   d7168:	e7f3      	b.n	d7152 <scalbn+0xa2>
   d716a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d716e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7172:	3136      	adds	r1, #54	; 0x36
   d7174:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7178:	4610      	mov	r0, r2
   d717a:	4619      	mov	r1, r3
   d717c:	2200      	movs	r2, #0
   d717e:	4b14      	ldr	r3, [pc, #80]	; (d71d0 <scalbn+0x120>)
   d7180:	f000 f9e4 	bl	d754c <__aeabi_dmul>
   d7184:	ec41 0b10 	vmov	d0, r0, r1
   d7188:	bd38      	pop	{r3, r4, r5, pc}
   d718a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d718e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7192:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7196:	ec43 2b10 	vmov	d0, r2, r3
   d719a:	bd38      	pop	{r3, r4, r5, pc}
   d719c:	a108      	add	r1, pc, #32	; (adr r1, d71c0 <scalbn+0x110>)
   d719e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d71a2:	e7b6      	b.n	d7112 <scalbn+0x62>
   d71a4:	f3af 8000 	nop.w
   d71a8:	c2f8f359 	.word	0xc2f8f359
   d71ac:	01a56e1f 	.word	0x01a56e1f
   d71b0:	8800759c 	.word	0x8800759c
   d71b4:	7e37e43c 	.word	0x7e37e43c
   d71b8:	8800759c 	.word	0x8800759c
   d71bc:	fe37e43c 	.word	0xfe37e43c
   d71c0:	c2f8f359 	.word	0xc2f8f359
   d71c4:	81a56e1f 	.word	0x81a56e1f
   d71c8:	43500000 	.word	0x43500000
   d71cc:	ffff3cb0 	.word	0xffff3cb0
   d71d0:	3c900000 	.word	0x3c900000

000d71d4 <__aeabi_drsub>:
   d71d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d71d8:	e002      	b.n	d71e0 <__adddf3>
   d71da:	bf00      	nop

000d71dc <__aeabi_dsub>:
   d71dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d71e0 <__adddf3>:
   d71e0:	b530      	push	{r4, r5, lr}
   d71e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d71e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d71ea:	ea94 0f05 	teq	r4, r5
   d71ee:	bf08      	it	eq
   d71f0:	ea90 0f02 	teqeq	r0, r2
   d71f4:	bf1f      	itttt	ne
   d71f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d71fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d71fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7206:	f000 80e2 	beq.w	d73ce <__adddf3+0x1ee>
   d720a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d720e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7212:	bfb8      	it	lt
   d7214:	426d      	neglt	r5, r5
   d7216:	dd0c      	ble.n	d7232 <__adddf3+0x52>
   d7218:	442c      	add	r4, r5
   d721a:	ea80 0202 	eor.w	r2, r0, r2
   d721e:	ea81 0303 	eor.w	r3, r1, r3
   d7222:	ea82 0000 	eor.w	r0, r2, r0
   d7226:	ea83 0101 	eor.w	r1, r3, r1
   d722a:	ea80 0202 	eor.w	r2, r0, r2
   d722e:	ea81 0303 	eor.w	r3, r1, r3
   d7232:	2d36      	cmp	r5, #54	; 0x36
   d7234:	bf88      	it	hi
   d7236:	bd30      	pophi	{r4, r5, pc}
   d7238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d723c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7248:	d002      	beq.n	d7250 <__adddf3+0x70>
   d724a:	4240      	negs	r0, r0
   d724c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7254:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d725c:	d002      	beq.n	d7264 <__adddf3+0x84>
   d725e:	4252      	negs	r2, r2
   d7260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7264:	ea94 0f05 	teq	r4, r5
   d7268:	f000 80a7 	beq.w	d73ba <__adddf3+0x1da>
   d726c:	f1a4 0401 	sub.w	r4, r4, #1
   d7270:	f1d5 0e20 	rsbs	lr, r5, #32
   d7274:	db0d      	blt.n	d7292 <__adddf3+0xb2>
   d7276:	fa02 fc0e 	lsl.w	ip, r2, lr
   d727a:	fa22 f205 	lsr.w	r2, r2, r5
   d727e:	1880      	adds	r0, r0, r2
   d7280:	f141 0100 	adc.w	r1, r1, #0
   d7284:	fa03 f20e 	lsl.w	r2, r3, lr
   d7288:	1880      	adds	r0, r0, r2
   d728a:	fa43 f305 	asr.w	r3, r3, r5
   d728e:	4159      	adcs	r1, r3
   d7290:	e00e      	b.n	d72b0 <__adddf3+0xd0>
   d7292:	f1a5 0520 	sub.w	r5, r5, #32
   d7296:	f10e 0e20 	add.w	lr, lr, #32
   d729a:	2a01      	cmp	r2, #1
   d729c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d72a0:	bf28      	it	cs
   d72a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d72a6:	fa43 f305 	asr.w	r3, r3, r5
   d72aa:	18c0      	adds	r0, r0, r3
   d72ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d72b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72b4:	d507      	bpl.n	d72c6 <__adddf3+0xe6>
   d72b6:	f04f 0e00 	mov.w	lr, #0
   d72ba:	f1dc 0c00 	rsbs	ip, ip, #0
   d72be:	eb7e 0000 	sbcs.w	r0, lr, r0
   d72c2:	eb6e 0101 	sbc.w	r1, lr, r1
   d72c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d72ca:	d31b      	bcc.n	d7304 <__adddf3+0x124>
   d72cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d72d0:	d30c      	bcc.n	d72ec <__adddf3+0x10c>
   d72d2:	0849      	lsrs	r1, r1, #1
   d72d4:	ea5f 0030 	movs.w	r0, r0, rrx
   d72d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d72dc:	f104 0401 	add.w	r4, r4, #1
   d72e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d72e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d72e8:	f080 809a 	bcs.w	d7420 <__adddf3+0x240>
   d72ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d72f0:	bf08      	it	eq
   d72f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72f6:	f150 0000 	adcs.w	r0, r0, #0
   d72fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72fe:	ea41 0105 	orr.w	r1, r1, r5
   d7302:	bd30      	pop	{r4, r5, pc}
   d7304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7308:	4140      	adcs	r0, r0
   d730a:	eb41 0101 	adc.w	r1, r1, r1
   d730e:	3c01      	subs	r4, #1
   d7310:	bf28      	it	cs
   d7312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7316:	d2e9      	bcs.n	d72ec <__adddf3+0x10c>
   d7318:	f091 0f00 	teq	r1, #0
   d731c:	bf04      	itt	eq
   d731e:	4601      	moveq	r1, r0
   d7320:	2000      	moveq	r0, #0
   d7322:	fab1 f381 	clz	r3, r1
   d7326:	bf08      	it	eq
   d7328:	3320      	addeq	r3, #32
   d732a:	f1a3 030b 	sub.w	r3, r3, #11
   d732e:	f1b3 0220 	subs.w	r2, r3, #32
   d7332:	da0c      	bge.n	d734e <__adddf3+0x16e>
   d7334:	320c      	adds	r2, #12
   d7336:	dd08      	ble.n	d734a <__adddf3+0x16a>
   d7338:	f102 0c14 	add.w	ip, r2, #20
   d733c:	f1c2 020c 	rsb	r2, r2, #12
   d7340:	fa01 f00c 	lsl.w	r0, r1, ip
   d7344:	fa21 f102 	lsr.w	r1, r1, r2
   d7348:	e00c      	b.n	d7364 <__adddf3+0x184>
   d734a:	f102 0214 	add.w	r2, r2, #20
   d734e:	bfd8      	it	le
   d7350:	f1c2 0c20 	rsble	ip, r2, #32
   d7354:	fa01 f102 	lsl.w	r1, r1, r2
   d7358:	fa20 fc0c 	lsr.w	ip, r0, ip
   d735c:	bfdc      	itt	le
   d735e:	ea41 010c 	orrle.w	r1, r1, ip
   d7362:	4090      	lslle	r0, r2
   d7364:	1ae4      	subs	r4, r4, r3
   d7366:	bfa2      	ittt	ge
   d7368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d736c:	4329      	orrge	r1, r5
   d736e:	bd30      	popge	{r4, r5, pc}
   d7370:	ea6f 0404 	mvn.w	r4, r4
   d7374:	3c1f      	subs	r4, #31
   d7376:	da1c      	bge.n	d73b2 <__adddf3+0x1d2>
   d7378:	340c      	adds	r4, #12
   d737a:	dc0e      	bgt.n	d739a <__adddf3+0x1ba>
   d737c:	f104 0414 	add.w	r4, r4, #20
   d7380:	f1c4 0220 	rsb	r2, r4, #32
   d7384:	fa20 f004 	lsr.w	r0, r0, r4
   d7388:	fa01 f302 	lsl.w	r3, r1, r2
   d738c:	ea40 0003 	orr.w	r0, r0, r3
   d7390:	fa21 f304 	lsr.w	r3, r1, r4
   d7394:	ea45 0103 	orr.w	r1, r5, r3
   d7398:	bd30      	pop	{r4, r5, pc}
   d739a:	f1c4 040c 	rsb	r4, r4, #12
   d739e:	f1c4 0220 	rsb	r2, r4, #32
   d73a2:	fa20 f002 	lsr.w	r0, r0, r2
   d73a6:	fa01 f304 	lsl.w	r3, r1, r4
   d73aa:	ea40 0003 	orr.w	r0, r0, r3
   d73ae:	4629      	mov	r1, r5
   d73b0:	bd30      	pop	{r4, r5, pc}
   d73b2:	fa21 f004 	lsr.w	r0, r1, r4
   d73b6:	4629      	mov	r1, r5
   d73b8:	bd30      	pop	{r4, r5, pc}
   d73ba:	f094 0f00 	teq	r4, #0
   d73be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d73c2:	bf06      	itte	eq
   d73c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d73c8:	3401      	addeq	r4, #1
   d73ca:	3d01      	subne	r5, #1
   d73cc:	e74e      	b.n	d726c <__adddf3+0x8c>
   d73ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d73d2:	bf18      	it	ne
   d73d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d73d8:	d029      	beq.n	d742e <__adddf3+0x24e>
   d73da:	ea94 0f05 	teq	r4, r5
   d73de:	bf08      	it	eq
   d73e0:	ea90 0f02 	teqeq	r0, r2
   d73e4:	d005      	beq.n	d73f2 <__adddf3+0x212>
   d73e6:	ea54 0c00 	orrs.w	ip, r4, r0
   d73ea:	bf04      	itt	eq
   d73ec:	4619      	moveq	r1, r3
   d73ee:	4610      	moveq	r0, r2
   d73f0:	bd30      	pop	{r4, r5, pc}
   d73f2:	ea91 0f03 	teq	r1, r3
   d73f6:	bf1e      	ittt	ne
   d73f8:	2100      	movne	r1, #0
   d73fa:	2000      	movne	r0, #0
   d73fc:	bd30      	popne	{r4, r5, pc}
   d73fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7402:	d105      	bne.n	d7410 <__adddf3+0x230>
   d7404:	0040      	lsls	r0, r0, #1
   d7406:	4149      	adcs	r1, r1
   d7408:	bf28      	it	cs
   d740a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d740e:	bd30      	pop	{r4, r5, pc}
   d7410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7414:	bf3c      	itt	cc
   d7416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d741a:	bd30      	popcc	{r4, r5, pc}
   d741c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7428:	f04f 0000 	mov.w	r0, #0
   d742c:	bd30      	pop	{r4, r5, pc}
   d742e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7432:	bf1a      	itte	ne
   d7434:	4619      	movne	r1, r3
   d7436:	4610      	movne	r0, r2
   d7438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d743c:	bf1c      	itt	ne
   d743e:	460b      	movne	r3, r1
   d7440:	4602      	movne	r2, r0
   d7442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7446:	bf06      	itte	eq
   d7448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d744c:	ea91 0f03 	teqeq	r1, r3
   d7450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7454:	bd30      	pop	{r4, r5, pc}
   d7456:	bf00      	nop

000d7458 <__aeabi_ui2d>:
   d7458:	f090 0f00 	teq	r0, #0
   d745c:	bf04      	itt	eq
   d745e:	2100      	moveq	r1, #0
   d7460:	4770      	bxeq	lr
   d7462:	b530      	push	{r4, r5, lr}
   d7464:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7468:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d746c:	f04f 0500 	mov.w	r5, #0
   d7470:	f04f 0100 	mov.w	r1, #0
   d7474:	e750      	b.n	d7318 <__adddf3+0x138>
   d7476:	bf00      	nop

000d7478 <__aeabi_i2d>:
   d7478:	f090 0f00 	teq	r0, #0
   d747c:	bf04      	itt	eq
   d747e:	2100      	moveq	r1, #0
   d7480:	4770      	bxeq	lr
   d7482:	b530      	push	{r4, r5, lr}
   d7484:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7488:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d748c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7490:	bf48      	it	mi
   d7492:	4240      	negmi	r0, r0
   d7494:	f04f 0100 	mov.w	r1, #0
   d7498:	e73e      	b.n	d7318 <__adddf3+0x138>
   d749a:	bf00      	nop

000d749c <__aeabi_f2d>:
   d749c:	0042      	lsls	r2, r0, #1
   d749e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d74a2:	ea4f 0131 	mov.w	r1, r1, rrx
   d74a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d74aa:	bf1f      	itttt	ne
   d74ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d74b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d74b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d74b8:	4770      	bxne	lr
   d74ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d74be:	bf08      	it	eq
   d74c0:	4770      	bxeq	lr
   d74c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d74c6:	bf04      	itt	eq
   d74c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d74cc:	4770      	bxeq	lr
   d74ce:	b530      	push	{r4, r5, lr}
   d74d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d74d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d74dc:	e71c      	b.n	d7318 <__adddf3+0x138>
   d74de:	bf00      	nop

000d74e0 <__aeabi_ul2d>:
   d74e0:	ea50 0201 	orrs.w	r2, r0, r1
   d74e4:	bf08      	it	eq
   d74e6:	4770      	bxeq	lr
   d74e8:	b530      	push	{r4, r5, lr}
   d74ea:	f04f 0500 	mov.w	r5, #0
   d74ee:	e00a      	b.n	d7506 <__aeabi_l2d+0x16>

000d74f0 <__aeabi_l2d>:
   d74f0:	ea50 0201 	orrs.w	r2, r0, r1
   d74f4:	bf08      	it	eq
   d74f6:	4770      	bxeq	lr
   d74f8:	b530      	push	{r4, r5, lr}
   d74fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d74fe:	d502      	bpl.n	d7506 <__aeabi_l2d+0x16>
   d7500:	4240      	negs	r0, r0
   d7502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7506:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d750a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d750e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7512:	f43f aed8 	beq.w	d72c6 <__adddf3+0xe6>
   d7516:	f04f 0203 	mov.w	r2, #3
   d751a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d751e:	bf18      	it	ne
   d7520:	3203      	addne	r2, #3
   d7522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7526:	bf18      	it	ne
   d7528:	3203      	addne	r2, #3
   d752a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d752e:	f1c2 0320 	rsb	r3, r2, #32
   d7532:	fa00 fc03 	lsl.w	ip, r0, r3
   d7536:	fa20 f002 	lsr.w	r0, r0, r2
   d753a:	fa01 fe03 	lsl.w	lr, r1, r3
   d753e:	ea40 000e 	orr.w	r0, r0, lr
   d7542:	fa21 f102 	lsr.w	r1, r1, r2
   d7546:	4414      	add	r4, r2
   d7548:	e6bd      	b.n	d72c6 <__adddf3+0xe6>
   d754a:	bf00      	nop

000d754c <__aeabi_dmul>:
   d754c:	b570      	push	{r4, r5, r6, lr}
   d754e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d755a:	bf1d      	ittte	ne
   d755c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7560:	ea94 0f0c 	teqne	r4, ip
   d7564:	ea95 0f0c 	teqne	r5, ip
   d7568:	f000 f8de 	bleq	d7728 <__aeabi_dmul+0x1dc>
   d756c:	442c      	add	r4, r5
   d756e:	ea81 0603 	eor.w	r6, r1, r3
   d7572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d757a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d757e:	bf18      	it	ne
   d7580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d758c:	d038      	beq.n	d7600 <__aeabi_dmul+0xb4>
   d758e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7592:	f04f 0500 	mov.w	r5, #0
   d7596:	fbe1 e502 	umlal	lr, r5, r1, r2
   d759a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d759e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d75a2:	f04f 0600 	mov.w	r6, #0
   d75a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d75aa:	f09c 0f00 	teq	ip, #0
   d75ae:	bf18      	it	ne
   d75b0:	f04e 0e01 	orrne.w	lr, lr, #1
   d75b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d75b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d75bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d75c0:	d204      	bcs.n	d75cc <__aeabi_dmul+0x80>
   d75c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d75c6:	416d      	adcs	r5, r5
   d75c8:	eb46 0606 	adc.w	r6, r6, r6
   d75cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d75d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d75d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d75d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d75dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d75e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d75e4:	bf88      	it	hi
   d75e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d75ea:	d81e      	bhi.n	d762a <__aeabi_dmul+0xde>
   d75ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d75f0:	bf08      	it	eq
   d75f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d75f6:	f150 0000 	adcs.w	r0, r0, #0
   d75fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d75fe:	bd70      	pop	{r4, r5, r6, pc}
   d7600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7604:	ea46 0101 	orr.w	r1, r6, r1
   d7608:	ea40 0002 	orr.w	r0, r0, r2
   d760c:	ea81 0103 	eor.w	r1, r1, r3
   d7610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7614:	bfc2      	ittt	gt
   d7616:	ebd4 050c 	rsbsgt	r5, r4, ip
   d761a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d761e:	bd70      	popgt	{r4, r5, r6, pc}
   d7620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7624:	f04f 0e00 	mov.w	lr, #0
   d7628:	3c01      	subs	r4, #1
   d762a:	f300 80ab 	bgt.w	d7784 <__aeabi_dmul+0x238>
   d762e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7632:	bfde      	ittt	le
   d7634:	2000      	movle	r0, #0
   d7636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d763a:	bd70      	pople	{r4, r5, r6, pc}
   d763c:	f1c4 0400 	rsb	r4, r4, #0
   d7640:	3c20      	subs	r4, #32
   d7642:	da35      	bge.n	d76b0 <__aeabi_dmul+0x164>
   d7644:	340c      	adds	r4, #12
   d7646:	dc1b      	bgt.n	d7680 <__aeabi_dmul+0x134>
   d7648:	f104 0414 	add.w	r4, r4, #20
   d764c:	f1c4 0520 	rsb	r5, r4, #32
   d7650:	fa00 f305 	lsl.w	r3, r0, r5
   d7654:	fa20 f004 	lsr.w	r0, r0, r4
   d7658:	fa01 f205 	lsl.w	r2, r1, r5
   d765c:	ea40 0002 	orr.w	r0, r0, r2
   d7660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d766c:	fa21 f604 	lsr.w	r6, r1, r4
   d7670:	eb42 0106 	adc.w	r1, r2, r6
   d7674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7678:	bf08      	it	eq
   d767a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d767e:	bd70      	pop	{r4, r5, r6, pc}
   d7680:	f1c4 040c 	rsb	r4, r4, #12
   d7684:	f1c4 0520 	rsb	r5, r4, #32
   d7688:	fa00 f304 	lsl.w	r3, r0, r4
   d768c:	fa20 f005 	lsr.w	r0, r0, r5
   d7690:	fa01 f204 	lsl.w	r2, r1, r4
   d7694:	ea40 0002 	orr.w	r0, r0, r2
   d7698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d769c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d76a0:	f141 0100 	adc.w	r1, r1, #0
   d76a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d76a8:	bf08      	it	eq
   d76aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76ae:	bd70      	pop	{r4, r5, r6, pc}
   d76b0:	f1c4 0520 	rsb	r5, r4, #32
   d76b4:	fa00 f205 	lsl.w	r2, r0, r5
   d76b8:	ea4e 0e02 	orr.w	lr, lr, r2
   d76bc:	fa20 f304 	lsr.w	r3, r0, r4
   d76c0:	fa01 f205 	lsl.w	r2, r1, r5
   d76c4:	ea43 0302 	orr.w	r3, r3, r2
   d76c8:	fa21 f004 	lsr.w	r0, r1, r4
   d76cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d76d0:	fa21 f204 	lsr.w	r2, r1, r4
   d76d4:	ea20 0002 	bic.w	r0, r0, r2
   d76d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d76dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d76e0:	bf08      	it	eq
   d76e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d76e6:	bd70      	pop	{r4, r5, r6, pc}
   d76e8:	f094 0f00 	teq	r4, #0
   d76ec:	d10f      	bne.n	d770e <__aeabi_dmul+0x1c2>
   d76ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d76f2:	0040      	lsls	r0, r0, #1
   d76f4:	eb41 0101 	adc.w	r1, r1, r1
   d76f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76fc:	bf08      	it	eq
   d76fe:	3c01      	subeq	r4, #1
   d7700:	d0f7      	beq.n	d76f2 <__aeabi_dmul+0x1a6>
   d7702:	ea41 0106 	orr.w	r1, r1, r6
   d7706:	f095 0f00 	teq	r5, #0
   d770a:	bf18      	it	ne
   d770c:	4770      	bxne	lr
   d770e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7712:	0052      	lsls	r2, r2, #1
   d7714:	eb43 0303 	adc.w	r3, r3, r3
   d7718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d771c:	bf08      	it	eq
   d771e:	3d01      	subeq	r5, #1
   d7720:	d0f7      	beq.n	d7712 <__aeabi_dmul+0x1c6>
   d7722:	ea43 0306 	orr.w	r3, r3, r6
   d7726:	4770      	bx	lr
   d7728:	ea94 0f0c 	teq	r4, ip
   d772c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7730:	bf18      	it	ne
   d7732:	ea95 0f0c 	teqne	r5, ip
   d7736:	d00c      	beq.n	d7752 <__aeabi_dmul+0x206>
   d7738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d773c:	bf18      	it	ne
   d773e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7742:	d1d1      	bne.n	d76e8 <__aeabi_dmul+0x19c>
   d7744:	ea81 0103 	eor.w	r1, r1, r3
   d7748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d774c:	f04f 0000 	mov.w	r0, #0
   d7750:	bd70      	pop	{r4, r5, r6, pc}
   d7752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7756:	bf06      	itte	eq
   d7758:	4610      	moveq	r0, r2
   d775a:	4619      	moveq	r1, r3
   d775c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7760:	d019      	beq.n	d7796 <__aeabi_dmul+0x24a>
   d7762:	ea94 0f0c 	teq	r4, ip
   d7766:	d102      	bne.n	d776e <__aeabi_dmul+0x222>
   d7768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d776c:	d113      	bne.n	d7796 <__aeabi_dmul+0x24a>
   d776e:	ea95 0f0c 	teq	r5, ip
   d7772:	d105      	bne.n	d7780 <__aeabi_dmul+0x234>
   d7774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7778:	bf1c      	itt	ne
   d777a:	4610      	movne	r0, r2
   d777c:	4619      	movne	r1, r3
   d777e:	d10a      	bne.n	d7796 <__aeabi_dmul+0x24a>
   d7780:	ea81 0103 	eor.w	r1, r1, r3
   d7784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d778c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7790:	f04f 0000 	mov.w	r0, #0
   d7794:	bd70      	pop	{r4, r5, r6, pc}
   d7796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d779a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d779e:	bd70      	pop	{r4, r5, r6, pc}

000d77a0 <__aeabi_ddiv>:
   d77a0:	b570      	push	{r4, r5, r6, lr}
   d77a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d77a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d77aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d77ae:	bf1d      	ittte	ne
   d77b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d77b4:	ea94 0f0c 	teqne	r4, ip
   d77b8:	ea95 0f0c 	teqne	r5, ip
   d77bc:	f000 f8a7 	bleq	d790e <__aeabi_ddiv+0x16e>
   d77c0:	eba4 0405 	sub.w	r4, r4, r5
   d77c4:	ea81 0e03 	eor.w	lr, r1, r3
   d77c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d77cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d77d0:	f000 8088 	beq.w	d78e4 <__aeabi_ddiv+0x144>
   d77d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d77d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d77dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d77e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d77e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d77e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d77ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d77f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d77f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d77f8:	429d      	cmp	r5, r3
   d77fa:	bf08      	it	eq
   d77fc:	4296      	cmpeq	r6, r2
   d77fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7802:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7806:	d202      	bcs.n	d780e <__aeabi_ddiv+0x6e>
   d7808:	085b      	lsrs	r3, r3, #1
   d780a:	ea4f 0232 	mov.w	r2, r2, rrx
   d780e:	1ab6      	subs	r6, r6, r2
   d7810:	eb65 0503 	sbc.w	r5, r5, r3
   d7814:	085b      	lsrs	r3, r3, #1
   d7816:	ea4f 0232 	mov.w	r2, r2, rrx
   d781a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d781e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7822:	ebb6 0e02 	subs.w	lr, r6, r2
   d7826:	eb75 0e03 	sbcs.w	lr, r5, r3
   d782a:	bf22      	ittt	cs
   d782c:	1ab6      	subcs	r6, r6, r2
   d782e:	4675      	movcs	r5, lr
   d7830:	ea40 000c 	orrcs.w	r0, r0, ip
   d7834:	085b      	lsrs	r3, r3, #1
   d7836:	ea4f 0232 	mov.w	r2, r2, rrx
   d783a:	ebb6 0e02 	subs.w	lr, r6, r2
   d783e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7842:	bf22      	ittt	cs
   d7844:	1ab6      	subcs	r6, r6, r2
   d7846:	4675      	movcs	r5, lr
   d7848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d784c:	085b      	lsrs	r3, r3, #1
   d784e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7852:	ebb6 0e02 	subs.w	lr, r6, r2
   d7856:	eb75 0e03 	sbcs.w	lr, r5, r3
   d785a:	bf22      	ittt	cs
   d785c:	1ab6      	subcs	r6, r6, r2
   d785e:	4675      	movcs	r5, lr
   d7860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7864:	085b      	lsrs	r3, r3, #1
   d7866:	ea4f 0232 	mov.w	r2, r2, rrx
   d786a:	ebb6 0e02 	subs.w	lr, r6, r2
   d786e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7872:	bf22      	ittt	cs
   d7874:	1ab6      	subcs	r6, r6, r2
   d7876:	4675      	movcs	r5, lr
   d7878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d787c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7880:	d018      	beq.n	d78b4 <__aeabi_ddiv+0x114>
   d7882:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d788a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d788e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d789a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d789e:	d1c0      	bne.n	d7822 <__aeabi_ddiv+0x82>
   d78a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78a4:	d10b      	bne.n	d78be <__aeabi_ddiv+0x11e>
   d78a6:	ea41 0100 	orr.w	r1, r1, r0
   d78aa:	f04f 0000 	mov.w	r0, #0
   d78ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d78b2:	e7b6      	b.n	d7822 <__aeabi_ddiv+0x82>
   d78b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78b8:	bf04      	itt	eq
   d78ba:	4301      	orreq	r1, r0
   d78bc:	2000      	moveq	r0, #0
   d78be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d78c2:	bf88      	it	hi
   d78c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d78c8:	f63f aeaf 	bhi.w	d762a <__aeabi_dmul+0xde>
   d78cc:	ebb5 0c03 	subs.w	ip, r5, r3
   d78d0:	bf04      	itt	eq
   d78d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d78d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d78da:	f150 0000 	adcs.w	r0, r0, #0
   d78de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d78e2:	bd70      	pop	{r4, r5, r6, pc}
   d78e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d78e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d78ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d78f0:	bfc2      	ittt	gt
   d78f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d78f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d78fa:	bd70      	popgt	{r4, r5, r6, pc}
   d78fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7900:	f04f 0e00 	mov.w	lr, #0
   d7904:	3c01      	subs	r4, #1
   d7906:	e690      	b.n	d762a <__aeabi_dmul+0xde>
   d7908:	ea45 0e06 	orr.w	lr, r5, r6
   d790c:	e68d      	b.n	d762a <__aeabi_dmul+0xde>
   d790e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7912:	ea94 0f0c 	teq	r4, ip
   d7916:	bf08      	it	eq
   d7918:	ea95 0f0c 	teqeq	r5, ip
   d791c:	f43f af3b 	beq.w	d7796 <__aeabi_dmul+0x24a>
   d7920:	ea94 0f0c 	teq	r4, ip
   d7924:	d10a      	bne.n	d793c <__aeabi_ddiv+0x19c>
   d7926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d792a:	f47f af34 	bne.w	d7796 <__aeabi_dmul+0x24a>
   d792e:	ea95 0f0c 	teq	r5, ip
   d7932:	f47f af25 	bne.w	d7780 <__aeabi_dmul+0x234>
   d7936:	4610      	mov	r0, r2
   d7938:	4619      	mov	r1, r3
   d793a:	e72c      	b.n	d7796 <__aeabi_dmul+0x24a>
   d793c:	ea95 0f0c 	teq	r5, ip
   d7940:	d106      	bne.n	d7950 <__aeabi_ddiv+0x1b0>
   d7942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7946:	f43f aefd 	beq.w	d7744 <__aeabi_dmul+0x1f8>
   d794a:	4610      	mov	r0, r2
   d794c:	4619      	mov	r1, r3
   d794e:	e722      	b.n	d7796 <__aeabi_dmul+0x24a>
   d7950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7954:	bf18      	it	ne
   d7956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d795a:	f47f aec5 	bne.w	d76e8 <__aeabi_dmul+0x19c>
   d795e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7962:	f47f af0d 	bne.w	d7780 <__aeabi_dmul+0x234>
   d7966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d796a:	f47f aeeb 	bne.w	d7744 <__aeabi_dmul+0x1f8>
   d796e:	e712      	b.n	d7796 <__aeabi_dmul+0x24a>

000d7970 <__gedf2>:
   d7970:	f04f 3cff 	mov.w	ip, #4294967295
   d7974:	e006      	b.n	d7984 <__cmpdf2+0x4>
   d7976:	bf00      	nop

000d7978 <__ledf2>:
   d7978:	f04f 0c01 	mov.w	ip, #1
   d797c:	e002      	b.n	d7984 <__cmpdf2+0x4>
   d797e:	bf00      	nop

000d7980 <__cmpdf2>:
   d7980:	f04f 0c01 	mov.w	ip, #1
   d7984:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d798c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7994:	bf18      	it	ne
   d7996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d799a:	d01b      	beq.n	d79d4 <__cmpdf2+0x54>
   d799c:	b001      	add	sp, #4
   d799e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d79a2:	bf0c      	ite	eq
   d79a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d79a8:	ea91 0f03 	teqne	r1, r3
   d79ac:	bf02      	ittt	eq
   d79ae:	ea90 0f02 	teqeq	r0, r2
   d79b2:	2000      	moveq	r0, #0
   d79b4:	4770      	bxeq	lr
   d79b6:	f110 0f00 	cmn.w	r0, #0
   d79ba:	ea91 0f03 	teq	r1, r3
   d79be:	bf58      	it	pl
   d79c0:	4299      	cmppl	r1, r3
   d79c2:	bf08      	it	eq
   d79c4:	4290      	cmpeq	r0, r2
   d79c6:	bf2c      	ite	cs
   d79c8:	17d8      	asrcs	r0, r3, #31
   d79ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d79ce:	f040 0001 	orr.w	r0, r0, #1
   d79d2:	4770      	bx	lr
   d79d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d79d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79dc:	d102      	bne.n	d79e4 <__cmpdf2+0x64>
   d79de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d79e2:	d107      	bne.n	d79f4 <__cmpdf2+0x74>
   d79e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d79e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d79ec:	d1d6      	bne.n	d799c <__cmpdf2+0x1c>
   d79ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d79f2:	d0d3      	beq.n	d799c <__cmpdf2+0x1c>
   d79f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d79f8:	4770      	bx	lr
   d79fa:	bf00      	nop

000d79fc <__aeabi_cdrcmple>:
   d79fc:	4684      	mov	ip, r0
   d79fe:	4610      	mov	r0, r2
   d7a00:	4662      	mov	r2, ip
   d7a02:	468c      	mov	ip, r1
   d7a04:	4619      	mov	r1, r3
   d7a06:	4663      	mov	r3, ip
   d7a08:	e000      	b.n	d7a0c <__aeabi_cdcmpeq>
   d7a0a:	bf00      	nop

000d7a0c <__aeabi_cdcmpeq>:
   d7a0c:	b501      	push	{r0, lr}
   d7a0e:	f7ff ffb7 	bl	d7980 <__cmpdf2>
   d7a12:	2800      	cmp	r0, #0
   d7a14:	bf48      	it	mi
   d7a16:	f110 0f00 	cmnmi.w	r0, #0
   d7a1a:	bd01      	pop	{r0, pc}

000d7a1c <__aeabi_dcmpeq>:
   d7a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a20:	f7ff fff4 	bl	d7a0c <__aeabi_cdcmpeq>
   d7a24:	bf0c      	ite	eq
   d7a26:	2001      	moveq	r0, #1
   d7a28:	2000      	movne	r0, #0
   d7a2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a2e:	bf00      	nop

000d7a30 <__aeabi_dcmplt>:
   d7a30:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a34:	f7ff ffea 	bl	d7a0c <__aeabi_cdcmpeq>
   d7a38:	bf34      	ite	cc
   d7a3a:	2001      	movcc	r0, #1
   d7a3c:	2000      	movcs	r0, #0
   d7a3e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a42:	bf00      	nop

000d7a44 <__aeabi_dcmple>:
   d7a44:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a48:	f7ff ffe0 	bl	d7a0c <__aeabi_cdcmpeq>
   d7a4c:	bf94      	ite	ls
   d7a4e:	2001      	movls	r0, #1
   d7a50:	2000      	movhi	r0, #0
   d7a52:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a56:	bf00      	nop

000d7a58 <__aeabi_dcmpge>:
   d7a58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a5c:	f7ff ffce 	bl	d79fc <__aeabi_cdrcmple>
   d7a60:	bf94      	ite	ls
   d7a62:	2001      	movls	r0, #1
   d7a64:	2000      	movhi	r0, #0
   d7a66:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a6a:	bf00      	nop

000d7a6c <__aeabi_dcmpgt>:
   d7a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7a70:	f7ff ffc4 	bl	d79fc <__aeabi_cdrcmple>
   d7a74:	bf34      	ite	cc
   d7a76:	2001      	movcc	r0, #1
   d7a78:	2000      	movcs	r0, #0
   d7a7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7a7e:	bf00      	nop

000d7a80 <__aeabi_dcmpun>:
   d7a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7a88:	d102      	bne.n	d7a90 <__aeabi_dcmpun+0x10>
   d7a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7a8e:	d10a      	bne.n	d7aa6 <__aeabi_dcmpun+0x26>
   d7a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7a98:	d102      	bne.n	d7aa0 <__aeabi_dcmpun+0x20>
   d7a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7a9e:	d102      	bne.n	d7aa6 <__aeabi_dcmpun+0x26>
   d7aa0:	f04f 0000 	mov.w	r0, #0
   d7aa4:	4770      	bx	lr
   d7aa6:	f04f 0001 	mov.w	r0, #1
   d7aaa:	4770      	bx	lr

000d7aac <__aeabi_d2iz>:
   d7aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7ab4:	d215      	bcs.n	d7ae2 <__aeabi_d2iz+0x36>
   d7ab6:	d511      	bpl.n	d7adc <__aeabi_d2iz+0x30>
   d7ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7ac0:	d912      	bls.n	d7ae8 <__aeabi_d2iz+0x3c>
   d7ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7ad2:	fa23 f002 	lsr.w	r0, r3, r2
   d7ad6:	bf18      	it	ne
   d7ad8:	4240      	negne	r0, r0
   d7ada:	4770      	bx	lr
   d7adc:	f04f 0000 	mov.w	r0, #0
   d7ae0:	4770      	bx	lr
   d7ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7ae6:	d105      	bne.n	d7af4 <__aeabi_d2iz+0x48>
   d7ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7aec:	bf08      	it	eq
   d7aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7af2:	4770      	bx	lr
   d7af4:	f04f 0000 	mov.w	r0, #0
   d7af8:	4770      	bx	lr
   d7afa:	bf00      	nop

000d7afc <__aeabi_d2uiz>:
   d7afc:	004a      	lsls	r2, r1, #1
   d7afe:	d211      	bcs.n	d7b24 <__aeabi_d2uiz+0x28>
   d7b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7b04:	d211      	bcs.n	d7b2a <__aeabi_d2uiz+0x2e>
   d7b06:	d50d      	bpl.n	d7b24 <__aeabi_d2uiz+0x28>
   d7b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7b10:	d40e      	bmi.n	d7b30 <__aeabi_d2uiz+0x34>
   d7b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7b1e:	fa23 f002 	lsr.w	r0, r3, r2
   d7b22:	4770      	bx	lr
   d7b24:	f04f 0000 	mov.w	r0, #0
   d7b28:	4770      	bx	lr
   d7b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7b2e:	d102      	bne.n	d7b36 <__aeabi_d2uiz+0x3a>
   d7b30:	f04f 30ff 	mov.w	r0, #4294967295
   d7b34:	4770      	bx	lr
   d7b36:	f04f 0000 	mov.w	r0, #0
   d7b3a:	4770      	bx	lr

000d7b3c <__aeabi_d2f>:
   d7b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7b44:	bf24      	itt	cs
   d7b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7b4e:	d90d      	bls.n	d7b6c <__aeabi_d2f+0x30>
   d7b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7b64:	bf08      	it	eq
   d7b66:	f020 0001 	biceq.w	r0, r0, #1
   d7b6a:	4770      	bx	lr
   d7b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7b70:	d121      	bne.n	d7bb6 <__aeabi_d2f+0x7a>
   d7b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7b76:	bfbc      	itt	lt
   d7b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7b7c:	4770      	bxlt	lr
   d7b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7b86:	f1c2 0218 	rsb	r2, r2, #24
   d7b8a:	f1c2 0c20 	rsb	ip, r2, #32
   d7b8e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7b92:	fa20 f002 	lsr.w	r0, r0, r2
   d7b96:	bf18      	it	ne
   d7b98:	f040 0001 	orrne.w	r0, r0, #1
   d7b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7ba8:	ea40 000c 	orr.w	r0, r0, ip
   d7bac:	fa23 f302 	lsr.w	r3, r3, r2
   d7bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7bb4:	e7cc      	b.n	d7b50 <__aeabi_d2f+0x14>
   d7bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7bba:	d107      	bne.n	d7bcc <__aeabi_d2f+0x90>
   d7bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7bc0:	bf1e      	ittt	ne
   d7bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7bca:	4770      	bxne	lr
   d7bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7bd8:	4770      	bx	lr
   d7bda:	bf00      	nop

000d7bdc <asctime_r>:
   d7bdc:	b510      	push	{r4, lr}
   d7bde:	460c      	mov	r4, r1
   d7be0:	6941      	ldr	r1, [r0, #20]
   d7be2:	6903      	ldr	r3, [r0, #16]
   d7be4:	6982      	ldr	r2, [r0, #24]
   d7be6:	b086      	sub	sp, #24
   d7be8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7bec:	9104      	str	r1, [sp, #16]
   d7bee:	6801      	ldr	r1, [r0, #0]
   d7bf0:	9103      	str	r1, [sp, #12]
   d7bf2:	6841      	ldr	r1, [r0, #4]
   d7bf4:	9102      	str	r1, [sp, #8]
   d7bf6:	6881      	ldr	r1, [r0, #8]
   d7bf8:	9101      	str	r1, [sp, #4]
   d7bfa:	68c1      	ldr	r1, [r0, #12]
   d7bfc:	9100      	str	r1, [sp, #0]
   d7bfe:	4907      	ldr	r1, [pc, #28]	; (d7c1c <asctime_r+0x40>)
   d7c00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7c04:	440b      	add	r3, r1
   d7c06:	4906      	ldr	r1, [pc, #24]	; (d7c20 <asctime_r+0x44>)
   d7c08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7c0c:	440a      	add	r2, r1
   d7c0e:	4620      	mov	r0, r4
   d7c10:	4904      	ldr	r1, [pc, #16]	; (d7c24 <asctime_r+0x48>)
   d7c12:	f7fd f947 	bl	d4ea4 <siprintf>
   d7c16:	4620      	mov	r0, r4
   d7c18:	b006      	add	sp, #24
   d7c1a:	bd10      	pop	{r4, pc}
   d7c1c:	000d7fd5 	.word	0x000d7fd5
   d7c20:	000d7fc0 	.word	0x000d7fc0
   d7c24:	000d7fa0 	.word	0x000d7fa0

000d7c28 <atexit>:
   d7c28:	2300      	movs	r3, #0
   d7c2a:	4601      	mov	r1, r0
   d7c2c:	461a      	mov	r2, r3
   d7c2e:	4618      	mov	r0, r3
   d7c30:	f000 b842 	b.w	d7cb8 <__register_exitproc>

000d7c34 <memcpy>:
   d7c34:	440a      	add	r2, r1
   d7c36:	4291      	cmp	r1, r2
   d7c38:	f100 33ff 	add.w	r3, r0, #4294967295
   d7c3c:	d100      	bne.n	d7c40 <memcpy+0xc>
   d7c3e:	4770      	bx	lr
   d7c40:	b510      	push	{r4, lr}
   d7c42:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7c46:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7c4a:	4291      	cmp	r1, r2
   d7c4c:	d1f9      	bne.n	d7c42 <memcpy+0xe>
   d7c4e:	bd10      	pop	{r4, pc}

000d7c50 <memset>:
   d7c50:	4402      	add	r2, r0
   d7c52:	4603      	mov	r3, r0
   d7c54:	4293      	cmp	r3, r2
   d7c56:	d100      	bne.n	d7c5a <memset+0xa>
   d7c58:	4770      	bx	lr
   d7c5a:	f803 1b01 	strb.w	r1, [r3], #1
   d7c5e:	e7f9      	b.n	d7c54 <memset+0x4>

000d7c60 <srand>:
   d7c60:	b538      	push	{r3, r4, r5, lr}
   d7c62:	4b0d      	ldr	r3, [pc, #52]	; (d7c98 <srand+0x38>)
   d7c64:	681d      	ldr	r5, [r3, #0]
   d7c66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7c68:	4604      	mov	r4, r0
   d7c6a:	b97b      	cbnz	r3, d7c8c <srand+0x2c>
   d7c6c:	2018      	movs	r0, #24
   d7c6e:	f7fd f901 	bl	d4e74 <malloc>
   d7c72:	4a0a      	ldr	r2, [pc, #40]	; (d7c9c <srand+0x3c>)
   d7c74:	4b0a      	ldr	r3, [pc, #40]	; (d7ca0 <srand+0x40>)
   d7c76:	63a8      	str	r0, [r5, #56]	; 0x38
   d7c78:	e9c0 2300 	strd	r2, r3, [r0]
   d7c7c:	4b09      	ldr	r3, [pc, #36]	; (d7ca4 <srand+0x44>)
   d7c7e:	6083      	str	r3, [r0, #8]
   d7c80:	230b      	movs	r3, #11
   d7c82:	8183      	strh	r3, [r0, #12]
   d7c84:	2201      	movs	r2, #1
   d7c86:	2300      	movs	r3, #0
   d7c88:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7c8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7c8e:	2200      	movs	r2, #0
   d7c90:	611c      	str	r4, [r3, #16]
   d7c92:	615a      	str	r2, [r3, #20]
   d7c94:	bd38      	pop	{r3, r4, r5, pc}
   d7c96:	bf00      	nop
   d7c98:	2003e514 	.word	0x2003e514
   d7c9c:	abcd330e 	.word	0xabcd330e
   d7ca0:	e66d1234 	.word	0xe66d1234
   d7ca4:	0005deec 	.word	0x0005deec

000d7ca8 <strlen>:
   d7ca8:	4603      	mov	r3, r0
   d7caa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7cae:	2a00      	cmp	r2, #0
   d7cb0:	d1fb      	bne.n	d7caa <strlen+0x2>
   d7cb2:	1a18      	subs	r0, r3, r0
   d7cb4:	3801      	subs	r0, #1
   d7cb6:	4770      	bx	lr

000d7cb8 <__register_exitproc>:
   d7cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7cbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d7d78 <__register_exitproc+0xc0>
   d7cc0:	4606      	mov	r6, r0
   d7cc2:	f8d8 0000 	ldr.w	r0, [r8]
   d7cc6:	461f      	mov	r7, r3
   d7cc8:	460d      	mov	r5, r1
   d7cca:	4691      	mov	r9, r2
   d7ccc:	f000 f856 	bl	d7d7c <__retarget_lock_acquire_recursive>
   d7cd0:	4b25      	ldr	r3, [pc, #148]	; (d7d68 <__register_exitproc+0xb0>)
   d7cd2:	681c      	ldr	r4, [r3, #0]
   d7cd4:	b934      	cbnz	r4, d7ce4 <__register_exitproc+0x2c>
   d7cd6:	4c25      	ldr	r4, [pc, #148]	; (d7d6c <__register_exitproc+0xb4>)
   d7cd8:	601c      	str	r4, [r3, #0]
   d7cda:	4b25      	ldr	r3, [pc, #148]	; (d7d70 <__register_exitproc+0xb8>)
   d7cdc:	b113      	cbz	r3, d7ce4 <__register_exitproc+0x2c>
   d7cde:	681b      	ldr	r3, [r3, #0]
   d7ce0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7ce4:	6863      	ldr	r3, [r4, #4]
   d7ce6:	2b1f      	cmp	r3, #31
   d7ce8:	dd07      	ble.n	d7cfa <__register_exitproc+0x42>
   d7cea:	f8d8 0000 	ldr.w	r0, [r8]
   d7cee:	f000 f847 	bl	d7d80 <__retarget_lock_release_recursive>
   d7cf2:	f04f 30ff 	mov.w	r0, #4294967295
   d7cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7cfa:	b34e      	cbz	r6, d7d50 <__register_exitproc+0x98>
   d7cfc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d7d00:	b988      	cbnz	r0, d7d26 <__register_exitproc+0x6e>
   d7d02:	4b1c      	ldr	r3, [pc, #112]	; (d7d74 <__register_exitproc+0xbc>)
   d7d04:	b923      	cbnz	r3, d7d10 <__register_exitproc+0x58>
   d7d06:	f8d8 0000 	ldr.w	r0, [r8]
   d7d0a:	f000 f838 	bl	d7d7e <__retarget_lock_release>
   d7d0e:	e7f0      	b.n	d7cf2 <__register_exitproc+0x3a>
   d7d10:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7d14:	f7fd f8ae 	bl	d4e74 <malloc>
   d7d18:	2800      	cmp	r0, #0
   d7d1a:	d0f4      	beq.n	d7d06 <__register_exitproc+0x4e>
   d7d1c:	2300      	movs	r3, #0
   d7d1e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d7d22:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d7d26:	6863      	ldr	r3, [r4, #4]
   d7d28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7d2c:	2201      	movs	r2, #1
   d7d2e:	409a      	lsls	r2, r3
   d7d30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7d34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7d38:	4313      	orrs	r3, r2
   d7d3a:	2e02      	cmp	r6, #2
   d7d3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d7d40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7d44:	bf02      	ittt	eq
   d7d46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7d4a:	431a      	orreq	r2, r3
   d7d4c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d7d50:	6863      	ldr	r3, [r4, #4]
   d7d52:	f8d8 0000 	ldr.w	r0, [r8]
   d7d56:	1c5a      	adds	r2, r3, #1
   d7d58:	3302      	adds	r3, #2
   d7d5a:	6062      	str	r2, [r4, #4]
   d7d5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d7d60:	f000 f80e 	bl	d7d80 <__retarget_lock_release_recursive>
   d7d64:	2000      	movs	r0, #0
   d7d66:	e7c6      	b.n	d7cf6 <__register_exitproc+0x3e>
   d7d68:	2003e7e4 	.word	0x2003e7e4
   d7d6c:	2003e758 	.word	0x2003e758
   d7d70:	00000000 	.word	0x00000000
   d7d74:	000d4e75 	.word	0x000d4e75
   d7d78:	2003e578 	.word	0x2003e578

000d7d7c <__retarget_lock_acquire_recursive>:
   d7d7c:	4770      	bx	lr

000d7d7e <__retarget_lock_release>:
   d7d7e:	4770      	bx	lr

000d7d80 <__retarget_lock_release_recursive>:
   d7d80:	4770      	bx	lr

000d7d82 <link_code_end>:
	...

000d7d84 <dynalib_user>:
   d7d84:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7d94:	0000 0000 4844 7854 2078 6574 7473 0021     ....DHTxx test!.
   d7da4:	6146 6c69 6465 7420 206f 6572 6461 6620     Failed to read f
   d7db4:	6f72 206d 4844 2054 6573 736e 726f 0021     rom DHT sensor!.
   d7dc4:	7548 696d 3a64 0020 2025 202d 5400 6d65     Humid: .% - .Tem
   d7dd4:	3a70 0020 432a 0020 462a 0020 4b2a 2d20     p: .*C .*F .*K -
   d7de4:	0020 6544 5077 203a 2a00 2043 202d 4800      .DewP: .*C - .H
   d7df4:	6165 4974 203a 2a00 0043 0000               eatI: .*C...

000d7e00 <_ZTVN5spark13EthernetClassE>:
	...
   d7e08:	4f43 000d 4f39 000d 4f2f 000d 4f25 000d     CO..9O../O..%O..
   d7e18:	4f19 000d 4f0d 000d 5959 000d 5961 000d     .O...O..YY..aY..
   d7e28:	4f01 000d 4ef9 000d 4eef 000d 4ee5 000d     .O...N...N...N..
   d7e38:	5991 000d 616e 006e 6e69 0066 766f 0066     .Y..nan.inf.ovf.
   d7e48:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   d7e58:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d7e68:	0065 0000                                   e...

000d7e6c <_ZTV9IPAddress>:
	...
   d7e74:	5549 000d 5539 000d 553b 000d               IU..9U..;U..

000d7e80 <_ZTV9USBSerial>:
	...
   d7e88:	5621 000d 5689 000d 565f 000d 5069 000d     !V...V.._V..iP..
   d7e98:	5651 000d 5623 000d 5633 000d 5683 000d     QV..#V..3V...V..
   d7ea8:	5643 000d 561b 000d                         CV...V..

000d7eb0 <_ZTV11USARTSerial>:
	...
   d7eb8:	572d 000d 579b 000d 5773 000d 5069 000d     -W...W..sW..iP..
   d7ec8:	5743 000d 575f 000d 5751 000d 576d 000d     CW.._W..QW..mW..
   d7ed8:	572f 000d 5735 000d                         /W..5W..

000d7ee0 <_ZTV7TwoWire>:
	...
   d7ee8:	5821 000d 586b 000d 5843 000d 5823 000d     !X..kX..CX..#X..
   d7ef8:	584b 000d 5853 000d 585b 000d 5863 000d     KX..SX..[X..cX..

000d7f08 <_ZTVN5spark9WiFiClassE>:
	...
   d7f10:	58fb 000d 58f1 000d 58e7 000d 589d 000d     .X...X...X...X..
   d7f20:	58db 000d 58cf 000d 5959 000d 5961 000d     .X...X..YY..aY..
   d7f30:	58c3 000d 58bb 000d 58b1 000d 58a7 000d     .X...X...X...X..
   d7f40:	5991 000d                                   .Y..

000d7f44 <_ZTVN5spark12NetworkClassE>:
	...
   d7f4c:	5919 000d 5923 000d 592d 000d 5937 000d     .Y..#Y..-Y..7Y..
   d7f5c:	5941 000d 594d 000d 5959 000d 5961 000d     AY..MY..YY..aY..
   d7f6c:	5969 000d 5975 000d 597d 000d 5987 000d     iY..uY..}Y...Y..
   d7f7c:	5991 000d                                   .Y..

000d7f80 <_ZSt7nothrow>:
   d7f80:	0000 0000 6f70 0077 6f6c 6667 0000 0000     ....pow.logf....

000d7f90 <TWO52>:
   d7f90:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   d7fa0:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   d7fb0:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000d7fc0 <day_name.6145>:
   d7fc0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d7fd0:	6972 6153                                    riSat

000d7fd5 <mon_name.6146>:
   d7fd5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d7fe5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d7ff5:	4476 6365                                   vDec

000d7ff9 <link_const_variable_data_end>:
   d7ff9:	00          	.byte	0x00
	...

000d7ffc <link_constructors_location>:
   d7ffc:	000d4a9d 	.word	0x000d4a9d
   d8000:	000d4f4d 	.word	0x000d4f4d
   d8004:	000d4f75 	.word	0x000d4f75
   d8008:	000d5059 	.word	0x000d5059
   d800c:	000d52e1 	.word	0x000d52e1
   d8010:	000d53d9 	.word	0x000d53d9
   d8014:	000d53f5 	.word	0x000d53f5
   d8018:	000d5905 	.word	0x000d5905
   d801c:	000d5a65 	.word	0x000d5a65
