
h:/Documents/Masters/ECE513/Project/ECE513/Particle/v2/target/2.2.0-rc.2/argon/v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000033b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d73d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e4a4  000d73d4  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002e0  2003e510  2003e510  0002e510  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7440  000d7440  00027440  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7468  000d7468  00027468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017c978  00000000  00000000  0002746c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019016  00000000  00000000  001a3de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b4cb  00000000  00000000  001bcdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002988  00000000  00000000  001e82c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007530  00000000  00000000  001eac4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bb0c  00000000  00000000  001f217d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003de78  00000000  00000000  0022dc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105a11  00000000  00000000  0026bb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000072b8  00000000  00000000  00371514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fe85 	bl	d6d40 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fea7 	bl	d6d90 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4a4 	.word	0x2003e4a4
   d404c:	000d73d4 	.word	0x000d73d4
   d4050:	2003e510 	.word	0x2003e510
   d4054:	2003e510 	.word	0x2003e510
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fc3f 	bl	d58e4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d73a4 	.word	0x000d73a4
   d4080:	000d73cc 	.word	0x000d73cc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8fc 	b.w	d4280 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa1b 	bl	d44c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bbdf 	b.w	d5854 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b915 	b.w	d52c4 <malloc>

000d409a <_Znaj>:
   d409a:	f001 b913 	b.w	d52c4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b919 	b.w	d52d4 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 b917 	b.w	d52d4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CToggleLedC1Ev>:
#include "toggleLed.h"


CToggleLed::CToggleLed() {
   d40b8:	b538      	push	{r3, r4, r5, lr}
   d40ba:	f100 0510 	add.w	r5, r0, #16
   d40be:	4604      	mov	r4, r0
   d40c0:	4904      	ldr	r1, [pc, #16]	; (d40d4 <_ZN10CToggleLedC1Ev+0x1c>)
   d40c2:	4628      	mov	r0, r5
   d40c4:	f001 f9cb 	bl	d545e <_ZN6StringC1EPKc>
    statusStr = "{}";
   d40c8:	4903      	ldr	r1, [pc, #12]	; (d40d8 <_ZN10CToggleLedC1Ev+0x20>)
   d40ca:	4628      	mov	r0, r5
   d40cc:	f001 fa1a 	bl	d5504 <_ZN6StringaSEPKc>
}
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	000d7105 	.word	0x000d7105
   d40d8:	000d7004 	.word	0x000d7004

000d40dc <_ZN10CToggleLed15createStatusStrEv>:
    }

    createStatusStr();
}

void CToggleLed::createStatusStr() {
   d40dc:	b510      	push	{r4, lr}
   d40de:	b086      	sub	sp, #24
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40e0:	68c3      	ldr	r3, [r0, #12]
   d40e2:	9301      	str	r3, [sp, #4]
   d40e4:	7803      	ldrb	r3, [r0, #0]
   d40e6:	9300      	str	r3, [sp, #0]
   d40e8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
void CToggleLed::createStatusStr() {
   d40ec:	4604      	mov	r4, r0
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40ee:	4907      	ldr	r1, [pc, #28]	; (d410c <_ZN10CToggleLed15createStatusStrEv+0x30>)
   d40f0:	a802      	add	r0, sp, #8
   d40f2:	f001 fa45 	bl	d5580 <_ZN6String6formatEPKcz>
   d40f6:	a902      	add	r1, sp, #8
   d40f8:	f104 0010 	add.w	r0, r4, #16
   d40fc:	f001 f9fa 	bl	d54f4 <_ZN6StringaSEOS_>
   d4100:	a802      	add	r0, sp, #8
   d4102:	f001 f961 	bl	d53c8 <_ZN6StringD1Ev>
   d4106:	b006      	add	sp, #24
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000d7007 	.word	0x000d7007

000d4110 <_ZN10CToggleLed7executeEv>:
void CToggleLed::execute() {
   d4110:	b538      	push	{r3, r4, r5, lr}
    switch (state) {
   d4112:	7802      	ldrb	r2, [r0, #0]
void CToggleLed::execute() {
   d4114:	4604      	mov	r4, r0
    switch (state) {
   d4116:	b132      	cbz	r2, d4126 <_ZN10CToggleLed7executeEv+0x16>
   d4118:	2a01      	cmp	r2, #1
   d411a:	d012      	beq.n	d4142 <_ZN10CToggleLed7executeEv+0x32>
    createStatusStr();
   d411c:	4620      	mov	r0, r4
}
   d411e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4122:	f7ff bfdb 	b.w	d40dc <_ZN10CToggleLed15createStatusStrEv>
            if (++tick >= period) {
   d4126:	6843      	ldr	r3, [r0, #4]
   d4128:	6881      	ldr	r1, [r0, #8]
   d412a:	3301      	adds	r3, #1
   d412c:	428b      	cmp	r3, r1
   d412e:	6043      	str	r3, [r0, #4]
   d4130:	dbf4      	blt.n	d411c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d4132:	6042      	str	r2, [r0, #4]
                digitalWrite(LED, HIGH);
   d4134:	2101      	movs	r1, #1
   d4136:	2007      	movs	r0, #7
   d4138:	f002 f993 	bl	d6462 <digitalWrite>
                state = CToggleLed::S_ON;
   d413c:	2301      	movs	r3, #1
   d413e:	7023      	strb	r3, [r4, #0]
   d4140:	e7ec      	b.n	d411c <_ZN10CToggleLed7executeEv+0xc>
            if (++tick >= period) {
   d4142:	6843      	ldr	r3, [r0, #4]
   d4144:	6882      	ldr	r2, [r0, #8]
   d4146:	3301      	adds	r3, #1
   d4148:	4293      	cmp	r3, r2
   d414a:	6043      	str	r3, [r0, #4]
   d414c:	dbe6      	blt.n	d411c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d414e:	2500      	movs	r5, #0
   d4150:	6045      	str	r5, [r0, #4]
                digitalWrite(LED, LOW);
   d4152:	4629      	mov	r1, r5
   d4154:	2007      	movs	r0, #7
   d4156:	f002 f984 	bl	d6462 <digitalWrite>
                state = CToggleLed::S_OFF;
   d415a:	7025      	strb	r5, [r4, #0]
   d415c:	e7de      	b.n	d411c <_ZN10CToggleLed7executeEv+0xc>

000d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d415e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4160:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4162:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4164:	b17c      	cbz	r4, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4166:	6863      	ldr	r3, [r4, #4]
   d4168:	3b01      	subs	r3, #1
   d416a:	6063      	str	r3, [r4, #4]
   d416c:	b95b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4620      	mov	r0, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4176:	68a3      	ldr	r3, [r4, #8]
   d4178:	3b01      	subs	r3, #1
   d417a:	60a3      	str	r3, [r4, #8]
   d417c:	b91b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	68db      	ldr	r3, [r3, #12]
   d4184:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4186:	4628      	mov	r0, r5
   d4188:	bd38      	pop	{r3, r4, r5, pc}

000d418a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d418a:	b513      	push	{r0, r1, r4, lr}
   d418c:	460b      	mov	r3, r1
   d418e:	4604      	mov	r4, r0
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4190:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d4192:	685b      	ldr	r3, [r3, #4]
    return JSONValue(v_, d_);
   d4194:	6909      	ldr	r1, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4196:	9200      	str	r2, [sp, #0]
      : _M_pi(__r._M_pi)
   d4198:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d419a:	b113      	cbz	r3, d41a2 <_ZNK5spark18JSONObjectIterator5valueEv+0x18>
    { ++_M_use_count; }
   d419c:	685a      	ldr	r2, [r3, #4]
   d419e:	3201      	adds	r2, #1
   d41a0:	605a      	str	r2, [r3, #4]
   d41a2:	466a      	mov	r2, sp
   d41a4:	4620      	mov	r0, r4
   d41a6:	f001 fecf 	bl	d5f48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41aa:	a801      	add	r0, sp, #4
   d41ac:	f7ff ffd7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	b002      	add	sp, #8
   d41b4:	bd10      	pop	{r4, pc}
	...

000d41b8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>:
void CToggleLed::cmdProcessing(JSONValue cmdJson) {
   d41b8:	b570      	push	{r4, r5, r6, lr}
   d41ba:	460b      	mov	r3, r1
   d41bc:	b08c      	sub	sp, #48	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41be:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d41c0:	685b      	ldr	r3, [r3, #4]
        JSONObjectIterator(value.t_, value.d_) {
   d41c2:	6889      	ldr	r1, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41c4:	9202      	str	r2, [sp, #8]
   d41c6:	4604      	mov	r4, r0
      : _M_pi(__r._M_pi)
   d41c8:	9303      	str	r3, [sp, #12]
	if (_M_pi != 0)
   d41ca:	b113      	cbz	r3, d41d2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x1a>
    { ++_M_use_count; }
   d41cc:	685a      	ldr	r2, [r3, #4]
   d41ce:	3201      	adds	r2, #1
   d41d0:	605a      	str	r2, [r3, #4]
   d41d2:	aa02      	add	r2, sp, #8
   d41d4:	a806      	add	r0, sp, #24
   d41d6:	f002 f85f 	bl	d6298 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d41da:	a803      	add	r0, sp, #12
   d41dc:	f7ff ffbf 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d41e0:	4e1f      	ldr	r6, [pc, #124]	; (d4260 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0xa8>)
    while (iter.next()) {
   d41e2:	a806      	add	r0, sp, #24
   d41e4:	f002 f870 	bl	d62c8 <_ZN5spark18JSONObjectIterator4nextEv>
   d41e8:	2800      	cmp	r0, #0
   d41ea:	d033      	beq.n	d4254 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x9c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41ec:	9b06      	ldr	r3, [sp, #24]
   d41ee:	9300      	str	r3, [sp, #0]
      : _M_pi(__r._M_pi)
   d41f0:	9b07      	ldr	r3, [sp, #28]
    return JSONString(k_, d_);
   d41f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d41f4:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d41f6:	b113      	cbz	r3, d41fe <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x46>
    { ++_M_use_count; }
   d41f8:	685a      	ldr	r2, [r3, #4]
   d41fa:	3201      	adds	r2, #1
   d41fc:	605a      	str	r2, [r3, #4]
   d41fe:	466a      	mov	r2, sp
   d4200:	a802      	add	r0, sp, #8
   d4202:	f002 f825 	bl	d6250 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4206:	a801      	add	r0, sp, #4
   d4208:	f7ff ffa9 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d420c:	9804      	ldr	r0, [sp, #16]
   d420e:	4631      	mov	r1, r6
   d4210:	f002 fdea 	bl	d6de8 <strcmp>
   d4214:	4605      	mov	r5, r0
   d4216:	a803      	add	r0, sp, #12
   d4218:	f7ff ffa1 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "frequency") {
   d421c:	2d00      	cmp	r5, #0
   d421e:	d1e0      	bne.n	d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
            hz = (int)iter.value().toInt();
   d4220:	a906      	add	r1, sp, #24
   d4222:	a802      	add	r0, sp, #8
   d4224:	f7ff ffb1 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4228:	a802      	add	r0, sp, #8
   d422a:	f001 ff01 	bl	d6030 <_ZNK5spark9JSONValue5toIntEv>
   d422e:	60e0      	str	r0, [r4, #12]
   d4230:	a803      	add	r0, sp, #12
   d4232:	f7ff ff94 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            period = (int)iter.value().toInt() * LOOP_FREQUENCY;
   d4236:	a906      	add	r1, sp, #24
   d4238:	a802      	add	r0, sp, #8
   d423a:	f7ff ffa6 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d423e:	a802      	add	r0, sp, #8
   d4240:	f001 fef6 	bl	d6030 <_ZNK5spark9JSONValue5toIntEv>
   d4244:	230a      	movs	r3, #10
   d4246:	4358      	muls	r0, r3
   d4248:	60a0      	str	r0, [r4, #8]
   d424a:	a803      	add	r0, sp, #12
   d424c:	f7ff ff87 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tick = 0;
   d4250:	6065      	str	r5, [r4, #4]
   d4252:	e7c6      	b.n	d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
   d4254:	a807      	add	r0, sp, #28
   d4256:	f7ff ff82 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d425a:	b00c      	add	sp, #48	; 0x30
   d425c:	bd70      	pop	{r4, r5, r6, pc}
   d425e:	bf00      	nop
   d4260:	000d7025 	.word	0x000d7025

000d4264 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4264:	b40e      	push	{r1, r2, r3}
   d4266:	b503      	push	{r0, r1, lr}
   d4268:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d426a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d426c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4270:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4272:	f001 fa14 	bl	d569e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4276:	b002      	add	sp, #8
   d4278:	f85d eb04 	ldr.w	lr, [sp], #4
   d427c:	b003      	add	sp, #12
   d427e:	4770      	bx	lr

000d4280 <setup>:

  }
}

// setup() runs once, when the device is first turned on.
void setup() {
   d4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(LED, OUTPUT);
   d4282:	2101      	movs	r1, #1
   d4284:	2007      	movs	r0, #7
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4286:	4d2b      	ldr	r5, [pc, #172]	; (d4334 <setup+0xb4>)
   d4288:	4e2b      	ldr	r6, [pc, #172]	; (d4338 <setup+0xb8>)
   d428a:	f002 f8d9 	bl	d6440 <pinMode>
  pinMode(DHTPIN, INPUT);
   d428e:	2100      	movs	r1, #0
   d4290:	2002      	movs	r0, #2
   d4292:	f002 f8d5 	bl	d6440 <pinMode>
   d4296:	782b      	ldrb	r3, [r5, #0]
   d4298:	f3bf 8f5b 	dmb	ish
   d429c:	f013 0f01 	tst.w	r3, #1
   d42a0:	d109      	bne.n	d42b6 <setup+0x36>
   d42a2:	4628      	mov	r0, r5
   d42a4:	f7ff feff 	bl	d40a6 <__cxa_guard_acquire>
   d42a8:	b128      	cbz	r0, d42b6 <setup+0x36>
   d42aa:	f000 fdc7 	bl	d4e3c <HAL_Pin_Map>
   d42ae:	6030      	str	r0, [r6, #0]
   d42b0:	4628      	mov	r0, r5
   d42b2:	f7ff fefd 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42b6:	6833      	ldr	r3, [r6, #0]
   d42b8:	f893 4020 	ldrb.w	r4, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42bc:	782b      	ldrb	r3, [r5, #0]
   d42be:	f3bf 8f5b 	dmb	ish
   d42c2:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42c4:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42c8:	d409      	bmi.n	d42de <setup+0x5e>
   d42ca:	481a      	ldr	r0, [pc, #104]	; (d4334 <setup+0xb4>)
   d42cc:	f7ff feeb 	bl	d40a6 <__cxa_guard_acquire>
   d42d0:	b128      	cbz	r0, d42de <setup+0x5e>
   d42d2:	f000 fdb3 	bl	d4e3c <HAL_Pin_Map>
   d42d6:	6030      	str	r0, [r6, #0]
   d42d8:	4816      	ldr	r0, [pc, #88]	; (d4334 <setup+0xb4>)
   d42da:	f7ff fee9 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42de:	6833      	ldr	r3, [r6, #0]
   d42e0:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   d42e4:	f004 041f 	and.w	r4, r4, #31
   d42e8:	433c      	orrs	r4, r7
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d42ea:	2c2f      	cmp	r4, #47	; 0x2f
   d42ec:	dd1d      	ble.n	d432a <setup+0xaa>
   d42ee:	4a13      	ldr	r2, [pc, #76]	; (d433c <setup+0xbc>)
   d42f0:	2100      	movs	r1, #0
   d42f2:	200a      	movs	r0, #10
   d42f4:	f000 ff12 	bl	d511c <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d42f8:	4b11      	ldr	r3, [pc, #68]	; (d4340 <setup+0xc0>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d42fa:	f004 041f 	and.w	r4, r4, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d42fe:	2001      	movs	r0, #1
   d4300:	fa00 f404 	lsl.w	r4, r0, r4
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4304:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	pinSetFast(DHTPIN);
  RGB.control(true);
   d4308:	f001 fa49 	bl	d579e <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);   // default color white
   d430c:	22ff      	movs	r2, #255	; 0xff
   d430e:	4611      	mov	r1, r2
   d4310:	4610      	mov	r0, r2
   d4312:	f001 fa54 	bl	d57be <_ZN8RGBClass5colorEiii>
  Serial.begin();
   d4316:	f001 fbe7 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d431a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d431e:	f001 fbd7 	bl	d5ad0 <_ZN9USBSerial5beginEl>
  counter = 0;
   d4322:	4b08      	ldr	r3, [pc, #32]	; (d4344 <setup+0xc4>)
   d4324:	2200      	movs	r2, #0
   d4326:	601a      	str	r2, [r3, #0]
}
   d4328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d432a:	2c1f      	cmp	r4, #31
   d432c:	dce4      	bgt.n	d42f8 <setup+0x78>
        return NRF_P0;
   d432e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d4332:	e7e4      	b.n	d42fe <setup+0x7e>
   d4334:	2003e510 	.word	0x2003e510
   d4338:	2003e514 	.word	0x2003e514
   d433c:	000d4ecd 	.word	0x000d4ecd
   d4340:	50000300 	.word	0x50000300
   d4344:	2003e518 	.word	0x2003e518

000d4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4348:	680b      	ldr	r3, [r1, #0]
   d434a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d434c:	b113      	cbz	r3, d4354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d434e:	685a      	ldr	r2, [r3, #4]
   d4350:	3201      	adds	r2, #1
   d4352:	605a      	str	r2, [r3, #4]
      }
   d4354:	4770      	bx	lr

000d4356 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4356:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4358:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d435a:	f851 3b04 	ldr.w	r3, [r1], #4
   d435e:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4360:	4604      	mov	r4, r0
   d4362:	a801      	add	r0, sp, #4
   d4364:	f7ff fff0 	bl	d4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4368:	466a      	mov	r2, sp
   d436a:	4629      	mov	r1, r5
   d436c:	4620      	mov	r0, r4
   d436e:	f001 ff6f 	bl	d6250 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4372:	a801      	add	r0, sp, #4
   d4374:	f7ff fef3 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4378:	4620      	mov	r0, r4
   d437a:	b003      	add	sp, #12
   d437c:	bd30      	pop	{r4, r5, pc}
	...

000d4380 <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d4380:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4382:	b095      	sub	sp, #84	; 0x54
  if (Serial.available() <= 0) return;
   d4384:	f001 fbb0 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	691b      	ldr	r3, [r3, #16]
   d438c:	4798      	blx	r3
   d438e:	2800      	cmp	r0, #0
   d4390:	f340 8087 	ble.w	d44a2 <_Z19serialCmdProcessingv+0x122>
  String cmdStr = "";
   d4394:	4944      	ldr	r1, [pc, #272]	; (d44a8 <_Z19serialCmdProcessingv+0x128>)
   d4396:	a806      	add	r0, sp, #24
   d4398:	f001 f861 	bl	d545e <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d439c:	f001 fba4 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d43a0:	6803      	ldr	r3, [r0, #0]
   d43a2:	691b      	ldr	r3, [r3, #16]
   d43a4:	4798      	blx	r3
   d43a6:	b180      	cbz	r0, d43ca <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d43a8:	f001 fb9e 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d43ac:	6803      	ldr	r3, [r0, #0]
   d43ae:	695b      	ldr	r3, [r3, #20]
   d43b0:	4798      	blx	r3
      cmdStr += String(c);
   d43b2:	b2c1      	uxtb	r1, r0
   d43b4:	a80e      	add	r0, sp, #56	; 0x38
   d43b6:	f001 f8b7 	bl	d5528 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d43ba:	a90e      	add	r1, sp, #56	; 0x38
   d43bc:	a806      	add	r0, sp, #24
   d43be:	f001 f8db 	bl	d5578 <_ZN6String6concatERKS_>
   d43c2:	a80e      	add	r0, sp, #56	; 0x38
   d43c4:	f001 f800 	bl	d53c8 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d43c8:	e7e8      	b.n	d439c <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d43ca:	9906      	ldr	r1, [sp, #24]
    return parseCopy(json, strlen(json));
   d43cc:	9101      	str	r1, [sp, #4]
   d43ce:	4608      	mov	r0, r1
   d43d0:	f002 fd1c 	bl	d6e0c <strlen>
   d43d4:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d43d6:	4d35      	ldr	r5, [pc, #212]	; (d44ac <_Z19serialCmdProcessingv+0x12c>)
   d43d8:	4e35      	ldr	r6, [pc, #212]	; (d44b0 <_Z19serialCmdProcessingv+0x130>)
   d43da:	4f36      	ldr	r7, [pc, #216]	; (d44b4 <_Z19serialCmdProcessingv+0x134>)
    return parseCopy(json, strlen(json));
   d43dc:	4602      	mov	r2, r0
   d43de:	a803      	add	r0, sp, #12
   d43e0:	f001 ff9a 	bl	d6318 <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d43e4:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43e6:	9b03      	ldr	r3, [sp, #12]
   d43e8:	930a      	str	r3, [sp, #40]	; 0x28
   d43ea:	a904      	add	r1, sp, #16
   d43ec:	a80b      	add	r0, sp, #44	; 0x2c
   d43ee:	f7ff ffab 	bl	d4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43f2:	aa0a      	add	r2, sp, #40	; 0x28
   d43f4:	4621      	mov	r1, r4
   d43f6:	a80e      	add	r0, sp, #56	; 0x38
   d43f8:	f001 ff4e 	bl	d6298 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43fc:	a80b      	add	r0, sp, #44	; 0x2c
   d43fe:	f7ff feae 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d4402:	a80e      	add	r0, sp, #56	; 0x38
   d4404:	f001 ff60 	bl	d62c8 <_ZN5spark18JSONObjectIterator4nextEv>
   d4408:	2800      	cmp	r0, #0
   d440a:	d041      	beq.n	d4490 <_Z19serialCmdProcessingv+0x110>
    if (iter.name() == "smartlight") {
   d440c:	a90e      	add	r1, sp, #56	; 0x38
   d440e:	a80a      	add	r0, sp, #40	; 0x28
   d4410:	f7ff ffa1 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d4414:	4629      	mov	r1, r5
   d4416:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4418:	f002 fce6 	bl	d6de8 <strcmp>
   d441c:	4604      	mov	r4, r0
   d441e:	a80b      	add	r0, sp, #44	; 0x2c
   d4420:	f7ff fe9d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d4424:	a90e      	add	r1, sp, #56	; 0x38
   d4426:	a80a      	add	r0, sp, #40	; 0x28
    if (iter.name() == "smartlight") {
   d4428:	b94c      	cbnz	r4, d443e <_Z19serialCmdProcessingv+0xbe>
      smartLight.cmdProcessing(iter.value());
   d442a:	f7ff feae 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d442e:	4822      	ldr	r0, [pc, #136]	; (d44b8 <_Z19serialCmdProcessingv+0x138>)
   d4430:	a90a      	add	r1, sp, #40	; 0x28
   d4432:	f000 fba9 	bl	d4b88 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d4436:	a80b      	add	r0, sp, #44	; 0x2c
   d4438:	f7ff fe91 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d443c:	e7e1      	b.n	d4402 <_Z19serialCmdProcessingv+0x82>
    else if (iter.name() == "led") {
   d443e:	f7ff ff8a 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4442:	4631      	mov	r1, r6
   d4444:	980c      	ldr	r0, [sp, #48]	; 0x30
   d4446:	f002 fccf 	bl	d6de8 <strcmp>
   d444a:	4604      	mov	r4, r0
   d444c:	a80b      	add	r0, sp, #44	; 0x2c
   d444e:	f7ff fe86 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      toggleLed.cmdProcessing(iter.value());
   d4452:	a90e      	add	r1, sp, #56	; 0x38
   d4454:	a80a      	add	r0, sp, #40	; 0x28
    else if (iter.name() == "led") {
   d4456:	b934      	cbnz	r4, d4466 <_Z19serialCmdProcessingv+0xe6>
      toggleLed.cmdProcessing(iter.value());
   d4458:	f7ff fe97 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d445c:	4817      	ldr	r0, [pc, #92]	; (d44bc <_Z19serialCmdProcessingv+0x13c>)
   d445e:	a90a      	add	r1, sp, #40	; 0x28
   d4460:	f7ff feaa 	bl	d41b8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>
   d4464:	e7e7      	b.n	d4436 <_Z19serialCmdProcessingv+0xb6>
    else if (iter.name() == "thermostat") {
   d4466:	f7ff ff76 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d446a:	980c      	ldr	r0, [sp, #48]	; 0x30
   d446c:	4639      	mov	r1, r7
   d446e:	f002 fcbb 	bl	d6de8 <strcmp>
   d4472:	4604      	mov	r4, r0
   d4474:	a80b      	add	r0, sp, #44	; 0x2c
   d4476:	f7ff fe72 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d447a:	2c00      	cmp	r4, #0
   d447c:	d1c1      	bne.n	d4402 <_Z19serialCmdProcessingv+0x82>
      thermostat.cmdProcessing(iter.value());
   d447e:	a90e      	add	r1, sp, #56	; 0x38
   d4480:	a80a      	add	r0, sp, #40	; 0x28
   d4482:	f7ff fe82 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4486:	480e      	ldr	r0, [pc, #56]	; (d44c0 <_Z19serialCmdProcessingv+0x140>)
   d4488:	a90a      	add	r1, sp, #40	; 0x28
   d448a:	f000 fc39 	bl	d4d00 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>
   d448e:	e7d2      	b.n	d4436 <_Z19serialCmdProcessingv+0xb6>
   d4490:	a80f      	add	r0, sp, #60	; 0x3c
   d4492:	f7ff fe64 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4496:	a804      	add	r0, sp, #16
   d4498:	f7ff fe61 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d449c:	a806      	add	r0, sp, #24
   d449e:	f000 ff93 	bl	d53c8 <_ZN6StringD1Ev>
}
   d44a2:	b015      	add	sp, #84	; 0x54
   d44a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44a6:	bf00      	nop
   d44a8:	000d7105 	.word	0x000d7105
   d44ac:	000d702f 	.word	0x000d702f
   d44b0:	000d703a 	.word	0x000d703a
   d44b4:	000d703e 	.word	0x000d703e
   d44b8:	2003e51c 	.word	0x2003e51c
   d44bc:	2003e574 	.word	0x2003e574
   d44c0:	2003e54c 	.word	0x2003e54c

000d44c4 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d44c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d44c6:	b08d      	sub	sp, #52	; 0x34

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44c8:	f000 fd08 	bl	d4edc <HAL_Timer_Get_Milli_Seconds>
   d44cc:	4604      	mov	r4, r0
  unsigned long t = millis();

  serialCmdProcessing();
   d44ce:	f7ff ff57 	bl	d4380 <_Z19serialCmdProcessingv>
  smartLight.execute();
   d44d2:	4822      	ldr	r0, [pc, #136]	; (d455c <loop+0x98>)
  thermostat.execute();

  
  unsigned long period = millis() - t;

  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d44d4:	4d22      	ldr	r5, [pc, #136]	; (d4560 <loop+0x9c>)
  smartLight.execute();
   d44d6:	f000 fb1f 	bl	d4b18 <_ZN11CSmartLight7executeEv>
  toggleLed.execute();
   d44da:	4822      	ldr	r0, [pc, #136]	; (d4564 <loop+0xa0>)
   d44dc:	f7ff fe18 	bl	d4110 <_ZN10CToggleLed7executeEv>
  thermostat.execute();
   d44e0:	4821      	ldr	r0, [pc, #132]	; (d4568 <loop+0xa4>)
   d44e2:	f000 fc69 	bl	d4db8 <_ZN11CThermostat7executeEv>
   d44e6:	f000 fcf9 	bl	d4edc <HAL_Timer_Get_Milli_Seconds>
   d44ea:	6829      	ldr	r1, [r5, #0]
   d44ec:	220a      	movs	r2, #10
   d44ee:	fb91 f3f2 	sdiv	r3, r1, r2
   d44f2:	fb02 1313 	mls	r3, r2, r3, r1
   d44f6:	4606      	mov	r6, r0
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d44f8:	bb23      	cbnz	r3, d4544 <loop+0x80>
    counter = 0;
   d44fa:	602b      	str	r3, [r5, #0]
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"ct\":%ld}", 
   d44fc:	f001 faf4 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d4500:	4607      	mov	r7, r0
      (int)Time.now(), smartLight.getStatusStr().c_str(), toggleLed.getStatusStr().c_str(),
   d4502:	f001 f92f 	bl	d5764 <_ZN9TimeClass3nowEv>

    void execute();
    
    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d4506:	4919      	ldr	r1, [pc, #100]	; (d456c <loop+0xa8>)
   d4508:	9003      	str	r0, [sp, #12]
   d450a:	a804      	add	r0, sp, #16
   d450c:	f000 ffe7 	bl	d54de <_ZN6StringC1ERKS_>
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"ct\":%ld}", 
   d4510:	9b04      	ldr	r3, [sp, #16]
class CToggleLed {
public:
    CToggleLed();
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    String getStatusStr() {return statusStr;};
   d4512:	4917      	ldr	r1, [pc, #92]	; (d4570 <loop+0xac>)
   d4514:	9302      	str	r3, [sp, #8]
   d4516:	a808      	add	r0, sp, #32
   d4518:	f000 ffe1 	bl	d54de <_ZN6StringC1ERKS_>
  unsigned long period = millis() - t;
   d451c:	1b36      	subs	r6, r6, r4
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"ct\":%ld}", 
   d451e:	9908      	ldr	r1, [sp, #32]
   d4520:	9100      	str	r1, [sp, #0]
   d4522:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d4526:	4913      	ldr	r1, [pc, #76]	; (d4574 <loop+0xb0>)
   d4528:	9601      	str	r6, [sp, #4]
   d452a:	4638      	mov	r0, r7
   d452c:	f7ff fe9a 	bl	d4264 <_ZN5Print6printfEPKcz>
      (int)Time.now(), smartLight.getStatusStr().c_str(), toggleLed.getStatusStr().c_str(),
   d4530:	a808      	add	r0, sp, #32
   d4532:	f000 ff49 	bl	d53c8 <_ZN6StringD1Ev>
   d4536:	a804      	add	r0, sp, #16
   d4538:	f000 ff46 	bl	d53c8 <_ZN6StringD1Ev>
      period
    );
    Serial.println();
   d453c:	f001 fad4 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d4540:	f001 f879 	bl	d5636 <_ZN5Print7printlnEv>
  }
  counter++;
   d4544:	682b      	ldr	r3, [r5, #0]
   d4546:	3301      	adds	r3, #1
   d4548:	602b      	str	r3, [r5, #0]
   d454a:	f000 fcc7 	bl	d4edc <HAL_Timer_Get_Milli_Seconds>
  
  period = PERIOD - (millis() - t);
   d454e:	3464      	adds	r4, #100	; 0x64
  if (period > 0) delay(period);  
   d4550:	1a20      	subs	r0, r4, r0
   d4552:	d001      	beq.n	d4558 <loop+0x94>
   d4554:	f001 f920 	bl	d5798 <delay>
   d4558:	b00d      	add	sp, #52	; 0x34
   d455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d455c:	2003e51c 	.word	0x2003e51c
   d4560:	2003e518 	.word	0x2003e518
   d4564:	2003e574 	.word	0x2003e574
   d4568:	2003e54c 	.word	0x2003e54c
   d456c:	2003e53c 	.word	0x2003e53c
   d4570:	2003e584 	.word	0x2003e584
   d4574:	000d7049 	.word	0x000d7049

000d4578 <_GLOBAL__sub_I_smartLight>:
   d4578:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED); 
   d457a:	2100      	movs	r1, #0
   d457c:	2001      	movs	r0, #1
   d457e:	f000 fdfd 	bl	d517c <system_thread_set_state>
CSmartLight smartLight;
   d4582:	4805      	ldr	r0, [pc, #20]	; (d4598 <_GLOBAL__sub_I_smartLight+0x20>)
   d4584:	f000 f9f2 	bl	d496c <_ZN11CSmartLightC1Ev>
CToggleLed toggleLed;
   d4588:	4804      	ldr	r0, [pc, #16]	; (d459c <_GLOBAL__sub_I_smartLight+0x24>)
   d458a:	f7ff fd95 	bl	d40b8 <_ZN10CToggleLedC1Ev>
   d458e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
CThermostat thermostat;
   d4592:	4803      	ldr	r0, [pc, #12]	; (d45a0 <_GLOBAL__sub_I_smartLight+0x28>)
   d4594:	f000 bb9e 	b.w	d4cd4 <_ZN11CThermostatC1Ev>
   d4598:	2003e51c 	.word	0x2003e51c
   d459c:	2003e574 	.word	0x2003e574
   d45a0:	2003e54c 	.word	0x2003e54c

000d45a4 <nrf_gpio_pin_port_decode>:
{
   d45a4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45a6:	6803      	ldr	r3, [r0, #0]
   d45a8:	2b2f      	cmp	r3, #47	; 0x2f
{
   d45aa:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45ac:	d904      	bls.n	d45b8 <nrf_gpio_pin_port_decode+0x14>
   d45ae:	4a07      	ldr	r2, [pc, #28]	; (d45cc <nrf_gpio_pin_port_decode+0x28>)
   d45b0:	2100      	movs	r1, #0
   d45b2:	200a      	movs	r0, #10
   d45b4:	f000 fdb2 	bl	d511c <panic_>
    if (*p_pin < P0_PIN_NUM)
   d45b8:	6823      	ldr	r3, [r4, #0]
   d45ba:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45bc:	bf83      	ittte	hi
   d45be:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d45c2:	4803      	ldrhi	r0, [pc, #12]	; (d45d0 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45c4:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d45c6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   d45ca:	bd10      	pop	{r4, pc}
   d45cc:	000d4ecd 	.word	0x000d4ecd
   d45d0:	50000300 	.word	0x50000300

000d45d4 <nrf_gpio_pin_set>:
{
   d45d4:	b507      	push	{r0, r1, r2, lr}
   d45d6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45d8:	a801      	add	r0, sp, #4
   d45da:	f7ff ffe3 	bl	d45a4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d45de:	9a01      	ldr	r2, [sp, #4]
   d45e0:	2301      	movs	r3, #1
   d45e2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d45e4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d45e8:	b003      	add	sp, #12
   d45ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d45ee <nrf_gpio_pin_read>:
{
   d45ee:	b507      	push	{r0, r1, r2, lr}
   d45f0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45f2:	a801      	add	r0, sp, #4
   d45f4:	f7ff ffd6 	bl	d45a4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d45f8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d45fa:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d45fe:	40d8      	lsrs	r0, r3
}
   d4600:	f000 0001 	and.w	r0, r0, #1
   d4604:	b003      	add	sp, #12
   d4606:	f85d fb04 	ldr.w	pc, [sp], #4

000d460a <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d460a:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d460c:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d460e:	2301      	movs	r3, #1
	_pin = pin;
   d4610:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4612:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4614:	7403      	strb	r3, [r0, #16]
}
   d4616:	bd10      	pop	{r4, pc}

000d4618 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d461c:	4604      	mov	r4, r0
   d461e:	b085      	sub	sp, #20
   d4620:	f000 fc5c 	bl	d4edc <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4624:	68e3      	ldr	r3, [r4, #12]
   d4626:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4628:	bf84      	itt	hi
   d462a:	2300      	movhi	r3, #0
   d462c:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d462e:	7c23      	ldrb	r3, [r4, #16]
   d4630:	b92b      	cbnz	r3, d463e <_ZN3DHT4readEv+0x26>
   d4632:	68e3      	ldr	r3, [r4, #12]
   d4634:	1ac0      	subs	r0, r0, r3
   d4636:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d463a:	f0c0 8160 	bcc.w	d48fe <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d463e:	2500      	movs	r5, #0
   d4640:	7425      	strb	r5, [r4, #16]
   d4642:	f000 fc4b 	bl	d4edc <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4646:	4eb0      	ldr	r6, [pc, #704]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4648:	6025      	str	r5, [r4, #0]
   d464a:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d464c:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d464e:	79a7      	ldrb	r7, [r4, #6]
   d4650:	7833      	ldrb	r3, [r6, #0]
   d4652:	4dae      	ldr	r5, [pc, #696]	; (d490c <_ZN3DHT4readEv+0x2f4>)
   d4654:	f3bf 8f5b 	dmb	ish
   d4658:	f013 0f01 	tst.w	r3, #1
   d465c:	d109      	bne.n	d4672 <_ZN3DHT4readEv+0x5a>
   d465e:	4630      	mov	r0, r6
   d4660:	f7ff fd21 	bl	d40a6 <__cxa_guard_acquire>
   d4664:	b128      	cbz	r0, d4672 <_ZN3DHT4readEv+0x5a>
   d4666:	f000 fbe9 	bl	d4e3c <HAL_Pin_Map>
   d466a:	6028      	str	r0, [r5, #0]
   d466c:	4630      	mov	r0, r6
   d466e:	f7ff fd1f 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4672:	682b      	ldr	r3, [r5, #0]
   d4674:	013f      	lsls	r7, r7, #4
   d4676:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d467a:	7833      	ldrb	r3, [r6, #0]
   d467c:	f3bf 8f5b 	dmb	ish
   d4680:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4682:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4686:	d409      	bmi.n	d469c <_ZN3DHT4readEv+0x84>
   d4688:	489f      	ldr	r0, [pc, #636]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d468a:	f7ff fd0c 	bl	d40a6 <__cxa_guard_acquire>
   d468e:	b128      	cbz	r0, d469c <_ZN3DHT4readEv+0x84>
   d4690:	f000 fbd4 	bl	d4e3c <HAL_Pin_Map>
   d4694:	6028      	str	r0, [r5, #0]
   d4696:	489c      	ldr	r0, [pc, #624]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d4698:	f7ff fd0a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d469c:	682b      	ldr	r3, [r5, #0]
   d469e:	441f      	add	r7, r3
   d46a0:	7878      	ldrb	r0, [r7, #1]
   d46a2:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d46a6:	ea40 0008 	orr.w	r0, r0, r8
   d46aa:	f7ff ff93 	bl	d45d4 <nrf_gpio_pin_set>
	delay(250);
   d46ae:	20fa      	movs	r0, #250	; 0xfa
   d46b0:	f001 f872 	bl	d5798 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d46b4:	79a0      	ldrb	r0, [r4, #6]
   d46b6:	2101      	movs	r1, #1
   d46b8:	f001 fec2 	bl	d6440 <pinMode>
	pinResetFast(_pin);
   d46bc:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46be:	7833      	ldrb	r3, [r6, #0]
   d46c0:	f3bf 8f5b 	dmb	ish
   d46c4:	07da      	lsls	r2, r3, #31
   d46c6:	d409      	bmi.n	d46dc <_ZN3DHT4readEv+0xc4>
   d46c8:	488f      	ldr	r0, [pc, #572]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d46ca:	f7ff fcec 	bl	d40a6 <__cxa_guard_acquire>
   d46ce:	b128      	cbz	r0, d46dc <_ZN3DHT4readEv+0xc4>
   d46d0:	f000 fbb4 	bl	d4e3c <HAL_Pin_Map>
   d46d4:	6028      	str	r0, [r5, #0]
   d46d6:	488c      	ldr	r0, [pc, #560]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d46d8:	f7ff fcea 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46dc:	682b      	ldr	r3, [r5, #0]
   d46de:	013f      	lsls	r7, r7, #4
   d46e0:	5ddb      	ldrb	r3, [r3, r7]
   d46e2:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46e6:	7833      	ldrb	r3, [r6, #0]
   d46e8:	f3bf 8f5b 	dmb	ish
   d46ec:	07db      	lsls	r3, r3, #31
   d46ee:	d409      	bmi.n	d4704 <_ZN3DHT4readEv+0xec>
   d46f0:	4885      	ldr	r0, [pc, #532]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d46f2:	f7ff fcd8 	bl	d40a6 <__cxa_guard_acquire>
   d46f6:	b128      	cbz	r0, d4704 <_ZN3DHT4readEv+0xec>
   d46f8:	f000 fba0 	bl	d4e3c <HAL_Pin_Map>
   d46fc:	6028      	str	r0, [r5, #0]
   d46fe:	4882      	ldr	r0, [pc, #520]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d4700:	f7ff fcd6 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4704:	682b      	ldr	r3, [r5, #0]
   d4706:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4708:	a803      	add	r0, sp, #12
   d470a:	787b      	ldrb	r3, [r7, #1]
   d470c:	f003 031f 	and.w	r3, r3, #31
   d4710:	ea43 0308 	orr.w	r3, r3, r8
   d4714:	9303      	str	r3, [sp, #12]
   d4716:	f7ff ff45 	bl	d45a4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d471a:	9a03      	ldr	r2, [sp, #12]
   d471c:	2301      	movs	r3, #1
   d471e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4720:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4724:	2014      	movs	r0, #20
   d4726:	f001 f837 	bl	d5798 <delay>
	noInterrupts();
   d472a:	f001 fa03 	bl	d5b34 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d472e:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4730:	7833      	ldrb	r3, [r6, #0]
   d4732:	f3bf 8f5b 	dmb	ish
   d4736:	07d8      	lsls	r0, r3, #31
   d4738:	d409      	bmi.n	d474e <_ZN3DHT4readEv+0x136>
   d473a:	4873      	ldr	r0, [pc, #460]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d473c:	f7ff fcb3 	bl	d40a6 <__cxa_guard_acquire>
   d4740:	b128      	cbz	r0, d474e <_ZN3DHT4readEv+0x136>
   d4742:	f000 fb7b 	bl	d4e3c <HAL_Pin_Map>
   d4746:	6028      	str	r0, [r5, #0]
   d4748:	486f      	ldr	r0, [pc, #444]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d474a:	f7ff fcb1 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d474e:	682b      	ldr	r3, [r5, #0]
   d4750:	013f      	lsls	r7, r7, #4
   d4752:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4756:	7833      	ldrb	r3, [r6, #0]
   d4758:	f3bf 8f5b 	dmb	ish
   d475c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d475e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4762:	d409      	bmi.n	d4778 <_ZN3DHT4readEv+0x160>
   d4764:	4868      	ldr	r0, [pc, #416]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d4766:	f7ff fc9e 	bl	d40a6 <__cxa_guard_acquire>
   d476a:	b128      	cbz	r0, d4778 <_ZN3DHT4readEv+0x160>
   d476c:	f000 fb66 	bl	d4e3c <HAL_Pin_Map>
   d4770:	6028      	str	r0, [r5, #0]
   d4772:	4865      	ldr	r0, [pc, #404]	; (d4908 <_ZN3DHT4readEv+0x2f0>)
   d4774:	f7ff fc9c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4778:	682b      	ldr	r3, [r5, #0]
   d477a:	441f      	add	r7, r3
   d477c:	7878      	ldrb	r0, [r7, #1]
   d477e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4782:	ea40 0008 	orr.w	r0, r0, r8
   d4786:	f7ff ff25 	bl	d45d4 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d478a:	2028      	movs	r0, #40	; 0x28
   d478c:	f000 fb9e 	bl	d4ecc <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4790:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4792:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4908 <_ZN3DHT4readEv+0x2f0>
   d4796:	2100      	movs	r1, #0
   d4798:	f001 fe52 	bl	d6440 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d479c:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d479e:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d47a0:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d47a2:	9300      	str	r3, [sp, #0]
		counter = 0;
   d47a4:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d47a8:	f894 b006 	ldrb.w	fp, [r4, #6]
   d47ac:	7833      	ldrb	r3, [r6, #0]
   d47ae:	f3bf 8f5b 	dmb	ish
   d47b2:	07da      	lsls	r2, r3, #31
   d47b4:	d409      	bmi.n	d47ca <_ZN3DHT4readEv+0x1b2>
   d47b6:	4640      	mov	r0, r8
   d47b8:	f7ff fc75 	bl	d40a6 <__cxa_guard_acquire>
   d47bc:	b128      	cbz	r0, d47ca <_ZN3DHT4readEv+0x1b2>
   d47be:	f000 fb3d 	bl	d4e3c <HAL_Pin_Map>
   d47c2:	6028      	str	r0, [r5, #0]
   d47c4:	4640      	mov	r0, r8
   d47c6:	f7ff fc73 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47ca:	682b      	ldr	r3, [r5, #0]
   d47cc:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d47d0:	f813 300b 	ldrb.w	r3, [r3, fp]
   d47d4:	015b      	lsls	r3, r3, #5
   d47d6:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47d8:	7833      	ldrb	r3, [r6, #0]
   d47da:	f3bf 8f5b 	dmb	ish
   d47de:	07db      	lsls	r3, r3, #31
   d47e0:	d409      	bmi.n	d47f6 <_ZN3DHT4readEv+0x1de>
   d47e2:	4640      	mov	r0, r8
   d47e4:	f7ff fc5f 	bl	d40a6 <__cxa_guard_acquire>
   d47e8:	b128      	cbz	r0, d47f6 <_ZN3DHT4readEv+0x1de>
   d47ea:	f000 fb27 	bl	d4e3c <HAL_Pin_Map>
   d47ee:	6028      	str	r0, [r5, #0]
   d47f0:	4640      	mov	r0, r8
   d47f2:	f7ff fc5d 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47f6:	682b      	ldr	r3, [r5, #0]
   d47f8:	445b      	add	r3, fp
   d47fa:	f893 b001 	ldrb.w	fp, [r3, #1]
   d47fe:	9b01      	ldr	r3, [sp, #4]
   d4800:	f00b 0b1f 	and.w	fp, fp, #31
   d4804:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4808:	4658      	mov	r0, fp
   d480a:	f7ff fef0 	bl	d45ee <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d480e:	4658      	mov	r0, fp
   d4810:	f7ff feed 	bl	d45ee <nrf_gpio_pin_read>
   d4814:	9b00      	ldr	r3, [sp, #0]
   d4816:	4283      	cmp	r3, r0
   d4818:	d109      	bne.n	d482e <_ZN3DHT4readEv+0x216>
			counter++;
   d481a:	f109 0901 	add.w	r9, r9, #1
   d481e:	fa5f f989 	uxtb.w	r9, r9
   d4822:	2001      	movs	r0, #1
   d4824:	f000 fb52 	bl	d4ecc <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4828:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d482c:	d1bc      	bne.n	d47a8 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d482e:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4832:	7833      	ldrb	r3, [r6, #0]
   d4834:	f3bf 8f5b 	dmb	ish
   d4838:	07d8      	lsls	r0, r3, #31
   d483a:	d409      	bmi.n	d4850 <_ZN3DHT4readEv+0x238>
   d483c:	4640      	mov	r0, r8
   d483e:	f7ff fc32 	bl	d40a6 <__cxa_guard_acquire>
   d4842:	b128      	cbz	r0, d4850 <_ZN3DHT4readEv+0x238>
   d4844:	f000 fafa 	bl	d4e3c <HAL_Pin_Map>
   d4848:	6028      	str	r0, [r5, #0]
   d484a:	4640      	mov	r0, r8
   d484c:	f7ff fc30 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4850:	682b      	ldr	r3, [r5, #0]
   d4852:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4856:	f813 300b 	ldrb.w	r3, [r3, fp]
   d485a:	015b      	lsls	r3, r3, #5
   d485c:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d485e:	7833      	ldrb	r3, [r6, #0]
   d4860:	f3bf 8f5b 	dmb	ish
   d4864:	07d9      	lsls	r1, r3, #31
   d4866:	d409      	bmi.n	d487c <_ZN3DHT4readEv+0x264>
   d4868:	4640      	mov	r0, r8
   d486a:	f7ff fc1c 	bl	d40a6 <__cxa_guard_acquire>
   d486e:	b128      	cbz	r0, d487c <_ZN3DHT4readEv+0x264>
   d4870:	f000 fae4 	bl	d4e3c <HAL_Pin_Map>
   d4874:	6028      	str	r0, [r5, #0]
   d4876:	4640      	mov	r0, r8
   d4878:	f7ff fc1a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d487c:	682b      	ldr	r3, [r5, #0]
   d487e:	445b      	add	r3, fp
   d4880:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4884:	9b00      	ldr	r3, [sp, #0]
   d4886:	f00b 0b1f 	and.w	fp, fp, #31
   d488a:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d488e:	4658      	mov	r0, fp
   d4890:	f7ff fead 	bl	d45ee <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4894:	4658      	mov	r0, fp
   d4896:	f7ff feaa 	bl	d45ee <nrf_gpio_pin_read>

		if (counter == 255) break;
   d489a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d489e:	b2c3      	uxtb	r3, r0
   d48a0:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d48a2:	d018      	beq.n	d48d6 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d48a4:	2f03      	cmp	r7, #3
   d48a6:	d911      	bls.n	d48cc <_ZN3DHT4readEv+0x2b4>
   d48a8:	07fa      	lsls	r2, r7, #31
   d48aa:	d40f      	bmi.n	d48cc <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d48ac:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d48b0:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d48b4:	5ca3      	ldrb	r3, [r4, r2]
   d48b6:	005b      	lsls	r3, r3, #1
   d48b8:	b2db      	uxtb	r3, r3
   d48ba:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d48bc:	7a21      	ldrb	r1, [r4, #8]
   d48be:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d48c0:	bf3c      	itt	cc
   d48c2:	f043 0301 	orrcc.w	r3, r3, #1
   d48c6:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d48c8:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d48cc:	3701      	adds	r7, #1
   d48ce:	b2ff      	uxtb	r7, r7
   d48d0:	2f55      	cmp	r7, #85	; 0x55
   d48d2:	f47f af67 	bne.w	d47a4 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d48d6:	f001 f92f 	bl	d5b38 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d48da:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d48de:	d910      	bls.n	d4902 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d48e0:	7863      	ldrb	r3, [r4, #1]
   d48e2:	7820      	ldrb	r0, [r4, #0]
   d48e4:	4418      	add	r0, r3
   d48e6:	78a3      	ldrb	r3, [r4, #2]
   d48e8:	4418      	add	r0, r3
   d48ea:	78e3      	ldrb	r3, [r4, #3]
   d48ec:	4418      	add	r0, r3
   d48ee:	7923      	ldrb	r3, [r4, #4]
   d48f0:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d48f2:	1ac3      	subs	r3, r0, r3
   d48f4:	4258      	negs	r0, r3
   d48f6:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

   d48f8:	b005      	add	sp, #20
   d48fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d48fe:	2001      	movs	r0, #1
   d4900:	e7fa      	b.n	d48f8 <_ZN3DHT4readEv+0x2e0>
	return false;
   d4902:	2000      	movs	r0, #0
   d4904:	e7f8      	b.n	d48f8 <_ZN3DHT4readEv+0x2e0>
   d4906:	bf00      	nop
   d4908:	2003e510 	.word	0x2003e510
   d490c:	2003e514 	.word	0x2003e514

000d4910 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4910:	b510      	push	{r4, lr}
   d4912:	4604      	mov	r4, r0
	if (read()) {
   d4914:	f7ff fe80 	bl	d4618 <_ZN3DHT4readEv>
   d4918:	b1f0      	cbz	r0, d4958 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d491a:	79e3      	ldrb	r3, [r4, #7]
   d491c:	2b0b      	cmp	r3, #11
   d491e:	d015      	beq.n	d494c <_ZN3DHT12readHumidityEv+0x3c>
   d4920:	3b15      	subs	r3, #21
   d4922:	2b01      	cmp	r3, #1
   d4924:	d818      	bhi.n	d4958 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4926:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4928:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4960 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d492c:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4930:	7863      	ldrb	r3, [r4, #1]
   d4932:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4936:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d493a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d493e:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4942:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4946:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d494a:	bd10      	pop	{r4, pc}
				f = data[0];
   d494c:	7823      	ldrb	r3, [r4, #0]
   d494e:	ee00 3a10 	vmov	s0, r3
   d4952:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4956:	e7f8      	b.n	d494a <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4958:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4964 <_ZN3DHT12readHumidityEv+0x54>
   d495c:	e7f5      	b.n	d494a <_ZN3DHT12readHumidityEv+0x3a>
   d495e:	bf00      	nop
   d4960:	43800000 	.word	0x43800000
   d4964:	7fc00000 	.word	0x7fc00000

000d4968 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4968:	f7ff bfd2 	b.w	d4910 <_ZN3DHT12readHumidityEv>

000d496c <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d496c:	b538      	push	{r3, r4, r5, lr}
   d496e:	f100 0520 	add.w	r5, r0, #32
   d4972:	4604      	mov	r4, r0
   d4974:	490c      	ldr	r1, [pc, #48]	; (d49a8 <_ZN11CSmartLightC1Ev+0x3c>)
   d4976:	4628      	mov	r0, r5
   d4978:	f000 fd71 	bl	d545e <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d497c:	f240 1301 	movw	r3, #257	; 0x101
   d4980:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d4982:	2380      	movs	r3, #128	; 0x80
   d4984:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d4986:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d498a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d498e:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d4992:	4628      	mov	r0, r5
   d4994:	4905      	ldr	r1, [pc, #20]	; (d49ac <_ZN11CSmartLightC1Ev+0x40>)
   d4996:	f000 fdb5 	bl	d5504 <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d499a:	4b05      	ldr	r3, [pc, #20]	; (d49b0 <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d499c:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d499e:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d49a2:	4620      	mov	r0, r4
   d49a4:	bd38      	pop	{r3, r4, r5, pc}
   d49a6:	bf00      	nop
   d49a8:	000d7105 	.word	0x000d7105
   d49ac:	000d7004 	.word	0x000d7004
   d49b0:	fffe7961 	.word	0xfffe7961

000d49b4 <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d49b4:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d49b6:	f000 ff23 	bl	d5800 <_ZN8RGBClass10brightnessEv>
   d49ba:	b128      	cbz	r0, d49c8 <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d49bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d49c0:	2101      	movs	r1, #1
   d49c2:	2000      	movs	r0, #0
   d49c4:	f000 bf0e 	b.w	d57e4 <_ZN8RGBClass10brightnessEhb>
}
   d49c8:	bd08      	pop	{r3, pc}
   d49ca:	0000      	movs	r0, r0
   d49cc:	0000      	movs	r0, r0
	...

000d49d0 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d49d0:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d49d2:	4b13      	ldr	r3, [pc, #76]	; (d4a20 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d49d4:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d49d6:	4604      	mov	r4, r0
   d49d8:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d49da:	d10a      	bne.n	d49f2 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d49dc:	6865      	ldr	r5, [r4, #4]
   d49de:	f000 ff0f 	bl	d5800 <_ZN8RGBClass10brightnessEv>
   d49e2:	4285      	cmp	r5, r0
   d49e4:	d016      	beq.n	d4a14 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d49e6:	7920      	ldrb	r0, [r4, #4]
   d49e8:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
    RGB.brightness(brightness);
}
   d49ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d49ee:	f000 bef9 	b.w	d57e4 <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d49f2:	f001 fefb 	bl	d67ec <__aeabi_i2d>
   d49f6:	a308      	add	r3, pc, #32	; (adr r3, d4a18 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d49f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49fc:	f001 ff60 	bl	d68c0 <__aeabi_dmul>
   d4a00:	4b08      	ldr	r3, [pc, #32]	; (d4a24 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d4a02:	2200      	movs	r2, #0
   d4a04:	f002 f886 	bl	d6b14 <__aeabi_ddiv>
   d4a08:	f002 f96c 	bl	d6ce4 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a0c:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d4a0e:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d4a10:	b2c0      	uxtb	r0, r0
   d4a12:	e7ea      	b.n	d49ea <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d4a14:	bd38      	pop	{r3, r4, r5, pc}
   d4a16:	bf00      	nop
   d4a18:	00000000 	.word	0x00000000
   d4a1c:	406fe000 	.word	0x406fe000
   d4a20:	fffe7961 	.word	0xfffe7961
   d4a24:	40590000 	.word	0x40590000

000d4a28 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d4a28:	b510      	push	{r4, lr}
   d4a2a:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d4a2c:	2013      	movs	r0, #19
   d4a2e:	f001 fd31 	bl	d6494 <analogRead>
   d4a32:	60a0      	str	r0, [r4, #8]
}
   d4a34:	bd10      	pop	{r4, pc}
	...

000d4a38 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d4a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a3c:	4604      	mov	r4, r0
    readSensorVal();
   d4a3e:	f7ff fff3 	bl	d4a28 <_ZN11CSmartLight13readSensorValEv>
    if(curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4a42:	6925      	ldr	r5, [r4, #16]
   d4a44:	68a0      	ldr	r0, [r4, #8]
    if(curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4a46:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4a4a:	42a8      	cmp	r0, r5
   d4a4c:	bfb8      	it	lt
   d4a4e:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin)/(double)(sensorMax-sensorMin);
   d4a50:	4580      	cmp	r8, r0
   d4a52:	bfd4      	ite	le
   d4a54:	ebc5 0008 	rsble	r0, r5, r8
   d4a58:	ebc5 0000 	rsbgt	r0, r5, r0
   d4a5c:	f001 fec6 	bl	d67ec <__aeabi_i2d>
   d4a60:	4606      	mov	r6, r0
   d4a62:	eba8 0005 	sub.w	r0, r8, r5
   d4a66:	460f      	mov	r7, r1
   d4a68:	f001 fec0 	bl	d67ec <__aeabi_i2d>
   d4a6c:	4602      	mov	r2, r0
   d4a6e:	460b      	mov	r3, r1
   d4a70:	4630      	mov	r0, r6
   d4a72:	4639      	mov	r1, r7
   d4a74:	f002 f84e 	bl	d6b14 <__aeabi_ddiv>
   d4a78:	4602      	mov	r2, r0
   d4a7a:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a7c:	2000      	movs	r0, #0
   d4a7e:	490a      	ldr	r1, [pc, #40]	; (d4aa8 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4a80:	f001 fd66 	bl	d6550 <__aeabi_dsub>
   d4a84:	a306      	add	r3, pc, #24	; (adr r3, d4aa0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a8a:	f001 ff19 	bl	d68c0 <__aeabi_dmul>
   d4a8e:	f002 f929 	bl	d6ce4 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4a92:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4a94:	6060      	str	r0, [r4, #4]
}
   d4a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4a9a:	b2c0      	uxtb	r0, r0
   d4a9c:	f000 bea2 	b.w	d57e4 <_ZN8RGBClass10brightnessEhb>
   d4aa0:	00000000 	.word	0x00000000
   d4aa4:	406fe000 	.word	0x406fe000
   d4aa8:	3ff00000 	.word	0x3ff00000
   d4aac:	00000000 	.word	0x00000000

000d4ab0 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4ab0:	b570      	push	{r4, r5, r6, lr}
   d4ab2:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4ab4:	68c3      	ldr	r3, [r0, #12]
   d4ab6:	7846      	ldrb	r6, [r0, #1]
   d4ab8:	7805      	ldrb	r5, [r0, #0]
   d4aba:	9303      	str	r3, [sp, #12]
   d4abc:	6903      	ldr	r3, [r0, #16]
   d4abe:	9302      	str	r3, [sp, #8]
   d4ac0:	6883      	ldr	r3, [r0, #8]
   d4ac2:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4ac4:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4ac6:	6840      	ldr	r0, [r0, #4]
   d4ac8:	f001 fe90 	bl	d67ec <__aeabi_i2d>
   d4acc:	a310      	add	r3, pc, #64	; (adr r3, d4b10 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ad2:	f002 f81f 	bl	d6b14 <__aeabi_ddiv>
   d4ad6:	4b0c      	ldr	r3, [pc, #48]	; (d4b08 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4ad8:	2200      	movs	r2, #0
   d4ada:	f001 fef1 	bl	d68c0 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4ade:	f002 f901 	bl	d6ce4 <__aeabi_d2iz>
   d4ae2:	4633      	mov	r3, r6
   d4ae4:	462a      	mov	r2, r5
   d4ae6:	9000      	str	r0, [sp, #0]
   d4ae8:	4908      	ldr	r1, [pc, #32]	; (d4b0c <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4aea:	a804      	add	r0, sp, #16
   d4aec:	f000 fd48 	bl	d5580 <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4af0:	a904      	add	r1, sp, #16
   d4af2:	f104 0020 	add.w	r0, r4, #32
   d4af6:	f000 fcfd 	bl	d54f4 <_ZN6StringaSEOS_>
   d4afa:	a804      	add	r0, sp, #16
   d4afc:	f000 fc64 	bl	d53c8 <_ZN6StringD1Ev>
   d4b00:	b008      	add	sp, #32
   d4b02:	bd70      	pop	{r4, r5, r6, pc}
   d4b04:	f3af 8000 	nop.w
   d4b08:	40590000 	.word	0x40590000
   d4b0c:	000d706f 	.word	0x000d706f
   d4b10:	00000000 	.word	0x00000000
   d4b14:	406fe000 	.word	0x406fe000

000d4b18 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4b18:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d4b1a:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d4b1c:	4604      	mov	r4, r0
    switch (state_L0) {
   d4b1e:	b155      	cbz	r5, d4b36 <_ZN11CSmartLight7executeEv+0x1e>
   d4b20:	2d01      	cmp	r5, #1
   d4b22:	d013      	beq.n	d4b4c <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d4b24:	4b17      	ldr	r3, [pc, #92]	; (d4b84 <_ZN11CSmartLight7executeEv+0x6c>)
    cmd.Brightness = INVALID_CMD;
   d4b26:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4b28:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d4b2c:	4620      	mov	r0, r4
}
   d4b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4b32:	f7ff bfbd 	b.w	d4ab0 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d4b36:	f7ff ff3d 	bl	d49b4 <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4b3a:	6963      	ldr	r3, [r4, #20]
   d4b3c:	4a11      	ldr	r2, [pc, #68]	; (d4b84 <_ZN11CSmartLight7executeEv+0x6c>)
   d4b3e:	4293      	cmp	r3, r2
   d4b40:	d0f0      	beq.n	d4b24 <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) { 
   d4b42:	2b00      	cmp	r3, #0
   d4b44:	d0ee      	beq.n	d4b24 <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d4b46:	2301      	movs	r3, #1
   d4b48:	8023      	strh	r3, [r4, #0]
   d4b4a:	e7eb      	b.n	d4b24 <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d4b4c:	7843      	ldrb	r3, [r0, #1]
   d4b4e:	b133      	cbz	r3, d4b5e <_ZN11CSmartLight7executeEv+0x46>
   d4b50:	2b01      	cmp	r3, #1
   d4b52:	d00f      	beq.n	d4b74 <_ZN11CSmartLight7executeEv+0x5c>
                if(!cmd.On) state_L0= CSmartLight::S_OFF;
   d4b54:	6963      	ldr	r3, [r4, #20]
   d4b56:	2b00      	cmp	r3, #0
   d4b58:	d1e4      	bne.n	d4b24 <_ZN11CSmartLight7executeEv+0xc>
   d4b5a:	7023      	strb	r3, [r4, #0]
   d4b5c:	e7e2      	b.n	d4b24 <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4b5e:	69c1      	ldr	r1, [r0, #28]
   d4b60:	f7ff ff36 	bl	d49d0 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4b64:	69a3      	ldr	r3, [r4, #24]
   d4b66:	4a07      	ldr	r2, [pc, #28]	; (d4b84 <_ZN11CSmartLight7executeEv+0x6c>)
   d4b68:	4293      	cmp	r3, r2
   d4b6a:	d0f3      	beq.n	d4b54 <_ZN11CSmartLight7executeEv+0x3c>
                        if(cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4b6c:	2b00      	cmp	r3, #0
   d4b6e:	d0f1      	beq.n	d4b54 <_ZN11CSmartLight7executeEv+0x3c>
   d4b70:	7065      	strb	r5, [r4, #1]
   d4b72:	e7ef      	b.n	d4b54 <_ZN11CSmartLight7executeEv+0x3c>
                    updataBrightnessAutomatically();
   d4b74:	f7ff ff60 	bl	d4a38 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if(!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4b78:	69a3      	ldr	r3, [r4, #24]
   d4b7a:	2b00      	cmp	r3, #0
   d4b7c:	d1ea      	bne.n	d4b54 <_ZN11CSmartLight7executeEv+0x3c>
   d4b7e:	7063      	strb	r3, [r4, #1]
   d4b80:	e7e8      	b.n	d4b54 <_ZN11CSmartLight7executeEv+0x3c>
   d4b82:	bf00      	nop
   d4b84:	fffe7961 	.word	0xfffe7961

000d4b88 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b8c:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4b8e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b90:	f851 3b04 	ldr.w	r3, [r1], #4
   d4b94:	9300      	str	r3, [sp, #0]
   d4b96:	4604      	mov	r4, r0
   d4b98:	a801      	add	r0, sp, #4
   d4b9a:	f7ff fbd5 	bl	d4348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4b9e:	466a      	mov	r2, sp
   d4ba0:	4629      	mov	r1, r5
   d4ba2:	a804      	add	r0, sp, #16
   d4ba4:	f001 fb78 	bl	d6298 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4ba8:	a801      	add	r0, sp, #4
   d4baa:	f7ff fad8 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4bae:	4e3c      	ldr	r6, [pc, #240]	; (d4ca0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d4bb0:	4f3c      	ldr	r7, [pc, #240]	; (d4ca4 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d4bb2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d4cb0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d4bb6:	a804      	add	r0, sp, #16
   d4bb8:	f001 fb86 	bl	d62c8 <_ZN5spark18JSONObjectIterator4nextEv>
   d4bbc:	2800      	cmp	r0, #0
   d4bbe:	d069      	beq.n	d4c94 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d4bc0:	a904      	add	r1, sp, #16
   d4bc2:	4668      	mov	r0, sp
   d4bc4:	f7ff fbc7 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bc8:	4631      	mov	r1, r6
   d4bca:	9802      	ldr	r0, [sp, #8]
   d4bcc:	f002 f90c 	bl	d6de8 <strcmp>
   d4bd0:	4605      	mov	r5, r0
   d4bd2:	a801      	add	r0, sp, #4
   d4bd4:	f7ff fac3 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d4bd8:	a904      	add	r1, sp, #16
   d4bda:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d4bdc:	b94d      	cbnz	r5, d4bf2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d4bde:	f7ff fad4 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4be2:	4668      	mov	r0, sp
   d4be4:	f001 f9e6 	bl	d5fb4 <_ZNK5spark9JSONValue6toBoolEv>
   d4be8:	6160      	str	r0, [r4, #20]
   d4bea:	a801      	add	r0, sp, #4
   d4bec:	f7ff fab7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bf0:	e7e1      	b.n	d4bb6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d4bf2:	f7ff fbb0 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4bf6:	4639      	mov	r1, r7
   d4bf8:	9802      	ldr	r0, [sp, #8]
   d4bfa:	f002 f8f5 	bl	d6de8 <strcmp>
   d4bfe:	4605      	mov	r5, r0
   d4c00:	a801      	add	r0, sp, #4
   d4c02:	f7ff faac 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d4c06:	a904      	add	r1, sp, #16
   d4c08:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d4c0a:	b935      	cbnz	r5, d4c1a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d4c0c:	f7ff fabd 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c10:	4668      	mov	r0, sp
   d4c12:	f001 f9cf 	bl	d5fb4 <_ZNK5spark9JSONValue6toBoolEv>
   d4c16:	61a0      	str	r0, [r4, #24]
   d4c18:	e7e7      	b.n	d4bea <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d4c1a:	f7ff fb9c 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c1e:	4641      	mov	r1, r8
   d4c20:	9802      	ldr	r0, [sp, #8]
   d4c22:	f002 f8e1 	bl	d6de8 <strcmp>
   d4c26:	4605      	mov	r5, r0
   d4c28:	a801      	add	r0, sp, #4
   d4c2a:	f7ff fa98 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d4c2e:	a904      	add	r1, sp, #16
   d4c30:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d4c32:	b935      	cbnz	r5, d4c42 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d4c34:	f7ff faa9 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c38:	4668      	mov	r0, sp
   d4c3a:	f001 f9f9 	bl	d6030 <_ZNK5spark9JSONValue5toIntEv>
   d4c3e:	61e0      	str	r0, [r4, #28]
   d4c40:	e7d3      	b.n	d4bea <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d4c42:	f7ff fb88 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c46:	4918      	ldr	r1, [pc, #96]	; (d4ca8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d4c48:	9802      	ldr	r0, [sp, #8]
   d4c4a:	f002 f8cd 	bl	d6de8 <strcmp>
   d4c4e:	4605      	mov	r5, r0
   d4c50:	a801      	add	r0, sp, #4
   d4c52:	f7ff fa84 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d4c56:	a904      	add	r1, sp, #16
   d4c58:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d4c5a:	b935      	cbnz	r5, d4c6a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d4c5c:	f7ff fa95 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c60:	4668      	mov	r0, sp
   d4c62:	f001 f9e5 	bl	d6030 <_ZNK5spark9JSONValue5toIntEv>
   d4c66:	6120      	str	r0, [r4, #16]
   d4c68:	e7bf      	b.n	d4bea <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "max") {
   d4c6a:	f7ff fb74 	bl	d4356 <_ZNK5spark18JSONObjectIterator4nameEv>
   d4c6e:	490f      	ldr	r1, [pc, #60]	; (d4cac <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d4c70:	9802      	ldr	r0, [sp, #8]
   d4c72:	f002 f8b9 	bl	d6de8 <strcmp>
   d4c76:	4605      	mov	r5, r0
   d4c78:	a801      	add	r0, sp, #4
   d4c7a:	f7ff fa70 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c7e:	2d00      	cmp	r5, #0
   d4c80:	d199      	bne.n	d4bb6 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d4c82:	a904      	add	r1, sp, #16
   d4c84:	4668      	mov	r0, sp
   d4c86:	f7ff fa80 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4c8a:	4668      	mov	r0, sp
   d4c8c:	f001 f9d0 	bl	d6030 <_ZNK5spark9JSONValue5toIntEv>
   d4c90:	60e0      	str	r0, [r4, #12]
   d4c92:	e7aa      	b.n	d4bea <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d4c94:	a805      	add	r0, sp, #20
   d4c96:	f7ff fa62 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c9a:	b00a      	add	sp, #40	; 0x28
   d4c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ca0:	000d709d 	.word	0x000d709d
   d4ca4:	000d70a0 	.word	0x000d70a0
   d4ca8:	000d70b0 	.word	0x000d70b0
   d4cac:	000d70b4 	.word	0x000d70b4
   d4cb0:	000d70a5 	.word	0x000d70a5

000d4cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4cb4:	b510      	push	{r4, lr}
          _M_dispose();
   d4cb6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4cb8:	4604      	mov	r4, r0
          _M_dispose();
   d4cba:	689b      	ldr	r3, [r3, #8]
   d4cbc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4cbe:	68a3      	ldr	r3, [r4, #8]
   d4cc0:	3b01      	subs	r3, #1
   d4cc2:	60a3      	str	r3, [r4, #8]
   d4cc4:	b92b      	cbnz	r3, d4cd2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4cc6:	6823      	ldr	r3, [r4, #0]
   d4cc8:	4620      	mov	r0, r4
   d4cca:	68db      	ldr	r3, [r3, #12]
    }
   d4ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4cd0:	4718      	bx	r3
    }
   d4cd2:	bd10      	pop	{r4, pc}

000d4cd4 <_ZN11CThermostatC1Ev>:
#include "thermostat.h"
#include "common.h"
DHT dht(DHTPIN, DHTTYPE);

CThermostat::CThermostat() {
   d4cd4:	b510      	push	{r4, lr}
   d4cd6:	4908      	ldr	r1, [pc, #32]	; (d4cf8 <_ZN11CThermostatC1Ev+0x24>)
   d4cd8:	4604      	mov	r4, r0
   d4cda:	f000 fbc0 	bl	d545e <_ZN6StringC1EPKc>
    celsius = 0.0;
   d4cde:	2300      	movs	r3, #0
    humidity = 0.0;
    heatIndex = 0.0;
    dewPoint = 0.0;
    kelvin = 0.0;

    statusStr = "{}";
   d4ce0:	4906      	ldr	r1, [pc, #24]	; (d4cfc <_ZN11CThermostatC1Ev+0x28>)
    celsius = 0.0;
   d4ce2:	6123      	str	r3, [r4, #16]
    farenheit = 0.0;
   d4ce4:	6163      	str	r3, [r4, #20]
    humidity = 0.0;
   d4ce6:	61a3      	str	r3, [r4, #24]
    heatIndex = 0.0;
   d4ce8:	61e3      	str	r3, [r4, #28]
    dewPoint = 0.0;
   d4cea:	6223      	str	r3, [r4, #32]
    kelvin = 0.0;
   d4cec:	6263      	str	r3, [r4, #36]	; 0x24
    statusStr = "{}";
   d4cee:	4620      	mov	r0, r4
   d4cf0:	f000 fc08 	bl	d5504 <_ZN6StringaSEPKc>
    
}
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	bd10      	pop	{r4, pc}
   d4cf8:	000d7105 	.word	0x000d7105
   d4cfc:	000d7004 	.word	0x000d7004

000d4d00 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE>:

void CThermostat::cmdProcessing(JSONValue cmdJson) {
   d4d00:	b500      	push	{lr}
   d4d02:	460b      	mov	r3, r1
   d4d04:	b089      	sub	sp, #36	; 0x24
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d06:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d4d08:	685b      	ldr	r3, [r3, #4]
        JSONObjectIterator(value.t_, value.d_) {
   d4d0a:	6889      	ldr	r1, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d0c:	9200      	str	r2, [sp, #0]
      : _M_pi(__r._M_pi)
   d4d0e:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d4d10:	b113      	cbz	r3, d4d18 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x18>
    { ++_M_use_count; }
   d4d12:	685a      	ldr	r2, [r3, #4]
   d4d14:	3201      	adds	r2, #1
   d4d16:	605a      	str	r2, [r3, #4]
   d4d18:	466a      	mov	r2, sp
   d4d1a:	a802      	add	r0, sp, #8
   d4d1c:	f001 fabc 	bl	d6298 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
	if (_M_pi != nullptr)
   d4d20:	9801      	ldr	r0, [sp, #4]
   d4d22:	b128      	cbz	r0, d4d30 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x30>
      if (--_M_use_count == 0)
   d4d24:	6843      	ldr	r3, [r0, #4]
   d4d26:	3b01      	subs	r3, #1
   d4d28:	6043      	str	r3, [r0, #4]
   d4d2a:	b90b      	cbnz	r3, d4d30 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x30>
   d4d2c:	f7ff ffc2 	bl	d4cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
    JSONObjectIterator iter(cmdJson);
    while (iter.next()) {
   d4d30:	a802      	add	r0, sp, #8
   d4d32:	f001 fac9 	bl	d62c8 <_ZN5spark18JSONObjectIterator4nextEv>
   d4d36:	2800      	cmp	r0, #0
   d4d38:	d1fa      	bne.n	d4d30 <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x30>
	if (_M_pi != nullptr)
   d4d3a:	9803      	ldr	r0, [sp, #12]
   d4d3c:	b128      	cbz	r0, d4d4a <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x4a>
      if (--_M_use_count == 0)
   d4d3e:	6843      	ldr	r3, [r0, #4]
   d4d40:	3b01      	subs	r3, #1
   d4d42:	6043      	str	r3, [r0, #4]
   d4d44:	b90b      	cbnz	r3, d4d4a <_ZN11CThermostat13cmdProcessingEN5spark9JSONValueE+0x4a>
   d4d46:	f7ff ffb5 	bl	d4cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
        continue;
    }
}
   d4d4a:	b009      	add	sp, #36	; 0x24
   d4d4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d50 <_ZN11CThermostat15createStatusStrEv>:
	//dewPoint = dht.getDewPoint();
	//kelvin = dht.getTempKelvin();
    createStatusStr();
}

void CThermostat::createStatusStr() {
   d4d50:	b510      	push	{r4, lr}
   d4d52:	4604      	mov	r4, r0
   d4d54:	b090      	sub	sp, #64	; 0x40
    statusStr = String::format("{\"t\":%f,\"c\":%f,\"h\":%f,\"hi\":%f,\"dp\":%f,\"k\":%f}", farenheit, celsius, humidity, heatIndex, dewPoint, kelvin);
   d4d56:	6940      	ldr	r0, [r0, #20]
   d4d58:	f001 fd5a 	bl	d6810 <__aeabi_f2d>
   d4d5c:	4602      	mov	r2, r0
   d4d5e:	460b      	mov	r3, r1
   d4d60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d4d66:	f001 fd53 	bl	d6810 <__aeabi_f2d>
   d4d6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4d6e:	6a20      	ldr	r0, [r4, #32]
   d4d70:	f001 fd4e 	bl	d6810 <__aeabi_f2d>
   d4d74:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4d78:	69e0      	ldr	r0, [r4, #28]
   d4d7a:	f001 fd49 	bl	d6810 <__aeabi_f2d>
   d4d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4d82:	69a0      	ldr	r0, [r4, #24]
   d4d84:	f001 fd44 	bl	d6810 <__aeabi_f2d>
   d4d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4d8c:	6920      	ldr	r0, [r4, #16]
   d4d8e:	f001 fd3f 	bl	d6810 <__aeabi_f2d>
   d4d92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d4d96:	e9cd 0100 	strd	r0, r1, [sp]
   d4d9a:	a80c      	add	r0, sp, #48	; 0x30
   d4d9c:	4905      	ldr	r1, [pc, #20]	; (d4db4 <_ZN11CThermostat15createStatusStrEv+0x64>)
   d4d9e:	f000 fbef 	bl	d5580 <_ZN6String6formatEPKcz>
   d4da2:	a90c      	add	r1, sp, #48	; 0x30
   d4da4:	4620      	mov	r0, r4
   d4da6:	f000 fba5 	bl	d54f4 <_ZN6StringaSEOS_>
   d4daa:	a80c      	add	r0, sp, #48	; 0x30
   d4dac:	f000 fb0c 	bl	d53c8 <_ZN6StringD1Ev>
   d4db0:	b010      	add	sp, #64	; 0x40
   d4db2:	bd10      	pop	{r4, pc}
   d4db4:	000d70b8 	.word	0x000d70b8

000d4db8 <_ZN11CThermostat7executeEv>:
void CThermostat::execute() {
   d4db8:	b510      	push	{r4, lr}
   d4dba:	4604      	mov	r4, r0
	humidity = dht.getHumidity();
   d4dbc:	4811      	ldr	r0, [pc, #68]	; (d4e04 <_ZN11CThermostat7executeEv+0x4c>)
   d4dbe:	f7ff fdd3 	bl	d4968 <_ZN3DHT11getHumidityEv>
	if (isnan(humidity) || isnan(celsius) || isnan(farenheit)) {
   d4dc2:	eeb4 0a40 	vcmp.f32	s0, s0
   d4dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	humidity = dht.getHumidity();
   d4dca:	ed84 0a06 	vstr	s0, [r4, #24]
	if (isnan(humidity) || isnan(celsius) || isnan(farenheit)) {
   d4dce:	d60d      	bvs.n	d4dec <_ZN11CThermostat7executeEv+0x34>
   d4dd0:	edd4 7a04 	vldr	s15, [r4, #16]
   d4dd4:	eef4 7a67 	vcmp.f32	s15, s15
   d4dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ddc:	d606      	bvs.n	d4dec <_ZN11CThermostat7executeEv+0x34>
   d4dde:	edd4 7a05 	vldr	s15, [r4, #20]
   d4de2:	eef4 7a67 	vcmp.f32	s15, s15
   d4de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4dea:	d706      	bvc.n	d4dfa <_ZN11CThermostat7executeEv+0x42>
		Serial.println("Failed to read from DHT sensor!");
   d4dec:	f000 fe7c 	bl	d5ae8 <_Z16_fetch_usbserialv>
}
   d4df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Serial.println("Failed to read from DHT sensor!");
   d4df4:	4904      	ldr	r1, [pc, #16]	; (d4e08 <_ZN11CThermostat7executeEv+0x50>)
   d4df6:	f000 bc2a 	b.w	d564e <_ZN5Print7printlnEPKc>
    createStatusStr();
   d4dfa:	4620      	mov	r0, r4
}
   d4dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    createStatusStr();
   d4e00:	f7ff bfa6 	b.w	d4d50 <_ZN11CThermostat15createStatusStrEv>
   d4e04:	2003e594 	.word	0x2003e594
   d4e08:	000d70e6 	.word	0x000d70e6

000d4e0c <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTTYPE);
   d4e0c:	4802      	ldr	r0, [pc, #8]	; (d4e18 <_GLOBAL__sub_I_dht+0xc>)
   d4e0e:	2306      	movs	r3, #6
   d4e10:	220b      	movs	r2, #11
   d4e12:	2102      	movs	r1, #2
   d4e14:	f7ff bbf9 	b.w	d460a <_ZN3DHTC1Ehhh>
   d4e18:	2003e594 	.word	0x2003e594

000d4e1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <netdb_freeaddrinfo+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	689b      	ldr	r3, [r3, #8]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030268 	.word	0x00030268

000d4e2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <netdb_getaddrinfo+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	68db      	ldr	r3, [r3, #12]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030268 	.word	0x00030268

000d4e3c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_Pin_Map+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	681b      	ldr	r3, [r3, #0]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003022c 	.word	0x0003022c

000d4e4c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_Validate_Pin_Function+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	685b      	ldr	r3, [r3, #4]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003022c 	.word	0x0003022c

000d4e5c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_Pin_Mode+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	689b      	ldr	r3, [r3, #8]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003022c 	.word	0x0003022c

000d4e6c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_Get_Pin_Mode+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	68db      	ldr	r3, [r3, #12]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	0003022c 	.word	0x0003022c

000d4e7c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_GPIO_Write+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	691b      	ldr	r3, [r3, #16]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	0003022c 	.word	0x0003022c

000d4e8c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_Interrupts_Enable_All+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6a1b      	ldr	r3, [r3, #32]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	0003022c 	.word	0x0003022c

000d4e9c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_Interrupts_Disable_All+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	0003022c 	.word	0x0003022c

000d4eac <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <hal_adc_read+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	0003022c 	.word	0x0003022c

000d4ebc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <HAL_RNG_GetRandomNumber+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	685b      	ldr	r3, [r3, #4]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030218 	.word	0x00030218

000d4ecc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_Delay_Microseconds+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	68db      	ldr	r3, [r3, #12]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030218 	.word	0x00030218

000d4edc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	695b      	ldr	r3, [r3, #20]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030218 	.word	0x00030218

000d4eec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <hal_rtc_time_is_valid+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030218 	.word	0x00030218

000d4efc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <hal_rtc_get_time+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030218 	.word	0x00030218

000d4f0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <os_mutex_recursive_create+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030248 	.word	0x00030248

000d4f1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <inet_inet_ntop+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	695b      	ldr	r3, [r3, #20]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030264 	.word	0x00030264

000d4f2c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <hal_usart_init+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	681b      	ldr	r3, [r3, #0]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003023c 	.word	0x0003023c

000d4f3c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <hal_usart_write+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	68db      	ldr	r3, [r3, #12]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003023c 	.word	0x0003023c

000d4f4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <hal_usart_available+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	691b      	ldr	r3, [r3, #16]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003023c 	.word	0x0003023c

000d4f5c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <hal_usart_read+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	695b      	ldr	r3, [r3, #20]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003023c 	.word	0x0003023c

000d4f6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <hal_usart_peek+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	699b      	ldr	r3, [r3, #24]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003023c 	.word	0x0003023c

000d4f7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <hal_usart_flush+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	69db      	ldr	r3, [r3, #28]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	0003023c 	.word	0x0003023c

000d4f8c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <hal_usart_is_enabled+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6a1b      	ldr	r3, [r3, #32]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	0003023c 	.word	0x0003023c

000d4f9c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <hal_usart_available_data_for_write+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	0003023c 	.word	0x0003023c

000d4fac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <hal_i2c_write+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	6a1b      	ldr	r3, [r3, #32]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030228 	.word	0x00030228

000d4fbc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <hal_i2c_available+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030228 	.word	0x00030228

000d4fcc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <hal_i2c_read+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030228 	.word	0x00030228

000d4fdc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <hal_i2c_peek+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030228 	.word	0x00030228

000d4fec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <hal_i2c_flush+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030228 	.word	0x00030228

000d4ffc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <hal_i2c_is_enabled+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030228 	.word	0x00030228

000d500c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <hal_i2c_init+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030228 	.word	0x00030228

000d501c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <hal_spi_init+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	69db      	ldr	r3, [r3, #28]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030230 	.word	0x00030230

000d502c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <hal_spi_is_enabled+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6a1b      	ldr	r3, [r3, #32]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030230 	.word	0x00030230

000d503c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_USB_USART_Init+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	681b      	ldr	r3, [r3, #0]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	0003024c 	.word	0x0003024c

000d504c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <HAL_USB_USART_Begin+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	685b      	ldr	r3, [r3, #4]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	0003024c 	.word	0x0003024c

000d505c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_USB_USART_Available_Data+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	691b      	ldr	r3, [r3, #16]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003024c 	.word	0x0003024c

000d506c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	695b      	ldr	r3, [r3, #20]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003024c 	.word	0x0003024c

000d507c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_USB_USART_Receive_Data+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	699b      	ldr	r3, [r3, #24]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003024c 	.word	0x0003024c

000d508c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_USB_USART_Send_Data+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	69db      	ldr	r3, [r3, #28]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003024c 	.word	0x0003024c

000d509c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_USB_USART_Flush_Data+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6a1b      	ldr	r3, [r3, #32]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003024c 	.word	0x0003024c

000d50ac <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <LED_SetSignalingColor+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	685b      	ldr	r3, [r3, #4]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030260 	.word	0x00030260

000d50bc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <LED_Signaling_Start+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	689b      	ldr	r3, [r3, #8]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030260 	.word	0x00030260

000d50cc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <LED_Signaling_Stop+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	68db      	ldr	r3, [r3, #12]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030260 	.word	0x00030260

000d50dc <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <LED_SetBrightness+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	691b      	ldr	r3, [r3, #16]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030260 	.word	0x00030260

000d50ec <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <LED_RGB_IsOverRidden+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	699b      	ldr	r3, [r3, #24]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030260 	.word	0x00030260

000d50fc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <LED_On+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	69db      	ldr	r3, [r3, #28]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030260 	.word	0x00030260

000d510c <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <Get_LED_Brightness+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030260 	.word	0x00030260

000d511c <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <panic_+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030260 	.word	0x00030260

000d512c <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <jsmn_init+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030260 	.word	0x00030260

000d513c <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <jsmn_parse_deprecated+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030260 	.word	0x00030260

000d514c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <system_mode+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	681b      	ldr	r3, [r3, #0]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030220 	.word	0x00030220

000d515c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <set_system_mode+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	685b      	ldr	r3, [r3, #4]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030220 	.word	0x00030220

000d516c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <system_delay_ms+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	695b      	ldr	r3, [r3, #20]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030220 	.word	0x00030220

000d517c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <system_thread_set_state+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030220 	.word	0x00030220

000d518c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <system_thread_get_state+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030220 	.word	0x00030220

000d519c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b03      	ldr	r3, [pc, #12]	; (d51ac <system_ctrl_set_app_request_handler+0x10>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d51a6:	9301      	str	r3, [sp, #4]
   d51a8:	bd08      	pop	{r3, pc}
   d51aa:	0000      	.short	0x0000
   d51ac:	00030220 	.word	0x00030220

000d51b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b03      	ldr	r3, [pc, #12]	; (d51c0 <system_ctrl_set_result+0x10>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d51ba:	9301      	str	r3, [sp, #4]
   d51bc:	bd08      	pop	{r3, pc}
   d51be:	0000      	.short	0x0000
   d51c0:	00030220 	.word	0x00030220

000d51c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <network_connect+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	685b      	ldr	r3, [r3, #4]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030240 	.word	0x00030240

000d51d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <network_connecting+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	689b      	ldr	r3, [r3, #8]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030240 	.word	0x00030240

000d51e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <network_disconnect+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	68db      	ldr	r3, [r3, #12]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030240 	.word	0x00030240

000d51f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <network_ready+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	691b      	ldr	r3, [r3, #16]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030240 	.word	0x00030240

000d5204 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <network_on+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	695b      	ldr	r3, [r3, #20]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030240 	.word	0x00030240

000d5214 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <network_off+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	699b      	ldr	r3, [r3, #24]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030240 	.word	0x00030240

000d5224 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <network_listen+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	69db      	ldr	r3, [r3, #28]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030240 	.word	0x00030240

000d5234 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <network_listening+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6a1b      	ldr	r3, [r3, #32]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030240 	.word	0x00030240

000d5244 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <network_set_listen_timeout+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030240 	.word	0x00030240

000d5254 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <network_get_listen_timeout+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030240 	.word	0x00030240

000d5264 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <network_is_on+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030240 	.word	0x00030240

000d5274 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <network_is_off+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030240 	.word	0x00030240

000d5284 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <spark_process+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	689b      	ldr	r3, [r3, #8]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030244 	.word	0x00030244

000d5294 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <spark_cloud_flag_connected+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	695b      	ldr	r3, [r3, #20]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030244 	.word	0x00030244

000d52a4 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <spark_sync_time_pending+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030244 	.word	0x00030244

000d52b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030244 	.word	0x00030244

000d52c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <malloc+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	681b      	ldr	r3, [r3, #0]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003021c 	.word	0x0003021c

000d52d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <free+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	685b      	ldr	r3, [r3, #4]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	0003021c 	.word	0x0003021c

000d52e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <realloc+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	689b      	ldr	r3, [r3, #8]
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	0003021c 	.word	0x0003021c

000d52f4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <vsnprintf+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	0003021c 	.word	0x0003021c

000d5304 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <newlib_impure_ptr_callback+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	0003021c 	.word	0x0003021c

000d5314 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5314:	2200      	movs	r2, #0
   d5316:	6840      	ldr	r0, [r0, #4]
   d5318:	4611      	mov	r1, r2
   d531a:	f7ff bf8b 	b.w	d5234 <network_listening>

000d531e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d531e:	2200      	movs	r2, #0
   d5320:	6840      	ldr	r0, [r0, #4]
   d5322:	4611      	mov	r1, r2
   d5324:	f7ff bf96 	b.w	d5254 <network_get_listen_timeout>

000d5328 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5328:	6840      	ldr	r0, [r0, #4]
   d532a:	2200      	movs	r2, #0
   d532c:	f7ff bf8a 	b.w	d5244 <network_set_listen_timeout>

000d5330 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5330:	6840      	ldr	r0, [r0, #4]
   d5332:	2200      	movs	r2, #0
   d5334:	f081 0101 	eor.w	r1, r1, #1
   d5338:	f7ff bf74 	b.w	d5224 <network_listen>

000d533c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d533c:	2300      	movs	r3, #0
   d533e:	6840      	ldr	r0, [r0, #4]
   d5340:	461a      	mov	r2, r3
   d5342:	4619      	mov	r1, r3
   d5344:	f7ff bf66 	b.w	d5214 <network_off>

000d5348 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5348:	2300      	movs	r3, #0
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	461a      	mov	r2, r3
   d534e:	4619      	mov	r1, r3
   d5350:	f7ff bf58 	b.w	d5204 <network_on>

000d5354 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5354:	2200      	movs	r2, #0
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	4611      	mov	r1, r2
   d535a:	f7ff bf4b 	b.w	d51f4 <network_ready>

000d535e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d535e:	2200      	movs	r2, #0
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	4611      	mov	r1, r2
   d5364:	f7ff bf36 	b.w	d51d4 <network_connecting>

000d5368 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5368:	6840      	ldr	r0, [r0, #4]
   d536a:	2200      	movs	r2, #0
   d536c:	2102      	movs	r1, #2
   d536e:	f7ff bf39 	b.w	d51e4 <network_disconnect>

000d5372 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5372:	2300      	movs	r3, #0
   d5374:	6840      	ldr	r0, [r0, #4]
   d5376:	461a      	mov	r2, r3
   d5378:	f7ff bf24 	b.w	d51c4 <network_connect>

000d537c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d537c:	4b02      	ldr	r3, [pc, #8]	; (d5388 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d537e:	2203      	movs	r2, #3
   d5380:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5382:	4a02      	ldr	r2, [pc, #8]	; (d538c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5384:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5386:	4770      	bx	lr
   d5388:	2003e5a8 	.word	0x2003e5a8
   d538c:	000d7110 	.word	0x000d7110

000d5390 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5390:	b510      	push	{r4, lr}
   d5392:	4604      	mov	r4, r0
   d5394:	4608      	mov	r0, r1
{
    _spi = spi;
   d5396:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5398:	f7ff fe40 	bl	d501c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d539c:	2300      	movs	r3, #0
   d539e:	6063      	str	r3, [r4, #4]
}
   d53a0:	4620      	mov	r0, r4
   d53a2:	bd10      	pop	{r4, pc}

000d53a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d53a4:	4b05      	ldr	r3, [pc, #20]	; (d53bc <_GLOBAL__sub_I_System+0x18>)
   d53a6:	2202      	movs	r2, #2
   d53a8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d53aa:	4b05      	ldr	r3, [pc, #20]	; (d53c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d53ac:	4a05      	ldr	r2, [pc, #20]	; (d53c4 <_GLOBAL__sub_I_System+0x20>)
   d53ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d53b0:	2000      	movs	r0, #0
   d53b2:	6018      	str	r0, [r3, #0]
   d53b4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d53b6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d53b8:	f7ff bed0 	b.w	d515c <set_system_mode>
   d53bc:	2003e5bc 	.word	0x2003e5bc
   d53c0:	2003e5b0 	.word	0x2003e5b0
   d53c4:	ffff0000 	.word	0xffff0000

000d53c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d53c8:	b510      	push	{r4, lr}
   d53ca:	4604      	mov	r4, r0
{
	free(buffer);
   d53cc:	6800      	ldr	r0, [r0, #0]
   d53ce:	f7ff ff81 	bl	d52d4 <free>
}
   d53d2:	4620      	mov	r0, r4
   d53d4:	bd10      	pop	{r4, pc}

000d53d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d53d6:	b510      	push	{r4, lr}
   d53d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d53da:	6800      	ldr	r0, [r0, #0]
   d53dc:	b108      	cbz	r0, d53e2 <_ZN6String10invalidateEv+0xc>
   d53de:	f7ff ff79 	bl	d52d4 <free>
	buffer = NULL;
   d53e2:	2300      	movs	r3, #0
	capacity = len = 0;
   d53e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d53e8:	6023      	str	r3, [r4, #0]
}
   d53ea:	bd10      	pop	{r4, pc}

000d53ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d53ec:	b538      	push	{r3, r4, r5, lr}
   d53ee:	4604      	mov	r4, r0
   d53f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d53f2:	6800      	ldr	r0, [r0, #0]
   d53f4:	3101      	adds	r1, #1
   d53f6:	f7ff ff75 	bl	d52e4 <realloc>
	if (newbuffer) {
   d53fa:	b110      	cbz	r0, d5402 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d53fc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5400:	2001      	movs	r0, #1
	}
	return 0;
}
   d5402:	bd38      	pop	{r3, r4, r5, pc}

000d5404 <_ZN6String7reserveEj>:
{
   d5404:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5406:	6803      	ldr	r3, [r0, #0]
{
   d5408:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d540a:	b123      	cbz	r3, d5416 <_ZN6String7reserveEj+0x12>
   d540c:	6843      	ldr	r3, [r0, #4]
   d540e:	428b      	cmp	r3, r1
   d5410:	d301      	bcc.n	d5416 <_ZN6String7reserveEj+0x12>
   d5412:	2001      	movs	r0, #1
}
   d5414:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5416:	4620      	mov	r0, r4
   d5418:	f7ff ffe8 	bl	d53ec <_ZN6String12changeBufferEj>
   d541c:	2800      	cmp	r0, #0
   d541e:	d0f9      	beq.n	d5414 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5420:	68a3      	ldr	r3, [r4, #8]
   d5422:	2b00      	cmp	r3, #0
   d5424:	d1f5      	bne.n	d5412 <_ZN6String7reserveEj+0xe>
   d5426:	6822      	ldr	r2, [r4, #0]
   d5428:	7013      	strb	r3, [r2, #0]
   d542a:	e7f2      	b.n	d5412 <_ZN6String7reserveEj+0xe>

000d542c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d542e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5430:	4611      	mov	r1, r2
   d5432:	9201      	str	r2, [sp, #4]
{
   d5434:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5436:	f7ff ffe5 	bl	d5404 <_ZN6String7reserveEj>
   d543a:	9a01      	ldr	r2, [sp, #4]
   d543c:	b928      	cbnz	r0, d544a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d543e:	4620      	mov	r0, r4
   d5440:	f7ff ffc9 	bl	d53d6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5444:	4620      	mov	r0, r4
   d5446:	b003      	add	sp, #12
   d5448:	bd30      	pop	{r4, r5, pc}
	len = length;
   d544a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d544c:	4629      	mov	r1, r5
   d544e:	6820      	ldr	r0, [r4, #0]
   d5450:	f001 fc76 	bl	d6d40 <memcpy>
	buffer[len] = 0;
   d5454:	6822      	ldr	r2, [r4, #0]
   d5456:	68a3      	ldr	r3, [r4, #8]
   d5458:	2100      	movs	r1, #0
   d545a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d545c:	e7f2      	b.n	d5444 <_ZN6String4copyEPKcj+0x18>

000d545e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d545e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5460:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5462:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5466:	4604      	mov	r4, r0
	len = 0;
   d5468:	6083      	str	r3, [r0, #8]
	flags = 0;
   d546a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d546c:	b141      	cbz	r1, d5480 <_ZN6StringC1EPKc+0x22>
   d546e:	4608      	mov	r0, r1
   d5470:	9101      	str	r1, [sp, #4]
   d5472:	f001 fccb 	bl	d6e0c <strlen>
   d5476:	9901      	ldr	r1, [sp, #4]
   d5478:	4602      	mov	r2, r0
   d547a:	4620      	mov	r0, r4
   d547c:	f7ff ffd6 	bl	d542c <_ZN6String4copyEPKcj>
}
   d5480:	4620      	mov	r0, r4
   d5482:	b002      	add	sp, #8
   d5484:	bd10      	pop	{r4, pc}

000d5486 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5486:	b538      	push	{r3, r4, r5, lr}
   d5488:	4605      	mov	r5, r0
	if (buffer) {
   d548a:	6800      	ldr	r0, [r0, #0]
{
   d548c:	460c      	mov	r4, r1
	if (buffer) {
   d548e:	b168      	cbz	r0, d54ac <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5490:	686a      	ldr	r2, [r5, #4]
   d5492:	688b      	ldr	r3, [r1, #8]
   d5494:	429a      	cmp	r2, r3
   d5496:	d307      	bcc.n	d54a8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5498:	6809      	ldr	r1, [r1, #0]
   d549a:	f001 fcaf 	bl	d6dfc <strcpy>
			len = rhs.len;
   d549e:	68a3      	ldr	r3, [r4, #8]
   d54a0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d54a2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d54a4:	60a3      	str	r3, [r4, #8]
}
   d54a6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d54a8:	f7ff ff14 	bl	d52d4 <free>
	buffer = rhs.buffer;
   d54ac:	6823      	ldr	r3, [r4, #0]
   d54ae:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d54b0:	6863      	ldr	r3, [r4, #4]
   d54b2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d54b4:	68a3      	ldr	r3, [r4, #8]
   d54b6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d54b8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d54ba:	e9c4 3300 	strd	r3, r3, [r4]
   d54be:	e7f1      	b.n	d54a4 <_ZN6String4moveERS_+0x1e>

000d54c0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d54c0:	4288      	cmp	r0, r1
{
   d54c2:	b510      	push	{r4, lr}
   d54c4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d54c6:	d005      	beq.n	d54d4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d54c8:	680b      	ldr	r3, [r1, #0]
   d54ca:	b12b      	cbz	r3, d54d8 <_ZN6StringaSERKS_+0x18>
   d54cc:	688a      	ldr	r2, [r1, #8]
   d54ce:	4619      	mov	r1, r3
   d54d0:	f7ff ffac 	bl	d542c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d54d4:	4620      	mov	r0, r4
   d54d6:	bd10      	pop	{r4, pc}
	else invalidate();
   d54d8:	f7ff ff7d 	bl	d53d6 <_ZN6String10invalidateEv>
   d54dc:	e7fa      	b.n	d54d4 <_ZN6StringaSERKS_+0x14>

000d54de <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d54de:	b510      	push	{r4, lr}
	buffer = NULL;
   d54e0:	2300      	movs	r3, #0
String::String(const String &value)
   d54e2:	4604      	mov	r4, r0
	capacity = 0;
   d54e4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d54e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54ea:	7303      	strb	r3, [r0, #12]
	*this = value;
   d54ec:	f7ff ffe8 	bl	d54c0 <_ZN6StringaSERKS_>
}
   d54f0:	4620      	mov	r0, r4
   d54f2:	bd10      	pop	{r4, pc}

000d54f4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d54f4:	4288      	cmp	r0, r1
{
   d54f6:	b510      	push	{r4, lr}
   d54f8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d54fa:	d001      	beq.n	d5500 <_ZN6StringaSEOS_+0xc>
   d54fc:	f7ff ffc3 	bl	d5486 <_ZN6String4moveERS_>
	return *this;
}
   d5500:	4620      	mov	r0, r4
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5504:	b513      	push	{r0, r1, r4, lr}
   d5506:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5508:	b159      	cbz	r1, d5522 <_ZN6StringaSEPKc+0x1e>
   d550a:	4608      	mov	r0, r1
   d550c:	9101      	str	r1, [sp, #4]
   d550e:	f001 fc7d 	bl	d6e0c <strlen>
   d5512:	9901      	ldr	r1, [sp, #4]
   d5514:	4602      	mov	r2, r0
   d5516:	4620      	mov	r0, r4
   d5518:	f7ff ff88 	bl	d542c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d551c:	4620      	mov	r0, r4
   d551e:	b002      	add	sp, #8
   d5520:	bd10      	pop	{r4, pc}
	else invalidate();
   d5522:	f7ff ff58 	bl	d53d6 <_ZN6String10invalidateEv>
   d5526:	e7f9      	b.n	d551c <_ZN6StringaSEPKc+0x18>

000d5528 <_ZN6StringC1Ec>:
String::String(char c)
   d5528:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d552a:	2300      	movs	r3, #0
	buf[0] = c;
   d552c:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d5530:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5534:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5536:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d5538:	a901      	add	r1, sp, #4
String::String(char c)
   d553a:	4604      	mov	r4, r0
	buf[1] = 0;
   d553c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5540:	f7ff ffe0 	bl	d5504 <_ZN6StringaSEPKc>
}
   d5544:	4620      	mov	r0, r4
   d5546:	b002      	add	sp, #8
   d5548:	bd10      	pop	{r4, pc}

000d554a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d554a:	b570      	push	{r4, r5, r6, lr}
   d554c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d554e:	460e      	mov	r6, r1
   d5550:	b909      	cbnz	r1, d5556 <_ZN6String6concatEPKcj+0xc>
   d5552:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5554:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5556:	b16a      	cbz	r2, d5574 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5558:	6884      	ldr	r4, [r0, #8]
   d555a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d555c:	4621      	mov	r1, r4
   d555e:	f7ff ff51 	bl	d5404 <_ZN6String7reserveEj>
   d5562:	2800      	cmp	r0, #0
   d5564:	d0f5      	beq.n	d5552 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5566:	6828      	ldr	r0, [r5, #0]
   d5568:	68ab      	ldr	r3, [r5, #8]
   d556a:	4631      	mov	r1, r6
   d556c:	4418      	add	r0, r3
   d556e:	f001 fc45 	bl	d6dfc <strcpy>
	len = newlen;
   d5572:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5574:	2001      	movs	r0, #1
   d5576:	e7ed      	b.n	d5554 <_ZN6String6concatEPKcj+0xa>

000d5578 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5578:	688a      	ldr	r2, [r1, #8]
   d557a:	6809      	ldr	r1, [r1, #0]
   d557c:	f7ff bfe5 	b.w	d554a <_ZN6String6concatEPKcj>

000d5580 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5580:	b40e      	push	{r1, r2, r3}
   d5582:	b570      	push	{r4, r5, r6, lr}
   d5584:	b087      	sub	sp, #28
   d5586:	ad0b      	add	r5, sp, #44	; 0x2c
   d5588:	4604      	mov	r4, r0
   d558a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d558e:	9201      	str	r2, [sp, #4]
   d5590:	462b      	mov	r3, r5
   d5592:	2105      	movs	r1, #5
   d5594:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d5596:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5598:	f7ff feac 	bl	d52f4 <vsnprintf>
    va_end(marker);

    String result;
   d559c:	490b      	ldr	r1, [pc, #44]	; (d55cc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d559e:	4606      	mov	r6, r0
    String result;
   d55a0:	4620      	mov	r0, r4
   d55a2:	f7ff ff5c 	bl	d545e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d55a6:	4631      	mov	r1, r6
   d55a8:	4620      	mov	r0, r4
   d55aa:	f7ff ff2b 	bl	d5404 <_ZN6String7reserveEj>
    if (result.buffer) {
   d55ae:	6820      	ldr	r0, [r4, #0]
   d55b0:	b130      	cbz	r0, d55c0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d55b2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d55b4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d55b6:	462b      	mov	r3, r5
   d55b8:	1c71      	adds	r1, r6, #1
   d55ba:	f7ff fe9b 	bl	d52f4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d55be:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d55c0:	4620      	mov	r0, r4
   d55c2:	b007      	add	sp, #28
   d55c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d55c8:	b003      	add	sp, #12
   d55ca:	4770      	bx	lr
   d55cc:	000d7105 	.word	0x000d7105

000d55d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55d0:	4802      	ldr	r0, [pc, #8]	; (d55dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d55d2:	2300      	movs	r3, #0
   d55d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d55d6:	f7ff bc99 	b.w	d4f0c <os_mutex_recursive_create>
   d55da:	bf00      	nop
   d55dc:	2003e5c0 	.word	0x2003e5c0

000d55e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d55e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55e2:	4606      	mov	r6, r0
   d55e4:	460d      	mov	r5, r1
  size_t n = 0;
   d55e6:	188f      	adds	r7, r1, r2
   d55e8:	2400      	movs	r4, #0
  while (size--) {
   d55ea:	42bd      	cmp	r5, r7
   d55ec:	d00c      	beq.n	d5608 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d55ee:	6833      	ldr	r3, [r6, #0]
   d55f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55f4:	689b      	ldr	r3, [r3, #8]
   d55f6:	4630      	mov	r0, r6
   d55f8:	4798      	blx	r3
     if (chunk>=0)
   d55fa:	1e03      	subs	r3, r0, #0
   d55fc:	db01      	blt.n	d5602 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d55fe:	441c      	add	r4, r3
  while (size--) {
   d5600:	e7f3      	b.n	d55ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5602:	2c00      	cmp	r4, #0
   d5604:	bf08      	it	eq
   d5606:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5608:	4620      	mov	r0, r4
   d560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d560c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d560c:	b513      	push	{r0, r1, r4, lr}
   d560e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5610:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5612:	b159      	cbz	r1, d562c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5614:	9101      	str	r1, [sp, #4]
   d5616:	f001 fbf9 	bl	d6e0c <strlen>
   d561a:	6823      	ldr	r3, [r4, #0]
   d561c:	9901      	ldr	r1, [sp, #4]
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	4602      	mov	r2, r0
   d5622:	4620      	mov	r0, r4
    }
   d5624:	b002      	add	sp, #8
   d5626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d562a:	4718      	bx	r3
    }
   d562c:	b002      	add	sp, #8
   d562e:	bd10      	pop	{r4, pc}

000d5630 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5630:	6803      	ldr	r3, [r0, #0]
   d5632:	689b      	ldr	r3, [r3, #8]
   d5634:	4718      	bx	r3

000d5636 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5636:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5638:	210d      	movs	r1, #13
{
   d563a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d563c:	f7ff fff8 	bl	d5630 <_ZN5Print5printEc>
  n += print('\n');
   d5640:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5642:	4604      	mov	r4, r0
  n += print('\n');
   d5644:	4628      	mov	r0, r5
   d5646:	f7ff fff3 	bl	d5630 <_ZN5Print5printEc>
  return n;
}
   d564a:	4420      	add	r0, r4
   d564c:	bd38      	pop	{r3, r4, r5, pc}

000d564e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d564e:	b538      	push	{r3, r4, r5, lr}
   d5650:	4605      	mov	r5, r0
  return write(str);
   d5652:	f7ff ffdb 	bl	d560c <_ZN5Print5writeEPKc>
   d5656:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5658:	4628      	mov	r0, r5
   d565a:	f7ff ffec 	bl	d5636 <_ZN5Print7printlnEv>
  return n;
}
   d565e:	4420      	add	r0, r4
   d5660:	bd38      	pop	{r3, r4, r5, pc}

000d5662 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5662:	b530      	push	{r4, r5, lr}
   d5664:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5666:	2300      	movs	r3, #0
   d5668:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d566c:	2a01      	cmp	r2, #1
   d566e:	bf98      	it	ls
   d5670:	220a      	movls	r2, #10
   d5672:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5674:	460d      	mov	r5, r1
   d5676:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d567a:	fb01 5312 	mls	r3, r1, r2, r5
   d567e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5682:	2b09      	cmp	r3, #9
   d5684:	bf94      	ite	ls
   d5686:	3330      	addls	r3, #48	; 0x30
   d5688:	3337      	addhi	r3, #55	; 0x37
   d568a:	b2db      	uxtb	r3, r3
  } while(n);
   d568c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d568e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5692:	d9ef      	bls.n	d5674 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5694:	4621      	mov	r1, r4
   d5696:	f7ff ffb9 	bl	d560c <_ZN5Print5writeEPKc>
}
   d569a:	b00b      	add	sp, #44	; 0x2c
   d569c:	bd30      	pop	{r4, r5, pc}

000d569e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d569e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56a2:	b086      	sub	sp, #24
   d56a4:	af00      	add	r7, sp, #0
   d56a6:	4605      	mov	r5, r0
   d56a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d56aa:	1d38      	adds	r0, r7, #4
   d56ac:	2114      	movs	r1, #20
{
   d56ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   d56b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d56b2:	f7ff fe1f 	bl	d52f4 <vsnprintf>

    if (n<bufsize)
   d56b6:	2813      	cmp	r0, #19
   d56b8:	d80e      	bhi.n	d56d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d56ba:	1d39      	adds	r1, r7, #4
   d56bc:	4628      	mov	r0, r5
   d56be:	f7ff ffa5 	bl	d560c <_ZN5Print5writeEPKc>
   d56c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d56c4:	b11e      	cbz	r6, d56ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d56c6:	4628      	mov	r0, r5
   d56c8:	f7ff ffb5 	bl	d5636 <_ZN5Print7printlnEv>
   d56cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d56ce:	4620      	mov	r0, r4
   d56d0:	3718      	adds	r7, #24
   d56d2:	46bd      	mov	sp, r7
   d56d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d56d8:	f100 0308 	add.w	r3, r0, #8
   d56dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d56e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d56e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d56e6:	4622      	mov	r2, r4
   d56e8:	1c41      	adds	r1, r0, #1
   d56ea:	683b      	ldr	r3, [r7, #0]
   d56ec:	4668      	mov	r0, sp
   d56ee:	f7ff fe01 	bl	d52f4 <vsnprintf>
  return write(str);
   d56f2:	4669      	mov	r1, sp
   d56f4:	4628      	mov	r0, r5
   d56f6:	f7ff ff89 	bl	d560c <_ZN5Print5writeEPKc>
   d56fa:	4604      	mov	r4, r0
   d56fc:	46c5      	mov	sp, r8
   d56fe:	e7e1      	b.n	d56c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5700 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5700:	4b01      	ldr	r3, [pc, #4]	; (d5708 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5702:	4a02      	ldr	r2, [pc, #8]	; (d570c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5704:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5706:	4770      	bx	lr
   d5708:	2003e5c4 	.word	0x2003e5c4
   d570c:	000d7144 	.word	0x000d7144

000d5710 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5710:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5712:	2000      	movs	r0, #0
   d5714:	f7ff fdc6 	bl	d52a4 <spark_sync_time_pending>
   d5718:	b128      	cbz	r0, d5726 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d571a:	f7ff fdbb 	bl	d5294 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d571e:	f080 0001 	eor.w	r0, r0, #1
   d5722:	b2c0      	uxtb	r0, r0
    }
   d5724:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5726:	2001      	movs	r0, #1
   d5728:	e7fc      	b.n	d5724 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d572a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d572a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d572c:	2000      	movs	r0, #0
   d572e:	f7ff fbdd 	bl	d4eec <hal_rtc_time_is_valid>
    if (rtcstate)
   d5732:	4604      	mov	r4, r0
   d5734:	b9a0      	cbnz	r0, d5760 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5736:	f7ff fd09 	bl	d514c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d573a:	2801      	cmp	r0, #1
   d573c:	d110      	bne.n	d5760 <_ZN9TimeClass7isValidEv+0x36>
   d573e:	4620      	mov	r0, r4
   d5740:	f7ff fd24 	bl	d518c <system_thread_get_state>
   d5744:	b960      	cbnz	r0, d5760 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5746:	f7ff ffe3 	bl	d5710 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d574a:	b910      	cbnz	r0, d5752 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d574c:	f7ff fd9a 	bl	d5284 <spark_process>
        while (_while() && !_condition()) {
   d5750:	e7f9      	b.n	d5746 <_ZN9TimeClass7isValidEv+0x1c>
   d5752:	f7ff ffdd 	bl	d5710 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d575a:	2000      	movs	r0, #0
   d575c:	f7ff bbc6 	b.w	d4eec <hal_rtc_time_is_valid>
}
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_ZN9TimeClass3nowEv>:
{
   d5764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5766:	f7ff ffe0 	bl	d572a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d576a:	2210      	movs	r2, #16
   d576c:	2100      	movs	r1, #0
   d576e:	4668      	mov	r0, sp
   d5770:	f001 fb0e 	bl	d6d90 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5774:	2100      	movs	r1, #0
   d5776:	4668      	mov	r0, sp
   d5778:	f7ff fbc0 	bl	d4efc <hal_rtc_get_time>
}
   d577c:	9800      	ldr	r0, [sp, #0]
   d577e:	b005      	add	sp, #20
   d5780:	f85d fb04 	ldr.w	pc, [sp], #4

000d5784 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5784:	4b02      	ldr	r3, [pc, #8]	; (d5790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5786:	681a      	ldr	r2, [r3, #0]
   d5788:	4b02      	ldr	r3, [pc, #8]	; (d5794 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d578a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d578c:	4770      	bx	lr
   d578e:	bf00      	nop
   d5790:	2003e4a4 	.word	0x2003e4a4
   d5794:	2003e5c8 	.word	0x2003e5c8

000d5798 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5798:	2100      	movs	r1, #0
   d579a:	f7ff bce7 	b.w	d516c <system_delay_ms>

000d579e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d579e:	b510      	push	{r4, lr}
   d57a0:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d57a2:	f7ff fca3 	bl	d50ec <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d57a6:	4284      	cmp	r4, r0
   d57a8:	d008      	beq.n	d57bc <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d57aa:	b11c      	cbz	r4, d57b4 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d57ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d57b0:	f7ff bc84 	b.w	d50bc <LED_Signaling_Start>
}
   d57b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d57b8:	f7ff bc88 	b.w	d50cc <LED_Signaling_Stop>
}
   d57bc:	bd10      	pop	{r4, pc}

000d57be <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d57be:	b570      	push	{r4, r5, r6, lr}
   d57c0:	4605      	mov	r5, r0
   d57c2:	460e      	mov	r6, r1
   d57c4:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d57c6:	f7ff fc91 	bl	d50ec <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d57ca:	b150      	cbz	r0, d57e2 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d57cc:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d57d0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d57d4:	f7ff fc6a 	bl	d50ac <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d57d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d57dc:	20e7      	movs	r0, #231	; 0xe7
   d57de:	f7ff bc8d 	b.w	d50fc <LED_On>
}
   d57e2:	bd70      	pop	{r4, r5, r6, pc}

000d57e4 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d57e4:	b510      	push	{r4, lr}
   d57e6:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d57e8:	f7ff fc78 	bl	d50dc <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d57ec:	f7ff fc7e 	bl	d50ec <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d57f0:	b128      	cbz	r0, d57fe <_ZN8RGBClass10brightnessEhb+0x1a>
   d57f2:	b124      	cbz	r4, d57fe <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d57f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d57f8:	20e7      	movs	r0, #231	; 0xe7
   d57fa:	f7ff bc7f 	b.w	d50fc <LED_On>
}
   d57fe:	bd10      	pop	{r4, pc}

000d5800 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5800:	f7ff bc84 	b.w	d510c <Get_LED_Brightness>

000d5804 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5804:	4b01      	ldr	r3, [pc, #4]	; (d580c <_GLOBAL__sub_I_RGB+0x8>)
   d5806:	2200      	movs	r2, #0
   d5808:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d580a:	4770      	bx	lr
   d580c:	2003e5cc 	.word	0x2003e5cc

000d5810 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5810:	4b01      	ldr	r3, [pc, #4]	; (d5818 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5812:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5814:	4770      	bx	lr
   d5816:	bf00      	nop
   d5818:	2003e4a8 	.word	0x2003e4a8

000d581c <serialEventRun>:
{
   d581c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d581e:	4b0b      	ldr	r3, [pc, #44]	; (d584c <serialEventRun+0x30>)
   d5820:	b143      	cbz	r3, d5834 <serialEventRun+0x18>
   d5822:	f000 f961 	bl	d5ae8 <_Z16_fetch_usbserialv>
   d5826:	6803      	ldr	r3, [r0, #0]
   d5828:	691b      	ldr	r3, [r3, #16]
   d582a:	4798      	blx	r3
   d582c:	2800      	cmp	r0, #0
   d582e:	dd01      	ble.n	d5834 <serialEventRun+0x18>
        serialEvent();
   d5830:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5834:	4b06      	ldr	r3, [pc, #24]	; (d5850 <serialEventRun+0x34>)
   d5836:	b143      	cbz	r3, d584a <serialEventRun+0x2e>
   d5838:	f000 f9d4 	bl	d5be4 <_Z22__fetch_global_Serial1v>
   d583c:	6803      	ldr	r3, [r0, #0]
   d583e:	691b      	ldr	r3, [r3, #16]
   d5840:	4798      	blx	r3
   d5842:	2800      	cmp	r0, #0
   d5844:	dd01      	ble.n	d584a <serialEventRun+0x2e>
        serialEvent1();
   d5846:	f3af 8000 	nop.w
}
   d584a:	bd08      	pop	{r3, pc}
	...

000d5854 <_post_loop>:
{
   d5854:	b508      	push	{r3, lr}
	serialEventRun();
   d5856:	f7ff ffe1 	bl	d581c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d585a:	f7ff fb3f 	bl	d4edc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d585e:	4b01      	ldr	r3, [pc, #4]	; (d5864 <_post_loop+0x10>)
   d5860:	6018      	str	r0, [r3, #0]
}
   d5862:	bd08      	pop	{r3, pc}
   d5864:	2003e738 	.word	0x2003e738

000d5868 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5868:	4805      	ldr	r0, [pc, #20]	; (d5880 <_Z33system_initialize_user_backup_ramv+0x18>)
   d586a:	4a06      	ldr	r2, [pc, #24]	; (d5884 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d586c:	4906      	ldr	r1, [pc, #24]	; (d5888 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d586e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5870:	1a12      	subs	r2, r2, r0
   d5872:	f001 fa65 	bl	d6d40 <memcpy>
    __backup_sram_signature = signature;
   d5876:	4b05      	ldr	r3, [pc, #20]	; (d588c <_Z33system_initialize_user_backup_ramv+0x24>)
   d5878:	4a05      	ldr	r2, [pc, #20]	; (d5890 <_Z33system_initialize_user_backup_ramv+0x28>)
   d587a:	601a      	str	r2, [r3, #0]
}
   d587c:	bd08      	pop	{r3, pc}
   d587e:	bf00      	nop
   d5880:	2003f400 	.word	0x2003f400
   d5884:	2003f404 	.word	0x2003f404
   d5888:	000d73d0 	.word	0x000d73d0
   d588c:	2003f400 	.word	0x2003f400
   d5890:	9a271c1e 	.word	0x9a271c1e

000d5894 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5894:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5896:	2300      	movs	r3, #0
   d5898:	9300      	str	r3, [sp, #0]
   d589a:	461a      	mov	r2, r3
   d589c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58a0:	f7ff fc86 	bl	d51b0 <system_ctrl_set_result>
}
   d58a4:	b003      	add	sp, #12
   d58a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d58ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d58ae:	8843      	ldrh	r3, [r0, #2]
   d58b0:	2b0a      	cmp	r3, #10
   d58b2:	d008      	beq.n	d58c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58b4:	2b50      	cmp	r3, #80	; 0x50
   d58b6:	d10b      	bne.n	d58d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d58b8:	4b09      	ldr	r3, [pc, #36]	; (d58e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58ba:	681b      	ldr	r3, [r3, #0]
   d58bc:	b14b      	cbz	r3, d58d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d58be:	b003      	add	sp, #12
   d58c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d58c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d58c6:	f7ff ffe5 	bl	d5894 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d58ca:	b003      	add	sp, #12
   d58cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58d0:	2300      	movs	r3, #0
   d58d2:	9300      	str	r3, [sp, #0]
   d58d4:	461a      	mov	r2, r3
   d58d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58da:	f7ff fc69 	bl	d51b0 <system_ctrl_set_result>
}
   d58de:	e7f4      	b.n	d58ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d58e0:	2003e5e0 	.word	0x2003e5e0

000d58e4 <module_user_init_hook>:
{
   d58e4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d58e6:	4812      	ldr	r0, [pc, #72]	; (d5930 <module_user_init_hook+0x4c>)
   d58e8:	2100      	movs	r1, #0
   d58ea:	f7ff fd0b 	bl	d5304 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d58ee:	4b11      	ldr	r3, [pc, #68]	; (d5934 <module_user_init_hook+0x50>)
   d58f0:	681a      	ldr	r2, [r3, #0]
   d58f2:	4b11      	ldr	r3, [pc, #68]	; (d5938 <module_user_init_hook+0x54>)
   d58f4:	429a      	cmp	r2, r3
   d58f6:	4b11      	ldr	r3, [pc, #68]	; (d593c <module_user_init_hook+0x58>)
   d58f8:	bf0c      	ite	eq
   d58fa:	2201      	moveq	r2, #1
   d58fc:	2200      	movne	r2, #0
   d58fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5900:	d001      	beq.n	d5906 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5902:	f7ff ffb1 	bl	d5868 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5906:	f7ff fad9 	bl	d4ebc <HAL_RNG_GetRandomNumber>
   d590a:	4604      	mov	r4, r0
    srand(seed);
   d590c:	f001 fa48 	bl	d6da0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5910:	4b0b      	ldr	r3, [pc, #44]	; (d5940 <module_user_init_hook+0x5c>)
   d5912:	b113      	cbz	r3, d591a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5914:	4620      	mov	r0, r4
   d5916:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d591a:	2100      	movs	r1, #0
   d591c:	4808      	ldr	r0, [pc, #32]	; (d5940 <module_user_init_hook+0x5c>)
   d591e:	f7ff fcc9 	bl	d52b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5926:	4807      	ldr	r0, [pc, #28]	; (d5944 <module_user_init_hook+0x60>)
   d5928:	2100      	movs	r1, #0
   d592a:	f7ff bc37 	b.w	d519c <system_ctrl_set_app_request_handler>
   d592e:	bf00      	nop
   d5930:	000d5811 	.word	0x000d5811
   d5934:	2003f400 	.word	0x2003f400
   d5938:	9a271c1e 	.word	0x9a271c1e
   d593c:	2003e5dc 	.word	0x2003e5dc
   d5940:	00000000 	.word	0x00000000
   d5944:	000d58ad 	.word	0x000d58ad

000d5948 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5948:	4770      	bx	lr

000d594a <_ZN9IPAddressD0Ev>:
   d594a:	b510      	push	{r4, lr}
   d594c:	2118      	movs	r1, #24
   d594e:	4604      	mov	r4, r0
   d5950:	f000 fdf4 	bl	d653c <_ZdlPvj>
   d5954:	4620      	mov	r0, r4
   d5956:	bd10      	pop	{r4, pc}

000d5958 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5958:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d595a:	7d03      	ldrb	r3, [r0, #20]
   d595c:	2b06      	cmp	r3, #6
{
   d595e:	b08d      	sub	sp, #52	; 0x34
   d5960:	460e      	mov	r6, r1
   d5962:	f100 0704 	add.w	r7, r0, #4
   d5966:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d596a:	d012      	beq.n	d5992 <_ZNK9IPAddress7printToER5Print+0x3a>
   d596c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5970:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5974:	220a      	movs	r2, #10
   d5976:	4630      	mov	r0, r6
   d5978:	f7ff fe73 	bl	d5662 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d597c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d597e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5980:	d019      	beq.n	d59b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5982:	2c00      	cmp	r4, #0
   d5984:	d0f4      	beq.n	d5970 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5986:	212e      	movs	r1, #46	; 0x2e
   d5988:	4630      	mov	r0, r6
   d598a:	f7ff fe51 	bl	d5630 <_ZN5Print5printEc>
   d598e:	4404      	add	r4, r0
   d5990:	e7ee      	b.n	d5970 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5992:	232f      	movs	r3, #47	; 0x2f
   d5994:	466a      	mov	r2, sp
   d5996:	4639      	mov	r1, r7
   d5998:	200a      	movs	r0, #10
		buf[0] = 0;
   d599a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d599e:	f7ff fabd 	bl	d4f1c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d59a2:	4668      	mov	r0, sp
   d59a4:	f001 fa32 	bl	d6e0c <strlen>
   d59a8:	6833      	ldr	r3, [r6, #0]
   d59aa:	4602      	mov	r2, r0
   d59ac:	68db      	ldr	r3, [r3, #12]
   d59ae:	4669      	mov	r1, sp
   d59b0:	4630      	mov	r0, r6
   d59b2:	4798      	blx	r3
   d59b4:	4604      	mov	r4, r0
    }
    return n;
}
   d59b6:	4620      	mov	r0, r4
   d59b8:	b00d      	add	sp, #52	; 0x34
   d59ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d59bc:	b510      	push	{r4, lr}
   d59be:	4b05      	ldr	r3, [pc, #20]	; (d59d4 <_ZN9IPAddressC1Ev+0x18>)
   d59c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d59c2:	2211      	movs	r2, #17
   d59c4:	f840 3b04 	str.w	r3, [r0], #4
   d59c8:	2100      	movs	r1, #0
   d59ca:	f001 f9e1 	bl	d6d90 <memset>
}
   d59ce:	4620      	mov	r0, r4
   d59d0:	bd10      	pop	{r4, pc}
   d59d2:	bf00      	nop
   d59d4:	000d716c 	.word	0x000d716c

000d59d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d59d8:	4603      	mov	r3, r0
   d59da:	4a07      	ldr	r2, [pc, #28]	; (d59f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d59dc:	b510      	push	{r4, lr}
   d59de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d59e2:	f101 0210 	add.w	r2, r1, #16
   d59e6:	f851 4b04 	ldr.w	r4, [r1], #4
   d59ea:	f843 4b04 	str.w	r4, [r3], #4
   d59ee:	4291      	cmp	r1, r2
   d59f0:	d1f9      	bne.n	d59e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d59f2:	780a      	ldrb	r2, [r1, #0]
   d59f4:	701a      	strb	r2, [r3, #0]
}
   d59f6:	bd10      	pop	{r4, pc}
   d59f8:	000d716c 	.word	0x000d716c

000d59fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d59fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d59fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5a02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5a06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5a0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5a0e:	2304      	movs	r3, #4
   d5a10:	6041      	str	r1, [r0, #4]
   d5a12:	7503      	strb	r3, [r0, #20]
}
   d5a14:	bd10      	pop	{r4, pc}

000d5a16 <_ZN9IPAddressaSEPKh>:
{
   d5a16:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5a18:	78cb      	ldrb	r3, [r1, #3]
   d5a1a:	9300      	str	r3, [sp, #0]
   d5a1c:	788b      	ldrb	r3, [r1, #2]
   d5a1e:	784a      	ldrb	r2, [r1, #1]
   d5a20:	7809      	ldrb	r1, [r1, #0]
   d5a22:	f7ff ffeb 	bl	d59fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5a26:	b002      	add	sp, #8
   d5a28:	bd10      	pop	{r4, pc}

000d5a2a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a2a:	7441      	strb	r1, [r0, #17]
}
   d5a2c:	4770      	bx	lr

000d5a2e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a2e:	4770      	bx	lr

000d5a30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a30:	4770      	bx	lr

000d5a32 <_ZN9USBSerial4readEv>:
{
   d5a32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5a34:	2100      	movs	r1, #0
   d5a36:	7c00      	ldrb	r0, [r0, #16]
   d5a38:	f7ff fb20 	bl	d507c <HAL_USB_USART_Receive_Data>
}
   d5a3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a40:	bd08      	pop	{r3, pc}

000d5a42 <_ZN9USBSerial4peekEv>:
{
   d5a42:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a44:	2101      	movs	r1, #1
   d5a46:	7c00      	ldrb	r0, [r0, #16]
   d5a48:	f7ff fb18 	bl	d507c <HAL_USB_USART_Receive_Data>
}
   d5a4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a50:	bd08      	pop	{r3, pc}

000d5a52 <_ZN9USBSerial17availableForWriteEv>:
{
   d5a52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a54:	7c00      	ldrb	r0, [r0, #16]
   d5a56:	f7ff fb09 	bl	d506c <HAL_USB_USART_Available_Data_For_Write>
}
   d5a5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a5e:	bd08      	pop	{r3, pc}

000d5a60 <_ZN9USBSerial9availableEv>:
{
   d5a60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a62:	7c00      	ldrb	r0, [r0, #16]
   d5a64:	f7ff fafa 	bl	d505c <HAL_USB_USART_Available_Data>
}
   d5a68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a6c:	bd08      	pop	{r3, pc}

000d5a6e <_ZN9USBSerial5writeEh>:
{
   d5a6e:	b513      	push	{r0, r1, r4, lr}
   d5a70:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a72:	7c00      	ldrb	r0, [r0, #16]
{
   d5a74:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a76:	f7ff faf9 	bl	d506c <HAL_USB_USART_Available_Data_For_Write>
   d5a7a:	2800      	cmp	r0, #0
   d5a7c:	9901      	ldr	r1, [sp, #4]
   d5a7e:	dc01      	bgt.n	d5a84 <_ZN9USBSerial5writeEh+0x16>
   d5a80:	7c60      	ldrb	r0, [r4, #17]
   d5a82:	b120      	cbz	r0, d5a8e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a84:	7c20      	ldrb	r0, [r4, #16]
   d5a86:	f7ff fb01 	bl	d508c <HAL_USB_USART_Send_Data>
   d5a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5a8e:	b002      	add	sp, #8
   d5a90:	bd10      	pop	{r4, pc}

000d5a92 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5a92:	7c00      	ldrb	r0, [r0, #16]
   d5a94:	f7ff bb02 	b.w	d509c <HAL_USB_USART_Flush_Data>

000d5a98 <_ZN9USBSerialD0Ev>:
   d5a98:	b510      	push	{r4, lr}
   d5a9a:	2114      	movs	r1, #20
   d5a9c:	4604      	mov	r4, r0
   d5a9e:	f000 fd4d 	bl	d653c <_ZdlPvj>
   d5aa2:	4620      	mov	r0, r4
   d5aa4:	bd10      	pop	{r4, pc}
	...

000d5aa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5aa8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5aae:	4604      	mov	r4, r0
   d5ab0:	4608      	mov	r0, r1
   d5ab2:	2100      	movs	r1, #0
   d5ab4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5ab8:	4b04      	ldr	r3, [pc, #16]	; (d5acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5aba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5abc:	2301      	movs	r3, #1
  _serial = serial;
   d5abe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ac0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5ac2:	4611      	mov	r1, r2
   d5ac4:	f7ff faba 	bl	d503c <HAL_USB_USART_Init>
}
   d5ac8:	4620      	mov	r0, r4
   d5aca:	bd10      	pop	{r4, pc}
   d5acc:	000d7180 	.word	0x000d7180

000d5ad0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5ad0:	7c00      	ldrb	r0, [r0, #16]
   d5ad2:	2200      	movs	r2, #0
   d5ad4:	f7ff baba 	b.w	d504c <HAL_USB_USART_Begin>

000d5ad8 <_Z19acquireSerialBufferv>:
{
   d5ad8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5ada:	2214      	movs	r2, #20
{
   d5adc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5ade:	2100      	movs	r1, #0
   d5ae0:	f001 f956 	bl	d6d90 <memset>
}
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	bd10      	pop	{r4, pc}

000d5ae8 <_Z16_fetch_usbserialv>:
{
   d5ae8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5aea:	4c0f      	ldr	r4, [pc, #60]	; (d5b28 <_Z16_fetch_usbserialv+0x40>)
{
   d5aec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5aee:	a803      	add	r0, sp, #12
   d5af0:	f7ff fff2 	bl	d5ad8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5af4:	7821      	ldrb	r1, [r4, #0]
   d5af6:	f3bf 8f5b 	dmb	ish
   d5afa:	f011 0101 	ands.w	r1, r1, #1
   d5afe:	d10f      	bne.n	d5b20 <_Z16_fetch_usbserialv+0x38>
   d5b00:	4620      	mov	r0, r4
   d5b02:	9101      	str	r1, [sp, #4]
   d5b04:	f7fe facf 	bl	d40a6 <__cxa_guard_acquire>
   d5b08:	9901      	ldr	r1, [sp, #4]
   d5b0a:	b148      	cbz	r0, d5b20 <_Z16_fetch_usbserialv+0x38>
   d5b0c:	aa03      	add	r2, sp, #12
   d5b0e:	4807      	ldr	r0, [pc, #28]	; (d5b2c <_Z16_fetch_usbserialv+0x44>)
   d5b10:	f7ff ffca 	bl	d5aa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5b14:	4620      	mov	r0, r4
   d5b16:	f7fe facb 	bl	d40b0 <__cxa_guard_release>
   d5b1a:	4805      	ldr	r0, [pc, #20]	; (d5b30 <_Z16_fetch_usbserialv+0x48>)
   d5b1c:	f001 f90a 	bl	d6d34 <atexit>
	return _usbserial;
}
   d5b20:	4802      	ldr	r0, [pc, #8]	; (d5b2c <_Z16_fetch_usbserialv+0x44>)
   d5b22:	b008      	add	sp, #32
   d5b24:	bd10      	pop	{r4, pc}
   d5b26:	bf00      	nop
   d5b28:	2003e5e4 	.word	0x2003e5e4
   d5b2c:	2003e5e8 	.word	0x2003e5e8
   d5b30:	000d5a2f 	.word	0x000d5a2f

000d5b34 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5b34:	f7ff b9b2 	b.w	d4e9c <HAL_Interrupts_Disable_All>

000d5b38 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5b38:	f7ff b9a8 	b.w	d4e8c <HAL_Interrupts_Enable_All>

000d5b3c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5b3c:	4770      	bx	lr

000d5b3e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b3e:	7441      	strb	r1, [r0, #17]
}
   d5b40:	4770      	bx	lr

000d5b42 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b42:	4770      	bx	lr

000d5b44 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5b44:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5b46:	7c00      	ldrb	r0, [r0, #16]
   d5b48:	f7ff fa28 	bl	d4f9c <hal_usart_available_data_for_write>
}
   d5b4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b50:	bd08      	pop	{r3, pc}

000d5b52 <_ZN11USARTSerial9availableEv>:
{
   d5b52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5b54:	7c00      	ldrb	r0, [r0, #16]
   d5b56:	f7ff f9f9 	bl	d4f4c <hal_usart_available>
}
   d5b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b5e:	bd08      	pop	{r3, pc}

000d5b60 <_ZN11USARTSerial4peekEv>:
{
   d5b60:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5b62:	7c00      	ldrb	r0, [r0, #16]
   d5b64:	f7ff fa02 	bl	d4f6c <hal_usart_peek>
}
   d5b68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b6c:	bd08      	pop	{r3, pc}

000d5b6e <_ZN11USARTSerial4readEv>:
{
   d5b6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5b70:	7c00      	ldrb	r0, [r0, #16]
   d5b72:	f7ff f9f3 	bl	d4f5c <hal_usart_read>
}
   d5b76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b7a:	bd08      	pop	{r3, pc}

000d5b7c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5b7c:	7c00      	ldrb	r0, [r0, #16]
   d5b7e:	f7ff b9fd 	b.w	d4f7c <hal_usart_flush>

000d5b82 <_ZN11USARTSerial5writeEh>:
{
   d5b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b84:	7c45      	ldrb	r5, [r0, #17]
{
   d5b86:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b88:	b12d      	cbz	r5, d5b96 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5b8a:	7c20      	ldrb	r0, [r4, #16]
}
   d5b8c:	b003      	add	sp, #12
   d5b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5b92:	f7ff b9d3 	b.w	d4f3c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b96:	7c00      	ldrb	r0, [r0, #16]
   d5b98:	9101      	str	r1, [sp, #4]
   d5b9a:	f7ff f9ff 	bl	d4f9c <hal_usart_available_data_for_write>
   d5b9e:	2800      	cmp	r0, #0
   d5ba0:	9901      	ldr	r1, [sp, #4]
   d5ba2:	dcf2      	bgt.n	d5b8a <_ZN11USARTSerial5writeEh+0x8>
}
   d5ba4:	4628      	mov	r0, r5
   d5ba6:	b003      	add	sp, #12
   d5ba8:	bd30      	pop	{r4, r5, pc}

000d5baa <_ZN11USARTSerialD0Ev>:
   d5baa:	b510      	push	{r4, lr}
   d5bac:	2114      	movs	r1, #20
   d5bae:	4604      	mov	r4, r0
   d5bb0:	f000 fcc4 	bl	d653c <_ZdlPvj>
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	f04f 0c00 	mov.w	ip, #0
   d5bbe:	4604      	mov	r4, r0
   d5bc0:	4608      	mov	r0, r1
   d5bc2:	4611      	mov	r1, r2
   d5bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bc8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5bcc:	4a04      	ldr	r2, [pc, #16]	; (d5be0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5bce:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5bd0:	2201      	movs	r2, #1
  _serial = serial;
   d5bd2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5bd4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5bd6:	461a      	mov	r2, r3
   d5bd8:	f7ff f9a8 	bl	d4f2c <hal_usart_init>
}
   d5bdc:	4620      	mov	r0, r4
   d5bde:	bd10      	pop	{r4, pc}
   d5be0:	000d71b0 	.word	0x000d71b0

000d5be4 <_Z22__fetch_global_Serial1v>:
{
   d5be4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5be6:	4c0d      	ldr	r4, [pc, #52]	; (d5c1c <_Z22__fetch_global_Serial1v+0x38>)
   d5be8:	7821      	ldrb	r1, [r4, #0]
   d5bea:	f3bf 8f5b 	dmb	ish
   d5bee:	f011 0101 	ands.w	r1, r1, #1
   d5bf2:	d110      	bne.n	d5c16 <_Z22__fetch_global_Serial1v+0x32>
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	9101      	str	r1, [sp, #4]
   d5bf8:	f7fe fa55 	bl	d40a6 <__cxa_guard_acquire>
   d5bfc:	9901      	ldr	r1, [sp, #4]
   d5bfe:	b150      	cbz	r0, d5c16 <_Z22__fetch_global_Serial1v+0x32>
   d5c00:	4b07      	ldr	r3, [pc, #28]	; (d5c20 <_Z22__fetch_global_Serial1v+0x3c>)
   d5c02:	4a08      	ldr	r2, [pc, #32]	; (d5c24 <_Z22__fetch_global_Serial1v+0x40>)
   d5c04:	4808      	ldr	r0, [pc, #32]	; (d5c28 <_Z22__fetch_global_Serial1v+0x44>)
   d5c06:	f7ff ffd7 	bl	d5bb8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	f7fe fa50 	bl	d40b0 <__cxa_guard_release>
   d5c10:	4806      	ldr	r0, [pc, #24]	; (d5c2c <_Z22__fetch_global_Serial1v+0x48>)
   d5c12:	f001 f88f 	bl	d6d34 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c16:	4804      	ldr	r0, [pc, #16]	; (d5c28 <_Z22__fetch_global_Serial1v+0x44>)
   d5c18:	b002      	add	sp, #8
   d5c1a:	bd10      	pop	{r4, pc}
   d5c1c:	2003e5fc 	.word	0x2003e5fc
   d5c20:	2003e684 	.word	0x2003e684
   d5c24:	2003e600 	.word	0x2003e600
   d5c28:	2003e708 	.word	0x2003e708
   d5c2c:	000d5b43 	.word	0x000d5b43

000d5c30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5c30:	4770      	bx	lr

000d5c32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c34:	4606      	mov	r6, r0
   d5c36:	4615      	mov	r5, r2
   d5c38:	460c      	mov	r4, r1
   d5c3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c3c:	42bc      	cmp	r4, r7
   d5c3e:	d006      	beq.n	d5c4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c40:	6833      	ldr	r3, [r6, #0]
   d5c42:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c46:	689b      	ldr	r3, [r3, #8]
   d5c48:	4630      	mov	r0, r6
   d5c4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5c4c:	e7f6      	b.n	d5c3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5c4e:	4628      	mov	r0, r5
   d5c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5c52:	7c00      	ldrb	r0, [r0, #16]
   d5c54:	2200      	movs	r2, #0
   d5c56:	f7ff b9a9 	b.w	d4fac <hal_i2c_write>

000d5c5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5c5a:	7c00      	ldrb	r0, [r0, #16]
   d5c5c:	2100      	movs	r1, #0
   d5c5e:	f7ff b9ad 	b.w	d4fbc <hal_i2c_available>

000d5c62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5c62:	7c00      	ldrb	r0, [r0, #16]
   d5c64:	2100      	movs	r1, #0
   d5c66:	f7ff b9b1 	b.w	d4fcc <hal_i2c_read>

000d5c6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5c6a:	7c00      	ldrb	r0, [r0, #16]
   d5c6c:	2100      	movs	r1, #0
   d5c6e:	f7ff b9b5 	b.w	d4fdc <hal_i2c_peek>

000d5c72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5c72:	7c00      	ldrb	r0, [r0, #16]
   d5c74:	2100      	movs	r1, #0
   d5c76:	f7ff b9b9 	b.w	d4fec <hal_i2c_flush>

000d5c7a <_ZN7TwoWireD0Ev>:
   d5c7a:	b510      	push	{r4, lr}
   d5c7c:	2114      	movs	r1, #20
   d5c7e:	4604      	mov	r4, r0
   d5c80:	f000 fc5c 	bl	d653c <_ZdlPvj>
   d5c84:	4620      	mov	r0, r4
   d5c86:	bd10      	pop	{r4, pc}

000d5c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5c88:	b510      	push	{r4, lr}
   d5c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c8e:	4604      	mov	r4, r0
   d5c90:	4608      	mov	r0, r1
   d5c92:	2100      	movs	r1, #0
   d5c94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5c98:	4b03      	ldr	r3, [pc, #12]	; (d5ca8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5c9a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5c9c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5c9e:	4611      	mov	r1, r2
   d5ca0:	f7ff f9b4 	bl	d500c <hal_i2c_init>
}
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	bd10      	pop	{r4, pc}
   d5ca8:	000d71e0 	.word	0x000d71e0

000d5cac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5cac:	2200      	movs	r2, #0
   d5cae:	6840      	ldr	r0, [r0, #4]
   d5cb0:	4611      	mov	r1, r2
   d5cb2:	f7ff ba9f 	b.w	d51f4 <network_ready>

000d5cb6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	4611      	mov	r1, r2
   d5cbc:	f7ff baba 	b.w	d5234 <network_listening>

000d5cc0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5cc0:	2200      	movs	r2, #0
   d5cc2:	6840      	ldr	r0, [r0, #4]
   d5cc4:	4611      	mov	r1, r2
   d5cc6:	f7ff bac5 	b.w	d5254 <network_get_listen_timeout>

000d5cca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5cca:	6840      	ldr	r0, [r0, #4]
   d5ccc:	2200      	movs	r2, #0
   d5cce:	f7ff bab9 	b.w	d5244 <network_set_listen_timeout>

000d5cd2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cd2:	6840      	ldr	r0, [r0, #4]
   d5cd4:	2200      	movs	r2, #0
   d5cd6:	f081 0101 	eor.w	r1, r1, #1
   d5cda:	f7ff baa3 	b.w	d5224 <network_listen>

000d5cde <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5cde:	2300      	movs	r3, #0
   d5ce0:	6840      	ldr	r0, [r0, #4]
   d5ce2:	461a      	mov	r2, r3
   d5ce4:	4619      	mov	r1, r3
   d5ce6:	f7ff ba95 	b.w	d5214 <network_off>

000d5cea <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5cea:	2300      	movs	r3, #0
   d5cec:	6840      	ldr	r0, [r0, #4]
   d5cee:	461a      	mov	r2, r3
   d5cf0:	4619      	mov	r1, r3
   d5cf2:	f7ff ba87 	b.w	d5204 <network_on>

000d5cf6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5cf6:	2200      	movs	r2, #0
   d5cf8:	6840      	ldr	r0, [r0, #4]
   d5cfa:	4611      	mov	r1, r2
   d5cfc:	f7ff ba6a 	b.w	d51d4 <network_connecting>

000d5d00 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d00:	6840      	ldr	r0, [r0, #4]
   d5d02:	2200      	movs	r2, #0
   d5d04:	2102      	movs	r1, #2
   d5d06:	f7ff ba6d 	b.w	d51e4 <network_disconnect>

000d5d0a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d0a:	2300      	movs	r3, #0
   d5d0c:	6840      	ldr	r0, [r0, #4]
   d5d0e:	461a      	mov	r2, r3
   d5d10:	f7ff ba58 	b.w	d51c4 <network_connect>

000d5d14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5d14:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5d16:	2204      	movs	r2, #4
   d5d18:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5d1a:	4a02      	ldr	r2, [pc, #8]	; (d5d24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5d1c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5d1e:	4770      	bx	lr
   d5d20:	2003e71c 	.word	0x2003e71c
   d5d24:	000d7208 	.word	0x000d7208

000d5d28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d28:	2300      	movs	r3, #0
   d5d2a:	6840      	ldr	r0, [r0, #4]
   d5d2c:	461a      	mov	r2, r3
   d5d2e:	f7ff ba49 	b.w	d51c4 <network_connect>

000d5d32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	2200      	movs	r2, #0
   d5d36:	2102      	movs	r1, #2
   d5d38:	f7ff ba54 	b.w	d51e4 <network_disconnect>

000d5d3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d3c:	2200      	movs	r2, #0
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	4611      	mov	r1, r2
   d5d42:	f7ff ba47 	b.w	d51d4 <network_connecting>

000d5d46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d46:	2200      	movs	r2, #0
   d5d48:	6840      	ldr	r0, [r0, #4]
   d5d4a:	4611      	mov	r1, r2
   d5d4c:	f7ff ba52 	b.w	d51f4 <network_ready>

000d5d50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d50:	2300      	movs	r3, #0
   d5d52:	6840      	ldr	r0, [r0, #4]
   d5d54:	461a      	mov	r2, r3
   d5d56:	4619      	mov	r1, r3
   d5d58:	f7ff ba54 	b.w	d5204 <network_on>

000d5d5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d5c:	2300      	movs	r3, #0
   d5d5e:	6840      	ldr	r0, [r0, #4]
   d5d60:	461a      	mov	r2, r3
   d5d62:	4619      	mov	r1, r3
   d5d64:	f7ff ba56 	b.w	d5214 <network_off>

000d5d68 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5d68:	6840      	ldr	r0, [r0, #4]
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	f7ff ba7a 	b.w	d5264 <network_is_on>

000d5d70 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5d70:	6840      	ldr	r0, [r0, #4]
   d5d72:	2100      	movs	r1, #0
   d5d74:	f7ff ba7e 	b.w	d5274 <network_is_off>

000d5d78 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d78:	6840      	ldr	r0, [r0, #4]
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	f081 0101 	eor.w	r1, r1, #1
   d5d80:	f7ff ba50 	b.w	d5224 <network_listen>

000d5d84 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d84:	6840      	ldr	r0, [r0, #4]
   d5d86:	2200      	movs	r2, #0
   d5d88:	f7ff ba5c 	b.w	d5244 <network_set_listen_timeout>

000d5d8c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d8c:	2200      	movs	r2, #0
   d5d8e:	6840      	ldr	r0, [r0, #4]
   d5d90:	4611      	mov	r1, r2
   d5d92:	f7ff ba5f 	b.w	d5254 <network_get_listen_timeout>

000d5d96 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5d96:	2200      	movs	r2, #0
   d5d98:	6840      	ldr	r0, [r0, #4]
   d5d9a:	4611      	mov	r1, r2
   d5d9c:	f7ff ba4a 	b.w	d5234 <network_listening>

000d5da0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5da4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5da6:	b095      	sub	sp, #84	; 0x54
   d5da8:	4616      	mov	r6, r2
   d5daa:	460d      	mov	r5, r1
   d5dac:	4607      	mov	r7, r0
    IPAddress addr;
   d5dae:	f7ff fe05 	bl	d59bc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5db2:	4621      	mov	r1, r4
   d5db4:	2218      	movs	r2, #24
   d5db6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5db8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5dba:	f000 ffe9 	bl	d6d90 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5dbe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5dc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5dc4:	4621      	mov	r1, r4
   d5dc6:	466b      	mov	r3, sp
   d5dc8:	aa0c      	add	r2, sp, #48	; 0x30
   d5dca:	4630      	mov	r0, r6
   d5dcc:	f7ff f82e 	bl	d4e2c <netdb_getaddrinfo>
    if (!r) {
   d5dd0:	4604      	mov	r4, r0
   d5dd2:	2800      	cmp	r0, #0
   d5dd4:	d146      	bne.n	d5e64 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5dd6:	4602      	mov	r2, r0
   d5dd8:	2101      	movs	r1, #1
   d5dda:	6868      	ldr	r0, [r5, #4]
   d5ddc:	f7ff fa0a 	bl	d51f4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5de0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5de2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5de4:	4622      	mov	r2, r4
   d5de6:	6868      	ldr	r0, [r5, #4]
   d5de8:	f7ff fa04 	bl	d51f4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5dec:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dee:	4681      	mov	r9, r0
        bool ok = false;
   d5df0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5df2:	2e00      	cmp	r6, #0
   d5df4:	d036      	beq.n	d5e64 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5df6:	2900      	cmp	r1, #0
   d5df8:	d134      	bne.n	d5e64 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5dfa:	6873      	ldr	r3, [r6, #4]
   d5dfc:	2b02      	cmp	r3, #2
   d5dfe:	d003      	beq.n	d5e08 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5e00:	2b0a      	cmp	r3, #10
   d5e02:	d00b      	beq.n	d5e1c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e04:	69f6      	ldr	r6, [r6, #28]
   d5e06:	e7f4      	b.n	d5df2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5e08:	f1b8 0f00 	cmp.w	r8, #0
   d5e0c:	d004      	beq.n	d5e18 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e0e:	6971      	ldr	r1, [r6, #20]
   d5e10:	4638      	mov	r0, r7
   d5e12:	3104      	adds	r1, #4
   d5e14:	f7ff fdff 	bl	d5a16 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5e18:	4641      	mov	r1, r8
   d5e1a:	e7f3      	b.n	d5e04 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e1c:	f1b9 0f00 	cmp.w	r9, #0
   d5e20:	d101      	bne.n	d5e26 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5e22:	4649      	mov	r1, r9
   d5e24:	e7ee      	b.n	d5e04 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e26:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e28:	2210      	movs	r2, #16
   d5e2a:	a801      	add	r0, sp, #4
   d5e2c:	f000 ffb0 	bl	d6d90 <memset>
                    a.v = 6;
   d5e30:	2306      	movs	r3, #6
   d5e32:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e36:	ad01      	add	r5, sp, #4
   d5e38:	f104 0308 	add.w	r3, r4, #8
   d5e3c:	3418      	adds	r4, #24
   d5e3e:	6818      	ldr	r0, [r3, #0]
   d5e40:	6859      	ldr	r1, [r3, #4]
   d5e42:	462a      	mov	r2, r5
   d5e44:	c203      	stmia	r2!, {r0, r1}
   d5e46:	3308      	adds	r3, #8
   d5e48:	42a3      	cmp	r3, r4
   d5e4a:	4615      	mov	r5, r2
   d5e4c:	d1f7      	bne.n	d5e3e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5e4e:	a901      	add	r1, sp, #4
   d5e50:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5e52:	ad07      	add	r5, sp, #28
   d5e54:	f7ff fdc0 	bl	d59d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e5a:	1d3c      	adds	r4, r7, #4
   d5e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e5e:	682b      	ldr	r3, [r5, #0]
   d5e60:	7023      	strb	r3, [r4, #0]
   d5e62:	e7de      	b.n	d5e22 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e64:	9800      	ldr	r0, [sp, #0]
   d5e66:	f7fe ffd9 	bl	d4e1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e6a:	4638      	mov	r0, r7
   d5e6c:	b015      	add	sp, #84	; 0x54
   d5e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5e74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e74:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e76:	4a03      	ldr	r2, [pc, #12]	; (d5e84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e78:	601a      	str	r2, [r3, #0]
   d5e7a:	2200      	movs	r2, #0
   d5e7c:	605a      	str	r2, [r3, #4]

} // spark
   d5e7e:	4770      	bx	lr
   d5e80:	2003e724 	.word	0x2003e724
   d5e84:	000d7244 	.word	0x000d7244

000d5e88 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5e88:	f100 0310 	add.w	r3, r0, #16
   d5e8c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5e8e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5e92:	2901      	cmp	r1, #1
   d5e94:	4618      	mov	r0, r3
   d5e96:	d108      	bne.n	d5eaa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5e98:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d5e9c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5ea0:	3a01      	subs	r2, #1
   d5ea2:	f103 0310 	add.w	r3, r3, #16
   d5ea6:	d1f2      	bne.n	d5e8e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5ea8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d5eaa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5eac:	bf04      	itt	eq
   d5eae:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d5eb2:	1852      	addeq	r2, r2, r1
   d5eb4:	e7f4      	b.n	d5ea0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5eb6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5eb6:	4770      	bx	lr

000d5eb8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5eb8:	2000      	movs	r0, #0
   d5eba:	4770      	bx	lr

000d5ebc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5ebc:	b510      	push	{r4, lr}
   d5ebe:	2110      	movs	r1, #16
   d5ec0:	4604      	mov	r4, r0
   d5ec2:	f000 fb3b 	bl	d653c <_ZdlPvj>
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	bd10      	pop	{r4, pc}

000d5eca <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5eca:	b508      	push	{r3, lr}
      { delete this; }
   d5ecc:	f7ff fff6 	bl	d5ebc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5ed0:	bd08      	pop	{r3, pc}

000d5ed2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5ed2:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d5ed4:	68c4      	ldr	r4, [r0, #12]
   d5ed6:	b17c      	cbz	r4, d5ef8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5ed8:	6820      	ldr	r0, [r4, #0]
   d5eda:	b108      	cbz	r0, d5ee0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d5edc:	f7fe f8e1 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d5ee0:	7a23      	ldrb	r3, [r4, #8]
   d5ee2:	b11b      	cbz	r3, d5eec <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d5ee4:	6860      	ldr	r0, [r4, #4]
   d5ee6:	b108      	cbz	r0, d5eec <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5ee8:	f7fe f8db 	bl	d40a2 <_ZdaPv>
   d5eec:	4620      	mov	r0, r4
   d5eee:	210c      	movs	r1, #12
   d5ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5ef4:	f000 bb22 	b.w	d653c <_ZdlPvj>
   d5ef8:	bd10      	pop	{r4, pc}

000d5efa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5efa:	b510      	push	{r4, lr}
          _M_dispose();
   d5efc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5efe:	4604      	mov	r4, r0
          _M_dispose();
   d5f00:	689b      	ldr	r3, [r3, #8]
   d5f02:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f04:	68a3      	ldr	r3, [r4, #8]
   d5f06:	3b01      	subs	r3, #1
   d5f08:	60a3      	str	r3, [r4, #8]
   d5f0a:	b92b      	cbnz	r3, d5f18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5f0c:	6823      	ldr	r3, [r4, #0]
   d5f0e:	4620      	mov	r0, r4
   d5f10:	68db      	ldr	r3, [r3, #12]
    }
   d5f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5f16:	4718      	bx	r3
    }
   d5f18:	bd10      	pop	{r4, pc}

000d5f1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5f1a:	b538      	push	{r3, r4, r5, lr}
   d5f1c:	680b      	ldr	r3, [r1, #0]
   d5f1e:	6003      	str	r3, [r0, #0]
   d5f20:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5f22:	6843      	ldr	r3, [r0, #4]
   d5f24:	429d      	cmp	r5, r3
    class __shared_ptr
   d5f26:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5f28:	d00c      	beq.n	d5f44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5f2a:	b115      	cbz	r5, d5f32 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5f2c:	686b      	ldr	r3, [r5, #4]
   d5f2e:	3301      	adds	r3, #1
   d5f30:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5f32:	6860      	ldr	r0, [r4, #4]
   d5f34:	b128      	cbz	r0, d5f42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5f36:	6843      	ldr	r3, [r0, #4]
   d5f38:	3b01      	subs	r3, #1
   d5f3a:	6043      	str	r3, [r0, #4]
   d5f3c:	b90b      	cbnz	r3, d5f42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5f3e:	f7ff ffdc 	bl	d5efa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5f42:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5f44:	4620      	mov	r0, r4
   d5f46:	bd38      	pop	{r3, r4, r5, pc}

000d5f48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5f48:	460b      	mov	r3, r1
   d5f4a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5f4c:	2200      	movs	r2, #0
   d5f4e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5f50:	e9c0 2200 	strd	r2, r2, [r0]
   d5f54:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5f56:	6083      	str	r3, [r0, #8]
    if (t) {
   d5f58:	b90b      	cbnz	r3, d5f5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5f5e:	f7ff ffdc 	bl	d5f1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5f62:	e7fa      	b.n	d5f5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5f64 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5f64:	6883      	ldr	r3, [r0, #8]
   d5f66:	b1eb      	cbz	r3, d5fa4 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5f68:	781a      	ldrb	r2, [r3, #0]
   d5f6a:	2a03      	cmp	r2, #3
   d5f6c:	d81a      	bhi.n	d5fa4 <_ZNK5spark9JSONValue4typeEv+0x40>
   d5f6e:	e8df f002 	tbb	[pc, r2]
   d5f72:	1704      	.short	0x1704
   d5f74:	1b02      	.short	0x1b02
   d5f76:	2005      	movs	r0, #5
   d5f78:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5f7a:	6802      	ldr	r2, [r0, #0]
   d5f7c:	685b      	ldr	r3, [r3, #4]
   d5f7e:	6852      	ldr	r2, [r2, #4]
   d5f80:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5f82:	282d      	cmp	r0, #45	; 0x2d
   d5f84:	d012      	beq.n	d5fac <_ZNK5spark9JSONValue4typeEv+0x48>
   d5f86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5f8a:	2b09      	cmp	r3, #9
   d5f8c:	d90e      	bls.n	d5fac <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5f8e:	2874      	cmp	r0, #116	; 0x74
   d5f90:	d00e      	beq.n	d5fb0 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5f92:	2866      	cmp	r0, #102	; 0x66
   d5f94:	d00c      	beq.n	d5fb0 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5f96:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5f9a:	4258      	negs	r0, r3
   d5f9c:	4158      	adcs	r0, r3
   d5f9e:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d5fa0:	2006      	movs	r0, #6
   d5fa2:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5fa4:	2000      	movs	r0, #0
   d5fa6:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d5fa8:	2004      	movs	r0, #4
   d5faa:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d5fac:	2003      	movs	r0, #3
   d5fae:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d5fb0:	2002      	movs	r0, #2
    }
}
   d5fb2:	4770      	bx	lr

000d5fb4 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d5fb4:	b510      	push	{r4, lr}
   d5fb6:	4604      	mov	r4, r0
    switch (type()) {
   d5fb8:	f7ff ffd4 	bl	d5f64 <_ZNK5spark9JSONValue4typeEv>
   d5fbc:	2803      	cmp	r0, #3
   d5fbe:	d00d      	beq.n	d5fdc <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d5fc0:	2804      	cmp	r0, #4
   d5fc2:	d01e      	beq.n	d6002 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d5fc4:	2802      	cmp	r0, #2
   d5fc6:	d12b      	bne.n	d6020 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d5fc8:	6822      	ldr	r2, [r4, #0]
   d5fca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5fcc:	6852      	ldr	r2, [r2, #4]
   d5fce:	685b      	ldr	r3, [r3, #4]
   d5fd0:	5cd0      	ldrb	r0, [r2, r3]
   d5fd2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5fd6:	4258      	negs	r0, r3
   d5fd8:	4158      	adcs	r0, r3
}
   d5fda:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d5fdc:	68a3      	ldr	r3, [r4, #8]
   d5fde:	6822      	ldr	r2, [r4, #0]
   d5fe0:	685b      	ldr	r3, [r3, #4]
   d5fe2:	6854      	ldr	r4, [r2, #4]
   d5fe4:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d5fe6:	490f      	ldr	r1, [pc, #60]	; (d6024 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f000 fefd 	bl	d6de8 <strcmp>
   d5fee:	2800      	cmp	r0, #0
   d5ff0:	d0f3      	beq.n	d5fda <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d5ff2:	490d      	ldr	r1, [pc, #52]	; (d6028 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	f000 fef7 	bl	d6de8 <strcmp>
   d5ffa:	3800      	subs	r0, #0
   d5ffc:	bf18      	it	ne
   d5ffe:	2001      	movne	r0, #1
   d6000:	e7eb      	b.n	d5fda <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d6002:	6822      	ldr	r2, [r4, #0]
   d6004:	68a3      	ldr	r3, [r4, #8]
   d6006:	6852      	ldr	r2, [r2, #4]
   d6008:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d600a:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d600c:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d600e:	2800      	cmp	r0, #0
   d6010:	d0e3      	beq.n	d5fda <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d6012:	4906      	ldr	r1, [pc, #24]	; (d602c <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d6014:	4620      	mov	r0, r4
   d6016:	f000 fee7 	bl	d6de8 <strcmp>
   d601a:	2800      	cmp	r0, #0
   d601c:	d1e3      	bne.n	d5fe6 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d601e:	e7dc      	b.n	d5fda <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d6020:	2000      	movs	r0, #0
   d6022:	e7da      	b.n	d5fda <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d6024:	000d727a 	.word	0x000d727a
   d6028:	000d7278 	.word	0x000d7278
   d602c:	000d727c 	.word	0x000d727c

000d6030 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6030:	b510      	push	{r4, lr}
   d6032:	4604      	mov	r4, r0
    switch (type()) {
   d6034:	f7ff ff96 	bl	d5f64 <_ZNK5spark9JSONValue4typeEv>
   d6038:	2802      	cmp	r0, #2
   d603a:	d00e      	beq.n	d605a <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d603c:	1ec3      	subs	r3, r0, #3
   d603e:	b2db      	uxtb	r3, r3
   d6040:	2b01      	cmp	r3, #1
   d6042:	d814      	bhi.n	d606e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6044:	6822      	ldr	r2, [r4, #0]
   d6046:	68a3      	ldr	r3, [r4, #8]
   d6048:	6850      	ldr	r0, [r2, #4]
   d604a:	685b      	ldr	r3, [r3, #4]
}
   d604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6050:	220a      	movs	r2, #10
   d6052:	2100      	movs	r1, #0
   d6054:	4418      	add	r0, r3
   d6056:	f000 bf5b 	b.w	d6f10 <strtol>
        const char* const s = d_->json + t_->start;
   d605a:	6822      	ldr	r2, [r4, #0]
   d605c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d605e:	6852      	ldr	r2, [r2, #4]
   d6060:	685b      	ldr	r3, [r3, #4]
   d6062:	5cd0      	ldrb	r0, [r2, r3]
   d6064:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6068:	4258      	negs	r0, r3
   d606a:	4158      	adcs	r0, r3
}
   d606c:	bd10      	pop	{r4, pc}
    switch (type()) {
   d606e:	2000      	movs	r0, #0
   d6070:	e7fc      	b.n	d606c <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6074 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d6074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6078:	4699      	mov	r9, r3
   d607a:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d607c:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d607e:	4607      	mov	r7, r0
   d6080:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d6082:	eb0d 0003 	add.w	r0, sp, r3
   d6086:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d6088:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d608a:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d608c:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d608e:	f7ff f84d 	bl	d512c <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d6092:	ab03      	add	r3, sp, #12
   d6094:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d6096:	f04f 36ff 	mov.w	r6, #4294967295
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d609a:	9400      	str	r4, [sp, #0]
   d609c:	4623      	mov	r3, r4
   d609e:	4642      	mov	r2, r8
   d60a0:	4639      	mov	r1, r7
   d60a2:	a804      	add	r0, sp, #16
    int nExt = -1;
   d60a4:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d60a6:	f7ff f849 	bl	d513c <jsmn_parse_deprecated>
    if (n <= 0) {
   d60aa:	1e05      	subs	r5, r0, #0
   d60ac:	dd27      	ble.n	d60fe <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d60ae:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d60b0:	4914      	ldr	r1, [pc, #80]	; (d6104 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d60b2:	4285      	cmp	r5, r0
   d60b4:	bfb8      	it	lt
   d60b6:	4605      	movlt	r5, r0
   d60b8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d60bc:	bfac      	ite	ge
   d60be:	4630      	movge	r0, r6
   d60c0:	0128      	lsllt	r0, r5, #4
   d60c2:	f000 fa3f 	bl	d6544 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d60c6:	4606      	mov	r6, r0
   d60c8:	b198      	cbz	r0, d60f2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d60ca:	2100      	movs	r1, #0
   d60cc:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d60ce:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d60d0:	f7ff f82c 	bl	d512c <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d60d4:	e9cd 5400 	strd	r5, r4, [sp]
   d60d8:	4633      	mov	r3, r6
   d60da:	4642      	mov	r2, r8
   d60dc:	4639      	mov	r1, r7
   d60de:	a804      	add	r0, sp, #16
   d60e0:	f7ff f82c 	bl	d513c <jsmn_parse_deprecated>
   d60e4:	42a0      	cmp	r0, r4
   d60e6:	dd07      	ble.n	d60f8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d60e8:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d60ec:	2001      	movs	r0, #1
    *count = n;
   d60ee:	f8c9 5000 	str.w	r5, [r9]
}
   d60f2:	b008      	add	sp, #32
   d60f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d60f8:	4630      	mov	r0, r6
   d60fa:	f7fd ffd2 	bl	d40a2 <_ZdaPv>
      }
   d60fe:	4620      	mov	r0, r4
   d6100:	e7f7      	b.n	d60f2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d6102:	bf00      	nop
   d6104:	000d72a0 	.word	0x000d72a0

000d6108 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d6108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d610c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d610e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d6110:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d6112:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d6114:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d6116:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d6118:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d611a:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d611c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d6120:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d6124:	42b4      	cmp	r4, r6
   d6126:	d063      	beq.n	d61f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d6128:	4625      	mov	r5, r4
   d612a:	f815 2b01 	ldrb.w	r2, [r5], #1
   d612e:	2a5c      	cmp	r2, #92	; 0x5c
   d6130:	d12b      	bne.n	d618a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d6132:	42a1      	cmp	r1, r4
   d6134:	d007      	beq.n	d6146 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d6136:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d613a:	4618      	mov	r0, r3
   d613c:	465a      	mov	r2, fp
   d613e:	f000 fe0d 	bl	d6d5c <memmove>
   d6142:	4603      	mov	r3, r0
                str += n;
   d6144:	445b      	add	r3, fp
            if (s == end) {
   d6146:	42b5      	cmp	r5, r6
   d6148:	d039      	beq.n	d61be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d614a:	7862      	ldrb	r2, [r4, #1]
   d614c:	2a75      	cmp	r2, #117	; 0x75
   d614e:	d12a      	bne.n	d61a6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d6150:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d6152:	1ab2      	subs	r2, r6, r2
   d6154:	2a03      	cmp	r2, #3
   d6156:	dd32      	ble.n	d61be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d6158:	1da0      	adds	r0, r4, #6
   d615a:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d615e:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d6162:	45ae      	cmp	lr, r5
   d6164:	d053      	beq.n	d620e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d6166:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d616a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d616e:	fa5f fb82 	uxtb.w	fp, r2
   d6172:	f1bb 0f09 	cmp.w	fp, #9
   d6176:	d905      	bls.n	d6184 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d6178:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d617c:	2a05      	cmp	r2, #5
   d617e:	d807      	bhi.n	d6190 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d6180:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d6184:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d6188:	e7eb      	b.n	d6162 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d618a:	4628      	mov	r0, r5
   d618c:	4604      	mov	r4, r0
   d618e:	e7c9      	b.n	d6124 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d6190:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d6194:	2a05      	cmp	r2, #5
   d6196:	d812      	bhi.n	d61be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d6198:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d619c:	e7f2      	b.n	d6184 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d619e:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d61a2:	4601      	mov	r1, r0
   d61a4:	e7f2      	b.n	d618c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d61a6:	2a6e      	cmp	r2, #110	; 0x6e
   d61a8:	d01c      	beq.n	d61e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d61aa:	d80e      	bhi.n	d61ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d61ac:	2a62      	cmp	r2, #98	; 0x62
   d61ae:	d013      	beq.n	d61d8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d61b0:	d807      	bhi.n	d61c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d61b2:	2a2f      	cmp	r2, #47	; 0x2f
   d61b4:	d011      	beq.n	d61da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d61b6:	2a5c      	cmp	r2, #92	; 0x5c
   d61b8:	d00f      	beq.n	d61da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d61ba:	2a22      	cmp	r2, #34	; 0x22
   d61bc:	d00d      	beq.n	d61da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d61be:	2000      	movs	r0, #0
   d61c0:	e023      	b.n	d620a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d61c2:	2a66      	cmp	r2, #102	; 0x66
   d61c4:	d1fb      	bne.n	d61be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d61c6:	220c      	movs	r2, #12
   d61c8:	e007      	b.n	d61da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d61ca:	2a72      	cmp	r2, #114	; 0x72
   d61cc:	d00d      	beq.n	d61ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d61ce:	2a74      	cmp	r2, #116	; 0x74
   d61d0:	d1f5      	bne.n	d61be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d61d2:	f883 a000 	strb.w	sl, [r3]
                    break;
   d61d6:	e001      	b.n	d61dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d61d8:	2208      	movs	r2, #8
   d61da:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d61dc:	1ca1      	adds	r1, r4, #2
                ++str;
   d61de:	3301      	adds	r3, #1
                ++s;
   d61e0:	4608      	mov	r0, r1
   d61e2:	e7d3      	b.n	d618c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d61e4:	f04f 020a 	mov.w	r2, #10
   d61e8:	e7f7      	b.n	d61da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d61ea:	f883 9000 	strb.w	r9, [r3]
                    break;
   d61ee:	e7f5      	b.n	d61dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d61f0:	42a1      	cmp	r1, r4
   d61f2:	d006      	beq.n	d6202 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d61f4:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d61f6:	4618      	mov	r0, r3
   d61f8:	4622      	mov	r2, r4
   d61fa:	f000 fdaf 	bl	d6d5c <memmove>
   d61fe:	4603      	mov	r3, r0
        str += n;
   d6200:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d6202:	eba3 0308 	sub.w	r3, r3, r8
   d6206:	60bb      	str	r3, [r7, #8]
    return true;
   d6208:	2001      	movs	r0, #1
}
   d620a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d620e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d6212:	d9c4      	bls.n	d619e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d6214:	4621      	mov	r1, r4
   d6216:	e7b9      	b.n	d618c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d6218 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d6218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d621a:	4604      	mov	r4, r0
   d621c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d621e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d6222:	2700      	movs	r7, #0
    while (t != end) {
   d6224:	42b4      	cmp	r4, r6
   d6226:	d010      	beq.n	d624a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d6228:	7823      	ldrb	r3, [r4, #0]
   d622a:	2b03      	cmp	r3, #3
   d622c:	d108      	bne.n	d6240 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d622e:	4629      	mov	r1, r5
   d6230:	4620      	mov	r0, r4
   d6232:	f7ff ff69 	bl	d6108 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d6236:	b148      	cbz	r0, d624c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d6238:	68a3      	ldr	r3, [r4, #8]
   d623a:	54ef      	strb	r7, [r5, r3]
        ++t;
   d623c:	3410      	adds	r4, #16
    while (t != end) {
   d623e:	e7f1      	b.n	d6224 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d6240:	2b00      	cmp	r3, #0
   d6242:	d1fb      	bne.n	d623c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d6244:	68a2      	ldr	r2, [r4, #8]
   d6246:	54ab      	strb	r3, [r5, r2]
   d6248:	e7f8      	b.n	d623c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d624a:	2001      	movs	r0, #1
}
   d624c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6250 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6250:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6252:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6254:	e9c0 3300 	strd	r3, r3, [r0]
   d6258:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d625a:	480e      	ldr	r0, [pc, #56]	; (d6294 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d625c:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6260:	b1a9      	cbz	r1, d628e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6262:	780b      	ldrb	r3, [r1, #0]
   d6264:	2b03      	cmp	r3, #3
   d6266:	d006      	beq.n	d6276 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6268:	b98b      	cbnz	r3, d628e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d626a:	6813      	ldr	r3, [r2, #0]
   d626c:	6858      	ldr	r0, [r3, #4]
   d626e:	684b      	ldr	r3, [r1, #4]
   d6270:	5cc3      	ldrb	r3, [r0, r3]
   d6272:	2b6e      	cmp	r3, #110	; 0x6e
   d6274:	d007      	beq.n	d6286 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6276:	6813      	ldr	r3, [r2, #0]
   d6278:	684d      	ldr	r5, [r1, #4]
   d627a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d627c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d627e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6280:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6282:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6284:	60e3      	str	r3, [r4, #12]
   d6286:	4611      	mov	r1, r2
   d6288:	4620      	mov	r0, r4
   d628a:	f7ff fe46 	bl	d5f1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d628e:	4620      	mov	r0, r4
   d6290:	bd38      	pop	{r3, r4, r5, pc}
   d6292:	bf00      	nop
   d6294:	000d7105 	.word	0x000d7105

000d6298 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6298:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d629a:	2500      	movs	r5, #0
   d629c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d629e:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d62a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d62a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d62aa:	4604      	mov	r4, r0
   d62ac:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d62ae:	b14b      	cbz	r3, d62c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d62b0:	781a      	ldrb	r2, [r3, #0]
   d62b2:	2a01      	cmp	r2, #1
   d62b4:	d106      	bne.n	d62c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d62b6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d62ba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d62bc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d62be:	6143      	str	r3, [r0, #20]
   d62c0:	f7ff fe2b 	bl	d5f1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d62c4:	4620      	mov	r0, r4
   d62c6:	bd38      	pop	{r3, r4, r5, pc}

000d62c8 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d62c8:	b510      	push	{r4, lr}
    if (!n_) {
   d62ca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d62cc:	4604      	mov	r4, r0
    if (!n_) {
   d62ce:	b163      	cbz	r3, d62ea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d62d0:	6880      	ldr	r0, [r0, #8]
   d62d2:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d62d4:	3b01      	subs	r3, #1
    ++t_;
   d62d6:	3010      	adds	r0, #16
   d62d8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d62da:	6120      	str	r0, [r4, #16]
    --n_;
   d62dc:	6163      	str	r3, [r4, #20]
    if (n_) {
   d62de:	b113      	cbz	r3, d62e6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d62e0:	f7ff fdd2 	bl	d5e88 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d62e4:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d62e6:	2001      	movs	r0, #1
   d62e8:	e000      	b.n	d62ec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d62ea:	4618      	mov	r0, r3
}
   d62ec:	bd10      	pop	{r4, pc}
	...

000d62f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d62f0:	b538      	push	{r3, r4, r5, lr}
   d62f2:	2300      	movs	r3, #0
   d62f4:	4604      	mov	r4, r0
   d62f6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62f8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d62fa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62fc:	f7fd fecb 	bl	d4096 <_Znwj>
   d6300:	b128      	cbz	r0, d630e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6302:	2301      	movs	r3, #1
   d6304:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6308:	4b02      	ldr	r3, [pc, #8]	; (d6314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d630a:	6003      	str	r3, [r0, #0]
   d630c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d630e:	6020      	str	r0, [r4, #0]
	}
   d6310:	4620      	mov	r0, r4
   d6312:	bd38      	pop	{r3, r4, r5, pc}
   d6314:	000d728c 	.word	0x000d728c

000d6318 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d6318:	b5f0      	push	{r4, r5, r6, r7, lr}
   d631a:	4604      	mov	r4, r0
   d631c:	b087      	sub	sp, #28
   d631e:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d6320:	200c      	movs	r0, #12
   d6322:	4927      	ldr	r1, [pc, #156]	; (d63c0 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d6324:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d6326:	f000 f90b 	bl	d6540 <_ZnwjRKSt9nothrow_t>
   d632a:	4601      	mov	r1, r0
   d632c:	b118      	cbz	r0, d6336 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d632e:	2300      	movs	r3, #0
   d6330:	e9c0 3300 	strd	r3, r3, [r0]
   d6334:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d6336:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6338:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d633a:	f7ff ffd9 	bl	d62f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d633e:	9a02      	ldr	r2, [sp, #8]
   d6340:	b942      	cbnz	r2, d6354 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d6342:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d6346:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d6348:	a803      	add	r0, sp, #12
   d634a:	f7fd ff08 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d634e:	4620      	mov	r0, r4
   d6350:	b007      	add	sp, #28
   d6352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d6354:	2300      	movs	r3, #0
   d6356:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d6358:	4629      	mov	r1, r5
   d635a:	ab01      	add	r3, sp, #4
   d635c:	4630      	mov	r0, r6
   d635e:	f7ff fe89 	bl	d6074 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d6362:	b918      	cbnz	r0, d636c <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d6364:	e9c4 0000 	strd	r0, r0, [r4]
   d6368:	60a0      	str	r0, [r4, #8]
}
   d636a:	e7ed      	b.n	d6348 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d636c:	4914      	ldr	r1, [pc, #80]	; (d63c0 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d636e:	9f02      	ldr	r7, [sp, #8]
   d6370:	1c68      	adds	r0, r5, #1
   d6372:	f000 f8e7 	bl	d6544 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d6376:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d6378:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d637a:	6858      	ldr	r0, [r3, #4]
   d637c:	2800      	cmp	r0, #0
   d637e:	d0f1      	beq.n	d6364 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d6380:	462a      	mov	r2, r5
   d6382:	4631      	mov	r1, r6
   d6384:	f000 fcdc 	bl	d6d40 <memcpy>
   d6388:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d638a:	9901      	ldr	r1, [sp, #4]
   d638c:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d638e:	2201      	movs	r2, #1
   d6390:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d6392:	685a      	ldr	r2, [r3, #4]
   d6394:	f7ff ff40 	bl	d6218 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d6398:	2800      	cmp	r0, #0
   d639a:	d0e3      	beq.n	d6364 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d639c:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d639e:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63a0:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d63a2:	9b03      	ldr	r3, [sp, #12]
   d63a4:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d63a6:	b113      	cbz	r3, d63ae <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d63a8:	685a      	ldr	r2, [r3, #4]
   d63aa:	3201      	adds	r2, #1
   d63ac:	605a      	str	r2, [r3, #4]
   d63ae:	aa04      	add	r2, sp, #16
   d63b0:	4620      	mov	r0, r4
   d63b2:	f7ff fdc9 	bl	d5f48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d63b6:	a805      	add	r0, sp, #20
   d63b8:	f7fd fed1 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63bc:	e7c4      	b.n	d6348 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d63be:	bf00      	nop
   d63c0:	000d72a0 	.word	0x000d72a0

000d63c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d63c4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d63c6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d63c8:	d902      	bls.n	d63d0 <pinAvailable+0xc>
    return false;
   d63ca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d63cc:	b002      	add	sp, #8
   d63ce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d63d0:	f1a0 030b 	sub.w	r3, r0, #11
   d63d4:	2b02      	cmp	r3, #2
   d63d6:	d81a      	bhi.n	d640e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d63d8:	4c17      	ldr	r4, [pc, #92]	; (d6438 <pinAvailable+0x74>)
   d63da:	7821      	ldrb	r1, [r4, #0]
   d63dc:	f3bf 8f5b 	dmb	ish
   d63e0:	f011 0101 	ands.w	r1, r1, #1
   d63e4:	d10b      	bne.n	d63fe <pinAvailable+0x3a>
   d63e6:	4620      	mov	r0, r4
   d63e8:	9101      	str	r1, [sp, #4]
   d63ea:	f7fd fe5c 	bl	d40a6 <__cxa_guard_acquire>
   d63ee:	9901      	ldr	r1, [sp, #4]
   d63f0:	b128      	cbz	r0, d63fe <pinAvailable+0x3a>
   d63f2:	4812      	ldr	r0, [pc, #72]	; (d643c <pinAvailable+0x78>)
   d63f4:	f7fe ffcc 	bl	d5390 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d63f8:	4620      	mov	r0, r4
   d63fa:	f7fd fe59 	bl	d40b0 <__cxa_guard_release>
   d63fe:	4b0f      	ldr	r3, [pc, #60]	; (d643c <pinAvailable+0x78>)
   d6400:	7818      	ldrb	r0, [r3, #0]
   d6402:	f7fe fe13 	bl	d502c <hal_spi_is_enabled>
   d6406:	2800      	cmp	r0, #0
   d6408:	d1df      	bne.n	d63ca <pinAvailable+0x6>
  return true; // 'pin' is available
   d640a:	2001      	movs	r0, #1
   d640c:	e7de      	b.n	d63cc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d640e:	2801      	cmp	r0, #1
   d6410:	d809      	bhi.n	d6426 <pinAvailable+0x62>
   d6412:	f000 f86f 	bl	d64f4 <_Z19__fetch_global_Wirev>
   d6416:	2100      	movs	r1, #0
   d6418:	7c00      	ldrb	r0, [r0, #16]
   d641a:	f7fe fdef 	bl	d4ffc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d641e:	f080 0001 	eor.w	r0, r0, #1
   d6422:	b2c0      	uxtb	r0, r0
   d6424:	e7d2      	b.n	d63cc <pinAvailable+0x8>
   d6426:	3809      	subs	r0, #9
   d6428:	2801      	cmp	r0, #1
   d642a:	d8ee      	bhi.n	d640a <pinAvailable+0x46>
   d642c:	f7ff fbda 	bl	d5be4 <_Z22__fetch_global_Serial1v>
   d6430:	7c00      	ldrb	r0, [r0, #16]
   d6432:	f7fe fdab 	bl	d4f8c <hal_usart_is_enabled>
   d6436:	e7f2      	b.n	d641e <pinAvailable+0x5a>
   d6438:	2003e72c 	.word	0x2003e72c
   d643c:	2003e730 	.word	0x2003e730

000d6440 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6440:	2823      	cmp	r0, #35	; 0x23
{
   d6442:	b538      	push	{r3, r4, r5, lr}
   d6444:	4604      	mov	r4, r0
   d6446:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6448:	d80a      	bhi.n	d6460 <pinMode+0x20>
   d644a:	29ff      	cmp	r1, #255	; 0xff
   d644c:	d008      	beq.n	d6460 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d644e:	f7ff ffb9 	bl	d63c4 <pinAvailable>
   d6452:	b128      	cbz	r0, d6460 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6454:	4629      	mov	r1, r5
   d6456:	4620      	mov	r0, r4
}
   d6458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d645c:	f7fe bcfe 	b.w	d4e5c <HAL_Pin_Mode>
}
   d6460:	bd38      	pop	{r3, r4, r5, pc}

000d6462 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6462:	b538      	push	{r3, r4, r5, lr}
   d6464:	4604      	mov	r4, r0
   d6466:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6468:	f7fe fd00 	bl	d4e6c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d646c:	28ff      	cmp	r0, #255	; 0xff
   d646e:	d010      	beq.n	d6492 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6470:	2806      	cmp	r0, #6
   d6472:	d804      	bhi.n	d647e <digitalWrite+0x1c>
   d6474:	234d      	movs	r3, #77	; 0x4d
   d6476:	fa23 f000 	lsr.w	r0, r3, r0
   d647a:	07c3      	lsls	r3, r0, #31
   d647c:	d409      	bmi.n	d6492 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d647e:	4620      	mov	r0, r4
   d6480:	f7ff ffa0 	bl	d63c4 <pinAvailable>
   d6484:	b128      	cbz	r0, d6492 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6486:	4629      	mov	r1, r5
   d6488:	4620      	mov	r0, r4
}
   d648a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d648e:	f7fe bcf5 	b.w	d4e7c <HAL_GPIO_Write>
}
   d6492:	bd38      	pop	{r3, r4, r5, pc}

000d6494 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6494:	280d      	cmp	r0, #13
{
   d6496:	b510      	push	{r4, lr}
   d6498:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d649a:	bf9c      	itt	ls
   d649c:	340e      	addls	r4, #14
   d649e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d64a0:	4620      	mov	r0, r4
   d64a2:	f7ff ff8f 	bl	d63c4 <pinAvailable>
   d64a6:	b150      	cbz	r0, d64be <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d64a8:	2103      	movs	r1, #3
   d64aa:	4620      	mov	r0, r4
   d64ac:	f7fe fcce 	bl	d4e4c <HAL_Validate_Pin_Function>
   d64b0:	2803      	cmp	r0, #3
   d64b2:	d104      	bne.n	d64be <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d64b4:	4620      	mov	r0, r4
}
   d64b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d64ba:	f7fe bcf7 	b.w	d4eac <hal_adc_read>
}
   d64be:	2000      	movs	r0, #0
   d64c0:	bd10      	pop	{r4, pc}

000d64c2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64c2:	4770      	bx	lr

000d64c4 <_Z17acquireWireBufferv>:
{
   d64c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d64c6:	2300      	movs	r3, #0
   d64c8:	2520      	movs	r5, #32
   d64ca:	8043      	strh	r3, [r0, #2]
   d64cc:	2314      	movs	r3, #20
{
   d64ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d64d0:	8003      	strh	r3, [r0, #0]
   d64d2:	6085      	str	r5, [r0, #8]
   d64d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64d6:	4906      	ldr	r1, [pc, #24]	; (d64f0 <_Z17acquireWireBufferv+0x2c>)
   d64d8:	4628      	mov	r0, r5
   d64da:	f000 f833 	bl	d6544 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64de:	4904      	ldr	r1, [pc, #16]	; (d64f0 <_Z17acquireWireBufferv+0x2c>)
	};
   d64e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d64e2:	4628      	mov	r0, r5
   d64e4:	f000 f82e 	bl	d6544 <_ZnajRKSt9nothrow_t>
	};
   d64e8:	60e0      	str	r0, [r4, #12]
}
   d64ea:	4620      	mov	r0, r4
   d64ec:	bd38      	pop	{r3, r4, r5, pc}
   d64ee:	bf00      	nop
   d64f0:	000d72a0 	.word	0x000d72a0

000d64f4 <_Z19__fetch_global_Wirev>:
{
   d64f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d64f6:	4d0e      	ldr	r5, [pc, #56]	; (d6530 <_Z19__fetch_global_Wirev+0x3c>)
   d64f8:	7829      	ldrb	r1, [r5, #0]
   d64fa:	f3bf 8f5b 	dmb	ish
   d64fe:	f011 0401 	ands.w	r4, r1, #1
{
   d6502:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6504:	d111      	bne.n	d652a <_Z19__fetch_global_Wirev+0x36>
   d6506:	4628      	mov	r0, r5
   d6508:	f7fd fdcd 	bl	d40a6 <__cxa_guard_acquire>
   d650c:	b168      	cbz	r0, d652a <_Z19__fetch_global_Wirev+0x36>
   d650e:	a801      	add	r0, sp, #4
   d6510:	f7ff ffd8 	bl	d64c4 <_Z17acquireWireBufferv>
   d6514:	aa01      	add	r2, sp, #4
   d6516:	4621      	mov	r1, r4
   d6518:	4806      	ldr	r0, [pc, #24]	; (d6534 <_Z19__fetch_global_Wirev+0x40>)
   d651a:	f7ff fbb5 	bl	d5c88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d651e:	4628      	mov	r0, r5
   d6520:	f7fd fdc6 	bl	d40b0 <__cxa_guard_release>
   d6524:	4804      	ldr	r0, [pc, #16]	; (d6538 <_Z19__fetch_global_Wirev+0x44>)
   d6526:	f000 fc05 	bl	d6d34 <atexit>
	return wire;
}
   d652a:	4802      	ldr	r0, [pc, #8]	; (d6534 <_Z19__fetch_global_Wirev+0x40>)
   d652c:	b007      	add	sp, #28
   d652e:	bd30      	pop	{r4, r5, pc}
   d6530:	2003e73c 	.word	0x2003e73c
   d6534:	2003e740 	.word	0x2003e740
   d6538:	000d64c3 	.word	0x000d64c3

000d653c <_ZdlPvj>:
   d653c:	f7fd bdaf 	b.w	d409e <_ZdlPv>

000d6540 <_ZnwjRKSt9nothrow_t>:
   d6540:	f7fd bda9 	b.w	d4096 <_Znwj>

000d6544 <_ZnajRKSt9nothrow_t>:
   d6544:	f7fd bda9 	b.w	d409a <_Znaj>

000d6548 <__aeabi_drsub>:
   d6548:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d654c:	e002      	b.n	d6554 <__adddf3>
   d654e:	bf00      	nop

000d6550 <__aeabi_dsub>:
   d6550:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6554 <__adddf3>:
   d6554:	b530      	push	{r4, r5, lr}
   d6556:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d655a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d655e:	ea94 0f05 	teq	r4, r5
   d6562:	bf08      	it	eq
   d6564:	ea90 0f02 	teqeq	r0, r2
   d6568:	bf1f      	itttt	ne
   d656a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d656e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6572:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6576:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d657a:	f000 80e2 	beq.w	d6742 <__adddf3+0x1ee>
   d657e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6582:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6586:	bfb8      	it	lt
   d6588:	426d      	neglt	r5, r5
   d658a:	dd0c      	ble.n	d65a6 <__adddf3+0x52>
   d658c:	442c      	add	r4, r5
   d658e:	ea80 0202 	eor.w	r2, r0, r2
   d6592:	ea81 0303 	eor.w	r3, r1, r3
   d6596:	ea82 0000 	eor.w	r0, r2, r0
   d659a:	ea83 0101 	eor.w	r1, r3, r1
   d659e:	ea80 0202 	eor.w	r2, r0, r2
   d65a2:	ea81 0303 	eor.w	r3, r1, r3
   d65a6:	2d36      	cmp	r5, #54	; 0x36
   d65a8:	bf88      	it	hi
   d65aa:	bd30      	pophi	{r4, r5, pc}
   d65ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d65b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d65bc:	d002      	beq.n	d65c4 <__adddf3+0x70>
   d65be:	4240      	negs	r0, r0
   d65c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d65c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d65c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d65d0:	d002      	beq.n	d65d8 <__adddf3+0x84>
   d65d2:	4252      	negs	r2, r2
   d65d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d65d8:	ea94 0f05 	teq	r4, r5
   d65dc:	f000 80a7 	beq.w	d672e <__adddf3+0x1da>
   d65e0:	f1a4 0401 	sub.w	r4, r4, #1
   d65e4:	f1d5 0e20 	rsbs	lr, r5, #32
   d65e8:	db0d      	blt.n	d6606 <__adddf3+0xb2>
   d65ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65ee:	fa22 f205 	lsr.w	r2, r2, r5
   d65f2:	1880      	adds	r0, r0, r2
   d65f4:	f141 0100 	adc.w	r1, r1, #0
   d65f8:	fa03 f20e 	lsl.w	r2, r3, lr
   d65fc:	1880      	adds	r0, r0, r2
   d65fe:	fa43 f305 	asr.w	r3, r3, r5
   d6602:	4159      	adcs	r1, r3
   d6604:	e00e      	b.n	d6624 <__adddf3+0xd0>
   d6606:	f1a5 0520 	sub.w	r5, r5, #32
   d660a:	f10e 0e20 	add.w	lr, lr, #32
   d660e:	2a01      	cmp	r2, #1
   d6610:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6614:	bf28      	it	cs
   d6616:	f04c 0c02 	orrcs.w	ip, ip, #2
   d661a:	fa43 f305 	asr.w	r3, r3, r5
   d661e:	18c0      	adds	r0, r0, r3
   d6620:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6628:	d507      	bpl.n	d663a <__adddf3+0xe6>
   d662a:	f04f 0e00 	mov.w	lr, #0
   d662e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6632:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6636:	eb6e 0101 	sbc.w	r1, lr, r1
   d663a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d663e:	d31b      	bcc.n	d6678 <__adddf3+0x124>
   d6640:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6644:	d30c      	bcc.n	d6660 <__adddf3+0x10c>
   d6646:	0849      	lsrs	r1, r1, #1
   d6648:	ea5f 0030 	movs.w	r0, r0, rrx
   d664c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6650:	f104 0401 	add.w	r4, r4, #1
   d6654:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6658:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d665c:	f080 809a 	bcs.w	d6794 <__adddf3+0x240>
   d6660:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6664:	bf08      	it	eq
   d6666:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d666a:	f150 0000 	adcs.w	r0, r0, #0
   d666e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6672:	ea41 0105 	orr.w	r1, r1, r5
   d6676:	bd30      	pop	{r4, r5, pc}
   d6678:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d667c:	4140      	adcs	r0, r0
   d667e:	eb41 0101 	adc.w	r1, r1, r1
   d6682:	3c01      	subs	r4, #1
   d6684:	bf28      	it	cs
   d6686:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d668a:	d2e9      	bcs.n	d6660 <__adddf3+0x10c>
   d668c:	f091 0f00 	teq	r1, #0
   d6690:	bf04      	itt	eq
   d6692:	4601      	moveq	r1, r0
   d6694:	2000      	moveq	r0, #0
   d6696:	fab1 f381 	clz	r3, r1
   d669a:	bf08      	it	eq
   d669c:	3320      	addeq	r3, #32
   d669e:	f1a3 030b 	sub.w	r3, r3, #11
   d66a2:	f1b3 0220 	subs.w	r2, r3, #32
   d66a6:	da0c      	bge.n	d66c2 <__adddf3+0x16e>
   d66a8:	320c      	adds	r2, #12
   d66aa:	dd08      	ble.n	d66be <__adddf3+0x16a>
   d66ac:	f102 0c14 	add.w	ip, r2, #20
   d66b0:	f1c2 020c 	rsb	r2, r2, #12
   d66b4:	fa01 f00c 	lsl.w	r0, r1, ip
   d66b8:	fa21 f102 	lsr.w	r1, r1, r2
   d66bc:	e00c      	b.n	d66d8 <__adddf3+0x184>
   d66be:	f102 0214 	add.w	r2, r2, #20
   d66c2:	bfd8      	it	le
   d66c4:	f1c2 0c20 	rsble	ip, r2, #32
   d66c8:	fa01 f102 	lsl.w	r1, r1, r2
   d66cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d66d0:	bfdc      	itt	le
   d66d2:	ea41 010c 	orrle.w	r1, r1, ip
   d66d6:	4090      	lslle	r0, r2
   d66d8:	1ae4      	subs	r4, r4, r3
   d66da:	bfa2      	ittt	ge
   d66dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66e0:	4329      	orrge	r1, r5
   d66e2:	bd30      	popge	{r4, r5, pc}
   d66e4:	ea6f 0404 	mvn.w	r4, r4
   d66e8:	3c1f      	subs	r4, #31
   d66ea:	da1c      	bge.n	d6726 <__adddf3+0x1d2>
   d66ec:	340c      	adds	r4, #12
   d66ee:	dc0e      	bgt.n	d670e <__adddf3+0x1ba>
   d66f0:	f104 0414 	add.w	r4, r4, #20
   d66f4:	f1c4 0220 	rsb	r2, r4, #32
   d66f8:	fa20 f004 	lsr.w	r0, r0, r4
   d66fc:	fa01 f302 	lsl.w	r3, r1, r2
   d6700:	ea40 0003 	orr.w	r0, r0, r3
   d6704:	fa21 f304 	lsr.w	r3, r1, r4
   d6708:	ea45 0103 	orr.w	r1, r5, r3
   d670c:	bd30      	pop	{r4, r5, pc}
   d670e:	f1c4 040c 	rsb	r4, r4, #12
   d6712:	f1c4 0220 	rsb	r2, r4, #32
   d6716:	fa20 f002 	lsr.w	r0, r0, r2
   d671a:	fa01 f304 	lsl.w	r3, r1, r4
   d671e:	ea40 0003 	orr.w	r0, r0, r3
   d6722:	4629      	mov	r1, r5
   d6724:	bd30      	pop	{r4, r5, pc}
   d6726:	fa21 f004 	lsr.w	r0, r1, r4
   d672a:	4629      	mov	r1, r5
   d672c:	bd30      	pop	{r4, r5, pc}
   d672e:	f094 0f00 	teq	r4, #0
   d6732:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6736:	bf06      	itte	eq
   d6738:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d673c:	3401      	addeq	r4, #1
   d673e:	3d01      	subne	r5, #1
   d6740:	e74e      	b.n	d65e0 <__adddf3+0x8c>
   d6742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6746:	bf18      	it	ne
   d6748:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d674c:	d029      	beq.n	d67a2 <__adddf3+0x24e>
   d674e:	ea94 0f05 	teq	r4, r5
   d6752:	bf08      	it	eq
   d6754:	ea90 0f02 	teqeq	r0, r2
   d6758:	d005      	beq.n	d6766 <__adddf3+0x212>
   d675a:	ea54 0c00 	orrs.w	ip, r4, r0
   d675e:	bf04      	itt	eq
   d6760:	4619      	moveq	r1, r3
   d6762:	4610      	moveq	r0, r2
   d6764:	bd30      	pop	{r4, r5, pc}
   d6766:	ea91 0f03 	teq	r1, r3
   d676a:	bf1e      	ittt	ne
   d676c:	2100      	movne	r1, #0
   d676e:	2000      	movne	r0, #0
   d6770:	bd30      	popne	{r4, r5, pc}
   d6772:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6776:	d105      	bne.n	d6784 <__adddf3+0x230>
   d6778:	0040      	lsls	r0, r0, #1
   d677a:	4149      	adcs	r1, r1
   d677c:	bf28      	it	cs
   d677e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6782:	bd30      	pop	{r4, r5, pc}
   d6784:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6788:	bf3c      	itt	cc
   d678a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d678e:	bd30      	popcc	{r4, r5, pc}
   d6790:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6794:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d679c:	f04f 0000 	mov.w	r0, #0
   d67a0:	bd30      	pop	{r4, r5, pc}
   d67a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67a6:	bf1a      	itte	ne
   d67a8:	4619      	movne	r1, r3
   d67aa:	4610      	movne	r0, r2
   d67ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d67b0:	bf1c      	itt	ne
   d67b2:	460b      	movne	r3, r1
   d67b4:	4602      	movne	r2, r0
   d67b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d67ba:	bf06      	itte	eq
   d67bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d67c0:	ea91 0f03 	teqeq	r1, r3
   d67c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d67c8:	bd30      	pop	{r4, r5, pc}
   d67ca:	bf00      	nop

000d67cc <__aeabi_ui2d>:
   d67cc:	f090 0f00 	teq	r0, #0
   d67d0:	bf04      	itt	eq
   d67d2:	2100      	moveq	r1, #0
   d67d4:	4770      	bxeq	lr
   d67d6:	b530      	push	{r4, r5, lr}
   d67d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67e0:	f04f 0500 	mov.w	r5, #0
   d67e4:	f04f 0100 	mov.w	r1, #0
   d67e8:	e750      	b.n	d668c <__adddf3+0x138>
   d67ea:	bf00      	nop

000d67ec <__aeabi_i2d>:
   d67ec:	f090 0f00 	teq	r0, #0
   d67f0:	bf04      	itt	eq
   d67f2:	2100      	moveq	r1, #0
   d67f4:	4770      	bxeq	lr
   d67f6:	b530      	push	{r4, r5, lr}
   d67f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6800:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6804:	bf48      	it	mi
   d6806:	4240      	negmi	r0, r0
   d6808:	f04f 0100 	mov.w	r1, #0
   d680c:	e73e      	b.n	d668c <__adddf3+0x138>
   d680e:	bf00      	nop

000d6810 <__aeabi_f2d>:
   d6810:	0042      	lsls	r2, r0, #1
   d6812:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6816:	ea4f 0131 	mov.w	r1, r1, rrx
   d681a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d681e:	bf1f      	itttt	ne
   d6820:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6824:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6828:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d682c:	4770      	bxne	lr
   d682e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6832:	bf08      	it	eq
   d6834:	4770      	bxeq	lr
   d6836:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d683a:	bf04      	itt	eq
   d683c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6840:	4770      	bxeq	lr
   d6842:	b530      	push	{r4, r5, lr}
   d6844:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d684c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6850:	e71c      	b.n	d668c <__adddf3+0x138>
   d6852:	bf00      	nop

000d6854 <__aeabi_ul2d>:
   d6854:	ea50 0201 	orrs.w	r2, r0, r1
   d6858:	bf08      	it	eq
   d685a:	4770      	bxeq	lr
   d685c:	b530      	push	{r4, r5, lr}
   d685e:	f04f 0500 	mov.w	r5, #0
   d6862:	e00a      	b.n	d687a <__aeabi_l2d+0x16>

000d6864 <__aeabi_l2d>:
   d6864:	ea50 0201 	orrs.w	r2, r0, r1
   d6868:	bf08      	it	eq
   d686a:	4770      	bxeq	lr
   d686c:	b530      	push	{r4, r5, lr}
   d686e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6872:	d502      	bpl.n	d687a <__aeabi_l2d+0x16>
   d6874:	4240      	negs	r0, r0
   d6876:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d687a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d687e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6882:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6886:	f43f aed8 	beq.w	d663a <__adddf3+0xe6>
   d688a:	f04f 0203 	mov.w	r2, #3
   d688e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6892:	bf18      	it	ne
   d6894:	3203      	addne	r2, #3
   d6896:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d689a:	bf18      	it	ne
   d689c:	3203      	addne	r2, #3
   d689e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d68a2:	f1c2 0320 	rsb	r3, r2, #32
   d68a6:	fa00 fc03 	lsl.w	ip, r0, r3
   d68aa:	fa20 f002 	lsr.w	r0, r0, r2
   d68ae:	fa01 fe03 	lsl.w	lr, r1, r3
   d68b2:	ea40 000e 	orr.w	r0, r0, lr
   d68b6:	fa21 f102 	lsr.w	r1, r1, r2
   d68ba:	4414      	add	r4, r2
   d68bc:	e6bd      	b.n	d663a <__adddf3+0xe6>
   d68be:	bf00      	nop

000d68c0 <__aeabi_dmul>:
   d68c0:	b570      	push	{r4, r5, r6, lr}
   d68c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68ce:	bf1d      	ittte	ne
   d68d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68d4:	ea94 0f0c 	teqne	r4, ip
   d68d8:	ea95 0f0c 	teqne	r5, ip
   d68dc:	f000 f8de 	bleq	d6a9c <__aeabi_dmul+0x1dc>
   d68e0:	442c      	add	r4, r5
   d68e2:	ea81 0603 	eor.w	r6, r1, r3
   d68e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d68ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d68ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d68f2:	bf18      	it	ne
   d68f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d68f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6900:	d038      	beq.n	d6974 <__aeabi_dmul+0xb4>
   d6902:	fba0 ce02 	umull	ip, lr, r0, r2
   d6906:	f04f 0500 	mov.w	r5, #0
   d690a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d690e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6912:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6916:	f04f 0600 	mov.w	r6, #0
   d691a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d691e:	f09c 0f00 	teq	ip, #0
   d6922:	bf18      	it	ne
   d6924:	f04e 0e01 	orrne.w	lr, lr, #1
   d6928:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d692c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6930:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6934:	d204      	bcs.n	d6940 <__aeabi_dmul+0x80>
   d6936:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d693a:	416d      	adcs	r5, r5
   d693c:	eb46 0606 	adc.w	r6, r6, r6
   d6940:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6944:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6948:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d694c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6950:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6954:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6958:	bf88      	it	hi
   d695a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d695e:	d81e      	bhi.n	d699e <__aeabi_dmul+0xde>
   d6960:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6964:	bf08      	it	eq
   d6966:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d696a:	f150 0000 	adcs.w	r0, r0, #0
   d696e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6972:	bd70      	pop	{r4, r5, r6, pc}
   d6974:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6978:	ea46 0101 	orr.w	r1, r6, r1
   d697c:	ea40 0002 	orr.w	r0, r0, r2
   d6980:	ea81 0103 	eor.w	r1, r1, r3
   d6984:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6988:	bfc2      	ittt	gt
   d698a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d698e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6992:	bd70      	popgt	{r4, r5, r6, pc}
   d6994:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6998:	f04f 0e00 	mov.w	lr, #0
   d699c:	3c01      	subs	r4, #1
   d699e:	f300 80ab 	bgt.w	d6af8 <__aeabi_dmul+0x238>
   d69a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d69a6:	bfde      	ittt	le
   d69a8:	2000      	movle	r0, #0
   d69aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d69ae:	bd70      	pople	{r4, r5, r6, pc}
   d69b0:	f1c4 0400 	rsb	r4, r4, #0
   d69b4:	3c20      	subs	r4, #32
   d69b6:	da35      	bge.n	d6a24 <__aeabi_dmul+0x164>
   d69b8:	340c      	adds	r4, #12
   d69ba:	dc1b      	bgt.n	d69f4 <__aeabi_dmul+0x134>
   d69bc:	f104 0414 	add.w	r4, r4, #20
   d69c0:	f1c4 0520 	rsb	r5, r4, #32
   d69c4:	fa00 f305 	lsl.w	r3, r0, r5
   d69c8:	fa20 f004 	lsr.w	r0, r0, r4
   d69cc:	fa01 f205 	lsl.w	r2, r1, r5
   d69d0:	ea40 0002 	orr.w	r0, r0, r2
   d69d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d69d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d69e0:	fa21 f604 	lsr.w	r6, r1, r4
   d69e4:	eb42 0106 	adc.w	r1, r2, r6
   d69e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69ec:	bf08      	it	eq
   d69ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69f2:	bd70      	pop	{r4, r5, r6, pc}
   d69f4:	f1c4 040c 	rsb	r4, r4, #12
   d69f8:	f1c4 0520 	rsb	r5, r4, #32
   d69fc:	fa00 f304 	lsl.w	r3, r0, r4
   d6a00:	fa20 f005 	lsr.w	r0, r0, r5
   d6a04:	fa01 f204 	lsl.w	r2, r1, r4
   d6a08:	ea40 0002 	orr.w	r0, r0, r2
   d6a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6a14:	f141 0100 	adc.w	r1, r1, #0
   d6a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a1c:	bf08      	it	eq
   d6a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a22:	bd70      	pop	{r4, r5, r6, pc}
   d6a24:	f1c4 0520 	rsb	r5, r4, #32
   d6a28:	fa00 f205 	lsl.w	r2, r0, r5
   d6a2c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6a30:	fa20 f304 	lsr.w	r3, r0, r4
   d6a34:	fa01 f205 	lsl.w	r2, r1, r5
   d6a38:	ea43 0302 	orr.w	r3, r3, r2
   d6a3c:	fa21 f004 	lsr.w	r0, r1, r4
   d6a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a44:	fa21 f204 	lsr.w	r2, r1, r4
   d6a48:	ea20 0002 	bic.w	r0, r0, r2
   d6a4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6a50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6a54:	bf08      	it	eq
   d6a56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6a5a:	bd70      	pop	{r4, r5, r6, pc}
   d6a5c:	f094 0f00 	teq	r4, #0
   d6a60:	d10f      	bne.n	d6a82 <__aeabi_dmul+0x1c2>
   d6a62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6a66:	0040      	lsls	r0, r0, #1
   d6a68:	eb41 0101 	adc.w	r1, r1, r1
   d6a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a70:	bf08      	it	eq
   d6a72:	3c01      	subeq	r4, #1
   d6a74:	d0f7      	beq.n	d6a66 <__aeabi_dmul+0x1a6>
   d6a76:	ea41 0106 	orr.w	r1, r1, r6
   d6a7a:	f095 0f00 	teq	r5, #0
   d6a7e:	bf18      	it	ne
   d6a80:	4770      	bxne	lr
   d6a82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a86:	0052      	lsls	r2, r2, #1
   d6a88:	eb43 0303 	adc.w	r3, r3, r3
   d6a8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a90:	bf08      	it	eq
   d6a92:	3d01      	subeq	r5, #1
   d6a94:	d0f7      	beq.n	d6a86 <__aeabi_dmul+0x1c6>
   d6a96:	ea43 0306 	orr.w	r3, r3, r6
   d6a9a:	4770      	bx	lr
   d6a9c:	ea94 0f0c 	teq	r4, ip
   d6aa0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6aa4:	bf18      	it	ne
   d6aa6:	ea95 0f0c 	teqne	r5, ip
   d6aaa:	d00c      	beq.n	d6ac6 <__aeabi_dmul+0x206>
   d6aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ab0:	bf18      	it	ne
   d6ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ab6:	d1d1      	bne.n	d6a5c <__aeabi_dmul+0x19c>
   d6ab8:	ea81 0103 	eor.w	r1, r1, r3
   d6abc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ac0:	f04f 0000 	mov.w	r0, #0
   d6ac4:	bd70      	pop	{r4, r5, r6, pc}
   d6ac6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6aca:	bf06      	itte	eq
   d6acc:	4610      	moveq	r0, r2
   d6ace:	4619      	moveq	r1, r3
   d6ad0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ad4:	d019      	beq.n	d6b0a <__aeabi_dmul+0x24a>
   d6ad6:	ea94 0f0c 	teq	r4, ip
   d6ada:	d102      	bne.n	d6ae2 <__aeabi_dmul+0x222>
   d6adc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6ae0:	d113      	bne.n	d6b0a <__aeabi_dmul+0x24a>
   d6ae2:	ea95 0f0c 	teq	r5, ip
   d6ae6:	d105      	bne.n	d6af4 <__aeabi_dmul+0x234>
   d6ae8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6aec:	bf1c      	itt	ne
   d6aee:	4610      	movne	r0, r2
   d6af0:	4619      	movne	r1, r3
   d6af2:	d10a      	bne.n	d6b0a <__aeabi_dmul+0x24a>
   d6af4:	ea81 0103 	eor.w	r1, r1, r3
   d6af8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6afc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b04:	f04f 0000 	mov.w	r0, #0
   d6b08:	bd70      	pop	{r4, r5, r6, pc}
   d6b0a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6b0e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6b12:	bd70      	pop	{r4, r5, r6, pc}

000d6b14 <__aeabi_ddiv>:
   d6b14:	b570      	push	{r4, r5, r6, lr}
   d6b16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b22:	bf1d      	ittte	ne
   d6b24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b28:	ea94 0f0c 	teqne	r4, ip
   d6b2c:	ea95 0f0c 	teqne	r5, ip
   d6b30:	f000 f8a7 	bleq	d6c82 <__aeabi_ddiv+0x16e>
   d6b34:	eba4 0405 	sub.w	r4, r4, r5
   d6b38:	ea81 0e03 	eor.w	lr, r1, r3
   d6b3c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b44:	f000 8088 	beq.w	d6c58 <__aeabi_ddiv+0x144>
   d6b48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6b50:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6b54:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6b58:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6b5c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6b60:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6b64:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6b68:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6b6c:	429d      	cmp	r5, r3
   d6b6e:	bf08      	it	eq
   d6b70:	4296      	cmpeq	r6, r2
   d6b72:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6b76:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b7a:	d202      	bcs.n	d6b82 <__aeabi_ddiv+0x6e>
   d6b7c:	085b      	lsrs	r3, r3, #1
   d6b7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b82:	1ab6      	subs	r6, r6, r2
   d6b84:	eb65 0503 	sbc.w	r5, r5, r3
   d6b88:	085b      	lsrs	r3, r3, #1
   d6b8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b92:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b96:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b9e:	bf22      	ittt	cs
   d6ba0:	1ab6      	subcs	r6, r6, r2
   d6ba2:	4675      	movcs	r5, lr
   d6ba4:	ea40 000c 	orrcs.w	r0, r0, ip
   d6ba8:	085b      	lsrs	r3, r3, #1
   d6baa:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bae:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bb6:	bf22      	ittt	cs
   d6bb8:	1ab6      	subcs	r6, r6, r2
   d6bba:	4675      	movcs	r5, lr
   d6bbc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6bc0:	085b      	lsrs	r3, r3, #1
   d6bc2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bc6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6bca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6bce:	bf22      	ittt	cs
   d6bd0:	1ab6      	subcs	r6, r6, r2
   d6bd2:	4675      	movcs	r5, lr
   d6bd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6bd8:	085b      	lsrs	r3, r3, #1
   d6bda:	ea4f 0232 	mov.w	r2, r2, rrx
   d6bde:	ebb6 0e02 	subs.w	lr, r6, r2
   d6be2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6be6:	bf22      	ittt	cs
   d6be8:	1ab6      	subcs	r6, r6, r2
   d6bea:	4675      	movcs	r5, lr
   d6bec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6bf0:	ea55 0e06 	orrs.w	lr, r5, r6
   d6bf4:	d018      	beq.n	d6c28 <__aeabi_ddiv+0x114>
   d6bf6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6bfa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6bfe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6c02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6c06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6c0a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6c0e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6c12:	d1c0      	bne.n	d6b96 <__aeabi_ddiv+0x82>
   d6c14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c18:	d10b      	bne.n	d6c32 <__aeabi_ddiv+0x11e>
   d6c1a:	ea41 0100 	orr.w	r1, r1, r0
   d6c1e:	f04f 0000 	mov.w	r0, #0
   d6c22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6c26:	e7b6      	b.n	d6b96 <__aeabi_ddiv+0x82>
   d6c28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c2c:	bf04      	itt	eq
   d6c2e:	4301      	orreq	r1, r0
   d6c30:	2000      	moveq	r0, #0
   d6c32:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6c36:	bf88      	it	hi
   d6c38:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6c3c:	f63f aeaf 	bhi.w	d699e <__aeabi_dmul+0xde>
   d6c40:	ebb5 0c03 	subs.w	ip, r5, r3
   d6c44:	bf04      	itt	eq
   d6c46:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6c4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c4e:	f150 0000 	adcs.w	r0, r0, #0
   d6c52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c56:	bd70      	pop	{r4, r5, r6, pc}
   d6c58:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6c5c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6c60:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6c64:	bfc2      	ittt	gt
   d6c66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c6e:	bd70      	popgt	{r4, r5, r6, pc}
   d6c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c74:	f04f 0e00 	mov.w	lr, #0
   d6c78:	3c01      	subs	r4, #1
   d6c7a:	e690      	b.n	d699e <__aeabi_dmul+0xde>
   d6c7c:	ea45 0e06 	orr.w	lr, r5, r6
   d6c80:	e68d      	b.n	d699e <__aeabi_dmul+0xde>
   d6c82:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c86:	ea94 0f0c 	teq	r4, ip
   d6c8a:	bf08      	it	eq
   d6c8c:	ea95 0f0c 	teqeq	r5, ip
   d6c90:	f43f af3b 	beq.w	d6b0a <__aeabi_dmul+0x24a>
   d6c94:	ea94 0f0c 	teq	r4, ip
   d6c98:	d10a      	bne.n	d6cb0 <__aeabi_ddiv+0x19c>
   d6c9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c9e:	f47f af34 	bne.w	d6b0a <__aeabi_dmul+0x24a>
   d6ca2:	ea95 0f0c 	teq	r5, ip
   d6ca6:	f47f af25 	bne.w	d6af4 <__aeabi_dmul+0x234>
   d6caa:	4610      	mov	r0, r2
   d6cac:	4619      	mov	r1, r3
   d6cae:	e72c      	b.n	d6b0a <__aeabi_dmul+0x24a>
   d6cb0:	ea95 0f0c 	teq	r5, ip
   d6cb4:	d106      	bne.n	d6cc4 <__aeabi_ddiv+0x1b0>
   d6cb6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cba:	f43f aefd 	beq.w	d6ab8 <__aeabi_dmul+0x1f8>
   d6cbe:	4610      	mov	r0, r2
   d6cc0:	4619      	mov	r1, r3
   d6cc2:	e722      	b.n	d6b0a <__aeabi_dmul+0x24a>
   d6cc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cc8:	bf18      	it	ne
   d6cca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cce:	f47f aec5 	bne.w	d6a5c <__aeabi_dmul+0x19c>
   d6cd2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6cd6:	f47f af0d 	bne.w	d6af4 <__aeabi_dmul+0x234>
   d6cda:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6cde:	f47f aeeb 	bne.w	d6ab8 <__aeabi_dmul+0x1f8>
   d6ce2:	e712      	b.n	d6b0a <__aeabi_dmul+0x24a>

000d6ce4 <__aeabi_d2iz>:
   d6ce4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6ce8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6cec:	d215      	bcs.n	d6d1a <__aeabi_d2iz+0x36>
   d6cee:	d511      	bpl.n	d6d14 <__aeabi_d2iz+0x30>
   d6cf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6cf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6cf8:	d912      	bls.n	d6d20 <__aeabi_d2iz+0x3c>
   d6cfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6d02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6d0a:	fa23 f002 	lsr.w	r0, r3, r2
   d6d0e:	bf18      	it	ne
   d6d10:	4240      	negne	r0, r0
   d6d12:	4770      	bx	lr
   d6d14:	f04f 0000 	mov.w	r0, #0
   d6d18:	4770      	bx	lr
   d6d1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6d1e:	d105      	bne.n	d6d2c <__aeabi_d2iz+0x48>
   d6d20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6d24:	bf08      	it	eq
   d6d26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6d2a:	4770      	bx	lr
   d6d2c:	f04f 0000 	mov.w	r0, #0
   d6d30:	4770      	bx	lr
   d6d32:	bf00      	nop

000d6d34 <atexit>:
   d6d34:	2300      	movs	r3, #0
   d6d36:	4601      	mov	r1, r0
   d6d38:	461a      	mov	r2, r3
   d6d3a:	4618      	mov	r0, r3
   d6d3c:	f000 b8f2 	b.w	d6f24 <__register_exitproc>

000d6d40 <memcpy>:
   d6d40:	440a      	add	r2, r1
   d6d42:	4291      	cmp	r1, r2
   d6d44:	f100 33ff 	add.w	r3, r0, #4294967295
   d6d48:	d100      	bne.n	d6d4c <memcpy+0xc>
   d6d4a:	4770      	bx	lr
   d6d4c:	b510      	push	{r4, lr}
   d6d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6d52:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6d56:	4291      	cmp	r1, r2
   d6d58:	d1f9      	bne.n	d6d4e <memcpy+0xe>
   d6d5a:	bd10      	pop	{r4, pc}

000d6d5c <memmove>:
   d6d5c:	4288      	cmp	r0, r1
   d6d5e:	b510      	push	{r4, lr}
   d6d60:	eb01 0402 	add.w	r4, r1, r2
   d6d64:	d902      	bls.n	d6d6c <memmove+0x10>
   d6d66:	4284      	cmp	r4, r0
   d6d68:	4623      	mov	r3, r4
   d6d6a:	d807      	bhi.n	d6d7c <memmove+0x20>
   d6d6c:	1e43      	subs	r3, r0, #1
   d6d6e:	42a1      	cmp	r1, r4
   d6d70:	d008      	beq.n	d6d84 <memmove+0x28>
   d6d72:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6d76:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6d7a:	e7f8      	b.n	d6d6e <memmove+0x12>
   d6d7c:	4402      	add	r2, r0
   d6d7e:	4601      	mov	r1, r0
   d6d80:	428a      	cmp	r2, r1
   d6d82:	d100      	bne.n	d6d86 <memmove+0x2a>
   d6d84:	bd10      	pop	{r4, pc}
   d6d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6d8e:	e7f7      	b.n	d6d80 <memmove+0x24>

000d6d90 <memset>:
   d6d90:	4402      	add	r2, r0
   d6d92:	4603      	mov	r3, r0
   d6d94:	4293      	cmp	r3, r2
   d6d96:	d100      	bne.n	d6d9a <memset+0xa>
   d6d98:	4770      	bx	lr
   d6d9a:	f803 1b01 	strb.w	r1, [r3], #1
   d6d9e:	e7f9      	b.n	d6d94 <memset+0x4>

000d6da0 <srand>:
   d6da0:	b538      	push	{r3, r4, r5, lr}
   d6da2:	4b0d      	ldr	r3, [pc, #52]	; (d6dd8 <srand+0x38>)
   d6da4:	681d      	ldr	r5, [r3, #0]
   d6da6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6da8:	4604      	mov	r4, r0
   d6daa:	b97b      	cbnz	r3, d6dcc <srand+0x2c>
   d6dac:	2018      	movs	r0, #24
   d6dae:	f7fe fa89 	bl	d52c4 <malloc>
   d6db2:	4a0a      	ldr	r2, [pc, #40]	; (d6ddc <srand+0x3c>)
   d6db4:	4b0a      	ldr	r3, [pc, #40]	; (d6de0 <srand+0x40>)
   d6db6:	63a8      	str	r0, [r5, #56]	; 0x38
   d6db8:	e9c0 2300 	strd	r2, r3, [r0]
   d6dbc:	4b09      	ldr	r3, [pc, #36]	; (d6de4 <srand+0x44>)
   d6dbe:	6083      	str	r3, [r0, #8]
   d6dc0:	230b      	movs	r3, #11
   d6dc2:	8183      	strh	r3, [r0, #12]
   d6dc4:	2201      	movs	r2, #1
   d6dc6:	2300      	movs	r3, #0
   d6dc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6dcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6dce:	2200      	movs	r2, #0
   d6dd0:	611c      	str	r4, [r3, #16]
   d6dd2:	615a      	str	r2, [r3, #20]
   d6dd4:	bd38      	pop	{r3, r4, r5, pc}
   d6dd6:	bf00      	nop
   d6dd8:	2003e4a8 	.word	0x2003e4a8
   d6ddc:	abcd330e 	.word	0xabcd330e
   d6de0:	e66d1234 	.word	0xe66d1234
   d6de4:	0005deec 	.word	0x0005deec

000d6de8 <strcmp>:
   d6de8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6dec:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6df0:	2a01      	cmp	r2, #1
   d6df2:	bf28      	it	cs
   d6df4:	429a      	cmpcs	r2, r3
   d6df6:	d0f7      	beq.n	d6de8 <strcmp>
   d6df8:	1ad0      	subs	r0, r2, r3
   d6dfa:	4770      	bx	lr

000d6dfc <strcpy>:
   d6dfc:	4603      	mov	r3, r0
   d6dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6e02:	f803 2b01 	strb.w	r2, [r3], #1
   d6e06:	2a00      	cmp	r2, #0
   d6e08:	d1f9      	bne.n	d6dfe <strcpy+0x2>
   d6e0a:	4770      	bx	lr

000d6e0c <strlen>:
   d6e0c:	4603      	mov	r3, r0
   d6e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e12:	2a00      	cmp	r2, #0
   d6e14:	d1fb      	bne.n	d6e0e <strlen+0x2>
   d6e16:	1a18      	subs	r0, r3, r0
   d6e18:	3801      	subs	r0, #1
   d6e1a:	4770      	bx	lr

000d6e1c <_strtol_l.isra.0>:
   d6e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e20:	4e3a      	ldr	r6, [pc, #232]	; (d6f0c <_strtol_l.isra.0+0xf0>)
   d6e22:	4686      	mov	lr, r0
   d6e24:	468c      	mov	ip, r1
   d6e26:	4660      	mov	r0, ip
   d6e28:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6e2c:	5da5      	ldrb	r5, [r4, r6]
   d6e2e:	f015 0508 	ands.w	r5, r5, #8
   d6e32:	d1f8      	bne.n	d6e26 <_strtol_l.isra.0+0xa>
   d6e34:	2c2d      	cmp	r4, #45	; 0x2d
   d6e36:	d133      	bne.n	d6ea0 <_strtol_l.isra.0+0x84>
   d6e38:	f89c 4000 	ldrb.w	r4, [ip]
   d6e3c:	f04f 0801 	mov.w	r8, #1
   d6e40:	f100 0c02 	add.w	ip, r0, #2
   d6e44:	2b00      	cmp	r3, #0
   d6e46:	d05c      	beq.n	d6f02 <_strtol_l.isra.0+0xe6>
   d6e48:	2b10      	cmp	r3, #16
   d6e4a:	d10c      	bne.n	d6e66 <_strtol_l.isra.0+0x4a>
   d6e4c:	2c30      	cmp	r4, #48	; 0x30
   d6e4e:	d10a      	bne.n	d6e66 <_strtol_l.isra.0+0x4a>
   d6e50:	f89c 0000 	ldrb.w	r0, [ip]
   d6e54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6e58:	2858      	cmp	r0, #88	; 0x58
   d6e5a:	d14d      	bne.n	d6ef8 <_strtol_l.isra.0+0xdc>
   d6e5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6e60:	2310      	movs	r3, #16
   d6e62:	f10c 0c02 	add.w	ip, ip, #2
   d6e66:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6e6a:	3f01      	subs	r7, #1
   d6e6c:	2600      	movs	r6, #0
   d6e6e:	fbb7 f9f3 	udiv	r9, r7, r3
   d6e72:	4630      	mov	r0, r6
   d6e74:	fb03 7a19 	mls	sl, r3, r9, r7
   d6e78:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6e7c:	2d09      	cmp	r5, #9
   d6e7e:	d818      	bhi.n	d6eb2 <_strtol_l.isra.0+0x96>
   d6e80:	462c      	mov	r4, r5
   d6e82:	42a3      	cmp	r3, r4
   d6e84:	dd24      	ble.n	d6ed0 <_strtol_l.isra.0+0xb4>
   d6e86:	1c75      	adds	r5, r6, #1
   d6e88:	d007      	beq.n	d6e9a <_strtol_l.isra.0+0x7e>
   d6e8a:	4581      	cmp	r9, r0
   d6e8c:	d31d      	bcc.n	d6eca <_strtol_l.isra.0+0xae>
   d6e8e:	d101      	bne.n	d6e94 <_strtol_l.isra.0+0x78>
   d6e90:	45a2      	cmp	sl, r4
   d6e92:	db1a      	blt.n	d6eca <_strtol_l.isra.0+0xae>
   d6e94:	fb00 4003 	mla	r0, r0, r3, r4
   d6e98:	2601      	movs	r6, #1
   d6e9a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6e9e:	e7eb      	b.n	d6e78 <_strtol_l.isra.0+0x5c>
   d6ea0:	2c2b      	cmp	r4, #43	; 0x2b
   d6ea2:	bf08      	it	eq
   d6ea4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6ea8:	46a8      	mov	r8, r5
   d6eaa:	bf08      	it	eq
   d6eac:	f100 0c02 	addeq.w	ip, r0, #2
   d6eb0:	e7c8      	b.n	d6e44 <_strtol_l.isra.0+0x28>
   d6eb2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6eb6:	2d19      	cmp	r5, #25
   d6eb8:	d801      	bhi.n	d6ebe <_strtol_l.isra.0+0xa2>
   d6eba:	3c37      	subs	r4, #55	; 0x37
   d6ebc:	e7e1      	b.n	d6e82 <_strtol_l.isra.0+0x66>
   d6ebe:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6ec2:	2d19      	cmp	r5, #25
   d6ec4:	d804      	bhi.n	d6ed0 <_strtol_l.isra.0+0xb4>
   d6ec6:	3c57      	subs	r4, #87	; 0x57
   d6ec8:	e7db      	b.n	d6e82 <_strtol_l.isra.0+0x66>
   d6eca:	f04f 36ff 	mov.w	r6, #4294967295
   d6ece:	e7e4      	b.n	d6e9a <_strtol_l.isra.0+0x7e>
   d6ed0:	1c73      	adds	r3, r6, #1
   d6ed2:	d106      	bne.n	d6ee2 <_strtol_l.isra.0+0xc6>
   d6ed4:	2322      	movs	r3, #34	; 0x22
   d6ed6:	f8ce 3000 	str.w	r3, [lr]
   d6eda:	4638      	mov	r0, r7
   d6edc:	b942      	cbnz	r2, d6ef0 <_strtol_l.isra.0+0xd4>
   d6ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6ee2:	f1b8 0f00 	cmp.w	r8, #0
   d6ee6:	d000      	beq.n	d6eea <_strtol_l.isra.0+0xce>
   d6ee8:	4240      	negs	r0, r0
   d6eea:	2a00      	cmp	r2, #0
   d6eec:	d0f7      	beq.n	d6ede <_strtol_l.isra.0+0xc2>
   d6eee:	b10e      	cbz	r6, d6ef4 <_strtol_l.isra.0+0xd8>
   d6ef0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d6ef4:	6011      	str	r1, [r2, #0]
   d6ef6:	e7f2      	b.n	d6ede <_strtol_l.isra.0+0xc2>
   d6ef8:	2430      	movs	r4, #48	; 0x30
   d6efa:	2b00      	cmp	r3, #0
   d6efc:	d1b3      	bne.n	d6e66 <_strtol_l.isra.0+0x4a>
   d6efe:	2308      	movs	r3, #8
   d6f00:	e7b1      	b.n	d6e66 <_strtol_l.isra.0+0x4a>
   d6f02:	2c30      	cmp	r4, #48	; 0x30
   d6f04:	d0a4      	beq.n	d6e50 <_strtol_l.isra.0+0x34>
   d6f06:	230a      	movs	r3, #10
   d6f08:	e7ad      	b.n	d6e66 <_strtol_l.isra.0+0x4a>
   d6f0a:	bf00      	nop
   d6f0c:	000d72a2 	.word	0x000d72a2

000d6f10 <strtol>:
   d6f10:	4613      	mov	r3, r2
   d6f12:	460a      	mov	r2, r1
   d6f14:	4601      	mov	r1, r0
   d6f16:	4802      	ldr	r0, [pc, #8]	; (d6f20 <strtol+0x10>)
   d6f18:	6800      	ldr	r0, [r0, #0]
   d6f1a:	f7ff bf7f 	b.w	d6e1c <_strtol_l.isra.0>
   d6f1e:	bf00      	nop
   d6f20:	2003e4a8 	.word	0x2003e4a8

000d6f24 <__register_exitproc>:
   d6f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6f28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d6fe4 <__register_exitproc+0xc0>
   d6f2c:	4606      	mov	r6, r0
   d6f2e:	f8d8 0000 	ldr.w	r0, [r8]
   d6f32:	461f      	mov	r7, r3
   d6f34:	460d      	mov	r5, r1
   d6f36:	4691      	mov	r9, r2
   d6f38:	f000 f856 	bl	d6fe8 <__retarget_lock_acquire_recursive>
   d6f3c:	4b25      	ldr	r3, [pc, #148]	; (d6fd4 <__register_exitproc+0xb0>)
   d6f3e:	681c      	ldr	r4, [r3, #0]
   d6f40:	b934      	cbnz	r4, d6f50 <__register_exitproc+0x2c>
   d6f42:	4c25      	ldr	r4, [pc, #148]	; (d6fd8 <__register_exitproc+0xb4>)
   d6f44:	601c      	str	r4, [r3, #0]
   d6f46:	4b25      	ldr	r3, [pc, #148]	; (d6fdc <__register_exitproc+0xb8>)
   d6f48:	b113      	cbz	r3, d6f50 <__register_exitproc+0x2c>
   d6f4a:	681b      	ldr	r3, [r3, #0]
   d6f4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6f50:	6863      	ldr	r3, [r4, #4]
   d6f52:	2b1f      	cmp	r3, #31
   d6f54:	dd07      	ble.n	d6f66 <__register_exitproc+0x42>
   d6f56:	f8d8 0000 	ldr.w	r0, [r8]
   d6f5a:	f000 f847 	bl	d6fec <__retarget_lock_release_recursive>
   d6f5e:	f04f 30ff 	mov.w	r0, #4294967295
   d6f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6f66:	b34e      	cbz	r6, d6fbc <__register_exitproc+0x98>
   d6f68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6f6c:	b988      	cbnz	r0, d6f92 <__register_exitproc+0x6e>
   d6f6e:	4b1c      	ldr	r3, [pc, #112]	; (d6fe0 <__register_exitproc+0xbc>)
   d6f70:	b923      	cbnz	r3, d6f7c <__register_exitproc+0x58>
   d6f72:	f8d8 0000 	ldr.w	r0, [r8]
   d6f76:	f000 f838 	bl	d6fea <__retarget_lock_release>
   d6f7a:	e7f0      	b.n	d6f5e <__register_exitproc+0x3a>
   d6f7c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6f80:	f7fe f9a0 	bl	d52c4 <malloc>
   d6f84:	2800      	cmp	r0, #0
   d6f86:	d0f4      	beq.n	d6f72 <__register_exitproc+0x4e>
   d6f88:	2300      	movs	r3, #0
   d6f8a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d6f8e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d6f92:	6863      	ldr	r3, [r4, #4]
   d6f94:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6f98:	2201      	movs	r2, #1
   d6f9a:	409a      	lsls	r2, r3
   d6f9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d6fa0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d6fa4:	4313      	orrs	r3, r2
   d6fa6:	2e02      	cmp	r6, #2
   d6fa8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6fac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d6fb0:	bf02      	ittt	eq
   d6fb2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d6fb6:	431a      	orreq	r2, r3
   d6fb8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6fbc:	6863      	ldr	r3, [r4, #4]
   d6fbe:	f8d8 0000 	ldr.w	r0, [r8]
   d6fc2:	1c5a      	adds	r2, r3, #1
   d6fc4:	3302      	adds	r3, #2
   d6fc6:	6062      	str	r2, [r4, #4]
   d6fc8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6fcc:	f000 f80e 	bl	d6fec <__retarget_lock_release_recursive>
   d6fd0:	2000      	movs	r0, #0
   d6fd2:	e7c6      	b.n	d6f62 <__register_exitproc+0x3e>
   d6fd4:	2003e7e0 	.word	0x2003e7e0
   d6fd8:	2003e754 	.word	0x2003e754
   d6fdc:	00000000 	.word	0x00000000
   d6fe0:	000d52c5 	.word	0x000d52c5
   d6fe4:	2003e50c 	.word	0x2003e50c

000d6fe8 <__retarget_lock_acquire_recursive>:
   d6fe8:	4770      	bx	lr

000d6fea <__retarget_lock_release>:
   d6fea:	4770      	bx	lr

000d6fec <__retarget_lock_release_recursive>:
   d6fec:	4770      	bx	lr

000d6fee <link_code_end>:
	...

000d6ff0 <dynalib_user>:
   d6ff0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7000:	0000 0000 7d7b 7b00 7422 3a22 6425 222c     ....{}.{"t":%d,"
   d7010:	2270 253a 2c64 7322 3a22 6425 222c 2268     p":%d,"s":%d,"h"
   d7020:	253a 7d64 6600 6572 7571 6e65 7963 7300     :%d}.frequency.s
   d7030:	616d 7472 696c 6867 0074 656c 0064 6874     martlight.led.th
   d7040:	7265 6f6d 7473 7461 7b00 7422 3a22 6425     ermostat.{"t":%d
   d7050:	222c 696c 6867 2274 253a 2c73 6c22 6465     ,"light":%s,"led
   d7060:	3a22 7325 222c 7463 3a22 6c25 7d64 7b00     ":%s,"ct":%ld}.{
   d7070:	4c22 2230 253a 2c64 4c22 2231 253a 2c64     "L0":%d,"L1":%d,
   d7080:	6222 3a22 6425 222c 2273 253a 2c64 6d22     "b":%d,"s":%d,"m
   d7090:	3a22 6425 222c 224d 253a 7d64 6f00 006e     ":%d,"M":%d}.on.
   d70a0:	7561 6f74 6200 6972 6867 6e74 7365 0073     auto.brightness.
   d70b0:	696d 006e 616d 0078 227b 2274 253a 2c66     min.max.{"t":%f,
   d70c0:	6322 3a22 6625 222c 2268 253a 2c66 6822     "c":%f,"h":%f,"h
   d70d0:	2269 253a 2c66 6422 2270 253a 2c66 6b22     i":%f,"dp":%f,"k
   d70e0:	3a22 6625 007d 6146 6c69 6465 7420 206f     ":%f}.Failed to 
   d70f0:	6572 6461 6620 6f72 206d 4844 2054 6573     read from DHT se
   d7100:	736e 726f 0021 0000                         nsor!...

000d7108 <_ZTVN5spark13EthernetClassE>:
	...
   d7110:	5373 000d 5369 000d 535f 000d 5355 000d     sS..iS.._S..US..
   d7120:	5349 000d 533d 000d 5d69 000d 5d71 000d     IS..=S..i]..q]..
   d7130:	5331 000d 5329 000d 531f 000d 5315 000d     1S..)S...S...S..
   d7140:	5da1 000d 7061 0070 5925 252d 2d6d 6425     .]..app.%Y-%m-%d
   d7150:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d7160:	6d69 0065                                   ime.

000d7164 <_ZTV9IPAddress>:
	...
   d716c:	5959 000d 5949 000d 594b 000d               YY..IY..KY..

000d7178 <_ZTV9USBSerial>:
	...
   d7180:	5a31 000d 5a99 000d 5a6f 000d 55e1 000d     1Z...Z..oZ...U..
   d7190:	5a61 000d 5a33 000d 5a43 000d 5a93 000d     aZ..3Z..CZ...Z..
   d71a0:	5a53 000d 5a2b 000d                         SZ..+Z..

000d71a8 <_ZTV11USARTSerial>:
	...
   d71b0:	5b3d 000d 5bab 000d 5b83 000d 55e1 000d     =[...[...[...U..
   d71c0:	5b53 000d 5b6f 000d 5b61 000d 5b7d 000d     S[..o[..a[..}[..
   d71d0:	5b3f 000d 5b45 000d                         ?[..E[..

000d71d8 <_ZTV7TwoWire>:
	...
   d71e0:	5c31 000d 5c7b 000d 5c53 000d 5c33 000d     1\..{\..S\..3\..
   d71f0:	5c5b 000d 5c63 000d 5c6b 000d 5c73 000d     [\..c\..k\..s\..

000d7200 <_ZTVN5spark9WiFiClassE>:
	...
   d7208:	5d0b 000d 5d01 000d 5cf7 000d 5cad 000d     .]...]...\...\..
   d7218:	5ceb 000d 5cdf 000d 5d69 000d 5d71 000d     .\...\..i]..q]..
   d7228:	5cd3 000d 5ccb 000d 5cc1 000d 5cb7 000d     .\...\...\...\..
   d7238:	5da1 000d                                   .]..

000d723c <_ZTVN5spark12NetworkClassE>:
	...
   d7244:	5d29 000d 5d33 000d 5d3d 000d 5d47 000d     )]..3]..=]..G]..
   d7254:	5d51 000d 5d5d 000d 5d69 000d 5d71 000d     Q]..]]..i]..q]..
   d7264:	5d79 000d 5d85 000d 5d8d 000d 5d97 000d     y]...]...]...]..
   d7274:	5da1 000d 2e30 0030 6166 736c 0065 0000     .]..0.0.false...

000d7284 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d728c:	5eb7 000d 5ebd 000d 5ed3 000d 5ecb 000d     .^...^...^...^..
   d729c:	5eb9 000d                                   .^..

000d72a0 <_ZSt7nothrow>:
	...

000d72a1 <_ctype_>:
   d72a1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d72b1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d72c1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d72d1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d72e1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d72f1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7301:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7311:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7321:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d73a2 <link_const_variable_data_end>:
	...

000d73a4 <link_constructors_location>:
   d73a4:	000d4579 	.word	0x000d4579
   d73a8:	000d4e0d 	.word	0x000d4e0d
   d73ac:	000d537d 	.word	0x000d537d
   d73b0:	000d53a5 	.word	0x000d53a5
   d73b4:	000d55d1 	.word	0x000d55d1
   d73b8:	000d5701 	.word	0x000d5701
   d73bc:	000d5785 	.word	0x000d5785
   d73c0:	000d5805 	.word	0x000d5805
   d73c4:	000d5d15 	.word	0x000d5d15
   d73c8:	000d5e75 	.word	0x000d5e75

000d73cc <link_constructors_end>:
   d73cc:	00000000 	.word	0x00000000
