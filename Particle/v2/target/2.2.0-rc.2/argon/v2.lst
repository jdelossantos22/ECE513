
h:/Documents/Masters/ECE513/Project/ECE513/Particle/v2/target/2.2.0-rc.2/argon/v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005100  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9120  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e474  000d9124  0001e474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e4  2003e4e4  0002e4e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9194  000d9194  00029194  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d91bc  000d91bc  000291bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001930e7  00000000  00000000  000291c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a265  00000000  00000000  001bc2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b9be  00000000  00000000  001d650c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029d0  00000000  00000000  00201eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000075b0  00000000  00000000  0020489a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d1a1  00000000  00000000  0020be4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040875  00000000  00000000  00248feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105cac  00000000  00000000  00289860  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000775c  00000000  00000000  0038f50c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd15 	bl	d8a60 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fd37 	bl	d8ab0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e474 	.word	0x2003e474
   d404c:	000d9124 	.word	0x000d9124
   d4050:	2003e4e4 	.word	0x2003e4e4
   d4054:	2003e4e4 	.word	0x2003e4e4
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fec3 	bl	d5dec <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d90f4 	.word	0x000d90f4
   d4080:	000d911c 	.word	0x000d911c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8fc 	b.w	d4280 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa1f 	bl	d44cc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 be63 	b.w	d5d5c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bb9b 	b.w	d57d0 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bb99 	b.w	d57d0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bb9f 	b.w	d57e0 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bb9d 	b.w	d57e0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CToggleLedC1Ev>:
#include "toggleLed.h"


CToggleLed::CToggleLed() {
   d40b8:	b538      	push	{r3, r4, r5, lr}
   d40ba:	f100 0510 	add.w	r5, r0, #16
   d40be:	4604      	mov	r4, r0
   d40c0:	4904      	ldr	r1, [pc, #16]	; (d40d4 <_ZN10CToggleLedC1Ev+0x1c>)
   d40c2:	4628      	mov	r0, r5
   d40c4:	f001 fc59 	bl	d597a <_ZN6StringC1EPKc>
    statusStr = "{}";
   d40c8:	4903      	ldr	r1, [pc, #12]	; (d40d8 <_ZN10CToggleLedC1Ev+0x20>)
   d40ca:	4628      	mov	r0, r5
   d40cc:	f001 fca8 	bl	d5a20 <_ZN6StringaSEPKc>
}
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	000d8fa7 	.word	0x000d8fa7
   d40d8:	000d8d24 	.word	0x000d8d24

000d40dc <_ZN10CToggleLed15createStatusStrEv>:
    }

    createStatusStr();
}

void CToggleLed::createStatusStr() {
   d40dc:	b510      	push	{r4, lr}
   d40de:	b086      	sub	sp, #24
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40e0:	68c3      	ldr	r3, [r0, #12]
   d40e2:	9301      	str	r3, [sp, #4]
   d40e4:	7803      	ldrb	r3, [r0, #0]
   d40e6:	9300      	str	r3, [sp, #0]
   d40e8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
void CToggleLed::createStatusStr() {
   d40ec:	4604      	mov	r4, r0
    statusStr = String::format("{\"t\":%d,\"p\":%d,\"s\":%d,\"h\":%d}", tick, period, state, hz);
   d40ee:	4907      	ldr	r1, [pc, #28]	; (d410c <_ZN10CToggleLed15createStatusStrEv+0x30>)
   d40f0:	a802      	add	r0, sp, #8
   d40f2:	f001 fcd3 	bl	d5a9c <_ZN6String6formatEPKcz>
   d40f6:	a902      	add	r1, sp, #8
   d40f8:	f104 0010 	add.w	r0, r4, #16
   d40fc:	f001 fc88 	bl	d5a10 <_ZN6StringaSEOS_>
   d4100:	a802      	add	r0, sp, #8
   d4102:	f001 fbef 	bl	d58e4 <_ZN6StringD1Ev>
   d4106:	b006      	add	sp, #24
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000d8d27 	.word	0x000d8d27

000d4110 <_ZN10CToggleLed7executeEv>:
void CToggleLed::execute() {
   d4110:	b538      	push	{r3, r4, r5, lr}
    switch (state) {
   d4112:	7802      	ldrb	r2, [r0, #0]
void CToggleLed::execute() {
   d4114:	4604      	mov	r4, r0
    switch (state) {
   d4116:	b132      	cbz	r2, d4126 <_ZN10CToggleLed7executeEv+0x16>
   d4118:	2a01      	cmp	r2, #1
   d411a:	d012      	beq.n	d4142 <_ZN10CToggleLed7executeEv+0x32>
    createStatusStr();
   d411c:	4620      	mov	r0, r4
}
   d411e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4122:	f7ff bfdb 	b.w	d40dc <_ZN10CToggleLed15createStatusStrEv>
            if (++tick >= period) {
   d4126:	6843      	ldr	r3, [r0, #4]
   d4128:	6881      	ldr	r1, [r0, #8]
   d412a:	3301      	adds	r3, #1
   d412c:	428b      	cmp	r3, r1
   d412e:	6043      	str	r3, [r0, #4]
   d4130:	dbf4      	blt.n	d411c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d4132:	6042      	str	r2, [r0, #4]
                digitalWrite(LED, HIGH);
   d4134:	2101      	movs	r1, #1
   d4136:	2007      	movs	r0, #7
   d4138:	f002 fc17 	bl	d696a <digitalWrite>
                state = CToggleLed::S_ON;
   d413c:	2301      	movs	r3, #1
   d413e:	7023      	strb	r3, [r4, #0]
   d4140:	e7ec      	b.n	d411c <_ZN10CToggleLed7executeEv+0xc>
            if (++tick >= period) {
   d4142:	6843      	ldr	r3, [r0, #4]
   d4144:	6882      	ldr	r2, [r0, #8]
   d4146:	3301      	adds	r3, #1
   d4148:	4293      	cmp	r3, r2
   d414a:	6043      	str	r3, [r0, #4]
   d414c:	dbe6      	blt.n	d411c <_ZN10CToggleLed7executeEv+0xc>
                tick = 0;
   d414e:	2500      	movs	r5, #0
   d4150:	6045      	str	r5, [r0, #4]
                digitalWrite(LED, LOW);
   d4152:	4629      	mov	r1, r5
   d4154:	2007      	movs	r0, #7
   d4156:	f002 fc08 	bl	d696a <digitalWrite>
                state = CToggleLed::S_OFF;
   d415a:	7025      	strb	r5, [r4, #0]
   d415c:	e7de      	b.n	d411c <_ZN10CToggleLed7executeEv+0xc>

000d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d415e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4160:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4162:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4164:	b17c      	cbz	r4, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4166:	6863      	ldr	r3, [r4, #4]
   d4168:	3b01      	subs	r3, #1
   d416a:	6063      	str	r3, [r4, #4]
   d416c:	b95b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4620      	mov	r0, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4176:	68a3      	ldr	r3, [r4, #8]
   d4178:	3b01      	subs	r3, #1
   d417a:	60a3      	str	r3, [r4, #8]
   d417c:	b91b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	68db      	ldr	r3, [r3, #12]
   d4184:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4186:	4628      	mov	r0, r5
   d4188:	bd38      	pop	{r3, r4, r5, pc}

000d418a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d418a:	b513      	push	{r0, r1, r4, lr}
   d418c:	460b      	mov	r3, r1
   d418e:	4604      	mov	r4, r0
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4190:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d4192:	685b      	ldr	r3, [r3, #4]
    return JSONValue(v_, d_);
   d4194:	6909      	ldr	r1, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4196:	9200      	str	r2, [sp, #0]
      : _M_pi(__r._M_pi)
   d4198:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d419a:	b113      	cbz	r3, d41a2 <_ZNK5spark18JSONObjectIterator5valueEv+0x18>
    { ++_M_use_count; }
   d419c:	685a      	ldr	r2, [r3, #4]
   d419e:	3201      	adds	r2, #1
   d41a0:	605a      	str	r2, [r3, #4]
   d41a2:	466a      	mov	r2, sp
   d41a4:	4620      	mov	r0, r4
   d41a6:	f002 f953 	bl	d6450 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41aa:	a801      	add	r0, sp, #4
   d41ac:	f7ff ffd7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	b002      	add	sp, #8
   d41b4:	bd10      	pop	{r4, pc}
	...

000d41b8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>:
void CToggleLed::cmdProcessing(JSONValue cmdJson) {
   d41b8:	b570      	push	{r4, r5, r6, lr}
   d41ba:	460b      	mov	r3, r1
   d41bc:	b08c      	sub	sp, #48	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41be:	681a      	ldr	r2, [r3, #0]
      : _M_pi(__r._M_pi)
   d41c0:	685b      	ldr	r3, [r3, #4]
        JSONObjectIterator(value.t_, value.d_) {
   d41c2:	6889      	ldr	r1, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41c4:	9202      	str	r2, [sp, #8]
   d41c6:	4604      	mov	r4, r0
      : _M_pi(__r._M_pi)
   d41c8:	9303      	str	r3, [sp, #12]
	if (_M_pi != 0)
   d41ca:	b113      	cbz	r3, d41d2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x1a>
    { ++_M_use_count; }
   d41cc:	685a      	ldr	r2, [r3, #4]
   d41ce:	3201      	adds	r2, #1
   d41d0:	605a      	str	r2, [r3, #4]
   d41d2:	aa02      	add	r2, sp, #8
   d41d4:	a806      	add	r0, sp, #24
   d41d6:	f002 fae3 	bl	d67a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d41da:	a803      	add	r0, sp, #12
   d41dc:	f7ff ffbf 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d41e0:	4e1f      	ldr	r6, [pc, #124]	; (d4260 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0xa8>)
    while (iter.next()) {
   d41e2:	a806      	add	r0, sp, #24
   d41e4:	f002 faf4 	bl	d67d0 <_ZN5spark18JSONObjectIterator4nextEv>
   d41e8:	2800      	cmp	r0, #0
   d41ea:	d033      	beq.n	d4254 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x9c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d41ec:	9b06      	ldr	r3, [sp, #24]
   d41ee:	9300      	str	r3, [sp, #0]
      : _M_pi(__r._M_pi)
   d41f0:	9b07      	ldr	r3, [sp, #28]
    return JSONString(k_, d_);
   d41f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d41f4:	9301      	str	r3, [sp, #4]
	if (_M_pi != 0)
   d41f6:	b113      	cbz	r3, d41fe <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x46>
    { ++_M_use_count; }
   d41f8:	685a      	ldr	r2, [r3, #4]
   d41fa:	3201      	adds	r2, #1
   d41fc:	605a      	str	r2, [r3, #4]
   d41fe:	466a      	mov	r2, sp
   d4200:	a802      	add	r0, sp, #8
   d4202:	f002 faa9 	bl	d6758 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4206:	a801      	add	r0, sp, #4
   d4208:	f7ff ffa9 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d420c:	9804      	ldr	r0, [sp, #16]
   d420e:	4631      	mov	r1, r6
   d4210:	f004 fc7a 	bl	d8b08 <strcmp>
   d4214:	4605      	mov	r5, r0
   d4216:	a803      	add	r0, sp, #12
   d4218:	f7ff ffa1 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "frequency") {
   d421c:	2d00      	cmp	r5, #0
   d421e:	d1e0      	bne.n	d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
            hz = (int)iter.value().toInt();
   d4220:	a906      	add	r1, sp, #24
   d4222:	a802      	add	r0, sp, #8
   d4224:	f7ff ffb1 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d4228:	a802      	add	r0, sp, #8
   d422a:	f002 f985 	bl	d6538 <_ZNK5spark9JSONValue5toIntEv>
   d422e:	60e0      	str	r0, [r4, #12]
   d4230:	a803      	add	r0, sp, #12
   d4232:	f7ff ff94 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            period = (int)iter.value().toInt() * LOOP_FREQUENCY;
   d4236:	a906      	add	r1, sp, #24
   d4238:	a802      	add	r0, sp, #8
   d423a:	f7ff ffa6 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d423e:	a802      	add	r0, sp, #8
   d4240:	f002 f97a 	bl	d6538 <_ZNK5spark9JSONValue5toIntEv>
   d4244:	230a      	movs	r3, #10
   d4246:	4358      	muls	r0, r3
   d4248:	60a0      	str	r0, [r4, #8]
   d424a:	a803      	add	r0, sp, #12
   d424c:	f7ff ff87 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tick = 0;
   d4250:	6065      	str	r5, [r4, #4]
   d4252:	e7c6      	b.n	d41e2 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE+0x2a>
   d4254:	a807      	add	r0, sp, #28
   d4256:	f7ff ff82 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d425a:	b00c      	add	sp, #48	; 0x30
   d425c:	bd70      	pop	{r4, r5, r6, pc}
   d425e:	bf00      	nop
   d4260:	000d8d45 	.word	0x000d8d45

000d4264 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4264:	b40e      	push	{r1, r2, r3}
   d4266:	b503      	push	{r0, r1, lr}
   d4268:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d426a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d426c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4270:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4272:	f001 fc98 	bl	d5ba6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4276:	b002      	add	sp, #8
   d4278:	f85d eb04 	ldr.w	lr, [sp], #4
   d427c:	b003      	add	sp, #12
   d427e:	4770      	bx	lr

000d4280 <setup>:

  }
}

// setup() runs once, when the device is first turned on.
void setup() {
   d4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(LED, OUTPUT);
   d4282:	2101      	movs	r1, #1
   d4284:	2007      	movs	r0, #7
   d4286:	f002 fb5f 	bl	d6948 <pinMode>
  RGB.control(true);
   d428a:	2001      	movs	r0, #1
   d428c:	f001 fd0b 	bl	d5ca6 <_ZN8RGBClass7controlEb>
  RGB.color(255, 255, 255);   // default color white
   d4290:	22ff      	movs	r2, #255	; 0xff
   d4292:	4611      	mov	r1, r2
   d4294:	4610      	mov	r0, r2
   d4296:	f001 fd16 	bl	d5cc6 <_ZN8RGBClass5colorEiii>
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d429a:	4d27      	ldr	r5, [pc, #156]	; (d4338 <setup+0xb8>)
   d429c:	4e27      	ldr	r6, [pc, #156]	; (d433c <setup+0xbc>)
  Serial.begin(9600);
   d429e:	f001 fea7 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d42a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42a6:	f001 fe97 	bl	d5fd8 <_ZN9USBSerial5beginEl>
  pinMode(DHTPIN, INPUT);
   d42aa:	2100      	movs	r1, #0
   d42ac:	2002      	movs	r0, #2
   d42ae:	f002 fb4b 	bl	d6948 <pinMode>
   d42b2:	782b      	ldrb	r3, [r5, #0]
   d42b4:	f3bf 8f5b 	dmb	ish
   d42b8:	f013 0f01 	tst.w	r3, #1
   d42bc:	d109      	bne.n	d42d2 <setup+0x52>
   d42be:	4628      	mov	r0, r5
   d42c0:	f7ff fef1 	bl	d40a6 <__cxa_guard_acquire>
   d42c4:	b128      	cbz	r0, d42d2 <setup+0x52>
   d42c6:	f001 f83f 	bl	d5348 <HAL_Pin_Map>
   d42ca:	6030      	str	r0, [r6, #0]
   d42cc:	4628      	mov	r0, r5
   d42ce:	f7ff feef 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42d2:	6833      	ldr	r3, [r6, #0]
   d42d4:	f893 4020 	ldrb.w	r4, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42d8:	782b      	ldrb	r3, [r5, #0]
   d42da:	f3bf 8f5b 	dmb	ish
   d42de:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42e0:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42e4:	d409      	bmi.n	d42fa <setup+0x7a>
   d42e6:	4814      	ldr	r0, [pc, #80]	; (d4338 <setup+0xb8>)
   d42e8:	f7ff fedd 	bl	d40a6 <__cxa_guard_acquire>
   d42ec:	b128      	cbz	r0, d42fa <setup+0x7a>
   d42ee:	f001 f82b 	bl	d5348 <HAL_Pin_Map>
   d42f2:	6030      	str	r0, [r6, #0]
   d42f4:	4810      	ldr	r0, [pc, #64]	; (d4338 <setup+0xb8>)
   d42f6:	f7ff fedb 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42fa:	6833      	ldr	r3, [r6, #0]
   d42fc:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   d4300:	f004 041f 	and.w	r4, r4, #31
   d4304:	433c      	orrs	r4, r7
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4306:	2c2f      	cmp	r4, #47	; 0x2f
   d4308:	dd10      	ble.n	d432c <setup+0xac>
   d430a:	4a0d      	ldr	r2, [pc, #52]	; (d4340 <setup+0xc0>)
   d430c:	2100      	movs	r1, #0
   d430e:	200a      	movs	r0, #10
   d4310:	f001 f98a 	bl	d5628 <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d4314:	4a0b      	ldr	r2, [pc, #44]	; (d4344 <setup+0xc4>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4316:	f004 041f 	and.w	r4, r4, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d431a:	2301      	movs	r3, #1
   d431c:	fa03 f404 	lsl.w	r4, r3, r4
	pinSetFast(DHTPIN);
  counter = 0;
   d4320:	4b09      	ldr	r3, [pc, #36]	; (d4348 <setup+0xc8>)
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4322:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   d4326:	2200      	movs	r2, #0
   d4328:	601a      	str	r2, [r3, #0]
}
   d432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d432c:	2c1f      	cmp	r4, #31
   d432e:	dcf1      	bgt.n	d4314 <setup+0x94>
        return NRF_P0;
   d4330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   d4334:	e7f1      	b.n	d431a <setup+0x9a>
   d4336:	bf00      	nop
   d4338:	2003e4e4 	.word	0x2003e4e4
   d433c:	2003e4e8 	.word	0x2003e4e8
   d4340:	000d53d9 	.word	0x000d53d9
   d4344:	50000300 	.word	0x50000300
   d4348:	2003e4ec 	.word	0x2003e4ec

000d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d434c:	680b      	ldr	r3, [r1, #0]
   d434e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4350:	b113      	cbz	r3, d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4352:	685a      	ldr	r2, [r3, #4]
   d4354:	3201      	adds	r2, #1
   d4356:	605a      	str	r2, [r3, #4]
      }
   d4358:	4770      	bx	lr
	...

000d435c <_Z19serialCmdProcessingv>:
void serialCmdProcessing() {
   d435c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d435e:	b097      	sub	sp, #92	; 0x5c
  if (Serial.available() <= 0) return;
   d4360:	f001 fe46 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d4364:	6803      	ldr	r3, [r0, #0]
   d4366:	691b      	ldr	r3, [r3, #16]
   d4368:	4798      	blx	r3
   d436a:	2800      	cmp	r0, #0
   d436c:	f340 80a1 	ble.w	d44b2 <_Z19serialCmdProcessingv+0x156>
  String cmdStr = "";
   d4370:	4951      	ldr	r1, [pc, #324]	; (d44b8 <_Z19serialCmdProcessingv+0x15c>)
   d4372:	a808      	add	r0, sp, #32
   d4374:	f001 fb01 	bl	d597a <_ZN6StringC1EPKc>
  while (Serial.available()) {
   d4378:	f001 fe3a 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d437c:	6803      	ldr	r3, [r0, #0]
   d437e:	691b      	ldr	r3, [r3, #16]
   d4380:	4798      	blx	r3
   d4382:	b180      	cbz	r0, d43a6 <_Z19serialCmdProcessingv+0x4a>
      char c = Serial.read();
   d4384:	f001 fe34 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	4798      	blx	r3
      cmdStr += String(c);
   d438e:	b2c1      	uxtb	r1, r0
   d4390:	a810      	add	r0, sp, #64	; 0x40
   d4392:	f001 fb57 	bl	d5a44 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4396:	a910      	add	r1, sp, #64	; 0x40
   d4398:	a808      	add	r0, sp, #32
   d439a:	f001 fb7b 	bl	d5a94 <_ZN6String6concatERKS_>
   d439e:	a810      	add	r0, sp, #64	; 0x40
   d43a0:	f001 faa0 	bl	d58e4 <_ZN6StringD1Ev>
  while (Serial.available()) {
   d43a4:	e7e8      	b.n	d4378 <_Z19serialCmdProcessingv+0x1c>
  JSONValue cmdJson = JSONValue::parseCopy(cmdStr.c_str());
   d43a6:	9908      	ldr	r1, [sp, #32]
    return parseCopy(json, strlen(json));
   d43a8:	9101      	str	r1, [sp, #4]
   d43aa:	4608      	mov	r0, r1
   d43ac:	f004 fbbe 	bl	d8b2c <strlen>
   d43b0:	9901      	ldr	r1, [sp, #4]
    return strcmp(s_, str) == 0;
   d43b2:	4e42      	ldr	r6, [pc, #264]	; (d44bc <_Z19serialCmdProcessingv+0x160>)
   d43b4:	4f42      	ldr	r7, [pc, #264]	; (d44c0 <_Z19serialCmdProcessingv+0x164>)
      toggleLed.cmdProcessing(iter.value());
   d43b6:	4d43      	ldr	r5, [pc, #268]	; (d44c4 <_Z19serialCmdProcessingv+0x168>)
    return parseCopy(json, strlen(json));
   d43b8:	4602      	mov	r2, r0
   d43ba:	a805      	add	r0, sp, #20
   d43bc:	f002 fa30 	bl	d6820 <_ZN5spark9JSONValue9parseCopyEPKcj>
        JSONObjectIterator(value.t_, value.d_) {
   d43c0:	9c07      	ldr	r4, [sp, #28]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43c2:	9b05      	ldr	r3, [sp, #20]
   d43c4:	930c      	str	r3, [sp, #48]	; 0x30
   d43c6:	a906      	add	r1, sp, #24
   d43c8:	a80d      	add	r0, sp, #52	; 0x34
   d43ca:	f7ff ffbf 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43ce:	aa0c      	add	r2, sp, #48	; 0x30
   d43d0:	4621      	mov	r1, r4
   d43d2:	a810      	add	r0, sp, #64	; 0x40
   d43d4:	f002 f9e4 	bl	d67a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d43d8:	a80d      	add	r0, sp, #52	; 0x34
   d43da:	f7ff fec0 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while (iter.next()) {
   d43de:	a810      	add	r0, sp, #64	; 0x40
   d43e0:	f002 f9f6 	bl	d67d0 <_ZN5spark18JSONObjectIterator4nextEv>
   d43e4:	2800      	cmp	r0, #0
   d43e6:	d05b      	beq.n	d44a0 <_Z19serialCmdProcessingv+0x144>
    return JSONString(k_, d_);
   d43e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d43ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d43ec:	9303      	str	r3, [sp, #12]
   d43ee:	a911      	add	r1, sp, #68	; 0x44
   d43f0:	a804      	add	r0, sp, #16
   d43f2:	f7ff ffab 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d43f6:	4621      	mov	r1, r4
   d43f8:	aa03      	add	r2, sp, #12
   d43fa:	a80c      	add	r0, sp, #48	; 0x30
   d43fc:	f002 f9ac 	bl	d6758 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4400:	a804      	add	r0, sp, #16
   d4402:	f7ff feac 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4406:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4408:	4631      	mov	r1, r6
   d440a:	f004 fb7d 	bl	d8b08 <strcmp>
   d440e:	4604      	mov	r4, r0
   d4410:	a80d      	add	r0, sp, #52	; 0x34
   d4412:	f7ff fea4 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (iter.name() == "smartlight") {
   d4416:	b9b4      	cbnz	r4, d4446 <_Z19serialCmdProcessingv+0xea>
    return JSONValue(v_, d_);
   d4418:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d441a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d441c:	9303      	str	r3, [sp, #12]
   d441e:	a911      	add	r1, sp, #68	; 0x44
   d4420:	a804      	add	r0, sp, #16
   d4422:	f7ff ff93 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4426:	4621      	mov	r1, r4
   d4428:	aa03      	add	r2, sp, #12
   d442a:	a80c      	add	r0, sp, #48	; 0x30
   d442c:	f002 f810 	bl	d6450 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4430:	a804      	add	r0, sp, #16
   d4432:	f7ff fe94 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      smartLight.cmdProcessing(iter.value());
   d4436:	4824      	ldr	r0, [pc, #144]	; (d44c8 <_Z19serialCmdProcessingv+0x16c>)
   d4438:	a90c      	add	r1, sp, #48	; 0x30
   d443a:	f000 fdd1 	bl	d4fe0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>
   d443e:	a80d      	add	r0, sp, #52	; 0x34
   d4440:	f7ff fe8d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4444:	e7cb      	b.n	d43de <_Z19serialCmdProcessingv+0x82>
    return JSONString(k_, d_);
   d4446:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4448:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d444a:	9303      	str	r3, [sp, #12]
   d444c:	a911      	add	r1, sp, #68	; 0x44
   d444e:	a804      	add	r0, sp, #16
   d4450:	f7ff ff7c 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4454:	4621      	mov	r1, r4
   d4456:	aa03      	add	r2, sp, #12
   d4458:	a80c      	add	r0, sp, #48	; 0x30
   d445a:	f002 f97d 	bl	d6758 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d445e:	a804      	add	r0, sp, #16
   d4460:	f7ff fe7d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4464:	980e      	ldr	r0, [sp, #56]	; 0x38
   d4466:	4639      	mov	r1, r7
   d4468:	f004 fb4e 	bl	d8b08 <strcmp>
   d446c:	4604      	mov	r4, r0
   d446e:	a80d      	add	r0, sp, #52	; 0x34
   d4470:	f7ff fe75 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    else if (iter.name() == "led") {
   d4474:	2c00      	cmp	r4, #0
   d4476:	d1b2      	bne.n	d43de <_Z19serialCmdProcessingv+0x82>
    return JSONValue(v_, d_);
   d4478:	9c14      	ldr	r4, [sp, #80]	; 0x50
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d447a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d447c:	9303      	str	r3, [sp, #12]
   d447e:	a911      	add	r1, sp, #68	; 0x44
   d4480:	a804      	add	r0, sp, #16
   d4482:	f7ff ff63 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4486:	4621      	mov	r1, r4
   d4488:	aa03      	add	r2, sp, #12
   d448a:	a80c      	add	r0, sp, #48	; 0x30
   d448c:	f001 ffe0 	bl	d6450 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4490:	a804      	add	r0, sp, #16
   d4492:	f7ff fe64 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      toggleLed.cmdProcessing(iter.value());
   d4496:	a90c      	add	r1, sp, #48	; 0x30
   d4498:	4628      	mov	r0, r5
   d449a:	f7ff fe8d 	bl	d41b8 <_ZN10CToggleLed13cmdProcessingEN5spark9JSONValueE>
   d449e:	e7ce      	b.n	d443e <_Z19serialCmdProcessingv+0xe2>
   d44a0:	a811      	add	r0, sp, #68	; 0x44
   d44a2:	f7ff fe5c 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44a6:	a806      	add	r0, sp, #24
   d44a8:	f7ff fe59 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String cmdStr = "";
   d44ac:	a808      	add	r0, sp, #32
   d44ae:	f001 fa19 	bl	d58e4 <_ZN6StringD1Ev>
}
   d44b2:	b017      	add	sp, #92	; 0x5c
   d44b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44b6:	bf00      	nop
   d44b8:	000d8fa7 	.word	0x000d8fa7
   d44bc:	000d8d4f 	.word	0x000d8d4f
   d44c0:	000d8d5a 	.word	0x000d8d5a
   d44c4:	2003e574 	.word	0x2003e574
   d44c8:	2003e514 	.word	0x2003e514

000d44cc <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d44cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44d0:	b096      	sub	sp, #88	; 0x58

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44d2:	f000 ff89 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
   d44d6:	4605      	mov	r5, r0
  unsigned long t = millis();
  //Serial.println("Starting");
  serialCmdProcessing();
   d44d8:	f7ff ff40 	bl	d435c <_Z19serialCmdProcessingv>
  smartLight.execute();
   d44dc:	482e      	ldr	r0, [pc, #184]	; (d4598 <loop+0xcc>)
  //unsigned long e = millis();
  //Serial.printf("Thermostat end: %ld\n", e);
  
  unsigned long period = millis() - t;
  //Serial.println(counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY));
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d44de:	4c2f      	ldr	r4, [pc, #188]	; (d459c <loop+0xd0>)
  smartLight.execute();
   d44e0:	f000 fd32 	bl	d4f48 <_ZN11CSmartLight7executeEv>
  toggleLed.execute();
   d44e4:	482e      	ldr	r0, [pc, #184]	; (d45a0 <loop+0xd4>)
   d44e6:	f7ff fe13 	bl	d4110 <_ZN10CToggleLed7executeEv>
  doorSensor.execute();
   d44ea:	482e      	ldr	r0, [pc, #184]	; (d45a4 <loop+0xd8>)
   d44ec:	f000 fefa 	bl	d52e4 <_ZN10DoorSensor7executeEv>
  thermostat.execute();
   d44f0:	482d      	ldr	r0, [pc, #180]	; (d45a8 <loop+0xdc>)
   d44f2:	f000 fe5b 	bl	d51ac <_ZN11CThermostat7executeEv>
   d44f6:	f000 ff77 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
  unsigned long period = millis() - t;
   d44fa:	6821      	ldr	r1, [r4, #0]
   d44fc:	220a      	movs	r2, #10
   d44fe:	fb91 f3f2 	sdiv	r3, r1, r2
   d4502:	fb02 1313 	mls	r3, r2, r3, r1
   d4506:	1b45      	subs	r5, r0, r5
  if (counter % (SERAIL_COMM_FREQUENCY * LOOP_FREQUENCY) == 0) {
   d4508:	2b00      	cmp	r3, #0
   d450a:	d136      	bne.n	d457a <loop+0xae>
    counter = 0;
   d450c:	6023      	str	r3, [r4, #0]
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"thermostat\":%s,\"door\":%s,\"ct\":%ld}", 
   d450e:	f001 fd6f 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d4512:	4606      	mov	r6, r0
      (int)Time.now(), smartLight.getStatusStr().c_str(), toggleLed.getStatusStr().c_str(),thermostat.getStatusStr().c_str(),doorSensor.getStatusStr().c_str(),
   d4514:	f001 fbaa 	bl	d5c6c <_ZN9TimeClass3nowEv>

    void execute();
    
    int getSensorVal();
    void readSensorVal();
    String getStatusStr() {return statusStr;};
   d4518:	4924      	ldr	r1, [pc, #144]	; (d45ac <loop+0xe0>)
   d451a:	9005      	str	r0, [sp, #20]
   d451c:	a806      	add	r0, sp, #24
   d451e:	f001 fa6c 	bl	d59fa <_ZN6StringC1ERKS_>
    Serial.printf("{\"t\":%d,\"light\":%s,\"led\":%s,\"thermostat\":%s,\"door\":%s,\"ct\":%ld}", 
   d4522:	9b06      	ldr	r3, [sp, #24]
class CToggleLed {
public:
    CToggleLed();
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    String getStatusStr() {return statusStr;};
   d4524:	4922      	ldr	r1, [pc, #136]	; (d45b0 <loop+0xe4>)
   d4526:	9304      	str	r3, [sp, #16]
   d4528:	a80a      	add	r0, sp, #40	; 0x28
   d452a:	f001 fa66 	bl	d59fa <_ZN6StringC1ERKS_>
    enum STATE { S_DELAY, S_READ };
public:
    CThermostat();
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    String getStatusStr() {return statusStr;};
   d452e:	491e      	ldr	r1, [pc, #120]	; (d45a8 <loop+0xdc>)
   d4530:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d4532:	a80e      	add	r0, sp, #56	; 0x38
   d4534:	f001 fa61 	bl	d59fa <_ZN6StringC1ERKS_>
    void cmdProcessing(JSONValue cmdJson);
    void execute();
    int getSensorVal();
    void readSensorVal();
    bool checkIfClosed();
    String getStatusStr() {return statusStr;};
   d4538:	491e      	ldr	r1, [pc, #120]	; (d45b4 <loop+0xe8>)
   d453a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   d453e:	a812      	add	r0, sp, #72	; 0x48
   d4540:	f001 fa5b 	bl	d59fa <_ZN6StringC1ERKS_>
   d4544:	9912      	ldr	r1, [sp, #72]	; 0x48
   d4546:	9503      	str	r5, [sp, #12]
   d4548:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   d454c:	e9cd 8101 	strd	r8, r1, [sp, #4]
   d4550:	9700      	str	r7, [sp, #0]
   d4552:	4919      	ldr	r1, [pc, #100]	; (d45b8 <loop+0xec>)
   d4554:	4630      	mov	r0, r6
   d4556:	f7ff fe85 	bl	d4264 <_ZN5Print6printfEPKcz>
      (int)Time.now(), smartLight.getStatusStr().c_str(), toggleLed.getStatusStr().c_str(),thermostat.getStatusStr().c_str(),doorSensor.getStatusStr().c_str(),
   d455a:	a812      	add	r0, sp, #72	; 0x48
   d455c:	f001 f9c2 	bl	d58e4 <_ZN6StringD1Ev>
   d4560:	a80e      	add	r0, sp, #56	; 0x38
   d4562:	f001 f9bf 	bl	d58e4 <_ZN6StringD1Ev>
   d4566:	a80a      	add	r0, sp, #40	; 0x28
   d4568:	f001 f9bc 	bl	d58e4 <_ZN6StringD1Ev>
   d456c:	a806      	add	r0, sp, #24
   d456e:	f001 f9b9 	bl	d58e4 <_ZN6StringD1Ev>
      period
    );
    Serial.println();
   d4572:	f001 fd3d 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d4576:	f001 faec 	bl	d5b52 <_ZN5Print7printlnEv>
  }
  counter++;
   d457a:	6823      	ldr	r3, [r4, #0]
  Serial.println(t);
  Serial.println(period);
  if (period > 1000) delay(period);
  else delay(1000) ;
  */
  if (period > PERIOD) {
   d457c:	2d64      	cmp	r5, #100	; 0x64
  counter++;
   d457e:	f103 0301 	add.w	r3, r3, #1
   d4582:	6023      	str	r3, [r4, #0]
  if (period > PERIOD) {
   d4584:	d801      	bhi.n	d458a <loop+0xbe>
   d4586:	f000 ff2f 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
  }
  else{
    period = PERIOD - (millis() - t);
  }
  //Serial.println(period);
  delay(150);
   d458a:	2096      	movs	r0, #150	; 0x96
   d458c:	f001 fb88 	bl	d5ca0 <delay>
   d4590:	b016      	add	sp, #88	; 0x58
   d4592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4596:	bf00      	nop
   d4598:	2003e514 	.word	0x2003e514
   d459c:	2003e4ec 	.word	0x2003e4ec
   d45a0:	2003e574 	.word	0x2003e574
   d45a4:	2003e4f0 	.word	0x2003e4f0
   d45a8:	2003e544 	.word	0x2003e544
   d45ac:	2003e534 	.word	0x2003e534
   d45b0:	2003e584 	.word	0x2003e584
   d45b4:	2003e504 	.word	0x2003e504
   d45b8:	000d8d5e 	.word	0x000d8d5e

000d45bc <_GLOBAL__sub_I_smartLight>:
   d45bc:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED); 
   d45be:	2100      	movs	r1, #0
   d45c0:	2001      	movs	r0, #1
   d45c2:	f001 f861 	bl	d5688 <system_thread_set_state>
CSmartLight smartLight;
   d45c6:	4807      	ldr	r0, [pc, #28]	; (d45e4 <_GLOBAL__sub_I_smartLight+0x28>)
   d45c8:	f000 fbea 	bl	d4da0 <_ZN11CSmartLightC1Ev>
CToggleLed toggleLed;
   d45cc:	4806      	ldr	r0, [pc, #24]	; (d45e8 <_GLOBAL__sub_I_smartLight+0x2c>)
   d45ce:	f7ff fd73 	bl	d40b8 <_ZN10CToggleLedC1Ev>
CThermostat thermostat;
   d45d2:	4806      	ldr	r0, [pc, #24]	; (d45ec <_GLOBAL__sub_I_smartLight+0x30>)
   d45d4:	f000 fd9a 	bl	d510c <_ZN11CThermostatC1Ev>
   d45d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
DoorSensor doorSensor;
   d45dc:	4804      	ldr	r0, [pc, #16]	; (d45f0 <_GLOBAL__sub_I_smartLight+0x34>)
   d45de:	f000 be55 	b.w	d528c <_ZN10DoorSensorC1Ev>
   d45e2:	bf00      	nop
   d45e4:	2003e514 	.word	0x2003e514
   d45e8:	2003e574 	.word	0x2003e574
   d45ec:	2003e544 	.word	0x2003e544
   d45f0:	2003e4f0 	.word	0x2003e4f0

000d45f4 <nrf_gpio_pin_port_decode>:
{
   d45f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45f6:	6803      	ldr	r3, [r0, #0]
   d45f8:	2b2f      	cmp	r3, #47	; 0x2f
{
   d45fa:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45fc:	d904      	bls.n	d4608 <nrf_gpio_pin_port_decode+0x14>
   d45fe:	4a07      	ldr	r2, [pc, #28]	; (d461c <nrf_gpio_pin_port_decode+0x28>)
   d4600:	2100      	movs	r1, #0
   d4602:	200a      	movs	r0, #10
   d4604:	f001 f810 	bl	d5628 <panic_>
    if (*p_pin < P0_PIN_NUM)
   d4608:	6823      	ldr	r3, [r4, #0]
   d460a:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d460c:	bf83      	ittte	hi
   d460e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4612:	4803      	ldrhi	r0, [pc, #12]	; (d4620 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4614:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4616:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   d461a:	bd10      	pop	{r4, pc}
   d461c:	000d53d9 	.word	0x000d53d9
   d4620:	50000300 	.word	0x50000300

000d4624 <nrf_gpio_pin_set>:
{
   d4624:	b507      	push	{r0, r1, r2, lr}
   d4626:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4628:	a801      	add	r0, sp, #4
   d462a:	f7ff ffe3 	bl	d45f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d462e:	9a01      	ldr	r2, [sp, #4]
   d4630:	2301      	movs	r3, #1
   d4632:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d4634:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4638:	b003      	add	sp, #12
   d463a:	f85d fb04 	ldr.w	pc, [sp], #4

000d463e <nrf_gpio_pin_read>:
{
   d463e:	b507      	push	{r0, r1, r2, lr}
   d4640:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4642:	a801      	add	r0, sp, #4
   d4644:	f7ff ffd6 	bl	d45f4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4648:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d464a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d464e:	40d8      	lsrs	r0, r3
}
   d4650:	f000 0001 	and.w	r0, r0, #1
   d4654:	b003      	add	sp, #12
   d4656:	f85d fb04 	ldr.w	pc, [sp], #4

000d465a <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d465a:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d465c:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d465e:	2301      	movs	r3, #1
	_pin = pin;
   d4660:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4662:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4664:	7403      	strb	r3, [r0, #16]
}
   d4666:	bd10      	pop	{r4, pc}

000d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   d4668:	b510      	push	{r4, lr}
   d466a:	ed2d 8b02 	vpush	{d8}
   d466e:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d4672:	f003 fe5d 	bl	d8330 <__aeabi_i2d>
   d4676:	ec41 0b18 	vmov	d8, r0, r1
   d467a:	4620      	mov	r0, r4
   d467c:	f003 fe6a 	bl	d8354 <__aeabi_f2d>
   d4680:	eeb0 1a48 	vmov.f32	s2, s16
   d4684:	eef0 1a68 	vmov.f32	s3, s17
    }
   d4688:	ecbd 8b02 	vpop	{d8}
      return pow(__type(__x), __type(__y));
   d468c:	ec41 0b10 	vmov	d0, r0, r1
    }
   d4690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
   d4694:	f002 b9dc 	b.w	d6a50 <pow>

000d4698 <_ZN3DHT16computeHeatIndexEff>:
		}
	}
	return NAN;
}

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d4698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d469c:	ee10 0a10 	vmov	r0, s0
float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d46a0:	ed2d 8b02 	vpush	{d8}
   d46a4:	eeb0 8a60 	vmov.f32	s16, s1
   d46a8:	eef0 8a40 	vmov.f32	s17, s0
		 2.04901523 * tempFahrenheit + 
   d46ac:	f003 fe52 	bl	d8354 <__aeabi_f2d>
   d46b0:	4604      	mov	r4, r0
		10.14333127 * percentHumidity +
   d46b2:	ee18 0a10 	vmov	r0, s16
		 2.04901523 * tempFahrenheit + 
   d46b6:	460d      	mov	r5, r1
		10.14333127 * percentHumidity +
   d46b8:	f003 fe4c 	bl	d8354 <__aeabi_f2d>
		 2.04901523 * tempFahrenheit + 
   d46bc:	a354      	add	r3, pc, #336	; (adr r3, d4810 <_ZN3DHT16computeHeatIndexEff+0x178>)
   d46be:	e9d3 2300 	ldrd	r2, r3, [r3]
		10.14333127 * percentHumidity +
   d46c2:	4606      	mov	r6, r0
   d46c4:	460f      	mov	r7, r1
		 2.04901523 * tempFahrenheit + 
   d46c6:	4620      	mov	r0, r4
   d46c8:	4629      	mov	r1, r5
   d46ca:	f003 fe9b 	bl	d8404 <__aeabi_dmul>
	return -42.379 + 
   d46ce:	a352      	add	r3, pc, #328	; (adr r3, d4818 <_ZN3DHT16computeHeatIndexEff+0x180>)
   d46d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d4:	f003 fcde 	bl	d8094 <__aeabi_dsub>
		10.14333127 * percentHumidity +
   d46d8:	a351      	add	r3, pc, #324	; (adr r3, d4820 <_ZN3DHT16computeHeatIndexEff+0x188>)
   d46da:	e9d3 2300 	ldrd	r2, r3, [r3]
	return -42.379 + 
   d46de:	4680      	mov	r8, r0
   d46e0:	4689      	mov	r9, r1
		10.14333127 * percentHumidity +
   d46e2:	4630      	mov	r0, r6
   d46e4:	4639      	mov	r1, r7
   d46e6:	f003 fe8d 	bl	d8404 <__aeabi_dmul>
   d46ea:	4602      	mov	r2, r0
   d46ec:	460b      	mov	r3, r1
		 2.04901523 * tempFahrenheit + 
   d46ee:	4640      	mov	r0, r8
   d46f0:	4649      	mov	r1, r9
   d46f2:	f003 fcd1 	bl	d8098 <__adddf3>
		-0.22475541 * tempFahrenheit * percentHumidity +
   d46f6:	a34c      	add	r3, pc, #304	; (adr r3, d4828 <_ZN3DHT16computeHeatIndexEff+0x190>)
   d46f8:	e9d3 2300 	ldrd	r2, r3, [r3]
		 2.04901523 * tempFahrenheit + 
   d46fc:	4680      	mov	r8, r0
   d46fe:	4689      	mov	r9, r1
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4700:	4620      	mov	r0, r4
   d4702:	4629      	mov	r1, r5
   d4704:	f003 fe7e 	bl	d8404 <__aeabi_dmul>
   d4708:	4632      	mov	r2, r6
   d470a:	463b      	mov	r3, r7
   d470c:	f003 fe7a 	bl	d8404 <__aeabi_dmul>
   d4710:	4602      	mov	r2, r0
   d4712:	460b      	mov	r3, r1
		10.14333127 * percentHumidity +
   d4714:	4640      	mov	r0, r8
   d4716:	4649      	mov	r1, r9
   d4718:	f003 fcbe 	bl	d8098 <__adddf3>
		-0.00683783 * pow(tempFahrenheit, 2) +
   d471c:	eeb0 0a68 	vmov.f32	s0, s17
		10.14333127 * percentHumidity +
   d4720:	4680      	mov	r8, r0
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4722:	2002      	movs	r0, #2
		10.14333127 * percentHumidity +
   d4724:	4689      	mov	r9, r1
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4726:	f7ff ff9f 	bl	d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d472a:	a341      	add	r3, pc, #260	; (adr r3, d4830 <_ZN3DHT16computeHeatIndexEff+0x198>)
   d472c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4730:	ec51 0b10 	vmov	r0, r1, d0
   d4734:	f003 fe66 	bl	d8404 <__aeabi_dmul>
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4738:	4642      	mov	r2, r8
   d473a:	464b      	mov	r3, r9
   d473c:	f003 fcac 	bl	d8098 <__adddf3>
		-0.05481717 * pow(percentHumidity, 2) + 
   d4740:	eeb0 0a48 	vmov.f32	s0, s16
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4744:	4680      	mov	r8, r0
		-0.05481717 * pow(percentHumidity, 2) + 
   d4746:	2002      	movs	r0, #2
		-0.22475541 * tempFahrenheit * percentHumidity +
   d4748:	4689      	mov	r9, r1
		-0.05481717 * pow(percentHumidity, 2) + 
   d474a:	f7ff ff8d 	bl	d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d474e:	a33a      	add	r3, pc, #232	; (adr r3, d4838 <_ZN3DHT16computeHeatIndexEff+0x1a0>)
   d4750:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4754:	ec51 0b10 	vmov	r0, r1, d0
   d4758:	f003 fe54 	bl	d8404 <__aeabi_dmul>
		-0.00683783 * pow(tempFahrenheit, 2) +
   d475c:	4642      	mov	r2, r8
   d475e:	464b      	mov	r3, r9
   d4760:	f003 fc9a 	bl	d8098 <__adddf3>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d4764:	eeb0 0a68 	vmov.f32	s0, s17
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4768:	4680      	mov	r8, r0
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d476a:	2002      	movs	r0, #2
		-0.00683783 * pow(tempFahrenheit, 2) +
   d476c:	4689      	mov	r9, r1
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d476e:	f7ff ff7b 	bl	d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d4772:	a333      	add	r3, pc, #204	; (adr r3, d4840 <_ZN3DHT16computeHeatIndexEff+0x1a8>)
   d4774:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4778:	ec51 0b10 	vmov	r0, r1, d0
   d477c:	f003 fe42 	bl	d8404 <__aeabi_dmul>
   d4780:	4632      	mov	r2, r6
   d4782:	463b      	mov	r3, r7
   d4784:	f003 fe3e 	bl	d8404 <__aeabi_dmul>
		-0.05481717 * pow(percentHumidity, 2) + 
   d4788:	4642      	mov	r2, r8
   d478a:	464b      	mov	r3, r9
   d478c:	f003 fc84 	bl	d8098 <__adddf3>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d4790:	eeb0 0a48 	vmov.f32	s0, s16
		-0.05481717 * pow(percentHumidity, 2) + 
   d4794:	4606      	mov	r6, r0
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d4796:	2002      	movs	r0, #2
		-0.05481717 * pow(percentHumidity, 2) + 
   d4798:	460f      	mov	r7, r1
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d479a:	f7ff ff65 	bl	d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d479e:	ec59 8b10 	vmov	r8, r9, d0
   d47a2:	a329      	add	r3, pc, #164	; (adr r3, d4848 <_ZN3DHT16computeHeatIndexEff+0x1b0>)
   d47a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a8:	4620      	mov	r0, r4
   d47aa:	4629      	mov	r1, r5
   d47ac:	f003 fe2a 	bl	d8404 <__aeabi_dmul>
   d47b0:	4642      	mov	r2, r8
   d47b2:	464b      	mov	r3, r9
   d47b4:	f003 fe26 	bl	d8404 <__aeabi_dmul>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d47b8:	4632      	mov	r2, r6
   d47ba:	463b      	mov	r3, r7
   d47bc:	f003 fc6c 	bl	d8098 <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d47c0:	eeb0 0a68 	vmov.f32	s0, s17
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d47c4:	4604      	mov	r4, r0
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d47c6:	2002      	movs	r0, #2
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   d47c8:	460d      	mov	r5, r1
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d47ca:	f7ff ff4d 	bl	d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d47ce:	2002      	movs	r0, #2
   d47d0:	ec59 8b10 	vmov	r8, r9, d0
   d47d4:	eeb0 0a48 	vmov.f32	s0, s16
   d47d8:	f7ff ff46 	bl	d4668 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   d47dc:	ec57 6b10 	vmov	r6, r7, d0
   d47e0:	a31b      	add	r3, pc, #108	; (adr r3, d4850 <_ZN3DHT16computeHeatIndexEff+0x1b8>)
   d47e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47e6:	4640      	mov	r0, r8
   d47e8:	4649      	mov	r1, r9
   d47ea:	f003 fe0b 	bl	d8404 <__aeabi_dmul>
   d47ee:	4632      	mov	r2, r6
   d47f0:	463b      	mov	r3, r7
   d47f2:	f003 fe07 	bl	d8404 <__aeabi_dmul>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   d47f6:	4622      	mov	r2, r4
   d47f8:	462b      	mov	r3, r5
   d47fa:	f003 fc4d 	bl	d8098 <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d47fe:	f004 f8d9 	bl	d89b4 <__aeabi_d2f>
}
   d4802:	ecbd 8b02 	vpop	{d8}
   d4806:	ee00 0a10 	vmov	s0, r0
   d480a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d480e:	bf00      	nop
   d4810:	18ced8ec 	.word	0x18ced8ec
   d4814:	40006462 	.word	0x40006462
   d4818:	126e978d 	.word	0x126e978d
   d481c:	40453083 	.word	0x40453083
   d4820:	b75a49cd 	.word	0xb75a49cd
   d4824:	40244962 	.word	0x40244962
   d4828:	07c647f8 	.word	0x07c647f8
   d482c:	bfccc4c9 	.word	0xbfccc4c9
   d4830:	039c16cc 	.word	0x039c16cc
   d4834:	bf7c01fc 	.word	0xbf7c01fc
   d4838:	00d18c24 	.word	0x00d18c24
   d483c:	bfac10ff 	.word	0xbfac10ff
   d4840:	8760dce5 	.word	0x8760dce5
   d4844:	3f5421b5 	.word	0x3f5421b5
   d4848:	013330da 	.word	0x013330da
   d484c:	3f4bf1f9 	.word	0x3f4bf1f9
   d4850:	11d3bd01 	.word	0x11d3bd01
   d4854:	bec0b17e 	.word	0xbec0b17e

000d4858 <_ZN3DHT15computeDewPointEff>:

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   d4858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d485c:	ee10 0a10 	vmov	r0, s0
   d4860:	ed2d 8b02 	vpush	{d8}
   d4864:	eeb0 8a60 	vmov.f32	s16, s1
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d4868:	f003 fd74 	bl	d8354 <__aeabi_f2d>
  { return __builtin_logf(__x); }
   d486c:	ed9f 0a28 	vldr	s0, [pc, #160]	; d4910 <_ZN3DHT15computeDewPointEff+0xb8>
   d4870:	ee88 0a00 	vdiv.f32	s0, s16, s0
   d4874:	4604      	mov	r4, r0
   d4876:	460d      	mov	r5, r1
   d4878:	f002 faa0 	bl	d6dbc <logf>
   d487c:	a320      	add	r3, pc, #128	; (adr r3, d4900 <_ZN3DHT15computeDewPointEff+0xa8>)
   d487e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4882:	4620      	mov	r0, r4
   d4884:	4629      	mov	r1, r5
   d4886:	ee10 6a10 	vmov	r6, s0
   d488a:	f003 fdbb 	bl	d8404 <__aeabi_dmul>
   d488e:	a31e      	add	r3, pc, #120	; (adr r3, d4908 <_ZN3DHT15computeDewPointEff+0xb0>)
   d4890:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4894:	4680      	mov	r8, r0
   d4896:	4689      	mov	r9, r1
   d4898:	4620      	mov	r0, r4
   d489a:	4629      	mov	r1, r5
   d489c:	f003 fbfc 	bl	d8098 <__adddf3>
   d48a0:	4602      	mov	r2, r0
   d48a2:	460b      	mov	r3, r1
   d48a4:	4640      	mov	r0, r8
   d48a6:	4649      	mov	r1, r9
   d48a8:	f003 fed6 	bl	d8658 <__aeabi_ddiv>
   d48ac:	4604      	mov	r4, r0
   d48ae:	4630      	mov	r0, r6
   d48b0:	460d      	mov	r5, r1
   d48b2:	f003 fd4f 	bl	d8354 <__aeabi_f2d>
   d48b6:	4602      	mov	r2, r0
   d48b8:	460b      	mov	r3, r1
   d48ba:	4620      	mov	r0, r4
   d48bc:	4629      	mov	r1, r5
   d48be:	f003 fbeb 	bl	d8098 <__adddf3>
	double Td = (b * tC) / (a - tC);
   d48c2:	a311      	add	r3, pc, #68	; (adr r3, d4908 <_ZN3DHT15computeDewPointEff+0xb0>)
   d48c4:	e9d3 2300 	ldrd	r2, r3, [r3]
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d48c8:	4606      	mov	r6, r0
   d48ca:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
   d48cc:	f003 fd9a 	bl	d8404 <__aeabi_dmul>
   d48d0:	4632      	mov	r2, r6
   d48d2:	4604      	mov	r4, r0
   d48d4:	460d      	mov	r5, r1
   d48d6:	463b      	mov	r3, r7
   d48d8:	a109      	add	r1, pc, #36	; (adr r1, d4900 <_ZN3DHT15computeDewPointEff+0xa8>)
   d48da:	e9d1 0100 	ldrd	r0, r1, [r1]
   d48de:	f003 fbd9 	bl	d8094 <__aeabi_dsub>
   d48e2:	4602      	mov	r2, r0
   d48e4:	460b      	mov	r3, r1
   d48e6:	4620      	mov	r0, r4
   d48e8:	4629      	mov	r1, r5
   d48ea:	f003 feb5 	bl	d8658 <__aeabi_ddiv>
	return Td;
   d48ee:	f004 f861 	bl	d89b4 <__aeabi_d2f>
}
   d48f2:	ecbd 8b02 	vpop	{d8}
   d48f6:	ee00 0a10 	vmov	s0, r0
   d48fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d48fe:	bf00      	nop
   d4900:	4189374c 	.word	0x4189374c
   d4904:	40314560 	.word	0x40314560
   d4908:	66666666 	.word	0x66666666
   d490c:	406db666 	.word	0x406db666
   d4910:	42c80000 	.word	0x42c80000

000d4914 <_ZN3DHT4readEv>:

boolean DHT::read(void) {
   d4914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4918:	4604      	mov	r4, r0
   d491a:	b085      	sub	sp, #20
   d491c:	f000 fd64 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4920:	68e3      	ldr	r3, [r4, #12]
   d4922:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4924:	bf84      	itt	hi
   d4926:	2300      	movhi	r3, #0
   d4928:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d492a:	7c23      	ldrb	r3, [r4, #16]
   d492c:	b92b      	cbnz	r3, d493a <_ZN3DHT4readEv+0x26>
   d492e:	68e3      	ldr	r3, [r4, #12]
   d4930:	1ac0      	subs	r0, r0, r3
   d4932:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4936:	f0c0 8160 	bcc.w	d4bfa <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d493a:	2500      	movs	r5, #0
   d493c:	7425      	strb	r5, [r4, #16]
   d493e:	f000 fd53 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4942:	4eb0      	ldr	r6, [pc, #704]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4944:	6025      	str	r5, [r4, #0]
   d4946:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4948:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d494a:	79a7      	ldrb	r7, [r4, #6]
   d494c:	7833      	ldrb	r3, [r6, #0]
   d494e:	4dae      	ldr	r5, [pc, #696]	; (d4c08 <_ZN3DHT4readEv+0x2f4>)
   d4950:	f3bf 8f5b 	dmb	ish
   d4954:	f013 0f01 	tst.w	r3, #1
   d4958:	d109      	bne.n	d496e <_ZN3DHT4readEv+0x5a>
   d495a:	4630      	mov	r0, r6
   d495c:	f7ff fba3 	bl	d40a6 <__cxa_guard_acquire>
   d4960:	b128      	cbz	r0, d496e <_ZN3DHT4readEv+0x5a>
   d4962:	f000 fcf1 	bl	d5348 <HAL_Pin_Map>
   d4966:	6028      	str	r0, [r5, #0]
   d4968:	4630      	mov	r0, r6
   d496a:	f7ff fba1 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d496e:	682b      	ldr	r3, [r5, #0]
   d4970:	013f      	lsls	r7, r7, #4
   d4972:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4976:	7833      	ldrb	r3, [r6, #0]
   d4978:	f3bf 8f5b 	dmb	ish
   d497c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d497e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4982:	d409      	bmi.n	d4998 <_ZN3DHT4readEv+0x84>
   d4984:	489f      	ldr	r0, [pc, #636]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d4986:	f7ff fb8e 	bl	d40a6 <__cxa_guard_acquire>
   d498a:	b128      	cbz	r0, d4998 <_ZN3DHT4readEv+0x84>
   d498c:	f000 fcdc 	bl	d5348 <HAL_Pin_Map>
   d4990:	6028      	str	r0, [r5, #0]
   d4992:	489c      	ldr	r0, [pc, #624]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d4994:	f7ff fb8c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4998:	682b      	ldr	r3, [r5, #0]
   d499a:	441f      	add	r7, r3
   d499c:	7878      	ldrb	r0, [r7, #1]
   d499e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d49a2:	ea40 0008 	orr.w	r0, r0, r8
   d49a6:	f7ff fe3d 	bl	d4624 <nrf_gpio_pin_set>
	delay(250);
   d49aa:	20fa      	movs	r0, #250	; 0xfa
   d49ac:	f001 f978 	bl	d5ca0 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d49b0:	79a0      	ldrb	r0, [r4, #6]
   d49b2:	2101      	movs	r1, #1
   d49b4:	f001 ffc8 	bl	d6948 <pinMode>
	pinResetFast(_pin);
   d49b8:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49ba:	7833      	ldrb	r3, [r6, #0]
   d49bc:	f3bf 8f5b 	dmb	ish
   d49c0:	07da      	lsls	r2, r3, #31
   d49c2:	d409      	bmi.n	d49d8 <_ZN3DHT4readEv+0xc4>
   d49c4:	488f      	ldr	r0, [pc, #572]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d49c6:	f7ff fb6e 	bl	d40a6 <__cxa_guard_acquire>
   d49ca:	b128      	cbz	r0, d49d8 <_ZN3DHT4readEv+0xc4>
   d49cc:	f000 fcbc 	bl	d5348 <HAL_Pin_Map>
   d49d0:	6028      	str	r0, [r5, #0]
   d49d2:	488c      	ldr	r0, [pc, #560]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d49d4:	f7ff fb6c 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d49d8:	682b      	ldr	r3, [r5, #0]
   d49da:	013f      	lsls	r7, r7, #4
   d49dc:	5ddb      	ldrb	r3, [r3, r7]
   d49de:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49e2:	7833      	ldrb	r3, [r6, #0]
   d49e4:	f3bf 8f5b 	dmb	ish
   d49e8:	07db      	lsls	r3, r3, #31
   d49ea:	d409      	bmi.n	d4a00 <_ZN3DHT4readEv+0xec>
   d49ec:	4885      	ldr	r0, [pc, #532]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d49ee:	f7ff fb5a 	bl	d40a6 <__cxa_guard_acquire>
   d49f2:	b128      	cbz	r0, d4a00 <_ZN3DHT4readEv+0xec>
   d49f4:	f000 fca8 	bl	d5348 <HAL_Pin_Map>
   d49f8:	6028      	str	r0, [r5, #0]
   d49fa:	4882      	ldr	r0, [pc, #520]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d49fc:	f7ff fb58 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a00:	682b      	ldr	r3, [r5, #0]
   d4a02:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a04:	a803      	add	r0, sp, #12
   d4a06:	787b      	ldrb	r3, [r7, #1]
   d4a08:	f003 031f 	and.w	r3, r3, #31
   d4a0c:	ea43 0308 	orr.w	r3, r3, r8
   d4a10:	9303      	str	r3, [sp, #12]
   d4a12:	f7ff fdef 	bl	d45f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4a16:	9a03      	ldr	r2, [sp, #12]
   d4a18:	2301      	movs	r3, #1
   d4a1a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4a1c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4a20:	2014      	movs	r0, #20
   d4a22:	f001 f93d 	bl	d5ca0 <delay>
	noInterrupts();
   d4a26:	f001 fb09 	bl	d603c <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4a2a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a2c:	7833      	ldrb	r3, [r6, #0]
   d4a2e:	f3bf 8f5b 	dmb	ish
   d4a32:	07d8      	lsls	r0, r3, #31
   d4a34:	d409      	bmi.n	d4a4a <_ZN3DHT4readEv+0x136>
   d4a36:	4873      	ldr	r0, [pc, #460]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d4a38:	f7ff fb35 	bl	d40a6 <__cxa_guard_acquire>
   d4a3c:	b128      	cbz	r0, d4a4a <_ZN3DHT4readEv+0x136>
   d4a3e:	f000 fc83 	bl	d5348 <HAL_Pin_Map>
   d4a42:	6028      	str	r0, [r5, #0]
   d4a44:	486f      	ldr	r0, [pc, #444]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d4a46:	f7ff fb33 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a4a:	682b      	ldr	r3, [r5, #0]
   d4a4c:	013f      	lsls	r7, r7, #4
   d4a4e:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a52:	7833      	ldrb	r3, [r6, #0]
   d4a54:	f3bf 8f5b 	dmb	ish
   d4a58:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a5a:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a5e:	d409      	bmi.n	d4a74 <_ZN3DHT4readEv+0x160>
   d4a60:	4868      	ldr	r0, [pc, #416]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d4a62:	f7ff fb20 	bl	d40a6 <__cxa_guard_acquire>
   d4a66:	b128      	cbz	r0, d4a74 <_ZN3DHT4readEv+0x160>
   d4a68:	f000 fc6e 	bl	d5348 <HAL_Pin_Map>
   d4a6c:	6028      	str	r0, [r5, #0]
   d4a6e:	4865      	ldr	r0, [pc, #404]	; (d4c04 <_ZN3DHT4readEv+0x2f0>)
   d4a70:	f7ff fb1e 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a74:	682b      	ldr	r3, [r5, #0]
   d4a76:	441f      	add	r7, r3
   d4a78:	7878      	ldrb	r0, [r7, #1]
   d4a7a:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4a7e:	ea40 0008 	orr.w	r0, r0, r8
   d4a82:	f7ff fdcf 	bl	d4624 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4a86:	2028      	movs	r0, #40	; 0x28
   d4a88:	f000 fca6 	bl	d53d8 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4a8c:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a8e:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4c04 <_ZN3DHT4readEv+0x2f0>
   d4a92:	2100      	movs	r1, #0
   d4a94:	f001 ff58 	bl	d6948 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4a98:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4a9a:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4a9c:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4a9e:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4aa0:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4aa4:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4aa8:	7833      	ldrb	r3, [r6, #0]
   d4aaa:	f3bf 8f5b 	dmb	ish
   d4aae:	07da      	lsls	r2, r3, #31
   d4ab0:	d409      	bmi.n	d4ac6 <_ZN3DHT4readEv+0x1b2>
   d4ab2:	4640      	mov	r0, r8
   d4ab4:	f7ff faf7 	bl	d40a6 <__cxa_guard_acquire>
   d4ab8:	b128      	cbz	r0, d4ac6 <_ZN3DHT4readEv+0x1b2>
   d4aba:	f000 fc45 	bl	d5348 <HAL_Pin_Map>
   d4abe:	6028      	str	r0, [r5, #0]
   d4ac0:	4640      	mov	r0, r8
   d4ac2:	f7ff faf5 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ac6:	682b      	ldr	r3, [r5, #0]
   d4ac8:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4acc:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4ad0:	015b      	lsls	r3, r3, #5
   d4ad2:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ad4:	7833      	ldrb	r3, [r6, #0]
   d4ad6:	f3bf 8f5b 	dmb	ish
   d4ada:	07db      	lsls	r3, r3, #31
   d4adc:	d409      	bmi.n	d4af2 <_ZN3DHT4readEv+0x1de>
   d4ade:	4640      	mov	r0, r8
   d4ae0:	f7ff fae1 	bl	d40a6 <__cxa_guard_acquire>
   d4ae4:	b128      	cbz	r0, d4af2 <_ZN3DHT4readEv+0x1de>
   d4ae6:	f000 fc2f 	bl	d5348 <HAL_Pin_Map>
   d4aea:	6028      	str	r0, [r5, #0]
   d4aec:	4640      	mov	r0, r8
   d4aee:	f7ff fadf 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4af2:	682b      	ldr	r3, [r5, #0]
   d4af4:	445b      	add	r3, fp
   d4af6:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4afa:	9b01      	ldr	r3, [sp, #4]
   d4afc:	f00b 0b1f 	and.w	fp, fp, #31
   d4b00:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4b04:	4658      	mov	r0, fp
   d4b06:	f7ff fd9a 	bl	d463e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4b0a:	4658      	mov	r0, fp
   d4b0c:	f7ff fd97 	bl	d463e <nrf_gpio_pin_read>
   d4b10:	9b00      	ldr	r3, [sp, #0]
   d4b12:	4283      	cmp	r3, r0
   d4b14:	d109      	bne.n	d4b2a <_ZN3DHT4readEv+0x216>
			counter++;
   d4b16:	f109 0901 	add.w	r9, r9, #1
   d4b1a:	fa5f f989 	uxtb.w	r9, r9
   d4b1e:	2001      	movs	r0, #1
   d4b20:	f000 fc5a 	bl	d53d8 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4b24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4b28:	d1bc      	bne.n	d4aa4 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4b2a:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b2e:	7833      	ldrb	r3, [r6, #0]
   d4b30:	f3bf 8f5b 	dmb	ish
   d4b34:	07d8      	lsls	r0, r3, #31
   d4b36:	d409      	bmi.n	d4b4c <_ZN3DHT4readEv+0x238>
   d4b38:	4640      	mov	r0, r8
   d4b3a:	f7ff fab4 	bl	d40a6 <__cxa_guard_acquire>
   d4b3e:	b128      	cbz	r0, d4b4c <_ZN3DHT4readEv+0x238>
   d4b40:	f000 fc02 	bl	d5348 <HAL_Pin_Map>
   d4b44:	6028      	str	r0, [r5, #0]
   d4b46:	4640      	mov	r0, r8
   d4b48:	f7ff fab2 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b4c:	682b      	ldr	r3, [r5, #0]
   d4b4e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4b52:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4b56:	015b      	lsls	r3, r3, #5
   d4b58:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b5a:	7833      	ldrb	r3, [r6, #0]
   d4b5c:	f3bf 8f5b 	dmb	ish
   d4b60:	07d9      	lsls	r1, r3, #31
   d4b62:	d409      	bmi.n	d4b78 <_ZN3DHT4readEv+0x264>
   d4b64:	4640      	mov	r0, r8
   d4b66:	f7ff fa9e 	bl	d40a6 <__cxa_guard_acquire>
   d4b6a:	b128      	cbz	r0, d4b78 <_ZN3DHT4readEv+0x264>
   d4b6c:	f000 fbec 	bl	d5348 <HAL_Pin_Map>
   d4b70:	6028      	str	r0, [r5, #0]
   d4b72:	4640      	mov	r0, r8
   d4b74:	f7ff fa9c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b78:	682b      	ldr	r3, [r5, #0]
   d4b7a:	445b      	add	r3, fp
   d4b7c:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4b80:	9b00      	ldr	r3, [sp, #0]
   d4b82:	f00b 0b1f 	and.w	fp, fp, #31
   d4b86:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4b8a:	4658      	mov	r0, fp
   d4b8c:	f7ff fd57 	bl	d463e <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4b90:	4658      	mov	r0, fp
   d4b92:	f7ff fd54 	bl	d463e <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4b96:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4b9a:	b2c3      	uxtb	r3, r0
   d4b9c:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4b9e:	d018      	beq.n	d4bd2 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4ba0:	2f03      	cmp	r7, #3
   d4ba2:	d911      	bls.n	d4bc8 <_ZN3DHT4readEv+0x2b4>
   d4ba4:	07fa      	lsls	r2, r7, #31
   d4ba6:	d40f      	bmi.n	d4bc8 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4ba8:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4bac:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4bb0:	5ca3      	ldrb	r3, [r4, r2]
   d4bb2:	005b      	lsls	r3, r3, #1
   d4bb4:	b2db      	uxtb	r3, r3
   d4bb6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4bb8:	7a21      	ldrb	r1, [r4, #8]
   d4bba:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4bbc:	bf3c      	itt	cc
   d4bbe:	f043 0301 	orrcc.w	r3, r3, #1
   d4bc2:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4bc4:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4bc8:	3701      	adds	r7, #1
   d4bca:	b2ff      	uxtb	r7, r7
   d4bcc:	2f55      	cmp	r7, #85	; 0x55
   d4bce:	f47f af67 	bne.w	d4aa0 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4bd2:	f001 fa35 	bl	d6040 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4bd6:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4bda:	d910      	bls.n	d4bfe <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4bdc:	7863      	ldrb	r3, [r4, #1]
   d4bde:	7820      	ldrb	r0, [r4, #0]
   d4be0:	4418      	add	r0, r3
   d4be2:	78a3      	ldrb	r3, [r4, #2]
   d4be4:	4418      	add	r0, r3
   d4be6:	78e3      	ldrb	r3, [r4, #3]
   d4be8:	4418      	add	r0, r3
   d4bea:	7923      	ldrb	r3, [r4, #4]
   d4bec:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4bee:	1ac3      	subs	r3, r0, r3
   d4bf0:	4258      	negs	r0, r3
   d4bf2:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

   d4bf4:	b005      	add	sp, #20
   d4bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4bfa:	2001      	movs	r0, #1
   d4bfc:	e7fa      	b.n	d4bf4 <_ZN3DHT4readEv+0x2e0>
	return false;
   d4bfe:	2000      	movs	r0, #0
   d4c00:	e7f8      	b.n	d4bf4 <_ZN3DHT4readEv+0x2e0>
   d4c02:	bf00      	nop
   d4c04:	2003e4e4 	.word	0x2003e4e4
   d4c08:	2003e4e8 	.word	0x2003e4e8

000d4c0c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4c0c:	b510      	push	{r4, lr}
   d4c0e:	4604      	mov	r4, r0
	if (read()) {
   d4c10:	f7ff fe80 	bl	d4914 <_ZN3DHT4readEv>
   d4c14:	b320      	cbz	r0, d4c60 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4c16:	79e3      	ldrb	r3, [r4, #7]
   d4c18:	2b0b      	cmp	r3, #11
   d4c1a:	d01b      	beq.n	d4c54 <_ZN3DHT15readTemperatureEv+0x48>
   d4c1c:	3b15      	subs	r3, #21
   d4c1e:	2b01      	cmp	r3, #1
   d4c20:	d81e      	bhi.n	d4c60 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4c22:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4c24:	eddf 6a10 	vldr	s13, [pc, #64]	; d4c68 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4c2c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4c30:	78e2      	ldrb	r2, [r4, #3]
   d4c32:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4c36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4c3e:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4c40:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4c44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4c48:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4c4c:	d507      	bpl.n	d4c5e <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4c4e:	eeb1 0a40 	vneg.f32	s0, s0
   d4c52:	e004      	b.n	d4c5e <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4c54:	78a3      	ldrb	r3, [r4, #2]
   d4c56:	ee00 3a10 	vmov	s0, r3
   d4c5a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4c5e:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4c60:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c6c <_ZN3DHT15readTemperatureEv+0x60>
   d4c64:	e7fb      	b.n	d4c5e <_ZN3DHT15readTemperatureEv+0x52>
   d4c66:	bf00      	nop
   d4c68:	43800000 	.word	0x43800000
   d4c6c:	7fc00000 	.word	0x7fc00000

000d4c70 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4c70:	f7ff bfcc 	b.w	d4c0c <_ZN3DHT15readTemperatureEv>

000d4c74 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4c74:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4c76:	f7ff ffc9 	bl	d4c0c <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4c7a:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4c7e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4c82:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4c86:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4c8a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c94 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4c8e:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	42000000 	.word	0x42000000

000d4c98 <_ZN3DHT13getTempKelvinEv>:
float DHT::getTempKelvin() {
   d4c98:	b508      	push	{r3, lr}
	return convertCtoK(readTemperature());
   d4c9a:	f7ff ffb7 	bl	d4c0c <_ZN3DHT15readTemperatureEv>
   d4c9e:	ee10 0a10 	vmov	r0, s0
	return c + 273.15;
   d4ca2:	f003 fb57 	bl	d8354 <__aeabi_f2d>
   d4ca6:	a306      	add	r3, pc, #24	; (adr r3, d4cc0 <_ZN3DHT13getTempKelvinEv+0x28>)
   d4ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cac:	f003 f9f4 	bl	d8098 <__adddf3>
   d4cb0:	f003 fe80 	bl	d89b4 <__aeabi_d2f>
}
   d4cb4:	ee00 0a10 	vmov	s0, r0
   d4cb8:	bd08      	pop	{r3, pc}
   d4cba:	bf00      	nop
   d4cbc:	f3af 8000 	nop.w
   d4cc0:	66666666 	.word	0x66666666
   d4cc4:	40711266 	.word	0x40711266

000d4cc8 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4cc8:	b510      	push	{r4, lr}
   d4cca:	4604      	mov	r4, r0
	if (read()) {
   d4ccc:	f7ff fe22 	bl	d4914 <_ZN3DHT4readEv>
   d4cd0:	b1f0      	cbz	r0, d4d10 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4cd2:	79e3      	ldrb	r3, [r4, #7]
   d4cd4:	2b0b      	cmp	r3, #11
   d4cd6:	d015      	beq.n	d4d04 <_ZN3DHT12readHumidityEv+0x3c>
   d4cd8:	3b15      	subs	r3, #21
   d4cda:	2b01      	cmp	r3, #1
   d4cdc:	d818      	bhi.n	d4d10 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4cde:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4ce0:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4d18 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4ce4:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4ce8:	7863      	ldrb	r3, [r4, #1]
   d4cea:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4cee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4cf6:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4cfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4cfe:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4d02:	bd10      	pop	{r4, pc}
				f = data[0];
   d4d04:	7823      	ldrb	r3, [r4, #0]
   d4d06:	ee00 3a10 	vmov	s0, r3
   d4d0a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4d0e:	e7f8      	b.n	d4d02 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4d10:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4d1c <_ZN3DHT12readHumidityEv+0x54>
   d4d14:	e7f5      	b.n	d4d02 <_ZN3DHT12readHumidityEv+0x3a>
   d4d16:	bf00      	nop
   d4d18:	43800000 	.word	0x43800000
   d4d1c:	7fc00000 	.word	0x7fc00000

000d4d20 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4d20:	f7ff bfd2 	b.w	d4cc8 <_ZN3DHT12readHumidityEv>

000d4d24 <_ZN3DHT12getHeatIndexEv>:
float DHT::getHeatIndex() {
   d4d24:	b510      	push	{r4, lr}
   d4d26:	ed2d 8b04 	vpush	{d8-d9}
   d4d2a:	4604      	mov	r4, r0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d2c:	f7ff ff6e 	bl	d4c0c <_ZN3DHT15readTemperatureEv>
   d4d30:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   d4d32:	eef2 8a02 	vmov.f32	s17, #34	; 0x41100000  9.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d36:	eeb0 8a40 	vmov.f32	s16, s0
   d4d3a:	f7ff ffc5 	bl	d4cc8 <_ZN3DHT12readHumidityEv>
	return c * 9 / 5 + 32;
   d4d3e:	ee28 8a28 	vmul.f32	s16, s16, s17
   d4d42:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d46:	eef0 0a40 	vmov.f32	s1, s0
	return c * 9 / 5 + 32;
   d4d4a:	ee88 0a09 	vdiv.f32	s0, s16, s18
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d4e:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   d4d50:	ed9f 8a07 	vldr	s16, [pc, #28]	; d4d70 <_ZN3DHT12getHeatIndexEv+0x4c>
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d4d54:	ee30 0a08 	vadd.f32	s0, s0, s16
   d4d58:	f7ff fc9e 	bl	d4698 <_ZN3DHT16computeHeatIndexEff>
	return (f - 32) * 5 / 9;
   d4d5c:	ee30 0a48 	vsub.f32	s0, s0, s16
   d4d60:	ee20 0a09 	vmul.f32	s0, s0, s18
}
   d4d64:	ee80 0a28 	vdiv.f32	s0, s0, s17
   d4d68:	ecbd 8b04 	vpop	{d8-d9}
   d4d6c:	bd10      	pop	{r4, pc}
   d4d6e:	bf00      	nop
   d4d70:	42000000 	.word	0x42000000

000d4d74 <_ZN3DHT11getDewPointEv>:
float DHT::getDewPoint() {
   d4d74:	b510      	push	{r4, lr}
   d4d76:	ed2d 8b02 	vpush	{d8}
   d4d7a:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
   d4d7c:	f7ff ff46 	bl	d4c0c <_ZN3DHT15readTemperatureEv>
   d4d80:	4620      	mov	r0, r4
   d4d82:	eeb0 8a40 	vmov.f32	s16, s0
   d4d86:	f7ff ff9f 	bl	d4cc8 <_ZN3DHT12readHumidityEv>
   d4d8a:	eef0 0a40 	vmov.f32	s1, s0
   d4d8e:	eeb0 0a48 	vmov.f32	s0, s16
}
   d4d92:	ecbd 8b02 	vpop	{d8}
	return computeDewPoint(readTemperature(), readHumidity());
   d4d96:	4620      	mov	r0, r4
}
   d4d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return computeDewPoint(readTemperature(), readHumidity());
   d4d9c:	f7ff bd5c 	b.w	d4858 <_ZN3DHT15computeDewPointEff>

000d4da0 <_ZN11CSmartLightC1Ev>:
#include "smartlight.h"

CSmartLight::CSmartLight() {
   d4da0:	b538      	push	{r3, r4, r5, lr}
   d4da2:	f100 0520 	add.w	r5, r0, #32
   d4da6:	4604      	mov	r4, r0
   d4da8:	490c      	ldr	r1, [pc, #48]	; (d4ddc <_ZN11CSmartLightC1Ev+0x3c>)
   d4daa:	4628      	mov	r0, r5
   d4dac:	f000 fde5 	bl	d597a <_ZN6StringC1EPKc>
    state_L0 = CSmartLight::S_ON;
   d4db0:	f240 1301 	movw	r3, #257	; 0x101
   d4db4:	8023      	strh	r3, [r4, #0]
    state_L1 = CSmartLight::S_AUTO;
    brightness = RGB_BRIGHTNESS_DEAULT;
   d4db6:	2380      	movs	r3, #128	; 0x80
   d4db8:	6063      	str	r3, [r4, #4]
    sensorMax = LIGHT_SENSOR_MAX;
    sensorMin = LIGHT_SENSOR_MIN;
   d4dba:	f640 11c4 	movw	r1, #2500	; 0x9c4
   d4dbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4dc2:	e9c4 1303 	strd	r1, r3, [r4, #12]

    statusStr = "{}";
   d4dc6:	4628      	mov	r0, r5
   d4dc8:	4905      	ldr	r1, [pc, #20]	; (d4de0 <_ZN11CSmartLightC1Ev+0x40>)
   d4dca:	f000 fe29 	bl	d5a20 <_ZN6StringaSEPKc>
    resetCmd();
    createStatusStr();
}

void CSmartLight::resetCmd() {
    cmd.On = INVALID_CMD;
   d4dce:	4b05      	ldr	r3, [pc, #20]	; (d4de4 <_ZN11CSmartLightC1Ev+0x44>)
    cmd.Auto = INVALID_CMD;
    cmd.Brightness = INVALID_CMD;
   d4dd0:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4dd2:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	bd38      	pop	{r3, r4, r5, pc}
   d4dda:	bf00      	nop
   d4ddc:	000d8fa7 	.word	0x000d8fa7
   d4de0:	000d8d24 	.word	0x000d8d24
   d4de4:	fffe7961 	.word	0xfffe7961

000d4de8 <_ZN11CSmartLight12turnOffLightEv>:
}

void CSmartLight::turnOffLight() {
   d4de8:	b508      	push	{r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4dea:	f000 ff8d 	bl	d5d08 <_ZN8RGBClass10brightnessEv>
   d4dee:	b128      	cbz	r0, d4dfc <_ZN11CSmartLight12turnOffLightEv+0x14>
}
   d4df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (RGB.brightness() != 0) RGB.brightness(0);
   d4df4:	2101      	movs	r1, #1
   d4df6:	2000      	movs	r0, #0
   d4df8:	f000 bf78 	b.w	d5cec <_ZN8RGBClass10brightnessEhb>
}
   d4dfc:	bd08      	pop	{r3, pc}
	...

000d4e00 <_ZN11CSmartLight24updateBrightnessManuallyEi>:

// 0 <= val <= 100 (i.e., %)
void CSmartLight::updateBrightnessManually(int val) {
   d4e00:	b538      	push	{r3, r4, r5, lr}
    if (val == INVALID_CMD) {
   d4e02:	4b13      	ldr	r3, [pc, #76]	; (d4e50 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x50>)
   d4e04:	4299      	cmp	r1, r3
void CSmartLight::updateBrightnessManually(int val) {
   d4e06:	4604      	mov	r4, r0
   d4e08:	4608      	mov	r0, r1
    if (val == INVALID_CMD) {
   d4e0a:	d10a      	bne.n	d4e22 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x22>
        if (brightness != RGB.brightness()) RGB.brightness(brightness);
   d4e0c:	6865      	ldr	r5, [r4, #4]
   d4e0e:	f000 ff7b 	bl	d5d08 <_ZN8RGBClass10brightnessEv>
   d4e12:	4285      	cmp	r5, r0
   d4e14:	d016      	beq.n	d4e44 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x44>
   d4e16:	7920      	ldrb	r0, [r4, #4]
   d4e18:	2101      	movs	r1, #1
        return;
    }
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
    RGB.brightness(brightness);
}
   d4e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    RGB.brightness(brightness);
   d4e1e:	f000 bf65 	b.w	d5cec <_ZN8RGBClass10brightnessEhb>
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d4e22:	f003 fa85 	bl	d8330 <__aeabi_i2d>
   d4e26:	a308      	add	r3, pc, #32	; (adr r3, d4e48 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x48>)
   d4e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e2c:	f003 faea 	bl	d8404 <__aeabi_dmul>
   d4e30:	4b08      	ldr	r3, [pc, #32]	; (d4e54 <_ZN11CSmartLight24updateBrightnessManuallyEi+0x54>)
   d4e32:	2200      	movs	r2, #0
   d4e34:	f003 fc10 	bl	d8658 <__aeabi_ddiv>
   d4e38:	f003 fd94 	bl	d8964 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4e3c:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(double)val/100.0);
   d4e3e:	6060      	str	r0, [r4, #4]
    RGB.brightness(brightness);
   d4e40:	b2c0      	uxtb	r0, r0
   d4e42:	e7ea      	b.n	d4e1a <_ZN11CSmartLight24updateBrightnessManuallyEi+0x1a>
}
   d4e44:	bd38      	pop	{r3, r4, r5, pc}
   d4e46:	bf00      	nop
   d4e48:	00000000 	.word	0x00000000
   d4e4c:	406fe000 	.word	0x406fe000
   d4e50:	fffe7961 	.word	0xfffe7961
   d4e54:	40590000 	.word	0x40590000

000d4e58 <_ZN11CSmartLight13readSensorValEv>:

    RGB.brightness(brightness);
}


void CSmartLight::readSensorVal() {
   d4e58:	b510      	push	{r4, lr}
   d4e5a:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d4e5c:	2013      	movs	r0, #19
   d4e5e:	f001 fd9d 	bl	d699c <analogRead>
   d4e62:	60a0      	str	r0, [r4, #8]
}
   d4e64:	bd10      	pop	{r4, pc}
	...

000d4e68 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>:
void CSmartLight::updataBrightnessAutomatically() {
   d4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e6c:	4604      	mov	r4, r0
    readSensorVal();
   d4e6e:	f7ff fff3 	bl	d4e58 <_ZN11CSmartLight13readSensorValEv>
    if(curSensorVal < sensorMin) curSensorVal = sensorMin;
   d4e72:	6925      	ldr	r5, [r4, #16]
   d4e74:	68a0      	ldr	r0, [r4, #8]
    if(curSensorVal > sensorMax) curSensorVal = sensorMax;
   d4e76:	f8d4 800c 	ldr.w	r8, [r4, #12]
   d4e7a:	42a8      	cmp	r0, r5
   d4e7c:	bfb8      	it	lt
   d4e7e:	4628      	movlt	r0, r5
    double amountOfLight = (double)(curSensorVal-sensorMin)/(double)(sensorMax-sensorMin);
   d4e80:	4580      	cmp	r8, r0
   d4e82:	bfd4      	ite	le
   d4e84:	ebc5 0008 	rsble	r0, r5, r8
   d4e88:	ebc5 0000 	rsbgt	r0, r5, r0
   d4e8c:	f003 fa50 	bl	d8330 <__aeabi_i2d>
   d4e90:	4606      	mov	r6, r0
   d4e92:	eba8 0005 	sub.w	r0, r8, r5
   d4e96:	460f      	mov	r7, r1
   d4e98:	f003 fa4a 	bl	d8330 <__aeabi_i2d>
   d4e9c:	4602      	mov	r2, r0
   d4e9e:	460b      	mov	r3, r1
   d4ea0:	4630      	mov	r0, r6
   d4ea2:	4639      	mov	r1, r7
   d4ea4:	f003 fbd8 	bl	d8658 <__aeabi_ddiv>
   d4ea8:	4602      	mov	r2, r0
   d4eaa:	460b      	mov	r3, r1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4eac:	2000      	movs	r0, #0
   d4eae:	490a      	ldr	r1, [pc, #40]	; (d4ed8 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x70>)
   d4eb0:	f003 f8f0 	bl	d8094 <__aeabi_dsub>
   d4eb4:	a306      	add	r3, pc, #24	; (adr r3, d4ed0 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv+0x68>)
   d4eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4eba:	f003 faa3 	bl	d8404 <__aeabi_dmul>
   d4ebe:	f003 fd51 	bl	d8964 <__aeabi_d2iz>
    RGB.brightness(brightness);
   d4ec2:	2101      	movs	r1, #1
    brightness = (int)((double)RGB_BRIGHTNESS_MAX*(1.0-amountOfLight));
   d4ec4:	6060      	str	r0, [r4, #4]
}
   d4ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    RGB.brightness(brightness);
   d4eca:	b2c0      	uxtb	r0, r0
   d4ecc:	f000 bf0e 	b.w	d5cec <_ZN8RGBClass10brightnessEhb>
   d4ed0:	00000000 	.word	0x00000000
   d4ed4:	406fe000 	.word	0x406fe000
   d4ed8:	3ff00000 	.word	0x3ff00000
   d4edc:	00000000 	.word	0x00000000

000d4ee0 <_ZN11CSmartLight15createStatusStrEv>:
int CSmartLight::getSensorVal() {
    return sensorVal;
}


void CSmartLight::createStatusStr() {
   d4ee0:	b570      	push	{r4, r5, r6, lr}
   d4ee2:	b088      	sub	sp, #32
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4ee4:	68c3      	ldr	r3, [r0, #12]
   d4ee6:	7846      	ldrb	r6, [r0, #1]
   d4ee8:	7805      	ldrb	r5, [r0, #0]
   d4eea:	9303      	str	r3, [sp, #12]
   d4eec:	6903      	ldr	r3, [r0, #16]
   d4eee:	9302      	str	r3, [sp, #8]
   d4ef0:	6883      	ldr	r3, [r0, #8]
   d4ef2:	9301      	str	r3, [sp, #4]
void CSmartLight::createStatusStr() {
   d4ef4:	4604      	mov	r4, r0
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4ef6:	6840      	ldr	r0, [r0, #4]
   d4ef8:	f003 fa1a 	bl	d8330 <__aeabi_i2d>
   d4efc:	a310      	add	r3, pc, #64	; (adr r3, d4f40 <_ZN11CSmartLight15createStatusStrEv+0x60>)
   d4efe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f02:	f003 fba9 	bl	d8658 <__aeabi_ddiv>
   d4f06:	4b0c      	ldr	r3, [pc, #48]	; (d4f38 <_ZN11CSmartLight15createStatusStrEv+0x58>)
   d4f08:	2200      	movs	r2, #0
   d4f0a:	f003 fa7b 	bl	d8404 <__aeabi_dmul>
    statusStr = String::format("{\"L0\":%d,\"L1\":%d,\"b\":%d,\"s\":%d,\"m\":%d,\"M\":%d}", 
   d4f0e:	f003 fd29 	bl	d8964 <__aeabi_d2iz>
   d4f12:	4633      	mov	r3, r6
   d4f14:	462a      	mov	r2, r5
   d4f16:	9000      	str	r0, [sp, #0]
   d4f18:	4908      	ldr	r1, [pc, #32]	; (d4f3c <_ZN11CSmartLight15createStatusStrEv+0x5c>)
   d4f1a:	a804      	add	r0, sp, #16
   d4f1c:	f000 fdbe 	bl	d5a9c <_ZN6String6formatEPKcz>
        state_L0, state_L1, (int)((double)brightness/RGB_BRIGHTNESS_MAX*100.0), sensorVal, sensorMin, sensorMax);
   d4f20:	a904      	add	r1, sp, #16
   d4f22:	f104 0020 	add.w	r0, r4, #32
   d4f26:	f000 fd73 	bl	d5a10 <_ZN6StringaSEOS_>
   d4f2a:	a804      	add	r0, sp, #16
   d4f2c:	f000 fcda 	bl	d58e4 <_ZN6StringD1Ev>
   d4f30:	b008      	add	sp, #32
   d4f32:	bd70      	pop	{r4, r5, r6, pc}
   d4f34:	f3af 8000 	nop.w
   d4f38:	40590000 	.word	0x40590000
   d4f3c:	000d8d9e 	.word	0x000d8d9e
   d4f40:	00000000 	.word	0x00000000
   d4f44:	406fe000 	.word	0x406fe000

000d4f48 <_ZN11CSmartLight7executeEv>:
void CSmartLight::execute() {
   d4f48:	b538      	push	{r3, r4, r5, lr}
    switch (state_L0) {
   d4f4a:	7805      	ldrb	r5, [r0, #0]
void CSmartLight::execute() {
   d4f4c:	4604      	mov	r4, r0
    switch (state_L0) {
   d4f4e:	b155      	cbz	r5, d4f66 <_ZN11CSmartLight7executeEv+0x1e>
   d4f50:	2d01      	cmp	r5, #1
   d4f52:	d013      	beq.n	d4f7c <_ZN11CSmartLight7executeEv+0x34>
    cmd.On = INVALID_CMD;
   d4f54:	4b17      	ldr	r3, [pc, #92]	; (d4fb4 <_ZN11CSmartLight7executeEv+0x6c>)
    cmd.Brightness = INVALID_CMD;
   d4f56:	61e3      	str	r3, [r4, #28]
    cmd.Auto = INVALID_CMD;
   d4f58:	e9c4 3305 	strd	r3, r3, [r4, #20]
    createStatusStr();
   d4f5c:	4620      	mov	r0, r4
}
   d4f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d4f62:	f7ff bfbd 	b.w	d4ee0 <_ZN11CSmartLight15createStatusStrEv>
            turnOffLight();
   d4f66:	f7ff ff3f 	bl	d4de8 <_ZN11CSmartLight12turnOffLightEv>
            if (cmd.On != INVALID_CMD) {
   d4f6a:	6963      	ldr	r3, [r4, #20]
   d4f6c:	4a11      	ldr	r2, [pc, #68]	; (d4fb4 <_ZN11CSmartLight7executeEv+0x6c>)
   d4f6e:	4293      	cmp	r3, r2
   d4f70:	d0f0      	beq.n	d4f54 <_ZN11CSmartLight7executeEv+0xc>
                if (cmd.On) { 
   d4f72:	2b00      	cmp	r3, #0
   d4f74:	d0ee      	beq.n	d4f54 <_ZN11CSmartLight7executeEv+0xc>
                    state_L0 = CSmartLight::S_ON;
   d4f76:	2301      	movs	r3, #1
   d4f78:	8023      	strh	r3, [r4, #0]
   d4f7a:	e7eb      	b.n	d4f54 <_ZN11CSmartLight7executeEv+0xc>
            switch (state_L1) {
   d4f7c:	7843      	ldrb	r3, [r0, #1]
   d4f7e:	b133      	cbz	r3, d4f8e <_ZN11CSmartLight7executeEv+0x46>
   d4f80:	2b01      	cmp	r3, #1
   d4f82:	d00f      	beq.n	d4fa4 <_ZN11CSmartLight7executeEv+0x5c>
                if(!cmd.On) state_L0= CSmartLight::S_OFF;
   d4f84:	6963      	ldr	r3, [r4, #20]
   d4f86:	2b00      	cmp	r3, #0
   d4f88:	d1e4      	bne.n	d4f54 <_ZN11CSmartLight7executeEv+0xc>
   d4f8a:	7023      	strb	r3, [r4, #0]
   d4f8c:	e7e2      	b.n	d4f54 <_ZN11CSmartLight7executeEv+0xc>
                    updateBrightnessManually(cmd.Brightness);
   d4f8e:	69c1      	ldr	r1, [r0, #28]
   d4f90:	f7ff ff36 	bl	d4e00 <_ZN11CSmartLight24updateBrightnessManuallyEi>
                    if (cmd.Auto != INVALID_CMD) {
   d4f94:	69a3      	ldr	r3, [r4, #24]
   d4f96:	4a07      	ldr	r2, [pc, #28]	; (d4fb4 <_ZN11CSmartLight7executeEv+0x6c>)
   d4f98:	4293      	cmp	r3, r2
   d4f9a:	d0f3      	beq.n	d4f84 <_ZN11CSmartLight7executeEv+0x3c>
                        if(cmd.Auto) state_L1 = CSmartLight::S_AUTO;
   d4f9c:	2b00      	cmp	r3, #0
   d4f9e:	d0f1      	beq.n	d4f84 <_ZN11CSmartLight7executeEv+0x3c>
   d4fa0:	7065      	strb	r5, [r4, #1]
   d4fa2:	e7ef      	b.n	d4f84 <_ZN11CSmartLight7executeEv+0x3c>
                    updataBrightnessAutomatically();
   d4fa4:	f7ff ff60 	bl	d4e68 <_ZN11CSmartLight29updataBrightnessAutomaticallyEv>
                        if(!cmd.Auto) state_L1 = CSmartLight::S_MANUAL;
   d4fa8:	69a3      	ldr	r3, [r4, #24]
   d4faa:	2b00      	cmp	r3, #0
   d4fac:	d1ea      	bne.n	d4f84 <_ZN11CSmartLight7executeEv+0x3c>
   d4fae:	7063      	strb	r3, [r4, #1]
   d4fb0:	e7e8      	b.n	d4f84 <_ZN11CSmartLight7executeEv+0x3c>
   d4fb2:	bf00      	nop
   d4fb4:	fffe7961 	.word	0xfffe7961

000d4fb8 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4fba:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fbc:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fc0:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	a801      	add	r0, sp, #4
   d4fc6:	f7ff f9c1 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4fca:	466a      	mov	r2, sp
   d4fcc:	4629      	mov	r1, r5
   d4fce:	4620      	mov	r0, r4
   d4fd0:	f001 fbc2 	bl	d6758 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fd4:	a801      	add	r0, sp, #4
   d4fd6:	f7ff f8c2 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fda:	4620      	mov	r0, r4
   d4fdc:	b003      	add	sp, #12
   d4fde:	bd30      	pop	{r4, r5, pc}

000d4fe0 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE>:
void CSmartLight::cmdProcessing(JSONValue cmdJson) {
   d4fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fe4:	b08a      	sub	sp, #40	; 0x28
        JSONObjectIterator(value.t_, value.d_) {
   d4fe6:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fe8:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fec:	9300      	str	r3, [sp, #0]
   d4fee:	4604      	mov	r4, r0
   d4ff0:	a801      	add	r0, sp, #4
   d4ff2:	f7ff f9ab 	bl	d434c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4ff6:	466a      	mov	r2, sp
   d4ff8:	4629      	mov	r1, r5
   d4ffa:	a804      	add	r0, sp, #16
   d4ffc:	f001 fbd0 	bl	d67a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5000:	a801      	add	r0, sp, #4
   d5002:	f7ff f8ac 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d5006:	4e3c      	ldr	r6, [pc, #240]	; (d50f8 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x118>)
   d5008:	4f3c      	ldr	r7, [pc, #240]	; (d50fc <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x11c>)
   d500a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d5108 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x128>
    while (iter.next()) {
   d500e:	a804      	add	r0, sp, #16
   d5010:	f001 fbde 	bl	d67d0 <_ZN5spark18JSONObjectIterator4nextEv>
   d5014:	2800      	cmp	r0, #0
   d5016:	d069      	beq.n	d50ec <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x10c>
        if (iter.name() == "on") {
   d5018:	a904      	add	r1, sp, #16
   d501a:	4668      	mov	r0, sp
   d501c:	f7ff ffcc 	bl	d4fb8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5020:	4631      	mov	r1, r6
   d5022:	9802      	ldr	r0, [sp, #8]
   d5024:	f003 fd70 	bl	d8b08 <strcmp>
   d5028:	4605      	mov	r5, r0
   d502a:	a801      	add	r0, sp, #4
   d502c:	f7ff f897 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.On = (int)iter.value().toBool();
   d5030:	a904      	add	r1, sp, #16
   d5032:	4668      	mov	r0, sp
        if (iter.name() == "on") {
   d5034:	b94d      	cbnz	r5, d504a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x6a>
            cmd.On = (int)iter.value().toBool();
   d5036:	f7ff f8a8 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d503a:	4668      	mov	r0, sp
   d503c:	f001 fa3e 	bl	d64bc <_ZNK5spark9JSONValue6toBoolEv>
   d5040:	6160      	str	r0, [r4, #20]
   d5042:	a801      	add	r0, sp, #4
   d5044:	f7ff f88b 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5048:	e7e1      	b.n	d500e <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
        else if (iter.name() == "auto") {
   d504a:	f7ff ffb5 	bl	d4fb8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d504e:	4639      	mov	r1, r7
   d5050:	9802      	ldr	r0, [sp, #8]
   d5052:	f003 fd59 	bl	d8b08 <strcmp>
   d5056:	4605      	mov	r5, r0
   d5058:	a801      	add	r0, sp, #4
   d505a:	f7ff f880 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Auto = (int)iter.value().toBool();
   d505e:	a904      	add	r1, sp, #16
   d5060:	4668      	mov	r0, sp
        else if (iter.name() == "auto") {
   d5062:	b935      	cbnz	r5, d5072 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x92>
            cmd.Auto = (int)iter.value().toBool();
   d5064:	f7ff f891 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5068:	4668      	mov	r0, sp
   d506a:	f001 fa27 	bl	d64bc <_ZNK5spark9JSONValue6toBoolEv>
   d506e:	61a0      	str	r0, [r4, #24]
   d5070:	e7e7      	b.n	d5042 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "brightness") {
   d5072:	f7ff ffa1 	bl	d4fb8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5076:	4641      	mov	r1, r8
   d5078:	9802      	ldr	r0, [sp, #8]
   d507a:	f003 fd45 	bl	d8b08 <strcmp>
   d507e:	4605      	mov	r5, r0
   d5080:	a801      	add	r0, sp, #4
   d5082:	f7ff f86c 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            cmd.Brightness = iter.value().toInt();
   d5086:	a904      	add	r1, sp, #16
   d5088:	4668      	mov	r0, sp
        else if (iter.name() == "brightness") {
   d508a:	b935      	cbnz	r5, d509a <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xba>
            cmd.Brightness = iter.value().toInt();
   d508c:	f7ff f87d 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d5090:	4668      	mov	r0, sp
   d5092:	f001 fa51 	bl	d6538 <_ZNK5spark9JSONValue5toIntEv>
   d5096:	61e0      	str	r0, [r4, #28]
   d5098:	e7d3      	b.n	d5042 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "min") {
   d509a:	f7ff ff8d 	bl	d4fb8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d509e:	4918      	ldr	r1, [pc, #96]	; (d5100 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x120>)
   d50a0:	9802      	ldr	r0, [sp, #8]
   d50a2:	f003 fd31 	bl	d8b08 <strcmp>
   d50a6:	4605      	mov	r5, r0
   d50a8:	a801      	add	r0, sp, #4
   d50aa:	f7ff f858 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            sensorMin = iter.value().toInt();
   d50ae:	a904      	add	r1, sp, #16
   d50b0:	4668      	mov	r0, sp
        else if (iter.name() == "min") {
   d50b2:	b935      	cbnz	r5, d50c2 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0xe2>
            sensorMin = iter.value().toInt();
   d50b4:	f7ff f869 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d50b8:	4668      	mov	r0, sp
   d50ba:	f001 fa3d 	bl	d6538 <_ZNK5spark9JSONValue5toIntEv>
   d50be:	6120      	str	r0, [r4, #16]
   d50c0:	e7bf      	b.n	d5042 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
        else if (iter.name() == "max") {
   d50c2:	f7ff ff79 	bl	d4fb8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d50c6:	490f      	ldr	r1, [pc, #60]	; (d5104 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x124>)
   d50c8:	9802      	ldr	r0, [sp, #8]
   d50ca:	f003 fd1d 	bl	d8b08 <strcmp>
   d50ce:	4605      	mov	r5, r0
   d50d0:	a801      	add	r0, sp, #4
   d50d2:	f7ff f844 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50d6:	2d00      	cmp	r5, #0
   d50d8:	d199      	bne.n	d500e <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x2e>
            sensorMax = iter.value().toInt();
   d50da:	a904      	add	r1, sp, #16
   d50dc:	4668      	mov	r0, sp
   d50de:	f7ff f854 	bl	d418a <_ZNK5spark18JSONObjectIterator5valueEv>
   d50e2:	4668      	mov	r0, sp
   d50e4:	f001 fa28 	bl	d6538 <_ZNK5spark9JSONValue5toIntEv>
   d50e8:	60e0      	str	r0, [r4, #12]
   d50ea:	e7aa      	b.n	d5042 <_ZN11CSmartLight13cmdProcessingEN5spark9JSONValueE+0x62>
   d50ec:	a805      	add	r0, sp, #20
   d50ee:	f7ff f836 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50f2:	b00a      	add	sp, #40	; 0x28
   d50f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d50f8:	000d8dcc 	.word	0x000d8dcc
   d50fc:	000d8dcf 	.word	0x000d8dcf
   d5100:	000d8ddf 	.word	0x000d8ddf
   d5104:	000d8de3 	.word	0x000d8de3
   d5108:	000d8dd4 	.word	0x000d8dd4

000d510c <_ZN11CThermostatC1Ev>:
#include "thermostat.h"
#include "common.h"
DHT dht(DHTPIN, DHTTYPE);

CThermostat::CThermostat() {
   d510c:	b510      	push	{r4, lr}
   d510e:	490b      	ldr	r1, [pc, #44]	; (d513c <_ZN11CThermostatC1Ev+0x30>)
   d5110:	4604      	mov	r4, r0
   d5112:	f000 fc32 	bl	d597a <_ZN6StringC1EPKc>
    celsius = 0.0;
   d5116:	2300      	movs	r3, #0
   d5118:	6123      	str	r3, [r4, #16]
    farenheit = 0.0;
   d511a:	6163      	str	r3, [r4, #20]
    humidity = 0.0;
   d511c:	61a3      	str	r3, [r4, #24]
    heatIndex = 0.0;
   d511e:	61e3      	str	r3, [r4, #28]
    dewPoint = 0.0;
   d5120:	6223      	str	r3, [r4, #32]
    kelvin = 0.0;
   d5122:	6263      	str	r3, [r4, #36]	; 0x24
    state = CThermostat::S_READ;
   d5124:	2301      	movs	r3, #1
   d5126:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    statusStr = "{}";
   d512a:	4905      	ldr	r1, [pc, #20]	; (d5140 <_ZN11CThermostatC1Ev+0x34>)
   d512c:	4620      	mov	r0, r4
   d512e:	f000 fc77 	bl	d5a20 <_ZN6StringaSEPKc>
    lastRead = 0;
   d5132:	2300      	movs	r3, #0
   d5134:	62e3      	str	r3, [r4, #44]	; 0x2c
    
    
}
   d5136:	4620      	mov	r0, r4
   d5138:	bd10      	pop	{r4, pc}
   d513a:	bf00      	nop
   d513c:	000d8fa7 	.word	0x000d8fa7
   d5140:	000d8d24 	.word	0x000d8d24

000d5144 <_ZN11CThermostat15createStatusStrEv>:
    }
    createStatusStr();
    
}

void CThermostat::createStatusStr() {
   d5144:	b510      	push	{r4, lr}
   d5146:	4604      	mov	r4, r0
   d5148:	b090      	sub	sp, #64	; 0x40
    statusStr = String::format("{\"t\":%f,\"c\":%f,\"h\":%f,\"hi\":%f,\"dp\":%f,\"k\":%f}", farenheit, celsius, humidity, heatIndex, dewPoint, kelvin);
   d514a:	6940      	ldr	r0, [r0, #20]
   d514c:	f003 f902 	bl	d8354 <__aeabi_f2d>
   d5150:	4602      	mov	r2, r0
   d5152:	460b      	mov	r3, r1
   d5154:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5156:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d515a:	f003 f8fb 	bl	d8354 <__aeabi_f2d>
   d515e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d5162:	6a20      	ldr	r0, [r4, #32]
   d5164:	f003 f8f6 	bl	d8354 <__aeabi_f2d>
   d5168:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d516c:	69e0      	ldr	r0, [r4, #28]
   d516e:	f003 f8f1 	bl	d8354 <__aeabi_f2d>
   d5172:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d5176:	69a0      	ldr	r0, [r4, #24]
   d5178:	f003 f8ec 	bl	d8354 <__aeabi_f2d>
   d517c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5180:	6920      	ldr	r0, [r4, #16]
   d5182:	f003 f8e7 	bl	d8354 <__aeabi_f2d>
   d5186:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d518a:	e9cd 0100 	strd	r0, r1, [sp]
   d518e:	a80c      	add	r0, sp, #48	; 0x30
   d5190:	4905      	ldr	r1, [pc, #20]	; (d51a8 <_ZN11CThermostat15createStatusStrEv+0x64>)
   d5192:	f000 fc83 	bl	d5a9c <_ZN6String6formatEPKcz>
   d5196:	a90c      	add	r1, sp, #48	; 0x30
   d5198:	4620      	mov	r0, r4
   d519a:	f000 fc39 	bl	d5a10 <_ZN6StringaSEOS_>
   d519e:	a80c      	add	r0, sp, #48	; 0x30
   d51a0:	f000 fba0 	bl	d58e4 <_ZN6StringD1Ev>
   d51a4:	b010      	add	sp, #64	; 0x40
   d51a6:	bd10      	pop	{r4, pc}
   d51a8:	000d8de7 	.word	0x000d8de7

000d51ac <_ZN11CThermostat7executeEv>:
void CThermostat::execute() {
   d51ac:	b538      	push	{r3, r4, r5, lr}
   d51ae:	4604      	mov	r4, r0
   d51b0:	ed2d 8b06 	vpush	{d8-d10}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d51b4:	f000 f918 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
    switch(state){
   d51b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d51bc:	4605      	mov	r5, r0
   d51be:	b143      	cbz	r3, d51d2 <_ZN11CThermostat7executeEv+0x26>
   d51c0:	2b01      	cmp	r3, #1
   d51c2:	d00f      	beq.n	d51e4 <_ZN11CThermostat7executeEv+0x38>
}
   d51c4:	ecbd 8b06 	vpop	{d8-d10}
    createStatusStr();
   d51c8:	4620      	mov	r0, r4
}
   d51ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    createStatusStr();
   d51ce:	f7ff bfb9 	b.w	d5144 <_ZN11CThermostat15createStatusStrEv>
            if (currentTime >= lastRead + 2000){
   d51d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d51d4:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
   d51d8:	4283      	cmp	r3, r0
   d51da:	daf3      	bge.n	d51c4 <_ZN11CThermostat7executeEv+0x18>
                state = CThermostat::S_READ;
   d51dc:	2301      	movs	r3, #1
            state = CThermostat::S_DELAY;
   d51de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            break;
   d51e2:	e7ef      	b.n	d51c4 <_ZN11CThermostat7executeEv+0x18>
            tempHumidity = dht.getHumidity();
   d51e4:	4824      	ldr	r0, [pc, #144]	; (d5278 <_ZN11CThermostat7executeEv+0xcc>)
   d51e6:	f7ff fd9b 	bl	d4d20 <_ZN3DHT11getHumidityEv>
            tempCelsius = dht.getTempCelcius();
   d51ea:	4823      	ldr	r0, [pc, #140]	; (d5278 <_ZN11CThermostat7executeEv+0xcc>)
            tempHumidity = dht.getHumidity();
   d51ec:	eeb0 aa40 	vmov.f32	s20, s0
            tempCelsius = dht.getTempCelcius();
   d51f0:	f7ff fd3e 	bl	d4c70 <_ZN3DHT14getTempCelciusEv>
            tempFarenheit = dht.getTempFarenheit();
   d51f4:	4820      	ldr	r0, [pc, #128]	; (d5278 <_ZN11CThermostat7executeEv+0xcc>)
            tempCelsius = dht.getTempCelcius();
   d51f6:	eef0 9a40 	vmov.f32	s19, s0
            tempFarenheit = dht.getTempFarenheit();
   d51fa:	f7ff fd3b 	bl	d4c74 <_ZN3DHT16getTempFarenheitEv>
            tempHeatIndex = dht.getHeatIndex();
   d51fe:	481e      	ldr	r0, [pc, #120]	; (d5278 <_ZN11CThermostat7executeEv+0xcc>)
            tempFarenheit = dht.getTempFarenheit();
   d5200:	eeb0 9a40 	vmov.f32	s18, s0
            tempHeatIndex = dht.getHeatIndex();
   d5204:	f7ff fd8e 	bl	d4d24 <_ZN3DHT12getHeatIndexEv>
            tempDewPoint = dht.getDewPoint();
   d5208:	481b      	ldr	r0, [pc, #108]	; (d5278 <_ZN11CThermostat7executeEv+0xcc>)
            tempHeatIndex = dht.getHeatIndex();
   d520a:	eef0 8a40 	vmov.f32	s17, s0
            tempDewPoint = dht.getDewPoint();
   d520e:	f7ff fdb1 	bl	d4d74 <_ZN3DHT11getDewPointEv>
            tempKelvin = dht.getTempKelvin();
   d5212:	4819      	ldr	r0, [pc, #100]	; (d5278 <_ZN11CThermostat7executeEv+0xcc>)
            tempDewPoint = dht.getDewPoint();
   d5214:	eeb0 8a40 	vmov.f32	s16, s0
            tempKelvin = dht.getTempKelvin();
   d5218:	f7ff fd3e 	bl	d4c98 <_ZN3DHT13getTempKelvinEv>
            if (!isnan(tempHumidity)) humidity = tempHumidity;
   d521c:	eeb4 aa4a 	vcmp.f32	s20, s20
   d5220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempCelsius)) celsius = tempCelsius;
   d5224:	eef4 9a69 	vcmp.f32	s19, s19
            if (!isnan(tempHumidity)) humidity = tempHumidity;
   d5228:	bf78      	it	vc
   d522a:	ed84 aa06 	vstrvc	s20, [r4, #24]
            if (!isnan(tempCelsius)) celsius = tempCelsius;
   d522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempFarenheit)) farenheit = tempFarenheit;
   d5232:	eeb4 9a49 	vcmp.f32	s18, s18
            if (!isnan(tempCelsius)) celsius = tempCelsius;
   d5236:	bf78      	it	vc
   d5238:	edc4 9a04 	vstrvc	s19, [r4, #16]
            if (!isnan(tempFarenheit)) farenheit = tempFarenheit;
   d523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempHeatIndex)) heatIndex = tempHeatIndex;
   d5240:	eef4 8a68 	vcmp.f32	s17, s17
            if (!isnan(tempFarenheit)) farenheit = tempFarenheit;
   d5244:	bf78      	it	vc
   d5246:	ed84 9a05 	vstrvc	s18, [r4, #20]
            if (!isnan(tempHeatIndex)) heatIndex = tempHeatIndex;
   d524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempDewPoint)) dewPoint = tempDewPoint;
   d524e:	eeb4 8a48 	vcmp.f32	s16, s16
            if (!isnan(tempHeatIndex)) heatIndex = tempHeatIndex;
   d5252:	bf78      	it	vc
   d5254:	edc4 8a07 	vstrvc	s17, [r4, #28]
            if (!isnan(tempDewPoint)) dewPoint = tempDewPoint;
   d5258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (!isnan(tempKelvin)) kelvin = tempKelvin;
   d525c:	eeb4 0a40 	vcmp.f32	s0, s0
            if (!isnan(tempDewPoint)) dewPoint = tempDewPoint;
   d5260:	bf78      	it	vc
   d5262:	ed84 8a08 	vstrvc	s16, [r4, #32]
            if (!isnan(tempKelvin)) kelvin = tempKelvin;
   d5266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d526a:	bf78      	it	vc
   d526c:	ed84 0a09 	vstrvc	s0, [r4, #36]	; 0x24
            lastRead = currentTime;
   d5270:	62e5      	str	r5, [r4, #44]	; 0x2c
            state = CThermostat::S_DELAY;
   d5272:	2300      	movs	r3, #0
   d5274:	e7b3      	b.n	d51de <_ZN11CThermostat7executeEv+0x32>
   d5276:	bf00      	nop
   d5278:	2003e594 	.word	0x2003e594

000d527c <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTTYPE);
   d527c:	4802      	ldr	r0, [pc, #8]	; (d5288 <_GLOBAL__sub_I_dht+0xc>)
   d527e:	2306      	movs	r3, #6
   d5280:	220b      	movs	r2, #11
   d5282:	2102      	movs	r1, #2
   d5284:	f7ff b9e9 	b.w	d465a <_ZN3DHTC1Ehhh>
   d5288:	2003e594 	.word	0x2003e594

000d528c <_ZN10DoorSensorC1Ev>:
#include "door.h"
#define OPEN_PERIOD 100

DoorSensor::DoorSensor() {
   d528c:	b538      	push	{r3, r4, r5, lr}
   d528e:	f100 0514 	add.w	r5, r0, #20
   d5292:	4604      	mov	r4, r0
   d5294:	4908      	ldr	r1, [pc, #32]	; (d52b8 <_ZN10DoorSensorC1Ev+0x2c>)
   d5296:	4628      	mov	r0, r5
   d5298:	f000 fb6f 	bl	d597a <_ZN6StringC1EPKc>
    state = S_CLOSED;
   d529c:	2300      	movs	r3, #0
    period = OPEN_PERIOD;
   d529e:	2264      	movs	r2, #100	; 0x64
    t = 0;
   d52a0:	e9c4 3201 	strd	r3, r2, [r4, #4]
    state = S_CLOSED;
   d52a4:	7023      	strb	r3, [r4, #0]
    limit = 1000;
   d52a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    statusStr = "{}";
   d52aa:	4904      	ldr	r1, [pc, #16]	; (d52bc <_ZN10DoorSensorC1Ev+0x30>)
    limit = 1000;
   d52ac:	6123      	str	r3, [r4, #16]
    statusStr = "{}";
   d52ae:	4628      	mov	r0, r5
   d52b0:	f000 fbb6 	bl	d5a20 <_ZN6StringaSEPKc>
}
   d52b4:	4620      	mov	r0, r4
   d52b6:	bd38      	pop	{r3, r4, r5, pc}
   d52b8:	000d8fa7 	.word	0x000d8fa7
   d52bc:	000d8d24 	.word	0x000d8d24

000d52c0 <_ZN10DoorSensor13readSensorValEv>:
    else {
        return true;    // Door is closed
    }
}

void DoorSensor::readSensorVal() {
   d52c0:	b510      	push	{r4, lr}
   d52c2:	4604      	mov	r4, r0
    sensorVal = analogRead(LIGHT_SENSOR);
   d52c4:	2013      	movs	r0, #19
   d52c6:	f001 fb69 	bl	d699c <analogRead>
   d52ca:	60e0      	str	r0, [r4, #12]
}
   d52cc:	bd10      	pop	{r4, pc}

000d52ce <_ZN10DoorSensor13checkIfClosedEv>:
bool DoorSensor::checkIfClosed() {
   d52ce:	b510      	push	{r4, lr}
   d52d0:	4604      	mov	r4, r0
    readSensorVal();
   d52d2:	f7ff fff5 	bl	d52c0 <_ZN10DoorSensor13readSensorValEv>
    if (curSensorVal > limit) {
   d52d6:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
}
   d52da:	4298      	cmp	r0, r3
   d52dc:	bfb4      	ite	lt
   d52de:	2000      	movlt	r0, #0
   d52e0:	2001      	movge	r0, #1
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_ZN10DoorSensor7executeEv>:
void DoorSensor::execute() {
   d52e4:	b510      	push	{r4, lr}
    switch (state) {
   d52e6:	7803      	ldrb	r3, [r0, #0]
void DoorSensor::execute() {
   d52e8:	4604      	mov	r4, r0
    switch (state) {
   d52ea:	b113      	cbz	r3, d52f2 <_ZN10DoorSensor7executeEv+0xe>
   d52ec:	2b01      	cmp	r3, #1
   d52ee:	d00c      	beq.n	d530a <_ZN10DoorSensor7executeEv+0x26>
}
   d52f0:	bd10      	pop	{r4, pc}
            statusStr = "{\"d\":\"closed\"}";
   d52f2:	490b      	ldr	r1, [pc, #44]	; (d5320 <_ZN10DoorSensor7executeEv+0x3c>)
   d52f4:	3014      	adds	r0, #20
   d52f6:	f000 fb93 	bl	d5a20 <_ZN6StringaSEPKc>
            if (!(checkIfClosed())) {
   d52fa:	4620      	mov	r0, r4
   d52fc:	f7ff ffe7 	bl	d52ce <_ZN10DoorSensor13checkIfClosedEv>
   d5300:	2800      	cmp	r0, #0
   d5302:	d1f5      	bne.n	d52f0 <_ZN10DoorSensor7executeEv+0xc>
                state = DoorSensor::S_OPEN;
   d5304:	2301      	movs	r3, #1
                state = DoorSensor::S_CLOSED;
   d5306:	7023      	strb	r3, [r4, #0]
}
   d5308:	e7f2      	b.n	d52f0 <_ZN10DoorSensor7executeEv+0xc>
            statusStr = "{\"d\":\"open\"}";
   d530a:	4906      	ldr	r1, [pc, #24]	; (d5324 <_ZN10DoorSensor7executeEv+0x40>)
   d530c:	3014      	adds	r0, #20
   d530e:	f000 fb87 	bl	d5a20 <_ZN6StringaSEPKc>
            if (checkIfClosed()) {
   d5312:	4620      	mov	r0, r4
   d5314:	f7ff ffdb 	bl	d52ce <_ZN10DoorSensor13checkIfClosedEv>
   d5318:	2800      	cmp	r0, #0
   d531a:	d0e9      	beq.n	d52f0 <_ZN10DoorSensor7executeEv+0xc>
                state = DoorSensor::S_CLOSED;
   d531c:	2300      	movs	r3, #0
   d531e:	e7f2      	b.n	d5306 <_ZN10DoorSensor7executeEv+0x22>
   d5320:	000d8e15 	.word	0x000d8e15
   d5324:	000d8e24 	.word	0x000d8e24

000d5328 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <netdb_freeaddrinfo+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	689b      	ldr	r3, [r3, #8]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030268 	.word	0x00030268

000d5338 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <netdb_getaddrinfo+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	68db      	ldr	r3, [r3, #12]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030268 	.word	0x00030268

000d5348 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_Pin_Map+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	681b      	ldr	r3, [r3, #0]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	0003022c 	.word	0x0003022c

000d5358 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_Validate_Pin_Function+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	685b      	ldr	r3, [r3, #4]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	0003022c 	.word	0x0003022c

000d5368 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_Pin_Mode+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	689b      	ldr	r3, [r3, #8]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	0003022c 	.word	0x0003022c

000d5378 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_Get_Pin_Mode+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	68db      	ldr	r3, [r3, #12]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003022c 	.word	0x0003022c

000d5388 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_GPIO_Write+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	691b      	ldr	r3, [r3, #16]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003022c 	.word	0x0003022c

000d5398 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_Interrupts_Enable_All+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	6a1b      	ldr	r3, [r3, #32]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003022c 	.word	0x0003022c

000d53a8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_Interrupts_Disable_All+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003022c 	.word	0x0003022c

000d53b8 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <hal_adc_read+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003022c 	.word	0x0003022c

000d53c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_RNG_GetRandomNumber+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	685b      	ldr	r3, [r3, #4]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030218 	.word	0x00030218

000d53d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_Delay_Microseconds+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	68db      	ldr	r3, [r3, #12]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030218 	.word	0x00030218

000d53e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	695b      	ldr	r3, [r3, #20]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030218 	.word	0x00030218

000d53f8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <hal_rtc_time_is_valid+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030218 	.word	0x00030218

000d5408 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <hal_rtc_get_time+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030218 	.word	0x00030218

000d5418 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <os_mutex_recursive_create+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030248 	.word	0x00030248

000d5428 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <inet_inet_ntop+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030264 	.word	0x00030264

000d5438 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <hal_usart_init+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	681b      	ldr	r3, [r3, #0]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	0003023c 	.word	0x0003023c

000d5448 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <hal_usart_write+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	68db      	ldr	r3, [r3, #12]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	0003023c 	.word	0x0003023c

000d5458 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <hal_usart_available+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	691b      	ldr	r3, [r3, #16]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	0003023c 	.word	0x0003023c

000d5468 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <hal_usart_read+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	695b      	ldr	r3, [r3, #20]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	0003023c 	.word	0x0003023c

000d5478 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <hal_usart_peek+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	699b      	ldr	r3, [r3, #24]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003023c 	.word	0x0003023c

000d5488 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <hal_usart_flush+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	69db      	ldr	r3, [r3, #28]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	0003023c 	.word	0x0003023c

000d5498 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <hal_usart_is_enabled+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	6a1b      	ldr	r3, [r3, #32]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	0003023c 	.word	0x0003023c

000d54a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <hal_usart_available_data_for_write+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	0003023c 	.word	0x0003023c

000d54b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <hal_i2c_write+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6a1b      	ldr	r3, [r3, #32]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030228 	.word	0x00030228

000d54c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <hal_i2c_available+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030228 	.word	0x00030228

000d54d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <hal_i2c_read+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030228 	.word	0x00030228

000d54e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <hal_i2c_peek+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030228 	.word	0x00030228

000d54f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <hal_i2c_flush+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030228 	.word	0x00030228

000d5508 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <hal_i2c_is_enabled+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030228 	.word	0x00030228

000d5518 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <hal_i2c_init+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030228 	.word	0x00030228

000d5528 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <hal_spi_init+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	69db      	ldr	r3, [r3, #28]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030230 	.word	0x00030230

000d5538 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <hal_spi_is_enabled+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6a1b      	ldr	r3, [r3, #32]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030230 	.word	0x00030230

000d5548 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <HAL_USB_USART_Init+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	681b      	ldr	r3, [r3, #0]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003024c 	.word	0x0003024c

000d5558 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <HAL_USB_USART_Begin+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	685b      	ldr	r3, [r3, #4]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003024c 	.word	0x0003024c

000d5568 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <HAL_USB_USART_Available_Data+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	691b      	ldr	r3, [r3, #16]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003024c 	.word	0x0003024c

000d5578 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	695b      	ldr	r3, [r3, #20]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	0003024c 	.word	0x0003024c

000d5588 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <HAL_USB_USART_Receive_Data+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	699b      	ldr	r3, [r3, #24]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	0003024c 	.word	0x0003024c

000d5598 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <HAL_USB_USART_Send_Data+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	0003024c 	.word	0x0003024c

000d55a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <HAL_USB_USART_Flush_Data+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6a1b      	ldr	r3, [r3, #32]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	0003024c 	.word	0x0003024c

000d55b8 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <LED_SetSignalingColor+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	685b      	ldr	r3, [r3, #4]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030260 	.word	0x00030260

000d55c8 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <LED_Signaling_Start+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	689b      	ldr	r3, [r3, #8]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030260 	.word	0x00030260

000d55d8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <LED_Signaling_Stop+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	68db      	ldr	r3, [r3, #12]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030260 	.word	0x00030260

000d55e8 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <LED_SetBrightness+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	691b      	ldr	r3, [r3, #16]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030260 	.word	0x00030260

000d55f8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <LED_RGB_IsOverRidden+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	699b      	ldr	r3, [r3, #24]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030260 	.word	0x00030260

000d5608 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <LED_On+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	69db      	ldr	r3, [r3, #28]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030260 	.word	0x00030260

000d5618 <Get_LED_Brightness>:
DYNALIB_FN(8, services, LED_Off, void(Led_TypeDef))
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <Get_LED_Brightness+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030260 	.word	0x00030260

000d5628 <panic_>:

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <panic_+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030260 	.word	0x00030260

000d5638 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <jsmn_init+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030260 	.word	0x00030260

000d5648 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <jsmn_parse_deprecated+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030260 	.word	0x00030260

000d5658 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <system_mode+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	681b      	ldr	r3, [r3, #0]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030220 	.word	0x00030220

000d5668 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <set_system_mode+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	685b      	ldr	r3, [r3, #4]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030220 	.word	0x00030220

000d5678 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <system_delay_ms+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	695b      	ldr	r3, [r3, #20]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030220 	.word	0x00030220

000d5688 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <system_thread_set_state+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030220 	.word	0x00030220

000d5698 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <system_thread_get_state+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030220 	.word	0x00030220

000d56a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b03      	ldr	r3, [pc, #12]	; (d56b8 <system_ctrl_set_app_request_handler+0x10>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d56b2:	9301      	str	r3, [sp, #4]
   d56b4:	bd08      	pop	{r3, pc}
   d56b6:	0000      	.short	0x0000
   d56b8:	00030220 	.word	0x00030220

000d56bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b03      	ldr	r3, [pc, #12]	; (d56cc <system_ctrl_set_result+0x10>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d56c6:	9301      	str	r3, [sp, #4]
   d56c8:	bd08      	pop	{r3, pc}
   d56ca:	0000      	.short	0x0000
   d56cc:	00030220 	.word	0x00030220

000d56d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <network_connect+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	685b      	ldr	r3, [r3, #4]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	00030240 	.word	0x00030240

000d56e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <network_connecting+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	689b      	ldr	r3, [r3, #8]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	00030240 	.word	0x00030240

000d56f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <network_disconnect+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	68db      	ldr	r3, [r3, #12]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	00030240 	.word	0x00030240

000d5700 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <network_ready+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	691b      	ldr	r3, [r3, #16]
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030240 	.word	0x00030240

000d5710 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <network_on+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	695b      	ldr	r3, [r3, #20]
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030240 	.word	0x00030240

000d5720 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <network_off+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	699b      	ldr	r3, [r3, #24]
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	00030240 	.word	0x00030240

000d5730 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <network_listen+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	69db      	ldr	r3, [r3, #28]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	00030240 	.word	0x00030240

000d5740 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <network_listening+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	6a1b      	ldr	r3, [r3, #32]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030240 	.word	0x00030240

000d5750 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <network_set_listen_timeout+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030240 	.word	0x00030240

000d5760 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <network_get_listen_timeout+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030240 	.word	0x00030240

000d5770 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <network_is_on+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030240 	.word	0x00030240

000d5780 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <network_is_off+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030240 	.word	0x00030240

000d5790 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <spark_process+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	689b      	ldr	r3, [r3, #8]
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030244 	.word	0x00030244

000d57a0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <spark_cloud_flag_connected+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	695b      	ldr	r3, [r3, #20]
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030244 	.word	0x00030244

000d57b0 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <spark_sync_time_pending+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030244 	.word	0x00030244

000d57c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030244 	.word	0x00030244

000d57d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <malloc+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	681b      	ldr	r3, [r3, #0]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	0003021c 	.word	0x0003021c

000d57e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <free+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	685b      	ldr	r3, [r3, #4]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	0003021c 	.word	0x0003021c

000d57f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <realloc+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	689b      	ldr	r3, [r3, #8]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	0003021c 	.word	0x0003021c

000d5800 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <vsnprintf+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	0003021c 	.word	0x0003021c

000d5810 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <__errno+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	0003021c 	.word	0x0003021c

000d5820 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <newlib_impure_ptr_callback+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	0003021c 	.word	0x0003021c

000d5830 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5830:	2200      	movs	r2, #0
   d5832:	6840      	ldr	r0, [r0, #4]
   d5834:	4611      	mov	r1, r2
   d5836:	f7ff bf83 	b.w	d5740 <network_listening>

000d583a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d583a:	2200      	movs	r2, #0
   d583c:	6840      	ldr	r0, [r0, #4]
   d583e:	4611      	mov	r1, r2
   d5840:	f7ff bf8e 	b.w	d5760 <network_get_listen_timeout>

000d5844 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5844:	6840      	ldr	r0, [r0, #4]
   d5846:	2200      	movs	r2, #0
   d5848:	f7ff bf82 	b.w	d5750 <network_set_listen_timeout>

000d584c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d584c:	6840      	ldr	r0, [r0, #4]
   d584e:	2200      	movs	r2, #0
   d5850:	f081 0101 	eor.w	r1, r1, #1
   d5854:	f7ff bf6c 	b.w	d5730 <network_listen>

000d5858 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5858:	2300      	movs	r3, #0
   d585a:	6840      	ldr	r0, [r0, #4]
   d585c:	461a      	mov	r2, r3
   d585e:	4619      	mov	r1, r3
   d5860:	f7ff bf5e 	b.w	d5720 <network_off>

000d5864 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5864:	2300      	movs	r3, #0
   d5866:	6840      	ldr	r0, [r0, #4]
   d5868:	461a      	mov	r2, r3
   d586a:	4619      	mov	r1, r3
   d586c:	f7ff bf50 	b.w	d5710 <network_on>

000d5870 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5870:	2200      	movs	r2, #0
   d5872:	6840      	ldr	r0, [r0, #4]
   d5874:	4611      	mov	r1, r2
   d5876:	f7ff bf43 	b.w	d5700 <network_ready>

000d587a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d587a:	2200      	movs	r2, #0
   d587c:	6840      	ldr	r0, [r0, #4]
   d587e:	4611      	mov	r1, r2
   d5880:	f7ff bf2e 	b.w	d56e0 <network_connecting>

000d5884 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5884:	6840      	ldr	r0, [r0, #4]
   d5886:	2200      	movs	r2, #0
   d5888:	2102      	movs	r1, #2
   d588a:	f7ff bf31 	b.w	d56f0 <network_disconnect>

000d588e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d588e:	2300      	movs	r3, #0
   d5890:	6840      	ldr	r0, [r0, #4]
   d5892:	461a      	mov	r2, r3
   d5894:	f7ff bf1c 	b.w	d56d0 <network_connect>

000d5898 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5898:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d589a:	2203      	movs	r2, #3
   d589c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d589e:	4a02      	ldr	r2, [pc, #8]	; (d58a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d58a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d58a2:	4770      	bx	lr
   d58a4:	2003e5a8 	.word	0x2003e5a8
   d58a8:	000d8e3c 	.word	0x000d8e3c

000d58ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d58ac:	b510      	push	{r4, lr}
   d58ae:	4604      	mov	r4, r0
   d58b0:	4608      	mov	r0, r1
{
    _spi = spi;
   d58b2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d58b4:	f7ff fe38 	bl	d5528 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d58b8:	2300      	movs	r3, #0
   d58ba:	6063      	str	r3, [r4, #4]
}
   d58bc:	4620      	mov	r0, r4
   d58be:	bd10      	pop	{r4, pc}

000d58c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d58c0:	4b05      	ldr	r3, [pc, #20]	; (d58d8 <_GLOBAL__sub_I_System+0x18>)
   d58c2:	2202      	movs	r2, #2
   d58c4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d58c6:	4b05      	ldr	r3, [pc, #20]	; (d58dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d58c8:	4a05      	ldr	r2, [pc, #20]	; (d58e0 <_GLOBAL__sub_I_System+0x20>)
   d58ca:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d58cc:	2000      	movs	r0, #0
   d58ce:	6018      	str	r0, [r3, #0]
   d58d0:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d58d2:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d58d4:	f7ff bec8 	b.w	d5668 <set_system_mode>
   d58d8:	2003e5bc 	.word	0x2003e5bc
   d58dc:	2003e5b0 	.word	0x2003e5b0
   d58e0:	ffff0000 	.word	0xffff0000

000d58e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d58e4:	b510      	push	{r4, lr}
   d58e6:	4604      	mov	r4, r0
{
	free(buffer);
   d58e8:	6800      	ldr	r0, [r0, #0]
   d58ea:	f7ff ff79 	bl	d57e0 <free>
}
   d58ee:	4620      	mov	r0, r4
   d58f0:	bd10      	pop	{r4, pc}

000d58f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d58f2:	b510      	push	{r4, lr}
   d58f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d58f6:	6800      	ldr	r0, [r0, #0]
   d58f8:	b108      	cbz	r0, d58fe <_ZN6String10invalidateEv+0xc>
   d58fa:	f7ff ff71 	bl	d57e0 <free>
	buffer = NULL;
   d58fe:	2300      	movs	r3, #0
	capacity = len = 0;
   d5900:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5904:	6023      	str	r3, [r4, #0]
}
   d5906:	bd10      	pop	{r4, pc}

000d5908 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5908:	b538      	push	{r3, r4, r5, lr}
   d590a:	4604      	mov	r4, r0
   d590c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d590e:	6800      	ldr	r0, [r0, #0]
   d5910:	3101      	adds	r1, #1
   d5912:	f7ff ff6d 	bl	d57f0 <realloc>
	if (newbuffer) {
   d5916:	b110      	cbz	r0, d591e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5918:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d591c:	2001      	movs	r0, #1
	}
	return 0;
}
   d591e:	bd38      	pop	{r3, r4, r5, pc}

000d5920 <_ZN6String7reserveEj>:
{
   d5920:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5922:	6803      	ldr	r3, [r0, #0]
{
   d5924:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5926:	b123      	cbz	r3, d5932 <_ZN6String7reserveEj+0x12>
   d5928:	6843      	ldr	r3, [r0, #4]
   d592a:	428b      	cmp	r3, r1
   d592c:	d301      	bcc.n	d5932 <_ZN6String7reserveEj+0x12>
   d592e:	2001      	movs	r0, #1
}
   d5930:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5932:	4620      	mov	r0, r4
   d5934:	f7ff ffe8 	bl	d5908 <_ZN6String12changeBufferEj>
   d5938:	2800      	cmp	r0, #0
   d593a:	d0f9      	beq.n	d5930 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d593c:	68a3      	ldr	r3, [r4, #8]
   d593e:	2b00      	cmp	r3, #0
   d5940:	d1f5      	bne.n	d592e <_ZN6String7reserveEj+0xe>
   d5942:	6822      	ldr	r2, [r4, #0]
   d5944:	7013      	strb	r3, [r2, #0]
   d5946:	e7f2      	b.n	d592e <_ZN6String7reserveEj+0xe>

000d5948 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5948:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d594a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d594c:	4611      	mov	r1, r2
   d594e:	9201      	str	r2, [sp, #4]
{
   d5950:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5952:	f7ff ffe5 	bl	d5920 <_ZN6String7reserveEj>
   d5956:	9a01      	ldr	r2, [sp, #4]
   d5958:	b928      	cbnz	r0, d5966 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff ffc9 	bl	d58f2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5960:	4620      	mov	r0, r4
   d5962:	b003      	add	sp, #12
   d5964:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5966:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5968:	4629      	mov	r1, r5
   d596a:	6820      	ldr	r0, [r4, #0]
   d596c:	f003 f878 	bl	d8a60 <memcpy>
	buffer[len] = 0;
   d5970:	6822      	ldr	r2, [r4, #0]
   d5972:	68a3      	ldr	r3, [r4, #8]
   d5974:	2100      	movs	r1, #0
   d5976:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5978:	e7f2      	b.n	d5960 <_ZN6String4copyEPKcj+0x18>

000d597a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d597a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d597c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d597e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5982:	4604      	mov	r4, r0
	len = 0;
   d5984:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5986:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5988:	b141      	cbz	r1, d599c <_ZN6StringC1EPKc+0x22>
   d598a:	4608      	mov	r0, r1
   d598c:	9101      	str	r1, [sp, #4]
   d598e:	f003 f8cd 	bl	d8b2c <strlen>
   d5992:	9901      	ldr	r1, [sp, #4]
   d5994:	4602      	mov	r2, r0
   d5996:	4620      	mov	r0, r4
   d5998:	f7ff ffd6 	bl	d5948 <_ZN6String4copyEPKcj>
}
   d599c:	4620      	mov	r0, r4
   d599e:	b002      	add	sp, #8
   d59a0:	bd10      	pop	{r4, pc}

000d59a2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d59a2:	b538      	push	{r3, r4, r5, lr}
   d59a4:	4605      	mov	r5, r0
	if (buffer) {
   d59a6:	6800      	ldr	r0, [r0, #0]
{
   d59a8:	460c      	mov	r4, r1
	if (buffer) {
   d59aa:	b168      	cbz	r0, d59c8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d59ac:	686a      	ldr	r2, [r5, #4]
   d59ae:	688b      	ldr	r3, [r1, #8]
   d59b0:	429a      	cmp	r2, r3
   d59b2:	d307      	bcc.n	d59c4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d59b4:	6809      	ldr	r1, [r1, #0]
   d59b6:	f003 f8b1 	bl	d8b1c <strcpy>
			len = rhs.len;
   d59ba:	68a3      	ldr	r3, [r4, #8]
   d59bc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d59be:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d59c0:	60a3      	str	r3, [r4, #8]
}
   d59c2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d59c4:	f7ff ff0c 	bl	d57e0 <free>
	buffer = rhs.buffer;
   d59c8:	6823      	ldr	r3, [r4, #0]
   d59ca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d59cc:	6863      	ldr	r3, [r4, #4]
   d59ce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d59d0:	68a3      	ldr	r3, [r4, #8]
   d59d2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d59d4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d59d6:	e9c4 3300 	strd	r3, r3, [r4]
   d59da:	e7f1      	b.n	d59c0 <_ZN6String4moveERS_+0x1e>

000d59dc <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d59dc:	4288      	cmp	r0, r1
{
   d59de:	b510      	push	{r4, lr}
   d59e0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d59e2:	d005      	beq.n	d59f0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d59e4:	680b      	ldr	r3, [r1, #0]
   d59e6:	b12b      	cbz	r3, d59f4 <_ZN6StringaSERKS_+0x18>
   d59e8:	688a      	ldr	r2, [r1, #8]
   d59ea:	4619      	mov	r1, r3
   d59ec:	f7ff ffac 	bl	d5948 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d59f0:	4620      	mov	r0, r4
   d59f2:	bd10      	pop	{r4, pc}
	else invalidate();
   d59f4:	f7ff ff7d 	bl	d58f2 <_ZN6String10invalidateEv>
   d59f8:	e7fa      	b.n	d59f0 <_ZN6StringaSERKS_+0x14>

000d59fa <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d59fa:	b510      	push	{r4, lr}
	buffer = NULL;
   d59fc:	2300      	movs	r3, #0
String::String(const String &value)
   d59fe:	4604      	mov	r4, r0
	capacity = 0;
   d5a00:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5a04:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a06:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5a08:	f7ff ffe8 	bl	d59dc <_ZN6StringaSERKS_>
}
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	bd10      	pop	{r4, pc}

000d5a10 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5a10:	4288      	cmp	r0, r1
{
   d5a12:	b510      	push	{r4, lr}
   d5a14:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5a16:	d001      	beq.n	d5a1c <_ZN6StringaSEOS_+0xc>
   d5a18:	f7ff ffc3 	bl	d59a2 <_ZN6String4moveERS_>
	return *this;
}
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	bd10      	pop	{r4, pc}

000d5a20 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5a20:	b513      	push	{r0, r1, r4, lr}
   d5a22:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5a24:	b159      	cbz	r1, d5a3e <_ZN6StringaSEPKc+0x1e>
   d5a26:	4608      	mov	r0, r1
   d5a28:	9101      	str	r1, [sp, #4]
   d5a2a:	f003 f87f 	bl	d8b2c <strlen>
   d5a2e:	9901      	ldr	r1, [sp, #4]
   d5a30:	4602      	mov	r2, r0
   d5a32:	4620      	mov	r0, r4
   d5a34:	f7ff ff88 	bl	d5948 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5a38:	4620      	mov	r0, r4
   d5a3a:	b002      	add	sp, #8
   d5a3c:	bd10      	pop	{r4, pc}
	else invalidate();
   d5a3e:	f7ff ff58 	bl	d58f2 <_ZN6String10invalidateEv>
   d5a42:	e7f9      	b.n	d5a38 <_ZN6StringaSEPKc+0x18>

000d5a44 <_ZN6StringC1Ec>:
String::String(char c)
   d5a44:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d5a46:	2300      	movs	r3, #0
	buf[0] = c;
   d5a48:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d5a4c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5a50:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a52:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d5a54:	a901      	add	r1, sp, #4
String::String(char c)
   d5a56:	4604      	mov	r4, r0
	buf[1] = 0;
   d5a58:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5a5c:	f7ff ffe0 	bl	d5a20 <_ZN6StringaSEPKc>
}
   d5a60:	4620      	mov	r0, r4
   d5a62:	b002      	add	sp, #8
   d5a64:	bd10      	pop	{r4, pc}

000d5a66 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5a66:	b570      	push	{r4, r5, r6, lr}
   d5a68:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5a6a:	460e      	mov	r6, r1
   d5a6c:	b909      	cbnz	r1, d5a72 <_ZN6String6concatEPKcj+0xc>
   d5a6e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5a70:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5a72:	b16a      	cbz	r2, d5a90 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5a74:	6884      	ldr	r4, [r0, #8]
   d5a76:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5a78:	4621      	mov	r1, r4
   d5a7a:	f7ff ff51 	bl	d5920 <_ZN6String7reserveEj>
   d5a7e:	2800      	cmp	r0, #0
   d5a80:	d0f5      	beq.n	d5a6e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5a82:	6828      	ldr	r0, [r5, #0]
   d5a84:	68ab      	ldr	r3, [r5, #8]
   d5a86:	4631      	mov	r1, r6
   d5a88:	4418      	add	r0, r3
   d5a8a:	f003 f847 	bl	d8b1c <strcpy>
	len = newlen;
   d5a8e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5a90:	2001      	movs	r0, #1
   d5a92:	e7ed      	b.n	d5a70 <_ZN6String6concatEPKcj+0xa>

000d5a94 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5a94:	688a      	ldr	r2, [r1, #8]
   d5a96:	6809      	ldr	r1, [r1, #0]
   d5a98:	f7ff bfe5 	b.w	d5a66 <_ZN6String6concatEPKcj>

000d5a9c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5a9c:	b40e      	push	{r1, r2, r3}
   d5a9e:	b570      	push	{r4, r5, r6, lr}
   d5aa0:	b087      	sub	sp, #28
   d5aa2:	ad0b      	add	r5, sp, #44	; 0x2c
   d5aa4:	4604      	mov	r4, r0
   d5aa6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5aaa:	9201      	str	r2, [sp, #4]
   d5aac:	462b      	mov	r3, r5
   d5aae:	2105      	movs	r1, #5
   d5ab0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d5ab2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5ab4:	f7ff fea4 	bl	d5800 <vsnprintf>
    va_end(marker);

    String result;
   d5ab8:	490b      	ldr	r1, [pc, #44]	; (d5ae8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5aba:	4606      	mov	r6, r0
    String result;
   d5abc:	4620      	mov	r0, r4
   d5abe:	f7ff ff5c 	bl	d597a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d5ac2:	4631      	mov	r1, r6
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	f7ff ff2b 	bl	d5920 <_ZN6String7reserveEj>
    if (result.buffer) {
   d5aca:	6820      	ldr	r0, [r4, #0]
   d5acc:	b130      	cbz	r0, d5adc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5ace:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d5ad0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5ad2:	462b      	mov	r3, r5
   d5ad4:	1c71      	adds	r1, r6, #1
   d5ad6:	f7ff fe93 	bl	d5800 <vsnprintf>
        va_end(marker);
        result.len = n;
   d5ada:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d5adc:	4620      	mov	r0, r4
   d5ade:	b007      	add	sp, #28
   d5ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5ae4:	b003      	add	sp, #12
   d5ae6:	4770      	bx	lr
   d5ae8:	000d8fa7 	.word	0x000d8fa7

000d5aec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5aec:	4802      	ldr	r0, [pc, #8]	; (d5af8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5aee:	2300      	movs	r3, #0
   d5af0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5af2:	f7ff bc91 	b.w	d5418 <os_mutex_recursive_create>
   d5af6:	bf00      	nop
   d5af8:	2003e5c0 	.word	0x2003e5c0

000d5afc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5afe:	4606      	mov	r6, r0
   d5b00:	460d      	mov	r5, r1
  size_t n = 0;
   d5b02:	188f      	adds	r7, r1, r2
   d5b04:	2400      	movs	r4, #0
  while (size--) {
   d5b06:	42bd      	cmp	r5, r7
   d5b08:	d00c      	beq.n	d5b24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5b0a:	6833      	ldr	r3, [r6, #0]
   d5b0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b10:	689b      	ldr	r3, [r3, #8]
   d5b12:	4630      	mov	r0, r6
   d5b14:	4798      	blx	r3
     if (chunk>=0)
   d5b16:	1e03      	subs	r3, r0, #0
   d5b18:	db01      	blt.n	d5b1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5b1a:	441c      	add	r4, r3
  while (size--) {
   d5b1c:	e7f3      	b.n	d5b06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5b1e:	2c00      	cmp	r4, #0
   d5b20:	bf08      	it	eq
   d5b22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5b24:	4620      	mov	r0, r4
   d5b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5b28:	b513      	push	{r0, r1, r4, lr}
   d5b2a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5b2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5b2e:	b159      	cbz	r1, d5b48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5b30:	9101      	str	r1, [sp, #4]
   d5b32:	f002 fffb 	bl	d8b2c <strlen>
   d5b36:	6823      	ldr	r3, [r4, #0]
   d5b38:	9901      	ldr	r1, [sp, #4]
   d5b3a:	68db      	ldr	r3, [r3, #12]
   d5b3c:	4602      	mov	r2, r0
   d5b3e:	4620      	mov	r0, r4
    }
   d5b40:	b002      	add	sp, #8
   d5b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5b46:	4718      	bx	r3
    }
   d5b48:	b002      	add	sp, #8
   d5b4a:	bd10      	pop	{r4, pc}

000d5b4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5b4c:	6803      	ldr	r3, [r0, #0]
   d5b4e:	689b      	ldr	r3, [r3, #8]
   d5b50:	4718      	bx	r3

000d5b52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5b52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5b54:	210d      	movs	r1, #13
{
   d5b56:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5b58:	f7ff fff8 	bl	d5b4c <_ZN5Print5printEc>
  n += print('\n');
   d5b5c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5b5e:	4604      	mov	r4, r0
  n += print('\n');
   d5b60:	4628      	mov	r0, r5
   d5b62:	f7ff fff3 	bl	d5b4c <_ZN5Print5printEc>
  return n;
}
   d5b66:	4420      	add	r0, r4
   d5b68:	bd38      	pop	{r3, r4, r5, pc}

000d5b6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5b6a:	b530      	push	{r4, r5, lr}
   d5b6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5b6e:	2300      	movs	r3, #0
   d5b70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5b74:	2a01      	cmp	r2, #1
   d5b76:	bf98      	it	ls
   d5b78:	220a      	movls	r2, #10
   d5b7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5b7c:	460d      	mov	r5, r1
   d5b7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5b82:	fb01 5312 	mls	r3, r1, r2, r5
   d5b86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b8a:	2b09      	cmp	r3, #9
   d5b8c:	bf94      	ite	ls
   d5b8e:	3330      	addls	r3, #48	; 0x30
   d5b90:	3337      	addhi	r3, #55	; 0x37
   d5b92:	b2db      	uxtb	r3, r3
  } while(n);
   d5b94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5b9a:	d9ef      	bls.n	d5b7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5b9c:	4621      	mov	r1, r4
   d5b9e:	f7ff ffc3 	bl	d5b28 <_ZN5Print5writeEPKc>
}
   d5ba2:	b00b      	add	sp, #44	; 0x2c
   d5ba4:	bd30      	pop	{r4, r5, pc}

000d5ba6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5baa:	b086      	sub	sp, #24
   d5bac:	af00      	add	r7, sp, #0
   d5bae:	4605      	mov	r5, r0
   d5bb0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5bb2:	1d38      	adds	r0, r7, #4
   d5bb4:	2114      	movs	r1, #20
{
   d5bb6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5bb8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5bba:	f7ff fe21 	bl	d5800 <vsnprintf>

    if (n<bufsize)
   d5bbe:	2813      	cmp	r0, #19
   d5bc0:	d80e      	bhi.n	d5be0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5bc2:	1d39      	adds	r1, r7, #4
   d5bc4:	4628      	mov	r0, r5
   d5bc6:	f7ff ffaf 	bl	d5b28 <_ZN5Print5writeEPKc>
   d5bca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5bcc:	b11e      	cbz	r6, d5bd6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5bce:	4628      	mov	r0, r5
   d5bd0:	f7ff ffbf 	bl	d5b52 <_ZN5Print7printlnEv>
   d5bd4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	3718      	adds	r7, #24
   d5bda:	46bd      	mov	sp, r7
   d5bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5be0:	f100 0308 	add.w	r3, r0, #8
   d5be4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5be8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5bea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5bee:	4622      	mov	r2, r4
   d5bf0:	1c41      	adds	r1, r0, #1
   d5bf2:	683b      	ldr	r3, [r7, #0]
   d5bf4:	4668      	mov	r0, sp
   d5bf6:	f7ff fe03 	bl	d5800 <vsnprintf>
  return write(str);
   d5bfa:	4669      	mov	r1, sp
   d5bfc:	4628      	mov	r0, r5
   d5bfe:	f7ff ff93 	bl	d5b28 <_ZN5Print5writeEPKc>
   d5c02:	4604      	mov	r4, r0
   d5c04:	46c5      	mov	sp, r8
   d5c06:	e7e1      	b.n	d5bcc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5c08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c08:	4b01      	ldr	r3, [pc, #4]	; (d5c10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c0a:	4a02      	ldr	r2, [pc, #8]	; (d5c14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c0c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c0e:	4770      	bx	lr
   d5c10:	2003e5c4 	.word	0x2003e5c4
   d5c14:	000d8e70 	.word	0x000d8e70

000d5c18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5c18:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5c1a:	2000      	movs	r0, #0
   d5c1c:	f7ff fdc8 	bl	d57b0 <spark_sync_time_pending>
   d5c20:	b128      	cbz	r0, d5c2e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c22:	f7ff fdbd 	bl	d57a0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5c26:	f080 0001 	eor.w	r0, r0, #1
   d5c2a:	b2c0      	uxtb	r0, r0
    }
   d5c2c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5c2e:	2001      	movs	r0, #1
   d5c30:	e7fc      	b.n	d5c2c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d5c32 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5c32:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5c34:	2000      	movs	r0, #0
   d5c36:	f7ff fbdf 	bl	d53f8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5c3a:	4604      	mov	r4, r0
   d5c3c:	b9a0      	cbnz	r0, d5c68 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5c3e:	f7ff fd0b 	bl	d5658 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5c42:	2801      	cmp	r0, #1
   d5c44:	d110      	bne.n	d5c68 <_ZN9TimeClass7isValidEv+0x36>
   d5c46:	4620      	mov	r0, r4
   d5c48:	f7ff fd26 	bl	d5698 <system_thread_get_state>
   d5c4c:	b960      	cbnz	r0, d5c68 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5c4e:	f7ff ffe3 	bl	d5c18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5c52:	b910      	cbnz	r0, d5c5a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5c54:	f7ff fd9c 	bl	d5790 <spark_process>
        while (_while() && !_condition()) {
   d5c58:	e7f9      	b.n	d5c4e <_ZN9TimeClass7isValidEv+0x1c>
   d5c5a:	f7ff ffdd 	bl	d5c18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5c62:	2000      	movs	r0, #0
   d5c64:	f7ff bbc8 	b.w	d53f8 <hal_rtc_time_is_valid>
}
   d5c68:	4620      	mov	r0, r4
   d5c6a:	bd10      	pop	{r4, pc}

000d5c6c <_ZN9TimeClass3nowEv>:
{
   d5c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5c6e:	f7ff ffe0 	bl	d5c32 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5c72:	2210      	movs	r2, #16
   d5c74:	2100      	movs	r1, #0
   d5c76:	4668      	mov	r0, sp
   d5c78:	f002 ff1a 	bl	d8ab0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5c7c:	2100      	movs	r1, #0
   d5c7e:	4668      	mov	r0, sp
   d5c80:	f7ff fbc2 	bl	d5408 <hal_rtc_get_time>
}
   d5c84:	9800      	ldr	r0, [sp, #0]
   d5c86:	b005      	add	sp, #20
   d5c88:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c8c:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c92:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5c94:	4770      	bx	lr
   d5c96:	bf00      	nop
   d5c98:	2003e474 	.word	0x2003e474
   d5c9c:	2003e5c8 	.word	0x2003e5c8

000d5ca0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5ca0:	2100      	movs	r1, #0
   d5ca2:	f7ff bce9 	b.w	d5678 <system_delay_ms>

000d5ca6 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d5ca6:	b510      	push	{r4, lr}
   d5ca8:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d5caa:	f7ff fca5 	bl	d55f8 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d5cae:	4284      	cmp	r4, r0
   d5cb0:	d008      	beq.n	d5cc4 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d5cb2:	b11c      	cbz	r4, d5cbc <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d5cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d5cb8:	f7ff bc86 	b.w	d55c8 <LED_Signaling_Start>
}
   d5cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d5cc0:	f7ff bc8a 	b.w	d55d8 <LED_Signaling_Stop>
}
   d5cc4:	bd10      	pop	{r4, pc}

000d5cc6 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d5cc6:	b570      	push	{r4, r5, r6, lr}
   d5cc8:	4605      	mov	r5, r0
   d5cca:	460e      	mov	r6, r1
   d5ccc:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d5cce:	f7ff fc93 	bl	d55f8 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d5cd2:	b150      	cbz	r0, d5cea <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d5cd4:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d5cd8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d5cdc:	f7ff fc6c 	bl	d55b8 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
   d5ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(LED_RGB);
   d5ce4:	20e7      	movs	r0, #231	; 0xe7
   d5ce6:	f7ff bc8f 	b.w	d5608 <LED_On>
}
   d5cea:	bd70      	pop	{r4, r5, r6, pc}

000d5cec <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d5cec:	b510      	push	{r4, lr}
   d5cee:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d5cf0:	f7ff fc7a 	bl	d55e8 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d5cf4:	f7ff fc80 	bl	d55f8 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d5cf8:	b128      	cbz	r0, d5d06 <_ZN8RGBClass10brightnessEhb+0x1a>
   d5cfa:	b124      	cbz	r4, d5d06 <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(LED_RGB);
    }
}
   d5cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(LED_RGB);
   d5d00:	20e7      	movs	r0, #231	; 0xe7
   d5d02:	f7ff bc81 	b.w	d5608 <LED_On>
}
   d5d06:	bd10      	pop	{r4, pc}

000d5d08 <_ZN8RGBClass10brightnessEv>:

uint8_t RGBClass::brightness()
{
    return Get_LED_Brightness();
   d5d08:	f7ff bc86 	b.w	d5618 <Get_LED_Brightness>

000d5d0c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d0c:	4b01      	ldr	r3, [pc, #4]	; (d5d14 <_GLOBAL__sub_I_RGB+0x8>)
   d5d0e:	2200      	movs	r2, #0
   d5d10:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5d12:	4770      	bx	lr
   d5d14:	2003e5cc 	.word	0x2003e5cc

000d5d18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5d18:	4b01      	ldr	r3, [pc, #4]	; (d5d20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5d1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5d1c:	4770      	bx	lr
   d5d1e:	bf00      	nop
   d5d20:	2003e47c 	.word	0x2003e47c

000d5d24 <serialEventRun>:
{
   d5d24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d26:	4b0b      	ldr	r3, [pc, #44]	; (d5d54 <serialEventRun+0x30>)
   d5d28:	b143      	cbz	r3, d5d3c <serialEventRun+0x18>
   d5d2a:	f000 f961 	bl	d5ff0 <_Z16_fetch_usbserialv>
   d5d2e:	6803      	ldr	r3, [r0, #0]
   d5d30:	691b      	ldr	r3, [r3, #16]
   d5d32:	4798      	blx	r3
   d5d34:	2800      	cmp	r0, #0
   d5d36:	dd01      	ble.n	d5d3c <serialEventRun+0x18>
        serialEvent();
   d5d38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5d3c:	4b06      	ldr	r3, [pc, #24]	; (d5d58 <serialEventRun+0x34>)
   d5d3e:	b143      	cbz	r3, d5d52 <serialEventRun+0x2e>
   d5d40:	f000 f9d4 	bl	d60ec <_Z22__fetch_global_Serial1v>
   d5d44:	6803      	ldr	r3, [r0, #0]
   d5d46:	691b      	ldr	r3, [r3, #16]
   d5d48:	4798      	blx	r3
   d5d4a:	2800      	cmp	r0, #0
   d5d4c:	dd01      	ble.n	d5d52 <serialEventRun+0x2e>
        serialEvent1();
   d5d4e:	f3af 8000 	nop.w
}
   d5d52:	bd08      	pop	{r3, pc}
	...

000d5d5c <_post_loop>:
{
   d5d5c:	b508      	push	{r3, lr}
	serialEventRun();
   d5d5e:	f7ff ffe1 	bl	d5d24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d62:	f7ff fb41 	bl	d53e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d66:	4b01      	ldr	r3, [pc, #4]	; (d5d6c <_post_loop+0x10>)
   d5d68:	6018      	str	r0, [r3, #0]
}
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	2003e738 	.word	0x2003e738

000d5d70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5d70:	4805      	ldr	r0, [pc, #20]	; (d5d88 <_Z33system_initialize_user_backup_ramv+0x18>)
   d5d72:	4a06      	ldr	r2, [pc, #24]	; (d5d8c <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5d74:	4906      	ldr	r1, [pc, #24]	; (d5d90 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5d76:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5d78:	1a12      	subs	r2, r2, r0
   d5d7a:	f002 fe71 	bl	d8a60 <memcpy>
    __backup_sram_signature = signature;
   d5d7e:	4b05      	ldr	r3, [pc, #20]	; (d5d94 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5d80:	4a05      	ldr	r2, [pc, #20]	; (d5d98 <_Z33system_initialize_user_backup_ramv+0x28>)
   d5d82:	601a      	str	r2, [r3, #0]
}
   d5d84:	bd08      	pop	{r3, pc}
   d5d86:	bf00      	nop
   d5d88:	2003f400 	.word	0x2003f400
   d5d8c:	2003f404 	.word	0x2003f404
   d5d90:	000d9120 	.word	0x000d9120
   d5d94:	2003f400 	.word	0x2003f400
   d5d98:	9a271c1e 	.word	0x9a271c1e

000d5d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d9e:	2300      	movs	r3, #0
   d5da0:	9300      	str	r3, [sp, #0]
   d5da2:	461a      	mov	r2, r3
   d5da4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5da8:	f7ff fc88 	bl	d56bc <system_ctrl_set_result>
}
   d5dac:	b003      	add	sp, #12
   d5dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5db4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5db4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5db6:	8843      	ldrh	r3, [r0, #2]
   d5db8:	2b0a      	cmp	r3, #10
   d5dba:	d008      	beq.n	d5dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5dbc:	2b50      	cmp	r3, #80	; 0x50
   d5dbe:	d10b      	bne.n	d5dd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5dc0:	4b09      	ldr	r3, [pc, #36]	; (d5de8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5dc2:	681b      	ldr	r3, [r3, #0]
   d5dc4:	b14b      	cbz	r3, d5dda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5dc6:	b003      	add	sp, #12
   d5dc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5dcc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5dce:	f7ff ffe5 	bl	d5d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5dd2:	b003      	add	sp, #12
   d5dd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5dd8:	2300      	movs	r3, #0
   d5dda:	9300      	str	r3, [sp, #0]
   d5ddc:	461a      	mov	r2, r3
   d5dde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5de2:	f7ff fc6b 	bl	d56bc <system_ctrl_set_result>
}
   d5de6:	e7f4      	b.n	d5dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5de8:	2003e5e0 	.word	0x2003e5e0

000d5dec <module_user_init_hook>:
{
   d5dec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5dee:	4812      	ldr	r0, [pc, #72]	; (d5e38 <module_user_init_hook+0x4c>)
   d5df0:	2100      	movs	r1, #0
   d5df2:	f7ff fd15 	bl	d5820 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5df6:	4b11      	ldr	r3, [pc, #68]	; (d5e3c <module_user_init_hook+0x50>)
   d5df8:	681a      	ldr	r2, [r3, #0]
   d5dfa:	4b11      	ldr	r3, [pc, #68]	; (d5e40 <module_user_init_hook+0x54>)
   d5dfc:	429a      	cmp	r2, r3
   d5dfe:	4b11      	ldr	r3, [pc, #68]	; (d5e44 <module_user_init_hook+0x58>)
   d5e00:	bf0c      	ite	eq
   d5e02:	2201      	moveq	r2, #1
   d5e04:	2200      	movne	r2, #0
   d5e06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e08:	d001      	beq.n	d5e0e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5e0a:	f7ff ffb1 	bl	d5d70 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e0e:	f7ff fadb 	bl	d53c8 <HAL_RNG_GetRandomNumber>
   d5e12:	4604      	mov	r4, r0
    srand(seed);
   d5e14:	f002 fe54 	bl	d8ac0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e18:	4b0b      	ldr	r3, [pc, #44]	; (d5e48 <module_user_init_hook+0x5c>)
   d5e1a:	b113      	cbz	r3, d5e22 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e22:	2100      	movs	r1, #0
   d5e24:	4808      	ldr	r0, [pc, #32]	; (d5e48 <module_user_init_hook+0x5c>)
   d5e26:	f7ff fccb 	bl	d57c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e2e:	4807      	ldr	r0, [pc, #28]	; (d5e4c <module_user_init_hook+0x60>)
   d5e30:	2100      	movs	r1, #0
   d5e32:	f7ff bc39 	b.w	d56a8 <system_ctrl_set_app_request_handler>
   d5e36:	bf00      	nop
   d5e38:	000d5d19 	.word	0x000d5d19
   d5e3c:	2003f400 	.word	0x2003f400
   d5e40:	9a271c1e 	.word	0x9a271c1e
   d5e44:	2003e5dc 	.word	0x2003e5dc
   d5e48:	00000000 	.word	0x00000000
   d5e4c:	000d5db5 	.word	0x000d5db5

000d5e50 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e50:	4770      	bx	lr

000d5e52 <_ZN9IPAddressD0Ev>:
   d5e52:	b510      	push	{r4, lr}
   d5e54:	2118      	movs	r1, #24
   d5e56:	4604      	mov	r4, r0
   d5e58:	f000 fdf4 	bl	d6a44 <_ZdlPvj>
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	bd10      	pop	{r4, pc}

000d5e60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e62:	7d03      	ldrb	r3, [r0, #20]
   d5e64:	2b06      	cmp	r3, #6
{
   d5e66:	b08d      	sub	sp, #52	; 0x34
   d5e68:	460e      	mov	r6, r1
   d5e6a:	f100 0704 	add.w	r7, r0, #4
   d5e6e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5e72:	d012      	beq.n	d5e9a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5e74:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5e78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e7c:	220a      	movs	r2, #10
   d5e7e:	4630      	mov	r0, r6
   d5e80:	f7ff fe73 	bl	d5b6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e84:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e86:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5e88:	d019      	beq.n	d5ebe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5e8a:	2c00      	cmp	r4, #0
   d5e8c:	d0f4      	beq.n	d5e78 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5e8e:	212e      	movs	r1, #46	; 0x2e
   d5e90:	4630      	mov	r0, r6
   d5e92:	f7ff fe5b 	bl	d5b4c <_ZN5Print5printEc>
   d5e96:	4404      	add	r4, r0
   d5e98:	e7ee      	b.n	d5e78 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e9a:	232f      	movs	r3, #47	; 0x2f
   d5e9c:	466a      	mov	r2, sp
   d5e9e:	4639      	mov	r1, r7
   d5ea0:	200a      	movs	r0, #10
		buf[0] = 0;
   d5ea2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ea6:	f7ff fabf 	bl	d5428 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5eaa:	4668      	mov	r0, sp
   d5eac:	f002 fe3e 	bl	d8b2c <strlen>
   d5eb0:	6833      	ldr	r3, [r6, #0]
   d5eb2:	4602      	mov	r2, r0
   d5eb4:	68db      	ldr	r3, [r3, #12]
   d5eb6:	4669      	mov	r1, sp
   d5eb8:	4630      	mov	r0, r6
   d5eba:	4798      	blx	r3
   d5ebc:	4604      	mov	r4, r0
    }
    return n;
}
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	b00d      	add	sp, #52	; 0x34
   d5ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ec4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4b05      	ldr	r3, [pc, #20]	; (d5edc <_ZN9IPAddressC1Ev+0x18>)
   d5ec8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5eca:	2211      	movs	r2, #17
   d5ecc:	f840 3b04 	str.w	r3, [r0], #4
   d5ed0:	2100      	movs	r1, #0
   d5ed2:	f002 fded 	bl	d8ab0 <memset>
}
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	bd10      	pop	{r4, pc}
   d5eda:	bf00      	nop
   d5edc:	000d8e98 	.word	0x000d8e98

000d5ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5ee0:	4603      	mov	r3, r0
   d5ee2:	4a07      	ldr	r2, [pc, #28]	; (d5f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ee4:	b510      	push	{r4, lr}
   d5ee6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5eea:	f101 0210 	add.w	r2, r1, #16
   d5eee:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ef2:	f843 4b04 	str.w	r4, [r3], #4
   d5ef6:	4291      	cmp	r1, r2
   d5ef8:	d1f9      	bne.n	d5eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5efa:	780a      	ldrb	r2, [r1, #0]
   d5efc:	701a      	strb	r2, [r3, #0]
}
   d5efe:	bd10      	pop	{r4, pc}
   d5f00:	000d8e98 	.word	0x000d8e98

000d5f04 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5f04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5f16:	2304      	movs	r3, #4
   d5f18:	6041      	str	r1, [r0, #4]
   d5f1a:	7503      	strb	r3, [r0, #20]
}
   d5f1c:	bd10      	pop	{r4, pc}

000d5f1e <_ZN9IPAddressaSEPKh>:
{
   d5f1e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5f20:	78cb      	ldrb	r3, [r1, #3]
   d5f22:	9300      	str	r3, [sp, #0]
   d5f24:	788b      	ldrb	r3, [r1, #2]
   d5f26:	784a      	ldrb	r2, [r1, #1]
   d5f28:	7809      	ldrb	r1, [r1, #0]
   d5f2a:	f7ff ffeb 	bl	d5f04 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5f2e:	b002      	add	sp, #8
   d5f30:	bd10      	pop	{r4, pc}

000d5f32 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f32:	7441      	strb	r1, [r0, #17]
}
   d5f34:	4770      	bx	lr

000d5f36 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f36:	4770      	bx	lr

000d5f38 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f38:	4770      	bx	lr

000d5f3a <_ZN9USBSerial4readEv>:
{
   d5f3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f3c:	2100      	movs	r1, #0
   d5f3e:	7c00      	ldrb	r0, [r0, #16]
   d5f40:	f7ff fb22 	bl	d5588 <HAL_USB_USART_Receive_Data>
}
   d5f44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f48:	bd08      	pop	{r3, pc}

000d5f4a <_ZN9USBSerial4peekEv>:
{
   d5f4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f4c:	2101      	movs	r1, #1
   d5f4e:	7c00      	ldrb	r0, [r0, #16]
   d5f50:	f7ff fb1a 	bl	d5588 <HAL_USB_USART_Receive_Data>
}
   d5f54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f58:	bd08      	pop	{r3, pc}

000d5f5a <_ZN9USBSerial17availableForWriteEv>:
{
   d5f5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f5c:	7c00      	ldrb	r0, [r0, #16]
   d5f5e:	f7ff fb0b 	bl	d5578 <HAL_USB_USART_Available_Data_For_Write>
}
   d5f62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f66:	bd08      	pop	{r3, pc}

000d5f68 <_ZN9USBSerial9availableEv>:
{
   d5f68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5f6a:	7c00      	ldrb	r0, [r0, #16]
   d5f6c:	f7ff fafc 	bl	d5568 <HAL_USB_USART_Available_Data>
}
   d5f70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f74:	bd08      	pop	{r3, pc}

000d5f76 <_ZN9USBSerial5writeEh>:
{
   d5f76:	b513      	push	{r0, r1, r4, lr}
   d5f78:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f7a:	7c00      	ldrb	r0, [r0, #16]
{
   d5f7c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f7e:	f7ff fafb 	bl	d5578 <HAL_USB_USART_Available_Data_For_Write>
   d5f82:	2800      	cmp	r0, #0
   d5f84:	9901      	ldr	r1, [sp, #4]
   d5f86:	dc01      	bgt.n	d5f8c <_ZN9USBSerial5writeEh+0x16>
   d5f88:	7c60      	ldrb	r0, [r4, #17]
   d5f8a:	b120      	cbz	r0, d5f96 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f8c:	7c20      	ldrb	r0, [r4, #16]
   d5f8e:	f7ff fb03 	bl	d5598 <HAL_USB_USART_Send_Data>
   d5f92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5f96:	b002      	add	sp, #8
   d5f98:	bd10      	pop	{r4, pc}

000d5f9a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5f9a:	7c00      	ldrb	r0, [r0, #16]
   d5f9c:	f7ff bb04 	b.w	d55a8 <HAL_USB_USART_Flush_Data>

000d5fa0 <_ZN9USBSerialD0Ev>:
   d5fa0:	b510      	push	{r4, lr}
   d5fa2:	2114      	movs	r1, #20
   d5fa4:	4604      	mov	r4, r0
   d5fa6:	f000 fd4d 	bl	d6a44 <_ZdlPvj>
   d5faa:	4620      	mov	r0, r4
   d5fac:	bd10      	pop	{r4, pc}
	...

000d5fb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5fb0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5fb6:	4604      	mov	r4, r0
   d5fb8:	4608      	mov	r0, r1
   d5fba:	2100      	movs	r1, #0
   d5fbc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5fc0:	4b04      	ldr	r3, [pc, #16]	; (d5fd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5fc2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5fc4:	2301      	movs	r3, #1
  _serial = serial;
   d5fc6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5fc8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5fca:	4611      	mov	r1, r2
   d5fcc:	f7ff fabc 	bl	d5548 <HAL_USB_USART_Init>
}
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	bd10      	pop	{r4, pc}
   d5fd4:	000d8eac 	.word	0x000d8eac

000d5fd8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5fd8:	7c00      	ldrb	r0, [r0, #16]
   d5fda:	2200      	movs	r2, #0
   d5fdc:	f7ff babc 	b.w	d5558 <HAL_USB_USART_Begin>

000d5fe0 <_Z19acquireSerialBufferv>:
{
   d5fe0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5fe2:	2214      	movs	r2, #20
{
   d5fe4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5fe6:	2100      	movs	r1, #0
   d5fe8:	f002 fd62 	bl	d8ab0 <memset>
}
   d5fec:	4620      	mov	r0, r4
   d5fee:	bd10      	pop	{r4, pc}

000d5ff0 <_Z16_fetch_usbserialv>:
{
   d5ff0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ff2:	4c0f      	ldr	r4, [pc, #60]	; (d6030 <_Z16_fetch_usbserialv+0x40>)
{
   d5ff4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5ff6:	a803      	add	r0, sp, #12
   d5ff8:	f7ff fff2 	bl	d5fe0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ffc:	7821      	ldrb	r1, [r4, #0]
   d5ffe:	f3bf 8f5b 	dmb	ish
   d6002:	f011 0101 	ands.w	r1, r1, #1
   d6006:	d10f      	bne.n	d6028 <_Z16_fetch_usbserialv+0x38>
   d6008:	4620      	mov	r0, r4
   d600a:	9101      	str	r1, [sp, #4]
   d600c:	f7fe f84b 	bl	d40a6 <__cxa_guard_acquire>
   d6010:	9901      	ldr	r1, [sp, #4]
   d6012:	b148      	cbz	r0, d6028 <_Z16_fetch_usbserialv+0x38>
   d6014:	aa03      	add	r2, sp, #12
   d6016:	4807      	ldr	r0, [pc, #28]	; (d6034 <_Z16_fetch_usbserialv+0x44>)
   d6018:	f7ff ffca 	bl	d5fb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d601c:	4620      	mov	r0, r4
   d601e:	f7fe f847 	bl	d40b0 <__cxa_guard_release>
   d6022:	4805      	ldr	r0, [pc, #20]	; (d6038 <_Z16_fetch_usbserialv+0x48>)
   d6024:	f002 fd16 	bl	d8a54 <atexit>
	return _usbserial;
}
   d6028:	4802      	ldr	r0, [pc, #8]	; (d6034 <_Z16_fetch_usbserialv+0x44>)
   d602a:	b008      	add	sp, #32
   d602c:	bd10      	pop	{r4, pc}
   d602e:	bf00      	nop
   d6030:	2003e5e4 	.word	0x2003e5e4
   d6034:	2003e5e8 	.word	0x2003e5e8
   d6038:	000d5f37 	.word	0x000d5f37

000d603c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d603c:	f7ff b9b4 	b.w	d53a8 <HAL_Interrupts_Disable_All>

000d6040 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6040:	f7ff b9aa 	b.w	d5398 <HAL_Interrupts_Enable_All>

000d6044 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6044:	4770      	bx	lr

000d6046 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6046:	7441      	strb	r1, [r0, #17]
}
   d6048:	4770      	bx	lr

000d604a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d604a:	4770      	bx	lr

000d604c <_ZN11USARTSerial17availableForWriteEv>:
{
   d604c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d604e:	7c00      	ldrb	r0, [r0, #16]
   d6050:	f7ff fa2a 	bl	d54a8 <hal_usart_available_data_for_write>
}
   d6054:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6058:	bd08      	pop	{r3, pc}

000d605a <_ZN11USARTSerial9availableEv>:
{
   d605a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d605c:	7c00      	ldrb	r0, [r0, #16]
   d605e:	f7ff f9fb 	bl	d5458 <hal_usart_available>
}
   d6062:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6066:	bd08      	pop	{r3, pc}

000d6068 <_ZN11USARTSerial4peekEv>:
{
   d6068:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d606a:	7c00      	ldrb	r0, [r0, #16]
   d606c:	f7ff fa04 	bl	d5478 <hal_usart_peek>
}
   d6070:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6074:	bd08      	pop	{r3, pc}

000d6076 <_ZN11USARTSerial4readEv>:
{
   d6076:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6078:	7c00      	ldrb	r0, [r0, #16]
   d607a:	f7ff f9f5 	bl	d5468 <hal_usart_read>
}
   d607e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6082:	bd08      	pop	{r3, pc}

000d6084 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d6084:	7c00      	ldrb	r0, [r0, #16]
   d6086:	f7ff b9ff 	b.w	d5488 <hal_usart_flush>

000d608a <_ZN11USARTSerial5writeEh>:
{
   d608a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d608c:	7c45      	ldrb	r5, [r0, #17]
{
   d608e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6090:	b12d      	cbz	r5, d609e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d6092:	7c20      	ldrb	r0, [r4, #16]
}
   d6094:	b003      	add	sp, #12
   d6096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d609a:	f7ff b9d5 	b.w	d5448 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d609e:	7c00      	ldrb	r0, [r0, #16]
   d60a0:	9101      	str	r1, [sp, #4]
   d60a2:	f7ff fa01 	bl	d54a8 <hal_usart_available_data_for_write>
   d60a6:	2800      	cmp	r0, #0
   d60a8:	9901      	ldr	r1, [sp, #4]
   d60aa:	dcf2      	bgt.n	d6092 <_ZN11USARTSerial5writeEh+0x8>
}
   d60ac:	4628      	mov	r0, r5
   d60ae:	b003      	add	sp, #12
   d60b0:	bd30      	pop	{r4, r5, pc}

000d60b2 <_ZN11USARTSerialD0Ev>:
   d60b2:	b510      	push	{r4, lr}
   d60b4:	2114      	movs	r1, #20
   d60b6:	4604      	mov	r4, r0
   d60b8:	f000 fcc4 	bl	d6a44 <_ZdlPvj>
   d60bc:	4620      	mov	r0, r4
   d60be:	bd10      	pop	{r4, pc}

000d60c0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d60c0:	b510      	push	{r4, lr}
   d60c2:	f04f 0c00 	mov.w	ip, #0
   d60c6:	4604      	mov	r4, r0
   d60c8:	4608      	mov	r0, r1
   d60ca:	4611      	mov	r1, r2
   d60cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60d0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d60d4:	4a04      	ldr	r2, [pc, #16]	; (d60e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d60d6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d60d8:	2201      	movs	r2, #1
  _serial = serial;
   d60da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d60dc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d60de:	461a      	mov	r2, r3
   d60e0:	f7ff f9aa 	bl	d5438 <hal_usart_init>
}
   d60e4:	4620      	mov	r0, r4
   d60e6:	bd10      	pop	{r4, pc}
   d60e8:	000d8edc 	.word	0x000d8edc

000d60ec <_Z22__fetch_global_Serial1v>:
{
   d60ec:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d60ee:	4c0d      	ldr	r4, [pc, #52]	; (d6124 <_Z22__fetch_global_Serial1v+0x38>)
   d60f0:	7821      	ldrb	r1, [r4, #0]
   d60f2:	f3bf 8f5b 	dmb	ish
   d60f6:	f011 0101 	ands.w	r1, r1, #1
   d60fa:	d110      	bne.n	d611e <_Z22__fetch_global_Serial1v+0x32>
   d60fc:	4620      	mov	r0, r4
   d60fe:	9101      	str	r1, [sp, #4]
   d6100:	f7fd ffd1 	bl	d40a6 <__cxa_guard_acquire>
   d6104:	9901      	ldr	r1, [sp, #4]
   d6106:	b150      	cbz	r0, d611e <_Z22__fetch_global_Serial1v+0x32>
   d6108:	4b07      	ldr	r3, [pc, #28]	; (d6128 <_Z22__fetch_global_Serial1v+0x3c>)
   d610a:	4a08      	ldr	r2, [pc, #32]	; (d612c <_Z22__fetch_global_Serial1v+0x40>)
   d610c:	4808      	ldr	r0, [pc, #32]	; (d6130 <_Z22__fetch_global_Serial1v+0x44>)
   d610e:	f7ff ffd7 	bl	d60c0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6112:	4620      	mov	r0, r4
   d6114:	f7fd ffcc 	bl	d40b0 <__cxa_guard_release>
   d6118:	4806      	ldr	r0, [pc, #24]	; (d6134 <_Z22__fetch_global_Serial1v+0x48>)
   d611a:	f002 fc9b 	bl	d8a54 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d611e:	4804      	ldr	r0, [pc, #16]	; (d6130 <_Z22__fetch_global_Serial1v+0x44>)
   d6120:	b002      	add	sp, #8
   d6122:	bd10      	pop	{r4, pc}
   d6124:	2003e5fc 	.word	0x2003e5fc
   d6128:	2003e684 	.word	0x2003e684
   d612c:	2003e600 	.word	0x2003e600
   d6130:	2003e708 	.word	0x2003e708
   d6134:	000d604b 	.word	0x000d604b

000d6138 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6138:	4770      	bx	lr

000d613a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d613c:	4606      	mov	r6, r0
   d613e:	4615      	mov	r5, r2
   d6140:	460c      	mov	r4, r1
   d6142:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6144:	42bc      	cmp	r4, r7
   d6146:	d006      	beq.n	d6156 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6148:	6833      	ldr	r3, [r6, #0]
   d614a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d614e:	689b      	ldr	r3, [r3, #8]
   d6150:	4630      	mov	r0, r6
   d6152:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6154:	e7f6      	b.n	d6144 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6156:	4628      	mov	r0, r5
   d6158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d615a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d615a:	7c00      	ldrb	r0, [r0, #16]
   d615c:	2200      	movs	r2, #0
   d615e:	f7ff b9ab 	b.w	d54b8 <hal_i2c_write>

000d6162 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6162:	7c00      	ldrb	r0, [r0, #16]
   d6164:	2100      	movs	r1, #0
   d6166:	f7ff b9af 	b.w	d54c8 <hal_i2c_available>

000d616a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d616a:	7c00      	ldrb	r0, [r0, #16]
   d616c:	2100      	movs	r1, #0
   d616e:	f7ff b9b3 	b.w	d54d8 <hal_i2c_read>

000d6172 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6172:	7c00      	ldrb	r0, [r0, #16]
   d6174:	2100      	movs	r1, #0
   d6176:	f7ff b9b7 	b.w	d54e8 <hal_i2c_peek>

000d617a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d617a:	7c00      	ldrb	r0, [r0, #16]
   d617c:	2100      	movs	r1, #0
   d617e:	f7ff b9bb 	b.w	d54f8 <hal_i2c_flush>

000d6182 <_ZN7TwoWireD0Ev>:
   d6182:	b510      	push	{r4, lr}
   d6184:	2114      	movs	r1, #20
   d6186:	4604      	mov	r4, r0
   d6188:	f000 fc5c 	bl	d6a44 <_ZdlPvj>
   d618c:	4620      	mov	r0, r4
   d618e:	bd10      	pop	{r4, pc}

000d6190 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6190:	b510      	push	{r4, lr}
   d6192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6196:	4604      	mov	r4, r0
   d6198:	4608      	mov	r0, r1
   d619a:	2100      	movs	r1, #0
   d619c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61a0:	4b03      	ldr	r3, [pc, #12]	; (d61b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d61a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d61a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d61a6:	4611      	mov	r1, r2
   d61a8:	f7ff f9b6 	bl	d5518 <hal_i2c_init>
}
   d61ac:	4620      	mov	r0, r4
   d61ae:	bd10      	pop	{r4, pc}
   d61b0:	000d8f0c 	.word	0x000d8f0c

000d61b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d61b4:	2200      	movs	r2, #0
   d61b6:	6840      	ldr	r0, [r0, #4]
   d61b8:	4611      	mov	r1, r2
   d61ba:	f7ff baa1 	b.w	d5700 <network_ready>

000d61be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61be:	2200      	movs	r2, #0
   d61c0:	6840      	ldr	r0, [r0, #4]
   d61c2:	4611      	mov	r1, r2
   d61c4:	f7ff babc 	b.w	d5740 <network_listening>

000d61c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d61c8:	2200      	movs	r2, #0
   d61ca:	6840      	ldr	r0, [r0, #4]
   d61cc:	4611      	mov	r1, r2
   d61ce:	f7ff bac7 	b.w	d5760 <network_get_listen_timeout>

000d61d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d61d2:	6840      	ldr	r0, [r0, #4]
   d61d4:	2200      	movs	r2, #0
   d61d6:	f7ff babb 	b.w	d5750 <network_set_listen_timeout>

000d61da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d61da:	6840      	ldr	r0, [r0, #4]
   d61dc:	2200      	movs	r2, #0
   d61de:	f081 0101 	eor.w	r1, r1, #1
   d61e2:	f7ff baa5 	b.w	d5730 <network_listen>

000d61e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d61e6:	2300      	movs	r3, #0
   d61e8:	6840      	ldr	r0, [r0, #4]
   d61ea:	461a      	mov	r2, r3
   d61ec:	4619      	mov	r1, r3
   d61ee:	f7ff ba97 	b.w	d5720 <network_off>

000d61f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d61f2:	2300      	movs	r3, #0
   d61f4:	6840      	ldr	r0, [r0, #4]
   d61f6:	461a      	mov	r2, r3
   d61f8:	4619      	mov	r1, r3
   d61fa:	f7ff ba89 	b.w	d5710 <network_on>

000d61fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d61fe:	2200      	movs	r2, #0
   d6200:	6840      	ldr	r0, [r0, #4]
   d6202:	4611      	mov	r1, r2
   d6204:	f7ff ba6c 	b.w	d56e0 <network_connecting>

000d6208 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6208:	6840      	ldr	r0, [r0, #4]
   d620a:	2200      	movs	r2, #0
   d620c:	2102      	movs	r1, #2
   d620e:	f7ff ba6f 	b.w	d56f0 <network_disconnect>

000d6212 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6212:	2300      	movs	r3, #0
   d6214:	6840      	ldr	r0, [r0, #4]
   d6216:	461a      	mov	r2, r3
   d6218:	f7ff ba5a 	b.w	d56d0 <network_connect>

000d621c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d621c:	4b02      	ldr	r3, [pc, #8]	; (d6228 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d621e:	2204      	movs	r2, #4
   d6220:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6222:	4a02      	ldr	r2, [pc, #8]	; (d622c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6224:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6226:	4770      	bx	lr
   d6228:	2003e71c 	.word	0x2003e71c
   d622c:	000d8f34 	.word	0x000d8f34

000d6230 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6230:	2300      	movs	r3, #0
   d6232:	6840      	ldr	r0, [r0, #4]
   d6234:	461a      	mov	r2, r3
   d6236:	f7ff ba4b 	b.w	d56d0 <network_connect>

000d623a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d623a:	6840      	ldr	r0, [r0, #4]
   d623c:	2200      	movs	r2, #0
   d623e:	2102      	movs	r1, #2
   d6240:	f7ff ba56 	b.w	d56f0 <network_disconnect>

000d6244 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6244:	2200      	movs	r2, #0
   d6246:	6840      	ldr	r0, [r0, #4]
   d6248:	4611      	mov	r1, r2
   d624a:	f7ff ba49 	b.w	d56e0 <network_connecting>

000d624e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d624e:	2200      	movs	r2, #0
   d6250:	6840      	ldr	r0, [r0, #4]
   d6252:	4611      	mov	r1, r2
   d6254:	f7ff ba54 	b.w	d5700 <network_ready>

000d6258 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6258:	2300      	movs	r3, #0
   d625a:	6840      	ldr	r0, [r0, #4]
   d625c:	461a      	mov	r2, r3
   d625e:	4619      	mov	r1, r3
   d6260:	f7ff ba56 	b.w	d5710 <network_on>

000d6264 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6264:	2300      	movs	r3, #0
   d6266:	6840      	ldr	r0, [r0, #4]
   d6268:	461a      	mov	r2, r3
   d626a:	4619      	mov	r1, r3
   d626c:	f7ff ba58 	b.w	d5720 <network_off>

000d6270 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	2100      	movs	r1, #0
   d6274:	f7ff ba7c 	b.w	d5770 <network_is_on>

000d6278 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6278:	6840      	ldr	r0, [r0, #4]
   d627a:	2100      	movs	r1, #0
   d627c:	f7ff ba80 	b.w	d5780 <network_is_off>

000d6280 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6280:	6840      	ldr	r0, [r0, #4]
   d6282:	2200      	movs	r2, #0
   d6284:	f081 0101 	eor.w	r1, r1, #1
   d6288:	f7ff ba52 	b.w	d5730 <network_listen>

000d628c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d628c:	6840      	ldr	r0, [r0, #4]
   d628e:	2200      	movs	r2, #0
   d6290:	f7ff ba5e 	b.w	d5750 <network_set_listen_timeout>

000d6294 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6294:	2200      	movs	r2, #0
   d6296:	6840      	ldr	r0, [r0, #4]
   d6298:	4611      	mov	r1, r2
   d629a:	f7ff ba61 	b.w	d5760 <network_get_listen_timeout>

000d629e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d629e:	2200      	movs	r2, #0
   d62a0:	6840      	ldr	r0, [r0, #4]
   d62a2:	4611      	mov	r1, r2
   d62a4:	f7ff ba4c 	b.w	d5740 <network_listening>

000d62a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d62a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d62ac:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d62ae:	b095      	sub	sp, #84	; 0x54
   d62b0:	4616      	mov	r6, r2
   d62b2:	460d      	mov	r5, r1
   d62b4:	4607      	mov	r7, r0
    IPAddress addr;
   d62b6:	f7ff fe05 	bl	d5ec4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d62ba:	4621      	mov	r1, r4
   d62bc:	2218      	movs	r2, #24
   d62be:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d62c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d62c2:	f002 fbf5 	bl	d8ab0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d62c6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d62c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d62cc:	4621      	mov	r1, r4
   d62ce:	466b      	mov	r3, sp
   d62d0:	aa0c      	add	r2, sp, #48	; 0x30
   d62d2:	4630      	mov	r0, r6
   d62d4:	f7ff f830 	bl	d5338 <netdb_getaddrinfo>
    if (!r) {
   d62d8:	4604      	mov	r4, r0
   d62da:	2800      	cmp	r0, #0
   d62dc:	d146      	bne.n	d636c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62de:	4602      	mov	r2, r0
   d62e0:	2101      	movs	r1, #1
   d62e2:	6868      	ldr	r0, [r5, #4]
   d62e4:	f7ff fa0c 	bl	d5700 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d62ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62ec:	4622      	mov	r2, r4
   d62ee:	6868      	ldr	r0, [r5, #4]
   d62f0:	f7ff fa06 	bl	d5700 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d62f6:	4681      	mov	r9, r0
        bool ok = false;
   d62f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62fa:	2e00      	cmp	r6, #0
   d62fc:	d036      	beq.n	d636c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d62fe:	2900      	cmp	r1, #0
   d6300:	d134      	bne.n	d636c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6302:	6873      	ldr	r3, [r6, #4]
   d6304:	2b02      	cmp	r3, #2
   d6306:	d003      	beq.n	d6310 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6308:	2b0a      	cmp	r3, #10
   d630a:	d00b      	beq.n	d6324 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d630c:	69f6      	ldr	r6, [r6, #28]
   d630e:	e7f4      	b.n	d62fa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6310:	f1b8 0f00 	cmp.w	r8, #0
   d6314:	d004      	beq.n	d6320 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6316:	6971      	ldr	r1, [r6, #20]
   d6318:	4638      	mov	r0, r7
   d631a:	3104      	adds	r1, #4
   d631c:	f7ff fdff 	bl	d5f1e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6320:	4641      	mov	r1, r8
   d6322:	e7f3      	b.n	d630c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6324:	f1b9 0f00 	cmp.w	r9, #0
   d6328:	d101      	bne.n	d632e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d632a:	4649      	mov	r1, r9
   d632c:	e7ee      	b.n	d630c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d632e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6330:	2210      	movs	r2, #16
   d6332:	a801      	add	r0, sp, #4
   d6334:	f002 fbbc 	bl	d8ab0 <memset>
                    a.v = 6;
   d6338:	2306      	movs	r3, #6
   d633a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d633e:	ad01      	add	r5, sp, #4
   d6340:	f104 0308 	add.w	r3, r4, #8
   d6344:	3418      	adds	r4, #24
   d6346:	6818      	ldr	r0, [r3, #0]
   d6348:	6859      	ldr	r1, [r3, #4]
   d634a:	462a      	mov	r2, r5
   d634c:	c203      	stmia	r2!, {r0, r1}
   d634e:	3308      	adds	r3, #8
   d6350:	42a3      	cmp	r3, r4
   d6352:	4615      	mov	r5, r2
   d6354:	d1f7      	bne.n	d6346 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6356:	a901      	add	r1, sp, #4
   d6358:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d635a:	ad07      	add	r5, sp, #28
   d635c:	f7ff fdc0 	bl	d5ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6362:	1d3c      	adds	r4, r7, #4
   d6364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6366:	682b      	ldr	r3, [r5, #0]
   d6368:	7023      	strb	r3, [r4, #0]
   d636a:	e7de      	b.n	d632a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d636c:	9800      	ldr	r0, [sp, #0]
   d636e:	f7fe ffdb 	bl	d5328 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6372:	4638      	mov	r0, r7
   d6374:	b015      	add	sp, #84	; 0x54
   d6376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d637c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d637c:	4b02      	ldr	r3, [pc, #8]	; (d6388 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d637e:	4a03      	ldr	r2, [pc, #12]	; (d638c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6380:	601a      	str	r2, [r3, #0]
   d6382:	2200      	movs	r2, #0
   d6384:	605a      	str	r2, [r3, #4]

} // spark
   d6386:	4770      	bx	lr
   d6388:	2003e724 	.word	0x2003e724
   d638c:	000d8f70 	.word	0x000d8f70

000d6390 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6390:	f100 0310 	add.w	r3, r0, #16
   d6394:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6396:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d639a:	2901      	cmp	r1, #1
   d639c:	4618      	mov	r0, r3
   d639e:	d108      	bne.n	d63b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d63a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d63a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d63a8:	3a01      	subs	r2, #1
   d63aa:	f103 0310 	add.w	r3, r3, #16
   d63ae:	d1f2      	bne.n	d6396 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d63b0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d63b2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d63b4:	bf04      	itt	eq
   d63b6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d63ba:	1852      	addeq	r2, r2, r1
   d63bc:	e7f4      	b.n	d63a8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d63be <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63be:	4770      	bx	lr

000d63c0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d63c0:	2000      	movs	r0, #0
   d63c2:	4770      	bx	lr

000d63c4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63c4:	b510      	push	{r4, lr}
   d63c6:	2110      	movs	r1, #16
   d63c8:	4604      	mov	r4, r0
   d63ca:	f000 fb3b 	bl	d6a44 <_ZdlPvj>
   d63ce:	4620      	mov	r0, r4
   d63d0:	bd10      	pop	{r4, pc}

000d63d2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d63d2:	b508      	push	{r3, lr}
      { delete this; }
   d63d4:	f7ff fff6 	bl	d63c4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d63d8:	bd08      	pop	{r3, pc}

000d63da <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d63da:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d63dc:	68c4      	ldr	r4, [r0, #12]
   d63de:	b17c      	cbz	r4, d6400 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d63e0:	6820      	ldr	r0, [r4, #0]
   d63e2:	b108      	cbz	r0, d63e8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d63e4:	f7fd fe5d 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d63e8:	7a23      	ldrb	r3, [r4, #8]
   d63ea:	b11b      	cbz	r3, d63f4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d63ec:	6860      	ldr	r0, [r4, #4]
   d63ee:	b108      	cbz	r0, d63f4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d63f0:	f7fd fe57 	bl	d40a2 <_ZdaPv>
   d63f4:	4620      	mov	r0, r4
   d63f6:	210c      	movs	r1, #12
   d63f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d63fc:	f000 bb22 	b.w	d6a44 <_ZdlPvj>
   d6400:	bd10      	pop	{r4, pc}

000d6402 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6402:	b510      	push	{r4, lr}
          _M_dispose();
   d6404:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6406:	4604      	mov	r4, r0
          _M_dispose();
   d6408:	689b      	ldr	r3, [r3, #8]
   d640a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d640c:	68a3      	ldr	r3, [r4, #8]
   d640e:	3b01      	subs	r3, #1
   d6410:	60a3      	str	r3, [r4, #8]
   d6412:	b92b      	cbnz	r3, d6420 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6414:	6823      	ldr	r3, [r4, #0]
   d6416:	4620      	mov	r0, r4
   d6418:	68db      	ldr	r3, [r3, #12]
    }
   d641a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d641e:	4718      	bx	r3
    }
   d6420:	bd10      	pop	{r4, pc}

000d6422 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6422:	b538      	push	{r3, r4, r5, lr}
   d6424:	680b      	ldr	r3, [r1, #0]
   d6426:	6003      	str	r3, [r0, #0]
   d6428:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d642a:	6843      	ldr	r3, [r0, #4]
   d642c:	429d      	cmp	r5, r3
    class __shared_ptr
   d642e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6430:	d00c      	beq.n	d644c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6432:	b115      	cbz	r5, d643a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6434:	686b      	ldr	r3, [r5, #4]
   d6436:	3301      	adds	r3, #1
   d6438:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d643a:	6860      	ldr	r0, [r4, #4]
   d643c:	b128      	cbz	r0, d644a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d643e:	6843      	ldr	r3, [r0, #4]
   d6440:	3b01      	subs	r3, #1
   d6442:	6043      	str	r3, [r0, #4]
   d6444:	b90b      	cbnz	r3, d644a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6446:	f7ff ffdc 	bl	d6402 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d644a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d644c:	4620      	mov	r0, r4
   d644e:	bd38      	pop	{r3, r4, r5, pc}

000d6450 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6450:	460b      	mov	r3, r1
   d6452:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6454:	2200      	movs	r2, #0
   d6456:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6458:	e9c0 2200 	strd	r2, r2, [r0]
   d645c:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d645e:	6083      	str	r3, [r0, #8]
    if (t) {
   d6460:	b90b      	cbnz	r3, d6466 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d6462:	4620      	mov	r0, r4
   d6464:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6466:	f7ff ffdc 	bl	d6422 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d646a:	e7fa      	b.n	d6462 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d646c <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d646c:	6883      	ldr	r3, [r0, #8]
   d646e:	b1eb      	cbz	r3, d64ac <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d6470:	781a      	ldrb	r2, [r3, #0]
   d6472:	2a03      	cmp	r2, #3
   d6474:	d81a      	bhi.n	d64ac <_ZNK5spark9JSONValue4typeEv+0x40>
   d6476:	e8df f002 	tbb	[pc, r2]
   d647a:	1704      	.short	0x1704
   d647c:	1b02      	.short	0x1b02
   d647e:	2005      	movs	r0, #5
   d6480:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6482:	6802      	ldr	r2, [r0, #0]
   d6484:	685b      	ldr	r3, [r3, #4]
   d6486:	6852      	ldr	r2, [r2, #4]
   d6488:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d648a:	282d      	cmp	r0, #45	; 0x2d
   d648c:	d012      	beq.n	d64b4 <_ZNK5spark9JSONValue4typeEv+0x48>
   d648e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6492:	2b09      	cmp	r3, #9
   d6494:	d90e      	bls.n	d64b4 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6496:	2874      	cmp	r0, #116	; 0x74
   d6498:	d00e      	beq.n	d64b8 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d649a:	2866      	cmp	r0, #102	; 0x66
   d649c:	d00c      	beq.n	d64b8 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d649e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d64a2:	4258      	negs	r0, r3
   d64a4:	4158      	adcs	r0, r3
   d64a6:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d64a8:	2006      	movs	r0, #6
   d64aa:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d64ac:	2000      	movs	r0, #0
   d64ae:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d64b0:	2004      	movs	r0, #4
   d64b2:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d64b4:	2003      	movs	r0, #3
   d64b6:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d64b8:	2002      	movs	r0, #2
    }
}
   d64ba:	4770      	bx	lr

000d64bc <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   d64bc:	b510      	push	{r4, lr}
   d64be:	4604      	mov	r4, r0
    switch (type()) {
   d64c0:	f7ff ffd4 	bl	d646c <_ZNK5spark9JSONValue4typeEv>
   d64c4:	2803      	cmp	r0, #3
   d64c6:	d00d      	beq.n	d64e4 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   d64c8:	2804      	cmp	r0, #4
   d64ca:	d01e      	beq.n	d650a <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   d64cc:	2802      	cmp	r0, #2
   d64ce:	d12b      	bne.n	d6528 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   d64d0:	6822      	ldr	r2, [r4, #0]
   d64d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d64d4:	6852      	ldr	r2, [r2, #4]
   d64d6:	685b      	ldr	r3, [r3, #4]
   d64d8:	5cd0      	ldrb	r0, [r2, r3]
   d64da:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d64de:	4258      	negs	r0, r3
   d64e0:	4158      	adcs	r0, r3
}
   d64e2:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   d64e4:	68a3      	ldr	r3, [r4, #8]
   d64e6:	6822      	ldr	r2, [r4, #0]
   d64e8:	685b      	ldr	r3, [r3, #4]
   d64ea:	6854      	ldr	r4, [r2, #4]
   d64ec:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d64ee:	490f      	ldr	r1, [pc, #60]	; (d652c <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   d64f0:	4620      	mov	r0, r4
   d64f2:	f002 fb09 	bl	d8b08 <strcmp>
   d64f6:	2800      	cmp	r0, #0
   d64f8:	d0f3      	beq.n	d64e2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d64fa:	490d      	ldr	r1, [pc, #52]	; (d6530 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   d64fc:	4620      	mov	r0, r4
   d64fe:	f002 fb03 	bl	d8b08 <strcmp>
   d6502:	3800      	subs	r0, #0
   d6504:	bf18      	it	ne
   d6506:	2001      	movne	r0, #1
   d6508:	e7eb      	b.n	d64e2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   d650a:	6822      	ldr	r2, [r4, #0]
   d650c:	68a3      	ldr	r3, [r4, #8]
   d650e:	6852      	ldr	r2, [r2, #4]
   d6510:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d6512:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   d6514:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   d6516:	2800      	cmp	r0, #0
   d6518:	d0e3      	beq.n	d64e2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d651a:	4906      	ldr	r1, [pc, #24]	; (d6534 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   d651c:	4620      	mov	r0, r4
   d651e:	f002 faf3 	bl	d8b08 <strcmp>
   d6522:	2800      	cmp	r0, #0
   d6524:	d1e3      	bne.n	d64ee <_ZNK5spark9JSONValue6toBoolEv+0x32>
   d6526:	e7dc      	b.n	d64e2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   d6528:	2000      	movs	r0, #0
   d652a:	e7da      	b.n	d64e2 <_ZNK5spark9JSONValue6toBoolEv+0x26>
   d652c:	000d8fa6 	.word	0x000d8fa6
   d6530:	000d8fa4 	.word	0x000d8fa4
   d6534:	000d8fa8 	.word	0x000d8fa8

000d6538 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6538:	b510      	push	{r4, lr}
   d653a:	4604      	mov	r4, r0
    switch (type()) {
   d653c:	f7ff ff96 	bl	d646c <_ZNK5spark9JSONValue4typeEv>
   d6540:	2802      	cmp	r0, #2
   d6542:	d00e      	beq.n	d6562 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6544:	1ec3      	subs	r3, r0, #3
   d6546:	b2db      	uxtb	r3, r3
   d6548:	2b01      	cmp	r3, #1
   d654a:	d814      	bhi.n	d6576 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d654c:	6822      	ldr	r2, [r4, #0]
   d654e:	68a3      	ldr	r3, [r4, #8]
   d6550:	6850      	ldr	r0, [r2, #4]
   d6552:	685b      	ldr	r3, [r3, #4]
}
   d6554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6558:	220a      	movs	r2, #10
   d655a:	2100      	movs	r1, #0
   d655c:	4418      	add	r0, r3
   d655e:	f002 bb67 	b.w	d8c30 <strtol>
        const char* const s = d_->json + t_->start;
   d6562:	6822      	ldr	r2, [r4, #0]
   d6564:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6566:	6852      	ldr	r2, [r2, #4]
   d6568:	685b      	ldr	r3, [r3, #4]
   d656a:	5cd0      	ldrb	r0, [r2, r3]
   d656c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6570:	4258      	negs	r0, r3
   d6572:	4158      	adcs	r0, r3
}
   d6574:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6576:	2000      	movs	r0, #0
   d6578:	e7fc      	b.n	d6574 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d657c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6580:	4699      	mov	r9, r3
   d6582:	b088      	sub	sp, #32
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
   d6584:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d6586:	4607      	mov	r7, r0
   d6588:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   d658a:	eb0d 0003 	add.w	r0, sp, r3
   d658e:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d6590:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d6592:	9304      	str	r3, [sp, #16]
    int nExt = -1;
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d6594:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   d6596:	f7ff f84f 	bl	d5638 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d659a:	ab03      	add	r3, sp, #12
   d659c:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   d659e:	f04f 36ff 	mov.w	r6, #4294967295
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d65a2:	9400      	str	r4, [sp, #0]
   d65a4:	4623      	mov	r3, r4
   d65a6:	4642      	mov	r2, r8
   d65a8:	4639      	mov	r1, r7
   d65aa:	a804      	add	r0, sp, #16
    int nExt = -1;
   d65ac:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   d65ae:	f7ff f84b 	bl	d5648 <jsmn_parse_deprecated>
    if (n <= 0) {
   d65b2:	1e05      	subs	r5, r0, #0
   d65b4:	dd27      	ble.n	d6606 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
        return false; // Parsing error
    }
    if (nExt > n) {
   d65b6:	9803      	ldr	r0, [sp, #12]
        n = nExt;
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d65b8:	4914      	ldr	r1, [pc, #80]	; (d660c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   d65ba:	4285      	cmp	r5, r0
   d65bc:	bfb8      	it	lt
   d65be:	4605      	movlt	r5, r0
   d65c0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   d65c4:	bfac      	ite	ge
   d65c6:	4630      	movge	r0, r6
   d65c8:	0128      	lsllt	r0, r5, #4
   d65ca:	f000 fa3f 	bl	d6a4c <_ZnajRKSt9nothrow_t>
    if (!t) {
   d65ce:	4606      	mov	r6, r0
   d65d0:	b198      	cbz	r0, d65fa <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d65d2:	2100      	movs	r1, #0
   d65d4:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d65d6:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   d65d8:	f7ff f82e 	bl	d5638 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d65dc:	e9cd 5400 	strd	r5, r4, [sp]
   d65e0:	4633      	mov	r3, r6
   d65e2:	4642      	mov	r2, r8
   d65e4:	4639      	mov	r1, r7
   d65e6:	a804      	add	r0, sp, #16
   d65e8:	f7ff f82e 	bl	d5648 <jsmn_parse_deprecated>
   d65ec:	42a0      	cmp	r0, r4
   d65ee:	dd07      	ble.n	d6600 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
        return false;
    }
    *tokens = t.release();
   d65f0:	f8ca 6000 	str.w	r6, [sl]
    *count = n;
    return true;
   d65f4:	2001      	movs	r0, #1
    *count = n;
   d65f6:	f8c9 5000 	str.w	r5, [r9]
}
   d65fa:	b008      	add	sp, #32
   d65fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6600:	4630      	mov	r0, r6
   d6602:	f7fd fd4e 	bl	d40a2 <_ZdaPv>
      }
   d6606:	4620      	mov	r0, r4
   d6608:	e7f7      	b.n	d65fa <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   d660a:	bf00      	nop
   d660c:	000d8fcc 	.word	0x000d8fcc

000d6610 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d6610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d6614:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d6616:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d6618:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d661a:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d661c:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d661e:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d6620:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d6622:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d6624:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d6628:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d662c:	42b4      	cmp	r4, r6
   d662e:	d063      	beq.n	d66f8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d6630:	4625      	mov	r5, r4
   d6632:	f815 2b01 	ldrb.w	r2, [r5], #1
   d6636:	2a5c      	cmp	r2, #92	; 0x5c
   d6638:	d12b      	bne.n	d6692 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d663a:	42a1      	cmp	r1, r4
   d663c:	d007      	beq.n	d664e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d663e:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d6642:	4618      	mov	r0, r3
   d6644:	465a      	mov	r2, fp
   d6646:	f002 fa19 	bl	d8a7c <memmove>
   d664a:	4603      	mov	r3, r0
                str += n;
   d664c:	445b      	add	r3, fp
            if (s == end) {
   d664e:	42b5      	cmp	r5, r6
   d6650:	d039      	beq.n	d66c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d6652:	7862      	ldrb	r2, [r4, #1]
   d6654:	2a75      	cmp	r2, #117	; 0x75
   d6656:	d12a      	bne.n	d66ae <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d6658:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d665a:	1ab2      	subs	r2, r6, r2
   d665c:	2a03      	cmp	r2, #3
   d665e:	dd32      	ble.n	d66c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d6660:	1da0      	adds	r0, r4, #6
   d6662:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d6666:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d666a:	45ae      	cmp	lr, r5
   d666c:	d053      	beq.n	d6716 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d666e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d6672:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d6676:	fa5f fb82 	uxtb.w	fp, r2
   d667a:	f1bb 0f09 	cmp.w	fp, #9
   d667e:	d905      	bls.n	d668c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d6680:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d6684:	2a05      	cmp	r2, #5
   d6686:	d807      	bhi.n	d6698 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d6688:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d668c:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d6690:	e7eb      	b.n	d666a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d6692:	4628      	mov	r0, r5
   d6694:	4604      	mov	r4, r0
   d6696:	e7c9      	b.n	d662c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d6698:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d669c:	2a05      	cmp	r2, #5
   d669e:	d812      	bhi.n	d66c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d66a0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d66a4:	e7f2      	b.n	d668c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d66a6:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d66aa:	4601      	mov	r1, r0
   d66ac:	e7f2      	b.n	d6694 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d66ae:	2a6e      	cmp	r2, #110	; 0x6e
   d66b0:	d01c      	beq.n	d66ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d66b2:	d80e      	bhi.n	d66d2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d66b4:	2a62      	cmp	r2, #98	; 0x62
   d66b6:	d013      	beq.n	d66e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d66b8:	d807      	bhi.n	d66ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d66ba:	2a2f      	cmp	r2, #47	; 0x2f
   d66bc:	d011      	beq.n	d66e2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d66be:	2a5c      	cmp	r2, #92	; 0x5c
   d66c0:	d00f      	beq.n	d66e2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d66c2:	2a22      	cmp	r2, #34	; 0x22
   d66c4:	d00d      	beq.n	d66e2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d66c6:	2000      	movs	r0, #0
   d66c8:	e023      	b.n	d6712 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d66ca:	2a66      	cmp	r2, #102	; 0x66
   d66cc:	d1fb      	bne.n	d66c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d66ce:	220c      	movs	r2, #12
   d66d0:	e007      	b.n	d66e2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d66d2:	2a72      	cmp	r2, #114	; 0x72
   d66d4:	d00d      	beq.n	d66f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d66d6:	2a74      	cmp	r2, #116	; 0x74
   d66d8:	d1f5      	bne.n	d66c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d66da:	f883 a000 	strb.w	sl, [r3]
                    break;
   d66de:	e001      	b.n	d66e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d66e0:	2208      	movs	r2, #8
   d66e2:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d66e4:	1ca1      	adds	r1, r4, #2
                ++str;
   d66e6:	3301      	adds	r3, #1
                ++s;
   d66e8:	4608      	mov	r0, r1
   d66ea:	e7d3      	b.n	d6694 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d66ec:	f04f 020a 	mov.w	r2, #10
   d66f0:	e7f7      	b.n	d66e2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d66f2:	f883 9000 	strb.w	r9, [r3]
                    break;
   d66f6:	e7f5      	b.n	d66e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d66f8:	42a1      	cmp	r1, r4
   d66fa:	d006      	beq.n	d670a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d66fc:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d66fe:	4618      	mov	r0, r3
   d6700:	4622      	mov	r2, r4
   d6702:	f002 f9bb 	bl	d8a7c <memmove>
   d6706:	4603      	mov	r3, r0
        str += n;
   d6708:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d670a:	eba3 0308 	sub.w	r3, r3, r8
   d670e:	60bb      	str	r3, [r7, #8]
    return true;
   d6710:	2001      	movs	r0, #1
}
   d6712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d6716:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d671a:	d9c4      	bls.n	d66a6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d671c:	4621      	mov	r1, r4
   d671e:	e7b9      	b.n	d6694 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d6720 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d6720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6722:	4604      	mov	r4, r0
   d6724:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d6726:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d672a:	2700      	movs	r7, #0
    while (t != end) {
   d672c:	42b4      	cmp	r4, r6
   d672e:	d010      	beq.n	d6752 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d6730:	7823      	ldrb	r3, [r4, #0]
   d6732:	2b03      	cmp	r3, #3
   d6734:	d108      	bne.n	d6748 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d6736:	4629      	mov	r1, r5
   d6738:	4620      	mov	r0, r4
   d673a:	f7ff ff69 	bl	d6610 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d673e:	b148      	cbz	r0, d6754 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d6740:	68a3      	ldr	r3, [r4, #8]
   d6742:	54ef      	strb	r7, [r5, r3]
        ++t;
   d6744:	3410      	adds	r4, #16
    while (t != end) {
   d6746:	e7f1      	b.n	d672c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d6748:	2b00      	cmp	r3, #0
   d674a:	d1fb      	bne.n	d6744 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d674c:	68a2      	ldr	r2, [r4, #8]
   d674e:	54ab      	strb	r3, [r5, r2]
   d6750:	e7f8      	b.n	d6744 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d6752:	2001      	movs	r0, #1
}
   d6754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6758 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6758:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d675a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d675c:	e9c0 3300 	strd	r3, r3, [r0]
   d6760:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d6762:	480e      	ldr	r0, [pc, #56]	; (d679c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6764:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6768:	b1a9      	cbz	r1, d6796 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d676a:	780b      	ldrb	r3, [r1, #0]
   d676c:	2b03      	cmp	r3, #3
   d676e:	d006      	beq.n	d677e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6770:	b98b      	cbnz	r3, d6796 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6772:	6813      	ldr	r3, [r2, #0]
   d6774:	6858      	ldr	r0, [r3, #4]
   d6776:	684b      	ldr	r3, [r1, #4]
   d6778:	5cc3      	ldrb	r3, [r0, r3]
   d677a:	2b6e      	cmp	r3, #110	; 0x6e
   d677c:	d007      	beq.n	d678e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d677e:	6813      	ldr	r3, [r2, #0]
   d6780:	684d      	ldr	r5, [r1, #4]
   d6782:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6784:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6786:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6788:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d678a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d678c:	60e3      	str	r3, [r4, #12]
   d678e:	4611      	mov	r1, r2
   d6790:	4620      	mov	r0, r4
   d6792:	f7ff fe46 	bl	d6422 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d6796:	4620      	mov	r0, r4
   d6798:	bd38      	pop	{r3, r4, r5, pc}
   d679a:	bf00      	nop
   d679c:	000d8fa7 	.word	0x000d8fa7

000d67a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d67a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d67a2:	2500      	movs	r5, #0
   d67a4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d67a6:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d67aa:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d67ae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d67b2:	4604      	mov	r4, r0
   d67b4:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d67b6:	b14b      	cbz	r3, d67cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d67b8:	781a      	ldrb	r2, [r3, #0]
   d67ba:	2a01      	cmp	r2, #1
   d67bc:	d106      	bne.n	d67cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d67be:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d67c2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d67c4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d67c6:	6143      	str	r3, [r0, #20]
   d67c8:	f7ff fe2b 	bl	d6422 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d67cc:	4620      	mov	r0, r4
   d67ce:	bd38      	pop	{r3, r4, r5, pc}

000d67d0 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d67d0:	b510      	push	{r4, lr}
    if (!n_) {
   d67d2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d67d4:	4604      	mov	r4, r0
    if (!n_) {
   d67d6:	b163      	cbz	r3, d67f2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d67d8:	6880      	ldr	r0, [r0, #8]
   d67da:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d67dc:	3b01      	subs	r3, #1
    ++t_;
   d67de:	3010      	adds	r0, #16
   d67e0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d67e2:	6120      	str	r0, [r4, #16]
    --n_;
   d67e4:	6163      	str	r3, [r4, #20]
    if (n_) {
   d67e6:	b113      	cbz	r3, d67ee <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d67e8:	f7ff fdd2 	bl	d6390 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d67ec:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d67ee:	2001      	movs	r0, #1
   d67f0:	e000      	b.n	d67f4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d67f2:	4618      	mov	r0, r3
}
   d67f4:	bd10      	pop	{r4, pc}
	...

000d67f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d67f8:	b538      	push	{r3, r4, r5, lr}
   d67fa:	2300      	movs	r3, #0
   d67fc:	4604      	mov	r4, r0
   d67fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6800:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6802:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6804:	f7fd fc47 	bl	d4096 <_Znwj>
   d6808:	b128      	cbz	r0, d6816 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d680a:	2301      	movs	r3, #1
   d680c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6810:	4b02      	ldr	r3, [pc, #8]	; (d681c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d6812:	6003      	str	r3, [r0, #0]
   d6814:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6816:	6020      	str	r0, [r4, #0]
	}
   d6818:	4620      	mov	r0, r4
   d681a:	bd38      	pop	{r3, r4, r5, pc}
   d681c:	000d8fb8 	.word	0x000d8fb8

000d6820 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d6820:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6822:	4604      	mov	r4, r0
   d6824:	b087      	sub	sp, #28
   d6826:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d6828:	200c      	movs	r0, #12
   d682a:	4927      	ldr	r1, [pc, #156]	; (d68c8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d682c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d682e:	f000 f90b 	bl	d6a48 <_ZnwjRKSt9nothrow_t>
   d6832:	4601      	mov	r1, r0
   d6834:	b118      	cbz	r0, d683e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d6836:	2300      	movs	r3, #0
   d6838:	e9c0 3300 	strd	r3, r3, [r0]
   d683c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d683e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6840:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d6842:	f7ff ffd9 	bl	d67f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d6846:	9a02      	ldr	r2, [sp, #8]
   d6848:	b942      	cbnz	r2, d685c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d684a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d684e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d6850:	a803      	add	r0, sp, #12
   d6852:	f7fd fc84 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6856:	4620      	mov	r0, r4
   d6858:	b007      	add	sp, #28
   d685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d685c:	2300      	movs	r3, #0
   d685e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d6860:	4629      	mov	r1, r5
   d6862:	ab01      	add	r3, sp, #4
   d6864:	4630      	mov	r0, r6
   d6866:	f7ff fe89 	bl	d657c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d686a:	b918      	cbnz	r0, d6874 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d686c:	e9c4 0000 	strd	r0, r0, [r4]
   d6870:	60a0      	str	r0, [r4, #8]
}
   d6872:	e7ed      	b.n	d6850 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d6874:	4914      	ldr	r1, [pc, #80]	; (d68c8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6876:	9f02      	ldr	r7, [sp, #8]
   d6878:	1c68      	adds	r0, r5, #1
   d687a:	f000 f8e7 	bl	d6a4c <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d687e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d6880:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d6882:	6858      	ldr	r0, [r3, #4]
   d6884:	2800      	cmp	r0, #0
   d6886:	d0f1      	beq.n	d686c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d6888:	462a      	mov	r2, r5
   d688a:	4631      	mov	r1, r6
   d688c:	f002 f8e8 	bl	d8a60 <memcpy>
   d6890:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d6892:	9901      	ldr	r1, [sp, #4]
   d6894:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d6896:	2201      	movs	r2, #1
   d6898:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d689a:	685a      	ldr	r2, [r3, #4]
   d689c:	f7ff ff40 	bl	d6720 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d68a0:	2800      	cmp	r0, #0
   d68a2:	d0e3      	beq.n	d686c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d68a4:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d68a6:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d68a8:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d68aa:	9b03      	ldr	r3, [sp, #12]
   d68ac:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d68ae:	b113      	cbz	r3, d68b6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d68b0:	685a      	ldr	r2, [r3, #4]
   d68b2:	3201      	adds	r2, #1
   d68b4:	605a      	str	r2, [r3, #4]
   d68b6:	aa04      	add	r2, sp, #16
   d68b8:	4620      	mov	r0, r4
   d68ba:	f7ff fdc9 	bl	d6450 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d68be:	a805      	add	r0, sp, #20
   d68c0:	f7fd fc4d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68c4:	e7c4      	b.n	d6850 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d68c6:	bf00      	nop
   d68c8:	000d8fcc 	.word	0x000d8fcc

000d68cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d68cc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d68ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d68d0:	d902      	bls.n	d68d8 <pinAvailable+0xc>
    return false;
   d68d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d68d4:	b002      	add	sp, #8
   d68d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d68d8:	f1a0 030b 	sub.w	r3, r0, #11
   d68dc:	2b02      	cmp	r3, #2
   d68de:	d81a      	bhi.n	d6916 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d68e0:	4c17      	ldr	r4, [pc, #92]	; (d6940 <pinAvailable+0x74>)
   d68e2:	7821      	ldrb	r1, [r4, #0]
   d68e4:	f3bf 8f5b 	dmb	ish
   d68e8:	f011 0101 	ands.w	r1, r1, #1
   d68ec:	d10b      	bne.n	d6906 <pinAvailable+0x3a>
   d68ee:	4620      	mov	r0, r4
   d68f0:	9101      	str	r1, [sp, #4]
   d68f2:	f7fd fbd8 	bl	d40a6 <__cxa_guard_acquire>
   d68f6:	9901      	ldr	r1, [sp, #4]
   d68f8:	b128      	cbz	r0, d6906 <pinAvailable+0x3a>
   d68fa:	4812      	ldr	r0, [pc, #72]	; (d6944 <pinAvailable+0x78>)
   d68fc:	f7fe ffd6 	bl	d58ac <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6900:	4620      	mov	r0, r4
   d6902:	f7fd fbd5 	bl	d40b0 <__cxa_guard_release>
   d6906:	4b0f      	ldr	r3, [pc, #60]	; (d6944 <pinAvailable+0x78>)
   d6908:	7818      	ldrb	r0, [r3, #0]
   d690a:	f7fe fe15 	bl	d5538 <hal_spi_is_enabled>
   d690e:	2800      	cmp	r0, #0
   d6910:	d1df      	bne.n	d68d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6912:	2001      	movs	r0, #1
   d6914:	e7de      	b.n	d68d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6916:	2801      	cmp	r0, #1
   d6918:	d809      	bhi.n	d692e <pinAvailable+0x62>
   d691a:	f000 f86f 	bl	d69fc <_Z19__fetch_global_Wirev>
   d691e:	2100      	movs	r1, #0
   d6920:	7c00      	ldrb	r0, [r0, #16]
   d6922:	f7fe fdf1 	bl	d5508 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6926:	f080 0001 	eor.w	r0, r0, #1
   d692a:	b2c0      	uxtb	r0, r0
   d692c:	e7d2      	b.n	d68d4 <pinAvailable+0x8>
   d692e:	3809      	subs	r0, #9
   d6930:	2801      	cmp	r0, #1
   d6932:	d8ee      	bhi.n	d6912 <pinAvailable+0x46>
   d6934:	f7ff fbda 	bl	d60ec <_Z22__fetch_global_Serial1v>
   d6938:	7c00      	ldrb	r0, [r0, #16]
   d693a:	f7fe fdad 	bl	d5498 <hal_usart_is_enabled>
   d693e:	e7f2      	b.n	d6926 <pinAvailable+0x5a>
   d6940:	2003e72c 	.word	0x2003e72c
   d6944:	2003e730 	.word	0x2003e730

000d6948 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6948:	2823      	cmp	r0, #35	; 0x23
{
   d694a:	b538      	push	{r3, r4, r5, lr}
   d694c:	4604      	mov	r4, r0
   d694e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6950:	d80a      	bhi.n	d6968 <pinMode+0x20>
   d6952:	29ff      	cmp	r1, #255	; 0xff
   d6954:	d008      	beq.n	d6968 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6956:	f7ff ffb9 	bl	d68cc <pinAvailable>
   d695a:	b128      	cbz	r0, d6968 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d695c:	4629      	mov	r1, r5
   d695e:	4620      	mov	r0, r4
}
   d6960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6964:	f7fe bd00 	b.w	d5368 <HAL_Pin_Mode>
}
   d6968:	bd38      	pop	{r3, r4, r5, pc}

000d696a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d696a:	b538      	push	{r3, r4, r5, lr}
   d696c:	4604      	mov	r4, r0
   d696e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6970:	f7fe fd02 	bl	d5378 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6974:	28ff      	cmp	r0, #255	; 0xff
   d6976:	d010      	beq.n	d699a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6978:	2806      	cmp	r0, #6
   d697a:	d804      	bhi.n	d6986 <digitalWrite+0x1c>
   d697c:	234d      	movs	r3, #77	; 0x4d
   d697e:	fa23 f000 	lsr.w	r0, r3, r0
   d6982:	07c3      	lsls	r3, r0, #31
   d6984:	d409      	bmi.n	d699a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6986:	4620      	mov	r0, r4
   d6988:	f7ff ffa0 	bl	d68cc <pinAvailable>
   d698c:	b128      	cbz	r0, d699a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d698e:	4629      	mov	r1, r5
   d6990:	4620      	mov	r0, r4
}
   d6992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6996:	f7fe bcf7 	b.w	d5388 <HAL_GPIO_Write>
}
   d699a:	bd38      	pop	{r3, r4, r5, pc}

000d699c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d699c:	280d      	cmp	r0, #13
{
   d699e:	b510      	push	{r4, lr}
   d69a0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d69a2:	bf9c      	itt	ls
   d69a4:	340e      	addls	r4, #14
   d69a6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d69a8:	4620      	mov	r0, r4
   d69aa:	f7ff ff8f 	bl	d68cc <pinAvailable>
   d69ae:	b150      	cbz	r0, d69c6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d69b0:	2103      	movs	r1, #3
   d69b2:	4620      	mov	r0, r4
   d69b4:	f7fe fcd0 	bl	d5358 <HAL_Validate_Pin_Function>
   d69b8:	2803      	cmp	r0, #3
   d69ba:	d104      	bne.n	d69c6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d69bc:	4620      	mov	r0, r4
}
   d69be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d69c2:	f7fe bcf9 	b.w	d53b8 <hal_adc_read>
}
   d69c6:	2000      	movs	r0, #0
   d69c8:	bd10      	pop	{r4, pc}

000d69ca <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69ca:	4770      	bx	lr

000d69cc <_Z17acquireWireBufferv>:
{
   d69cc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d69ce:	2300      	movs	r3, #0
   d69d0:	2520      	movs	r5, #32
   d69d2:	8043      	strh	r3, [r0, #2]
   d69d4:	2314      	movs	r3, #20
{
   d69d6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d69d8:	8003      	strh	r3, [r0, #0]
   d69da:	6085      	str	r5, [r0, #8]
   d69dc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69de:	4906      	ldr	r1, [pc, #24]	; (d69f8 <_Z17acquireWireBufferv+0x2c>)
   d69e0:	4628      	mov	r0, r5
   d69e2:	f000 f833 	bl	d6a4c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69e6:	4904      	ldr	r1, [pc, #16]	; (d69f8 <_Z17acquireWireBufferv+0x2c>)
	};
   d69e8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69ea:	4628      	mov	r0, r5
   d69ec:	f000 f82e 	bl	d6a4c <_ZnajRKSt9nothrow_t>
	};
   d69f0:	60e0      	str	r0, [r4, #12]
}
   d69f2:	4620      	mov	r0, r4
   d69f4:	bd38      	pop	{r3, r4, r5, pc}
   d69f6:	bf00      	nop
   d69f8:	000d8fcc 	.word	0x000d8fcc

000d69fc <_Z19__fetch_global_Wirev>:
{
   d69fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69fe:	4d0e      	ldr	r5, [pc, #56]	; (d6a38 <_Z19__fetch_global_Wirev+0x3c>)
   d6a00:	7829      	ldrb	r1, [r5, #0]
   d6a02:	f3bf 8f5b 	dmb	ish
   d6a06:	f011 0401 	ands.w	r4, r1, #1
{
   d6a0a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6a0c:	d111      	bne.n	d6a32 <_Z19__fetch_global_Wirev+0x36>
   d6a0e:	4628      	mov	r0, r5
   d6a10:	f7fd fb49 	bl	d40a6 <__cxa_guard_acquire>
   d6a14:	b168      	cbz	r0, d6a32 <_Z19__fetch_global_Wirev+0x36>
   d6a16:	a801      	add	r0, sp, #4
   d6a18:	f7ff ffd8 	bl	d69cc <_Z17acquireWireBufferv>
   d6a1c:	aa01      	add	r2, sp, #4
   d6a1e:	4621      	mov	r1, r4
   d6a20:	4806      	ldr	r0, [pc, #24]	; (d6a3c <_Z19__fetch_global_Wirev+0x40>)
   d6a22:	f7ff fbb5 	bl	d6190 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6a26:	4628      	mov	r0, r5
   d6a28:	f7fd fb42 	bl	d40b0 <__cxa_guard_release>
   d6a2c:	4804      	ldr	r0, [pc, #16]	; (d6a40 <_Z19__fetch_global_Wirev+0x44>)
   d6a2e:	f002 f811 	bl	d8a54 <atexit>
	return wire;
}
   d6a32:	4802      	ldr	r0, [pc, #8]	; (d6a3c <_Z19__fetch_global_Wirev+0x40>)
   d6a34:	b007      	add	sp, #28
   d6a36:	bd30      	pop	{r4, r5, pc}
   d6a38:	2003e73c 	.word	0x2003e73c
   d6a3c:	2003e740 	.word	0x2003e740
   d6a40:	000d69cb 	.word	0x000d69cb

000d6a44 <_ZdlPvj>:
   d6a44:	f7fd bb2b 	b.w	d409e <_ZdlPv>

000d6a48 <_ZnwjRKSt9nothrow_t>:
   d6a48:	f7fd bb25 	b.w	d4096 <_Znwj>

000d6a4c <_ZnajRKSt9nothrow_t>:
   d6a4c:	f7fd bb25 	b.w	d409a <_Znaj>

000d6a50 <pow>:
   d6a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a54:	ed2d 8b02 	vpush	{d8}
   d6a58:	b08d      	sub	sp, #52	; 0x34
   d6a5a:	ec57 6b10 	vmov	r6, r7, d0
   d6a5e:	ec55 4b11 	vmov	r4, r5, d1
   d6a62:	f000 fa2d 	bl	d6ec0 <__ieee754_pow>
   d6a66:	4bae      	ldr	r3, [pc, #696]	; (d6d20 <pow+0x2d0>)
   d6a68:	eeb0 8a40 	vmov.f32	s16, s0
   d6a6c:	eef0 8a60 	vmov.f32	s17, s1
   d6a70:	f993 9000 	ldrsb.w	r9, [r3]
   d6a74:	f1b9 3fff 	cmp.w	r9, #4294967295
   d6a78:	d037      	beq.n	d6aea <pow+0x9a>
   d6a7a:	4622      	mov	r2, r4
   d6a7c:	462b      	mov	r3, r5
   d6a7e:	4620      	mov	r0, r4
   d6a80:	4629      	mov	r1, r5
   d6a82:	f001 ff59 	bl	d8938 <__aeabi_dcmpun>
   d6a86:	4683      	mov	fp, r0
   d6a88:	bb78      	cbnz	r0, d6aea <pow+0x9a>
   d6a8a:	4632      	mov	r2, r6
   d6a8c:	463b      	mov	r3, r7
   d6a8e:	4630      	mov	r0, r6
   d6a90:	4639      	mov	r1, r7
   d6a92:	f001 ff51 	bl	d8938 <__aeabi_dcmpun>
   d6a96:	4680      	mov	r8, r0
   d6a98:	2800      	cmp	r0, #0
   d6a9a:	f040 8093 	bne.w	d6bc4 <pow+0x174>
   d6a9e:	f04f 0a00 	mov.w	sl, #0
   d6aa2:	f04f 0b00 	mov.w	fp, #0
   d6aa6:	4630      	mov	r0, r6
   d6aa8:	4639      	mov	r1, r7
   d6aaa:	4652      	mov	r2, sl
   d6aac:	465b      	mov	r3, fp
   d6aae:	f001 ff11 	bl	d88d4 <__aeabi_dcmpeq>
   d6ab2:	b318      	cbz	r0, d6afc <pow+0xac>
   d6ab4:	4652      	mov	r2, sl
   d6ab6:	465b      	mov	r3, fp
   d6ab8:	4620      	mov	r0, r4
   d6aba:	4629      	mov	r1, r5
   d6abc:	f001 ff0a 	bl	d88d4 <__aeabi_dcmpeq>
   d6ac0:	9000      	str	r0, [sp, #0]
   d6ac2:	2800      	cmp	r0, #0
   d6ac4:	d057      	beq.n	d6b76 <pow+0x126>
   d6ac6:	4b97      	ldr	r3, [pc, #604]	; (d6d24 <pow+0x2d4>)
   d6ac8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6acc:	2201      	movs	r2, #1
   d6ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6ad2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6ad6:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6ada:	9202      	str	r2, [sp, #8]
   d6adc:	9303      	str	r3, [sp, #12]
   d6ade:	f1b9 0f00 	cmp.w	r9, #0
   d6ae2:	f000 8089 	beq.w	d6bf8 <pow+0x1a8>
   d6ae6:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d6d10 <pow+0x2c0>
   d6aea:	eeb0 0a48 	vmov.f32	s0, s16
   d6aee:	eef0 0a68 	vmov.f32	s1, s17
   d6af2:	b00d      	add	sp, #52	; 0x34
   d6af4:	ecbd 8b02 	vpop	{d8}
   d6af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6afc:	eeb0 0a48 	vmov.f32	s0, s16
   d6b00:	eef0 0a68 	vmov.f32	s1, s17
   d6b04:	f001 f984 	bl	d7e10 <finite>
   d6b08:	4680      	mov	r8, r0
   d6b0a:	2800      	cmp	r0, #0
   d6b0c:	f000 8082 	beq.w	d6c14 <pow+0x1c4>
   d6b10:	f04f 0800 	mov.w	r8, #0
   d6b14:	f04f 0900 	mov.w	r9, #0
   d6b18:	ec51 0b18 	vmov	r0, r1, d8
   d6b1c:	4642      	mov	r2, r8
   d6b1e:	464b      	mov	r3, r9
   d6b20:	f001 fed8 	bl	d88d4 <__aeabi_dcmpeq>
   d6b24:	2800      	cmp	r0, #0
   d6b26:	d0e0      	beq.n	d6aea <pow+0x9a>
   d6b28:	ec47 6b10 	vmov	d0, r6, r7
   d6b2c:	f001 f970 	bl	d7e10 <finite>
   d6b30:	2800      	cmp	r0, #0
   d6b32:	d0da      	beq.n	d6aea <pow+0x9a>
   d6b34:	ec45 4b10 	vmov	d0, r4, r5
   d6b38:	f001 f96a 	bl	d7e10 <finite>
   d6b3c:	2800      	cmp	r0, #0
   d6b3e:	d0d4      	beq.n	d6aea <pow+0x9a>
   d6b40:	4b77      	ldr	r3, [pc, #476]	; (d6d20 <pow+0x2d0>)
   d6b42:	4a78      	ldr	r2, [pc, #480]	; (d6d24 <pow+0x2d4>)
   d6b44:	f993 3000 	ldrsb.w	r3, [r3]
   d6b48:	9203      	str	r2, [sp, #12]
   d6b4a:	2104      	movs	r1, #4
   d6b4c:	2200      	movs	r2, #0
   d6b4e:	2b02      	cmp	r3, #2
   d6b50:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6b54:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6b58:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6b5c:	9102      	str	r1, [sp, #8]
   d6b5e:	920a      	str	r2, [sp, #40]	; 0x28
   d6b60:	d004      	beq.n	d6b6c <pow+0x11c>
   d6b62:	a802      	add	r0, sp, #8
   d6b64:	f001 f960 	bl	d7e28 <matherr>
   d6b68:	2800      	cmp	r0, #0
   d6b6a:	d14a      	bne.n	d6c02 <pow+0x1b2>
   d6b6c:	f7fe fe50 	bl	d5810 <__errno>
   d6b70:	2322      	movs	r3, #34	; 0x22
   d6b72:	6003      	str	r3, [r0, #0]
   d6b74:	e045      	b.n	d6c02 <pow+0x1b2>
   d6b76:	ec45 4b10 	vmov	d0, r4, r5
   d6b7a:	f001 f949 	bl	d7e10 <finite>
   d6b7e:	2800      	cmp	r0, #0
   d6b80:	d0b3      	beq.n	d6aea <pow+0x9a>
   d6b82:	4652      	mov	r2, sl
   d6b84:	465b      	mov	r3, fp
   d6b86:	4620      	mov	r0, r4
   d6b88:	4629      	mov	r1, r5
   d6b8a:	f001 fead 	bl	d88e8 <__aeabi_dcmplt>
   d6b8e:	2800      	cmp	r0, #0
   d6b90:	d0ab      	beq.n	d6aea <pow+0x9a>
   d6b92:	4b63      	ldr	r3, [pc, #396]	; (d6d20 <pow+0x2d0>)
   d6b94:	9900      	ldr	r1, [sp, #0]
   d6b96:	4a63      	ldr	r2, [pc, #396]	; (d6d24 <pow+0x2d4>)
   d6b98:	f993 3000 	ldrsb.w	r3, [r3]
   d6b9c:	910a      	str	r1, [sp, #40]	; 0x28
   d6b9e:	2101      	movs	r1, #1
   d6ba0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6ba4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6ba8:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d6bac:	2b00      	cmp	r3, #0
   d6bae:	d16f      	bne.n	d6c90 <pow+0x240>
   d6bb0:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6bb4:	a802      	add	r0, sp, #8
   d6bb6:	f001 f937 	bl	d7e28 <matherr>
   d6bba:	2800      	cmp	r0, #0
   d6bbc:	d06e      	beq.n	d6c9c <pow+0x24c>
   d6bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6bc0:	b32b      	cbz	r3, d6c0e <pow+0x1be>
   d6bc2:	e020      	b.n	d6c06 <pow+0x1b6>
   d6bc4:	2200      	movs	r2, #0
   d6bc6:	2300      	movs	r3, #0
   d6bc8:	4620      	mov	r0, r4
   d6bca:	4629      	mov	r1, r5
   d6bcc:	f001 fe82 	bl	d88d4 <__aeabi_dcmpeq>
   d6bd0:	2800      	cmp	r0, #0
   d6bd2:	d08a      	beq.n	d6aea <pow+0x9a>
   d6bd4:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d6d10 <pow+0x2c0>
   d6bd8:	4b52      	ldr	r3, [pc, #328]	; (d6d24 <pow+0x2d4>)
   d6bda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d6bde:	2201      	movs	r2, #1
   d6be0:	f1b9 0f02 	cmp.w	r9, #2
   d6be4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6be8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6bec:	ed8d 8b08 	vstr	d8, [sp, #32]
   d6bf0:	9202      	str	r2, [sp, #8]
   d6bf2:	9303      	str	r3, [sp, #12]
   d6bf4:	f43f af79 	beq.w	d6aea <pow+0x9a>
   d6bf8:	a802      	add	r0, sp, #8
   d6bfa:	f001 f915 	bl	d7e28 <matherr>
   d6bfe:	2800      	cmp	r0, #0
   d6c00:	d051      	beq.n	d6ca6 <pow+0x256>
   d6c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c04:	b11b      	cbz	r3, d6c0e <pow+0x1be>
   d6c06:	f7fe fe03 	bl	d5810 <__errno>
   d6c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c0c:	6003      	str	r3, [r0, #0]
   d6c0e:	ed9d 8b08 	vldr	d8, [sp, #32]
   d6c12:	e76a      	b.n	d6aea <pow+0x9a>
   d6c14:	ec47 6b10 	vmov	d0, r6, r7
   d6c18:	f001 f8fa 	bl	d7e10 <finite>
   d6c1c:	2800      	cmp	r0, #0
   d6c1e:	f43f af77 	beq.w	d6b10 <pow+0xc0>
   d6c22:	ec45 4b10 	vmov	d0, r4, r5
   d6c26:	f001 f8f3 	bl	d7e10 <finite>
   d6c2a:	2800      	cmp	r0, #0
   d6c2c:	f43f af70 	beq.w	d6b10 <pow+0xc0>
   d6c30:	ec53 2b18 	vmov	r2, r3, d8
   d6c34:	ee18 0a10 	vmov	r0, s16
   d6c38:	4619      	mov	r1, r3
   d6c3a:	f001 fe7d 	bl	d8938 <__aeabi_dcmpun>
   d6c3e:	4b38      	ldr	r3, [pc, #224]	; (d6d20 <pow+0x2d0>)
   d6c40:	2800      	cmp	r0, #0
   d6c42:	f040 8096 	bne.w	d6d72 <pow+0x322>
   d6c46:	f993 8000 	ldrsb.w	r8, [r3]
   d6c4a:	900a      	str	r0, [sp, #40]	; 0x28
   d6c4c:	2303      	movs	r3, #3
   d6c4e:	9302      	str	r3, [sp, #8]
   d6c50:	4b34      	ldr	r3, [pc, #208]	; (d6d24 <pow+0x2d4>)
   d6c52:	9303      	str	r3, [sp, #12]
   d6c54:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6c58:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6c5c:	f1b8 0f00 	cmp.w	r8, #0
   d6c60:	d126      	bne.n	d6cb0 <pow+0x260>
   d6c62:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d6d34 <pow+0x2e4>
   d6c66:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d6c6a:	4652      	mov	r2, sl
   d6c6c:	465b      	mov	r3, fp
   d6c6e:	4630      	mov	r0, r6
   d6c70:	4639      	mov	r1, r7
   d6c72:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6c76:	f001 fe37 	bl	d88e8 <__aeabi_dcmplt>
   d6c7a:	bb48      	cbnz	r0, d6cd0 <pow+0x280>
   d6c7c:	a802      	add	r0, sp, #8
   d6c7e:	f001 f8d3 	bl	d7e28 <matherr>
   d6c82:	2800      	cmp	r0, #0
   d6c84:	d19b      	bne.n	d6bbe <pow+0x16e>
   d6c86:	f7fe fdc3 	bl	d5810 <__errno>
   d6c8a:	2322      	movs	r3, #34	; 0x22
   d6c8c:	6003      	str	r3, [r0, #0]
   d6c8e:	e796      	b.n	d6bbe <pow+0x16e>
   d6c90:	4925      	ldr	r1, [pc, #148]	; (d6d28 <pow+0x2d8>)
   d6c92:	2000      	movs	r0, #0
   d6c94:	2b02      	cmp	r3, #2
   d6c96:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6c9a:	d18b      	bne.n	d6bb4 <pow+0x164>
   d6c9c:	f7fe fdb8 	bl	d5810 <__errno>
   d6ca0:	2321      	movs	r3, #33	; 0x21
   d6ca2:	6003      	str	r3, [r0, #0]
   d6ca4:	e78b      	b.n	d6bbe <pow+0x16e>
   d6ca6:	f7fe fdb3 	bl	d5810 <__errno>
   d6caa:	2321      	movs	r3, #33	; 0x21
   d6cac:	6003      	str	r3, [r0, #0]
   d6cae:	e7a8      	b.n	d6c02 <pow+0x1b2>
   d6cb0:	ed9f 7b19 	vldr	d7, [pc, #100]	; d6d18 <pow+0x2c8>
   d6cb4:	4652      	mov	r2, sl
   d6cb6:	465b      	mov	r3, fp
   d6cb8:	4630      	mov	r0, r6
   d6cba:	4639      	mov	r1, r7
   d6cbc:	ed8d 7b08 	vstr	d7, [sp, #32]
   d6cc0:	f001 fe12 	bl	d88e8 <__aeabi_dcmplt>
   d6cc4:	2800      	cmp	r0, #0
   d6cc6:	d137      	bne.n	d6d38 <pow+0x2e8>
   d6cc8:	f1b8 0f02 	cmp.w	r8, #2
   d6ccc:	d0db      	beq.n	d6c86 <pow+0x236>
   d6cce:	e7d5      	b.n	d6c7c <pow+0x22c>
   d6cd0:	4b16      	ldr	r3, [pc, #88]	; (d6d2c <pow+0x2dc>)
   d6cd2:	2200      	movs	r2, #0
   d6cd4:	4620      	mov	r0, r4
   d6cd6:	4629      	mov	r1, r5
   d6cd8:	f001 fb94 	bl	d8404 <__aeabi_dmul>
   d6cdc:	4602      	mov	r2, r0
   d6cde:	460b      	mov	r3, r1
   d6ce0:	ec43 2b10 	vmov	d0, r2, r3
   d6ce4:	e9cd 2300 	strd	r2, r3, [sp]
   d6ce8:	f001 f8aa 	bl	d7e40 <rint>
   d6cec:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6cf0:	ec51 0b10 	vmov	r0, r1, d0
   d6cf4:	f001 fdee 	bl	d88d4 <__aeabi_dcmpeq>
   d6cf8:	2800      	cmp	r0, #0
   d6cfa:	d136      	bne.n	d6d6a <pow+0x31a>
   d6cfc:	4b0c      	ldr	r3, [pc, #48]	; (d6d30 <pow+0x2e0>)
   d6cfe:	4908      	ldr	r1, [pc, #32]	; (d6d20 <pow+0x2d0>)
   d6d00:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6d04:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6d08:	f991 8000 	ldrsb.w	r8, [r1]
   d6d0c:	e7dc      	b.n	d6cc8 <pow+0x278>
   d6d0e:	bf00      	nop
   d6d10:	00000000 	.word	0x00000000
   d6d14:	3ff00000 	.word	0x3ff00000
   d6d18:	00000000 	.word	0x00000000
   d6d1c:	7ff00000 	.word	0x7ff00000
   d6d20:	2003e478 	.word	0x2003e478
   d6d24:	000d8fd0 	.word	0x000d8fd0
   d6d28:	fff00000 	.word	0xfff00000
   d6d2c:	3fe00000 	.word	0x3fe00000
   d6d30:	c7efffff 	.word	0xc7efffff
   d6d34:	47efffff 	.word	0x47efffff
   d6d38:	4b1c      	ldr	r3, [pc, #112]	; (d6dac <pow+0x35c>)
   d6d3a:	2200      	movs	r2, #0
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	4629      	mov	r1, r5
   d6d40:	f001 fb60 	bl	d8404 <__aeabi_dmul>
   d6d44:	4602      	mov	r2, r0
   d6d46:	460b      	mov	r3, r1
   d6d48:	ec43 2b10 	vmov	d0, r2, r3
   d6d4c:	e9cd 2300 	strd	r2, r3, [sp]
   d6d50:	f001 f876 	bl	d7e40 <rint>
   d6d54:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6d58:	ec51 0b10 	vmov	r0, r1, d0
   d6d5c:	f001 fdba 	bl	d88d4 <__aeabi_dcmpeq>
   d6d60:	b918      	cbnz	r0, d6d6a <pow+0x31a>
   d6d62:	4b13      	ldr	r3, [pc, #76]	; (d6db0 <pow+0x360>)
   d6d64:	2200      	movs	r2, #0
   d6d66:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6d6a:	4b12      	ldr	r3, [pc, #72]	; (d6db4 <pow+0x364>)
   d6d6c:	f993 8000 	ldrsb.w	r8, [r3]
   d6d70:	e7aa      	b.n	d6cc8 <pow+0x278>
   d6d72:	f993 9000 	ldrsb.w	r9, [r3]
   d6d76:	4b10      	ldr	r3, [pc, #64]	; (d6db8 <pow+0x368>)
   d6d78:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6d7c:	2201      	movs	r2, #1
   d6d7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6d82:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d6d8a:	f1b9 0f00 	cmp.w	r9, #0
   d6d8e:	f43f af0f 	beq.w	d6bb0 <pow+0x160>
   d6d92:	4652      	mov	r2, sl
   d6d94:	465b      	mov	r3, fp
   d6d96:	4650      	mov	r0, sl
   d6d98:	4659      	mov	r1, fp
   d6d9a:	f001 fc5d 	bl	d8658 <__aeabi_ddiv>
   d6d9e:	f1b9 0f02 	cmp.w	r9, #2
   d6da2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6da6:	f43f af79 	beq.w	d6c9c <pow+0x24c>
   d6daa:	e703      	b.n	d6bb4 <pow+0x164>
   d6dac:	3fe00000 	.word	0x3fe00000
   d6db0:	fff00000 	.word	0xfff00000
   d6db4:	2003e478 	.word	0x2003e478
   d6db8:	000d8fd0 	.word	0x000d8fd0

000d6dbc <logf>:
   d6dbc:	b510      	push	{r4, lr}
   d6dbe:	ed2d 8b02 	vpush	{d8}
   d6dc2:	b08a      	sub	sp, #40	; 0x28
   d6dc4:	eeb0 8a40 	vmov.f32	s16, s0
   d6dc8:	f000 ff18 	bl	d7bfc <__ieee754_logf>
   d6dcc:	4b37      	ldr	r3, [pc, #220]	; (d6eac <logf+0xf0>)
   d6dce:	f993 4000 	ldrsb.w	r4, [r3]
   d6dd2:	1c63      	adds	r3, r4, #1
   d6dd4:	d033      	beq.n	d6e3e <logf+0x82>
   d6dd6:	eeb4 8a48 	vcmp.f32	s16, s16
   d6dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6dde:	d62e      	bvs.n	d6e3e <logf+0x82>
   d6de0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d6de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6de8:	dc29      	bgt.n	d6e3e <logf+0x82>
   d6dea:	4b31      	ldr	r3, [pc, #196]	; (d6eb0 <logf+0xf4>)
   d6dec:	9301      	str	r3, [sp, #4]
   d6dee:	ee18 0a10 	vmov	r0, s16
   d6df2:	2300      	movs	r3, #0
   d6df4:	9308      	str	r3, [sp, #32]
   d6df6:	f001 faad 	bl	d8354 <__aeabi_f2d>
   d6dfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d6dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6e02:	b304      	cbz	r4, d6e46 <logf+0x8a>
   d6e04:	4b2b      	ldr	r3, [pc, #172]	; (d6eb4 <logf+0xf8>)
   d6e06:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e10:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6e14:	d141      	bne.n	d6e9a <logf+0xde>
   d6e16:	2302      	movs	r3, #2
   d6e18:	429c      	cmp	r4, r3
   d6e1a:	9300      	str	r3, [sp, #0]
   d6e1c:	d137      	bne.n	d6e8e <logf+0xd2>
   d6e1e:	f7fe fcf7 	bl	d5810 <__errno>
   d6e22:	2322      	movs	r3, #34	; 0x22
   d6e24:	6003      	str	r3, [r0, #0]
   d6e26:	9b08      	ldr	r3, [sp, #32]
   d6e28:	b32b      	cbz	r3, d6e76 <logf+0xba>
   d6e2a:	f7fe fcf1 	bl	d5810 <__errno>
   d6e2e:	9b08      	ldr	r3, [sp, #32]
   d6e30:	6003      	str	r3, [r0, #0]
   d6e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6e36:	f001 fdbd 	bl	d89b4 <__aeabi_d2f>
   d6e3a:	ee00 0a10 	vmov	s0, r0
   d6e3e:	b00a      	add	sp, #40	; 0x28
   d6e40:	ecbd 8b02 	vpop	{d8}
   d6e44:	bd10      	pop	{r4, pc}
   d6e46:	4b1c      	ldr	r3, [pc, #112]	; (d6eb8 <logf+0xfc>)
   d6e48:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d6e4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6e54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6e58:	d017      	beq.n	d6e8a <logf+0xce>
   d6e5a:	2301      	movs	r3, #1
   d6e5c:	9300      	str	r3, [sp, #0]
   d6e5e:	4668      	mov	r0, sp
   d6e60:	f000 ffe2 	bl	d7e28 <matherr>
   d6e64:	b1e8      	cbz	r0, d6ea2 <logf+0xe6>
   d6e66:	4815      	ldr	r0, [pc, #84]	; (d6ebc <logf+0x100>)
   d6e68:	f000 ffe2 	bl	d7e30 <nan>
   d6e6c:	ed8d 0b06 	vstr	d0, [sp, #24]
   d6e70:	9b08      	ldr	r3, [sp, #32]
   d6e72:	2b00      	cmp	r3, #0
   d6e74:	d1d9      	bne.n	d6e2a <logf+0x6e>
   d6e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6e7a:	f001 fd9b 	bl	d89b4 <__aeabi_d2f>
   d6e7e:	ee00 0a10 	vmov	s0, r0
   d6e82:	b00a      	add	sp, #40	; 0x28
   d6e84:	ecbd 8b02 	vpop	{d8}
   d6e88:	bd10      	pop	{r4, pc}
   d6e8a:	2302      	movs	r3, #2
   d6e8c:	9300      	str	r3, [sp, #0]
   d6e8e:	4668      	mov	r0, sp
   d6e90:	f000 ffca 	bl	d7e28 <matherr>
   d6e94:	2800      	cmp	r0, #0
   d6e96:	d1eb      	bne.n	d6e70 <logf+0xb4>
   d6e98:	e7c1      	b.n	d6e1e <logf+0x62>
   d6e9a:	2301      	movs	r3, #1
   d6e9c:	2c02      	cmp	r4, #2
   d6e9e:	9300      	str	r3, [sp, #0]
   d6ea0:	d1dd      	bne.n	d6e5e <logf+0xa2>
   d6ea2:	f7fe fcb5 	bl	d5810 <__errno>
   d6ea6:	2321      	movs	r3, #33	; 0x21
   d6ea8:	6003      	str	r3, [r0, #0]
   d6eaa:	e7dc      	b.n	d6e66 <logf+0xaa>
   d6eac:	2003e478 	.word	0x2003e478
   d6eb0:	000d8fd4 	.word	0x000d8fd4
   d6eb4:	fff00000 	.word	0xfff00000
   d6eb8:	c7efffff 	.word	0xc7efffff
   d6ebc:	000d8fd8 	.word	0x000d8fd8

000d6ec0 <__ieee754_pow>:
   d6ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ec4:	ec57 6b11 	vmov	r6, r7, d1
   d6ec8:	ed2d 8b0a 	vpush	{d8-d12}
   d6ecc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d6ed0:	ea5a 0206 	orrs.w	r2, sl, r6
   d6ed4:	b089      	sub	sp, #36	; 0x24
   d6ed6:	d03d      	beq.n	d6f54 <__ieee754_pow+0x94>
   d6ed8:	ec55 4b10 	vmov	r4, r5, d0
   d6edc:	4976      	ldr	r1, [pc, #472]	; (d70b8 <__ieee754_pow+0x1f8>)
   d6ede:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d6ee2:	4588      	cmp	r8, r1
   d6ee4:	ee10 2a10 	vmov	r2, s0
   d6ee8:	46a9      	mov	r9, r5
   d6eea:	dc2c      	bgt.n	d6f46 <__ieee754_pow+0x86>
   d6eec:	ee11 3a10 	vmov	r3, s2
   d6ef0:	46bb      	mov	fp, r7
   d6ef2:	d03a      	beq.n	d6f6a <__ieee754_pow+0xaa>
   d6ef4:	458a      	cmp	sl, r1
   d6ef6:	dc26      	bgt.n	d6f46 <__ieee754_pow+0x86>
   d6ef8:	496f      	ldr	r1, [pc, #444]	; (d70b8 <__ieee754_pow+0x1f8>)
   d6efa:	458a      	cmp	sl, r1
   d6efc:	d021      	beq.n	d6f42 <__ieee754_pow+0x82>
   d6efe:	f1b9 0f00 	cmp.w	r9, #0
   d6f02:	db3d      	blt.n	d6f80 <__ieee754_pow+0xc0>
   d6f04:	2100      	movs	r1, #0
   d6f06:	9103      	str	r1, [sp, #12]
   d6f08:	2b00      	cmp	r3, #0
   d6f0a:	d155      	bne.n	d6fb8 <__ieee754_pow+0xf8>
   d6f0c:	4b6a      	ldr	r3, [pc, #424]	; (d70b8 <__ieee754_pow+0x1f8>)
   d6f0e:	459a      	cmp	sl, r3
   d6f10:	f000 80a8 	beq.w	d7064 <__ieee754_pow+0x1a4>
   d6f14:	4b69      	ldr	r3, [pc, #420]	; (d70bc <__ieee754_pow+0x1fc>)
   d6f16:	459a      	cmp	sl, r3
   d6f18:	f000 80b6 	beq.w	d7088 <__ieee754_pow+0x1c8>
   d6f1c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d6f20:	f000 8501 	beq.w	d7926 <__ieee754_pow+0xa66>
   d6f24:	4b66      	ldr	r3, [pc, #408]	; (d70c0 <__ieee754_pow+0x200>)
   d6f26:	459b      	cmp	fp, r3
   d6f28:	d146      	bne.n	d6fb8 <__ieee754_pow+0xf8>
   d6f2a:	f1b9 0f00 	cmp.w	r9, #0
   d6f2e:	db43      	blt.n	d6fb8 <__ieee754_pow+0xf8>
   d6f30:	ec45 4b10 	vmov	d0, r4, r5
   d6f34:	b009      	add	sp, #36	; 0x24
   d6f36:	ecbd 8b0a 	vpop	{d8-d12}
   d6f3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f3e:	f000 bd99 	b.w	d7a74 <__ieee754_sqrt>
   d6f42:	2b00      	cmp	r3, #0
   d6f44:	d0db      	beq.n	d6efe <__ieee754_pow+0x3e>
   d6f46:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6f4a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6f4e:	ea58 0302 	orrs.w	r3, r8, r2
   d6f52:	d10d      	bne.n	d6f70 <__ieee754_pow+0xb0>
   d6f54:	ed9f 7b54 	vldr	d7, [pc, #336]	; d70a8 <__ieee754_pow+0x1e8>
   d6f58:	ed8d 7b00 	vstr	d7, [sp]
   d6f5c:	ed9d 0b00 	vldr	d0, [sp]
   d6f60:	b009      	add	sp, #36	; 0x24
   d6f62:	ecbd 8b0a 	vpop	{d8-d12}
   d6f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f6a:	b90c      	cbnz	r4, d6f70 <__ieee754_pow+0xb0>
   d6f6c:	45c2      	cmp	sl, r8
   d6f6e:	ddc3      	ble.n	d6ef8 <__ieee754_pow+0x38>
   d6f70:	4854      	ldr	r0, [pc, #336]	; (d70c4 <__ieee754_pow+0x204>)
   d6f72:	b009      	add	sp, #36	; 0x24
   d6f74:	ecbd 8b0a 	vpop	{d8-d12}
   d6f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f7c:	f000 bf58 	b.w	d7e30 <nan>
   d6f80:	4951      	ldr	r1, [pc, #324]	; (d70c8 <__ieee754_pow+0x208>)
   d6f82:	458a      	cmp	sl, r1
   d6f84:	f300 8087 	bgt.w	d7096 <__ieee754_pow+0x1d6>
   d6f88:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d6f8c:	458a      	cmp	sl, r1
   d6f8e:	dd0f      	ble.n	d6fb0 <__ieee754_pow+0xf0>
   d6f90:	ea4f 512a 	mov.w	r1, sl, asr #20
   d6f94:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d6f98:	2914      	cmp	r1, #20
   d6f9a:	f340 84ce 	ble.w	d793a <__ieee754_pow+0xa7a>
   d6f9e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d6fa2:	fa23 f001 	lsr.w	r0, r3, r1
   d6fa6:	fa00 f101 	lsl.w	r1, r0, r1
   d6faa:	4299      	cmp	r1, r3
   d6fac:	f000 8520 	beq.w	d79f0 <__ieee754_pow+0xb30>
   d6fb0:	2100      	movs	r1, #0
   d6fb2:	9103      	str	r1, [sp, #12]
   d6fb4:	2b00      	cmp	r3, #0
   d6fb6:	d0ad      	beq.n	d6f14 <__ieee754_pow+0x54>
   d6fb8:	ec45 4b10 	vmov	d0, r4, r5
   d6fbc:	9206      	str	r2, [sp, #24]
   d6fbe:	f000 ff1d 	bl	d7dfc <fabs>
   d6fc2:	9a06      	ldr	r2, [sp, #24]
   d6fc4:	ed8d 0b00 	vstr	d0, [sp]
   d6fc8:	bb5a      	cbnz	r2, d7022 <__ieee754_pow+0x162>
   d6fca:	f1b8 0f00 	cmp.w	r8, #0
   d6fce:	d004      	beq.n	d6fda <__ieee754_pow+0x11a>
   d6fd0:	4b3a      	ldr	r3, [pc, #232]	; (d70bc <__ieee754_pow+0x1fc>)
   d6fd2:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d6fd6:	429a      	cmp	r2, r3
   d6fd8:	d123      	bne.n	d7022 <__ieee754_pow+0x162>
   d6fda:	f1bb 0f00 	cmp.w	fp, #0
   d6fde:	da07      	bge.n	d6ff0 <__ieee754_pow+0x130>
   d6fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6fe4:	4935      	ldr	r1, [pc, #212]	; (d70bc <__ieee754_pow+0x1fc>)
   d6fe6:	2000      	movs	r0, #0
   d6fe8:	f001 fb36 	bl	d8658 <__aeabi_ddiv>
   d6fec:	e9cd 0100 	strd	r0, r1, [sp]
   d6ff0:	f1b9 0f00 	cmp.w	r9, #0
   d6ff4:	dab2      	bge.n	d6f5c <__ieee754_pow+0x9c>
   d6ff6:	9b03      	ldr	r3, [sp, #12]
   d6ff8:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6ffc:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7000:	ea58 0303 	orrs.w	r3, r8, r3
   d7004:	f040 84be 	bne.w	d7984 <__ieee754_pow+0xac4>
   d7008:	e9dd 2300 	ldrd	r2, r3, [sp]
   d700c:	4610      	mov	r0, r2
   d700e:	4619      	mov	r1, r3
   d7010:	f001 f840 	bl	d8094 <__aeabi_dsub>
   d7014:	4602      	mov	r2, r0
   d7016:	460b      	mov	r3, r1
   d7018:	f001 fb1e 	bl	d8658 <__aeabi_ddiv>
   d701c:	e9cd 0100 	strd	r0, r1, [sp]
   d7020:	e79c      	b.n	d6f5c <__ieee754_pow+0x9c>
   d7022:	9a03      	ldr	r2, [sp, #12]
   d7024:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d7028:	3b01      	subs	r3, #1
   d702a:	9306      	str	r3, [sp, #24]
   d702c:	4313      	orrs	r3, r2
   d702e:	d035      	beq.n	d709c <__ieee754_pow+0x1dc>
   d7030:	4b26      	ldr	r3, [pc, #152]	; (d70cc <__ieee754_pow+0x20c>)
   d7032:	459a      	cmp	sl, r3
   d7034:	dd4e      	ble.n	d70d4 <__ieee754_pow+0x214>
   d7036:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d703a:	459a      	cmp	sl, r3
   d703c:	4b24      	ldr	r3, [pc, #144]	; (d70d0 <__ieee754_pow+0x210>)
   d703e:	f340 83ed 	ble.w	d781c <__ieee754_pow+0x95c>
   d7042:	4598      	cmp	r8, r3
   d7044:	f340 836b 	ble.w	d771e <__ieee754_pow+0x85e>
   d7048:	f1bb 0f00 	cmp.w	fp, #0
   d704c:	f340 836b 	ble.w	d7726 <__ieee754_pow+0x866>
   d7050:	a317      	add	r3, pc, #92	; (adr r3, d70b0 <__ieee754_pow+0x1f0>)
   d7052:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7056:	4610      	mov	r0, r2
   d7058:	4619      	mov	r1, r3
   d705a:	f001 f9d3 	bl	d8404 <__aeabi_dmul>
   d705e:	e9cd 0100 	strd	r0, r1, [sp]
   d7062:	e77b      	b.n	d6f5c <__ieee754_pow+0x9c>
   d7064:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d7068:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d706c:	4313      	orrs	r3, r2
   d706e:	f43f af71 	beq.w	d6f54 <__ieee754_pow+0x94>
   d7072:	4b17      	ldr	r3, [pc, #92]	; (d70d0 <__ieee754_pow+0x210>)
   d7074:	4598      	cmp	r8, r3
   d7076:	f340 8388 	ble.w	d778a <__ieee754_pow+0x8ca>
   d707a:	f1bb 0f00 	cmp.w	fp, #0
   d707e:	f2c0 8352 	blt.w	d7726 <__ieee754_pow+0x866>
   d7082:	e9cd 6700 	strd	r6, r7, [sp]
   d7086:	e769      	b.n	d6f5c <__ieee754_pow+0x9c>
   d7088:	f1bb 0f00 	cmp.w	fp, #0
   d708c:	f2c0 8441 	blt.w	d7912 <__ieee754_pow+0xa52>
   d7090:	e9cd 4500 	strd	r4, r5, [sp]
   d7094:	e762      	b.n	d6f5c <__ieee754_pow+0x9c>
   d7096:	2102      	movs	r1, #2
   d7098:	9103      	str	r1, [sp, #12]
   d709a:	e735      	b.n	d6f08 <__ieee754_pow+0x48>
   d709c:	4622      	mov	r2, r4
   d709e:	462b      	mov	r3, r5
   d70a0:	e7b4      	b.n	d700c <__ieee754_pow+0x14c>
   d70a2:	bf00      	nop
   d70a4:	f3af 8000 	nop.w
   d70a8:	00000000 	.word	0x00000000
   d70ac:	3ff00000 	.word	0x3ff00000
   d70b0:	8800759c 	.word	0x8800759c
   d70b4:	7e37e43c 	.word	0x7e37e43c
   d70b8:	7ff00000 	.word	0x7ff00000
   d70bc:	3ff00000 	.word	0x3ff00000
   d70c0:	3fe00000 	.word	0x3fe00000
   d70c4:	000d8fd8 	.word	0x000d8fd8
   d70c8:	433fffff 	.word	0x433fffff
   d70cc:	41e00000 	.word	0x41e00000
   d70d0:	3fefffff 	.word	0x3fefffff
   d70d4:	4be4      	ldr	r3, [pc, #912]	; (d7468 <__ieee754_pow+0x5a8>)
   d70d6:	ea09 0303 	and.w	r3, r9, r3
   d70da:	2b00      	cmp	r3, #0
   d70dc:	f040 8416 	bne.w	d790c <__ieee754_pow+0xa4c>
   d70e0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d70e4:	4be1      	ldr	r3, [pc, #900]	; (d746c <__ieee754_pow+0x5ac>)
   d70e6:	2200      	movs	r2, #0
   d70e8:	f001 f98c 	bl	d8404 <__aeabi_dmul>
   d70ec:	e9cd 0100 	strd	r0, r1, [sp]
   d70f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d70f4:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d70f8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d70fc:	49dc      	ldr	r1, [pc, #880]	; (d7470 <__ieee754_pow+0x5b0>)
   d70fe:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d7102:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7106:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d710a:	1818      	adds	r0, r3, r0
   d710c:	428a      	cmp	r2, r1
   d710e:	9007      	str	r0, [sp, #28]
   d7110:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d7114:	f340 83e9 	ble.w	d78ea <__ieee754_pow+0xa2a>
   d7118:	4bd6      	ldr	r3, [pc, #856]	; (d7474 <__ieee754_pow+0x5b4>)
   d711a:	429a      	cmp	r2, r3
   d711c:	f340 843e 	ble.w	d799c <__ieee754_pow+0xadc>
   d7120:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d7410 <__ieee754_pow+0x550>
   d7124:	eeb0 ba47 	vmov.f32	s22, s14
   d7128:	eef0 ba67 	vmov.f32	s23, s15
   d712c:	eeb0 ca47 	vmov.f32	s24, s14
   d7130:	eef0 ca67 	vmov.f32	s25, s15
   d7134:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d7418 <__ieee754_pow+0x558>
   d7138:	3001      	adds	r0, #1
   d713a:	ec54 3b17 	vmov	r3, r4, d7
   d713e:	9007      	str	r0, [sp, #28]
   d7140:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d7144:	f04f 0900 	mov.w	r9, #0
   d7148:	e9dd ab00 	ldrd	sl, fp, [sp]
   d714c:	ec44 3b18 	vmov	d8, r3, r4
   d7150:	461a      	mov	r2, r3
   d7152:	4650      	mov	r0, sl
   d7154:	4623      	mov	r3, r4
   d7156:	4641      	mov	r1, r8
   d7158:	f000 ff9c 	bl	d8094 <__aeabi_dsub>
   d715c:	ec53 2b18 	vmov	r2, r3, d8
   d7160:	4604      	mov	r4, r0
   d7162:	460d      	mov	r5, r1
   d7164:	4650      	mov	r0, sl
   d7166:	4641      	mov	r1, r8
   d7168:	f000 ff96 	bl	d8098 <__adddf3>
   d716c:	4602      	mov	r2, r0
   d716e:	460b      	mov	r3, r1
   d7170:	2000      	movs	r0, #0
   d7172:	49c1      	ldr	r1, [pc, #772]	; (d7478 <__ieee754_pow+0x5b8>)
   d7174:	f001 fa70 	bl	d8658 <__aeabi_ddiv>
   d7178:	ec45 4b1a 	vmov	d10, r4, r5
   d717c:	ec41 0b19 	vmov	d9, r0, r1
   d7180:	ec51 0b1a 	vmov	r0, r1, d10
   d7184:	ec53 2b19 	vmov	r2, r3, d9
   d7188:	f001 f93c 	bl	d8404 <__aeabi_dmul>
   d718c:	46c3      	mov	fp, r8
   d718e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7192:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d7196:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d719a:	eb03 0509 	add.w	r5, r3, r9
   d719e:	460a      	mov	r2, r1
   d71a0:	2300      	movs	r3, #0
   d71a2:	4601      	mov	r1, r0
   d71a4:	e9cd 1200 	strd	r1, r2, [sp]
   d71a8:	9300      	str	r3, [sp, #0]
   d71aa:	e9dd 8900 	ldrd	r8, r9, [sp]
   d71ae:	2400      	movs	r4, #0
   d71b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d71b4:	462b      	mov	r3, r5
   d71b6:	4622      	mov	r2, r4
   d71b8:	4640      	mov	r0, r8
   d71ba:	4649      	mov	r1, r9
   d71bc:	f001 f922 	bl	d8404 <__aeabi_dmul>
   d71c0:	4602      	mov	r2, r0
   d71c2:	460b      	mov	r3, r1
   d71c4:	ec51 0b1a 	vmov	r0, r1, d10
   d71c8:	f000 ff64 	bl	d8094 <__aeabi_dsub>
   d71cc:	ec41 0b17 	vmov	d7, r0, r1
   d71d0:	ec53 2b18 	vmov	r2, r3, d8
   d71d4:	4620      	mov	r0, r4
   d71d6:	4629      	mov	r1, r5
   d71d8:	ec55 4b17 	vmov	r4, r5, d7
   d71dc:	f000 ff5a 	bl	d8094 <__aeabi_dsub>
   d71e0:	4602      	mov	r2, r0
   d71e2:	460b      	mov	r3, r1
   d71e4:	4650      	mov	r0, sl
   d71e6:	4659      	mov	r1, fp
   d71e8:	f000 ff54 	bl	d8094 <__aeabi_dsub>
   d71ec:	4642      	mov	r2, r8
   d71ee:	464b      	mov	r3, r9
   d71f0:	f001 f908 	bl	d8404 <__aeabi_dmul>
   d71f4:	4602      	mov	r2, r0
   d71f6:	460b      	mov	r3, r1
   d71f8:	4620      	mov	r0, r4
   d71fa:	4629      	mov	r1, r5
   d71fc:	f000 ff4a 	bl	d8094 <__aeabi_dsub>
   d7200:	ec53 2b19 	vmov	r2, r3, d9
   d7204:	f001 f8fe 	bl	d8404 <__aeabi_dmul>
   d7208:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d720c:	4604      	mov	r4, r0
   d720e:	460d      	mov	r5, r1
   d7210:	4652      	mov	r2, sl
   d7212:	465b      	mov	r3, fp
   d7214:	4650      	mov	r0, sl
   d7216:	4659      	mov	r1, fp
   d7218:	f001 f8f4 	bl	d8404 <__aeabi_dmul>
   d721c:	a380      	add	r3, pc, #512	; (adr r3, d7420 <__ieee754_pow+0x560>)
   d721e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7222:	ec45 4b1a 	vmov	d10, r4, r5
   d7226:	4604      	mov	r4, r0
   d7228:	460d      	mov	r5, r1
   d722a:	f001 f8eb 	bl	d8404 <__aeabi_dmul>
   d722e:	a37e      	add	r3, pc, #504	; (adr r3, d7428 <__ieee754_pow+0x568>)
   d7230:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7234:	f000 ff30 	bl	d8098 <__adddf3>
   d7238:	4622      	mov	r2, r4
   d723a:	462b      	mov	r3, r5
   d723c:	f001 f8e2 	bl	d8404 <__aeabi_dmul>
   d7240:	a37b      	add	r3, pc, #492	; (adr r3, d7430 <__ieee754_pow+0x570>)
   d7242:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7246:	f000 ff27 	bl	d8098 <__adddf3>
   d724a:	4622      	mov	r2, r4
   d724c:	462b      	mov	r3, r5
   d724e:	f001 f8d9 	bl	d8404 <__aeabi_dmul>
   d7252:	a379      	add	r3, pc, #484	; (adr r3, d7438 <__ieee754_pow+0x578>)
   d7254:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7258:	f000 ff1e 	bl	d8098 <__adddf3>
   d725c:	4622      	mov	r2, r4
   d725e:	462b      	mov	r3, r5
   d7260:	f001 f8d0 	bl	d8404 <__aeabi_dmul>
   d7264:	a376      	add	r3, pc, #472	; (adr r3, d7440 <__ieee754_pow+0x580>)
   d7266:	e9d3 2300 	ldrd	r2, r3, [r3]
   d726a:	f000 ff15 	bl	d8098 <__adddf3>
   d726e:	4622      	mov	r2, r4
   d7270:	462b      	mov	r3, r5
   d7272:	f001 f8c7 	bl	d8404 <__aeabi_dmul>
   d7276:	a374      	add	r3, pc, #464	; (adr r3, d7448 <__ieee754_pow+0x588>)
   d7278:	e9d3 2300 	ldrd	r2, r3, [r3]
   d727c:	f000 ff0c 	bl	d8098 <__adddf3>
   d7280:	4622      	mov	r2, r4
   d7282:	462b      	mov	r3, r5
   d7284:	4604      	mov	r4, r0
   d7286:	460d      	mov	r5, r1
   d7288:	4610      	mov	r0, r2
   d728a:	4619      	mov	r1, r3
   d728c:	f001 f8ba 	bl	d8404 <__aeabi_dmul>
   d7290:	4602      	mov	r2, r0
   d7292:	460b      	mov	r3, r1
   d7294:	4620      	mov	r0, r4
   d7296:	4629      	mov	r1, r5
   d7298:	f001 f8b4 	bl	d8404 <__aeabi_dmul>
   d729c:	4642      	mov	r2, r8
   d729e:	4604      	mov	r4, r0
   d72a0:	460d      	mov	r5, r1
   d72a2:	464b      	mov	r3, r9
   d72a4:	4650      	mov	r0, sl
   d72a6:	4659      	mov	r1, fp
   d72a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d72ac:	f000 fef4 	bl	d8098 <__adddf3>
   d72b0:	ec53 2b1a 	vmov	r2, r3, d10
   d72b4:	f001 f8a6 	bl	d8404 <__aeabi_dmul>
   d72b8:	4622      	mov	r2, r4
   d72ba:	462b      	mov	r3, r5
   d72bc:	f000 feec 	bl	d8098 <__adddf3>
   d72c0:	4642      	mov	r2, r8
   d72c2:	4604      	mov	r4, r0
   d72c4:	460d      	mov	r5, r1
   d72c6:	464b      	mov	r3, r9
   d72c8:	4640      	mov	r0, r8
   d72ca:	4649      	mov	r1, r9
   d72cc:	f001 f89a 	bl	d8404 <__aeabi_dmul>
   d72d0:	ec45 4b19 	vmov	d9, r4, r5
   d72d4:	4b69      	ldr	r3, [pc, #420]	; (d747c <__ieee754_pow+0x5bc>)
   d72d6:	2200      	movs	r2, #0
   d72d8:	4682      	mov	sl, r0
   d72da:	468b      	mov	fp, r1
   d72dc:	f000 fedc 	bl	d8098 <__adddf3>
   d72e0:	ec53 2b19 	vmov	r2, r3, d9
   d72e4:	f000 fed8 	bl	d8098 <__adddf3>
   d72e8:	9c00      	ldr	r4, [sp, #0]
   d72ea:	460d      	mov	r5, r1
   d72ec:	4622      	mov	r2, r4
   d72ee:	462b      	mov	r3, r5
   d72f0:	4640      	mov	r0, r8
   d72f2:	4649      	mov	r1, r9
   d72f4:	f001 f886 	bl	d8404 <__aeabi_dmul>
   d72f8:	4b60      	ldr	r3, [pc, #384]	; (d747c <__ieee754_pow+0x5bc>)
   d72fa:	4680      	mov	r8, r0
   d72fc:	4689      	mov	r9, r1
   d72fe:	2200      	movs	r2, #0
   d7300:	4620      	mov	r0, r4
   d7302:	4629      	mov	r1, r5
   d7304:	f000 fec6 	bl	d8094 <__aeabi_dsub>
   d7308:	4652      	mov	r2, sl
   d730a:	465b      	mov	r3, fp
   d730c:	f000 fec2 	bl	d8094 <__aeabi_dsub>
   d7310:	4602      	mov	r2, r0
   d7312:	460b      	mov	r3, r1
   d7314:	ec51 0b19 	vmov	r0, r1, d9
   d7318:	f000 febc 	bl	d8094 <__aeabi_dsub>
   d731c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7320:	f001 f870 	bl	d8404 <__aeabi_dmul>
   d7324:	ec49 8b18 	vmov	d8, r8, r9
   d7328:	4622      	mov	r2, r4
   d732a:	4680      	mov	r8, r0
   d732c:	4689      	mov	r9, r1
   d732e:	462b      	mov	r3, r5
   d7330:	ec51 0b1a 	vmov	r0, r1, d10
   d7334:	f001 f866 	bl	d8404 <__aeabi_dmul>
   d7338:	4602      	mov	r2, r0
   d733a:	460b      	mov	r3, r1
   d733c:	4640      	mov	r0, r8
   d733e:	4649      	mov	r1, r9
   d7340:	f000 feaa 	bl	d8098 <__adddf3>
   d7344:	4682      	mov	sl, r0
   d7346:	468b      	mov	fp, r1
   d7348:	4652      	mov	r2, sl
   d734a:	465b      	mov	r3, fp
   d734c:	ec51 0b18 	vmov	r0, r1, d8
   d7350:	f000 fea2 	bl	d8098 <__adddf3>
   d7354:	9c00      	ldr	r4, [sp, #0]
   d7356:	a33e      	add	r3, pc, #248	; (adr r3, d7450 <__ieee754_pow+0x590>)
   d7358:	e9d3 2300 	ldrd	r2, r3, [r3]
   d735c:	4620      	mov	r0, r4
   d735e:	460d      	mov	r5, r1
   d7360:	f001 f850 	bl	d8404 <__aeabi_dmul>
   d7364:	ec53 2b18 	vmov	r2, r3, d8
   d7368:	4680      	mov	r8, r0
   d736a:	4689      	mov	r9, r1
   d736c:	4620      	mov	r0, r4
   d736e:	4629      	mov	r1, r5
   d7370:	f000 fe90 	bl	d8094 <__aeabi_dsub>
   d7374:	4602      	mov	r2, r0
   d7376:	460b      	mov	r3, r1
   d7378:	4650      	mov	r0, sl
   d737a:	4659      	mov	r1, fp
   d737c:	f000 fe8a 	bl	d8094 <__aeabi_dsub>
   d7380:	a335      	add	r3, pc, #212	; (adr r3, d7458 <__ieee754_pow+0x598>)
   d7382:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7386:	f001 f83d 	bl	d8404 <__aeabi_dmul>
   d738a:	ec49 8b19 	vmov	d9, r8, r9
   d738e:	a334      	add	r3, pc, #208	; (adr r3, d7460 <__ieee754_pow+0x5a0>)
   d7390:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7394:	4680      	mov	r8, r0
   d7396:	4689      	mov	r9, r1
   d7398:	4620      	mov	r0, r4
   d739a:	4629      	mov	r1, r5
   d739c:	f001 f832 	bl	d8404 <__aeabi_dmul>
   d73a0:	4602      	mov	r2, r0
   d73a2:	460b      	mov	r3, r1
   d73a4:	4640      	mov	r0, r8
   d73a6:	4649      	mov	r1, r9
   d73a8:	f000 fe76 	bl	d8098 <__adddf3>
   d73ac:	ec53 2b1c 	vmov	r2, r3, d12
   d73b0:	f000 fe72 	bl	d8098 <__adddf3>
   d73b4:	4682      	mov	sl, r0
   d73b6:	9807      	ldr	r0, [sp, #28]
   d73b8:	468b      	mov	fp, r1
   d73ba:	f000 ffb9 	bl	d8330 <__aeabi_i2d>
   d73be:	4652      	mov	r2, sl
   d73c0:	4680      	mov	r8, r0
   d73c2:	4689      	mov	r9, r1
   d73c4:	465b      	mov	r3, fp
   d73c6:	ec51 0b19 	vmov	r0, r1, d9
   d73ca:	f000 fe65 	bl	d8098 <__adddf3>
   d73ce:	ec53 2b1b 	vmov	r2, r3, d11
   d73d2:	f000 fe61 	bl	d8098 <__adddf3>
   d73d6:	4642      	mov	r2, r8
   d73d8:	464b      	mov	r3, r9
   d73da:	f000 fe5d 	bl	d8098 <__adddf3>
   d73de:	9c00      	ldr	r4, [sp, #0]
   d73e0:	4642      	mov	r2, r8
   d73e2:	464b      	mov	r3, r9
   d73e4:	4620      	mov	r0, r4
   d73e6:	460d      	mov	r5, r1
   d73e8:	f000 fe54 	bl	d8094 <__aeabi_dsub>
   d73ec:	ec53 2b1b 	vmov	r2, r3, d11
   d73f0:	f000 fe50 	bl	d8094 <__aeabi_dsub>
   d73f4:	ec53 2b19 	vmov	r2, r3, d9
   d73f8:	f000 fe4c 	bl	d8094 <__aeabi_dsub>
   d73fc:	4602      	mov	r2, r0
   d73fe:	460b      	mov	r3, r1
   d7400:	4650      	mov	r0, sl
   d7402:	4659      	mov	r1, fp
   d7404:	f000 fe46 	bl	d8094 <__aeabi_dsub>
   d7408:	4682      	mov	sl, r0
   d740a:	468b      	mov	fp, r1
   d740c:	e038      	b.n	d7480 <__ieee754_pow+0x5c0>
   d740e:	bf00      	nop
	...
   d741c:	3ff00000 	.word	0x3ff00000
   d7420:	4a454eef 	.word	0x4a454eef
   d7424:	3fca7e28 	.word	0x3fca7e28
   d7428:	93c9db65 	.word	0x93c9db65
   d742c:	3fcd864a 	.word	0x3fcd864a
   d7430:	a91d4101 	.word	0xa91d4101
   d7434:	3fd17460 	.word	0x3fd17460
   d7438:	518f264d 	.word	0x518f264d
   d743c:	3fd55555 	.word	0x3fd55555
   d7440:	db6fabff 	.word	0xdb6fabff
   d7444:	3fdb6db6 	.word	0x3fdb6db6
   d7448:	33333303 	.word	0x33333303
   d744c:	3fe33333 	.word	0x3fe33333
   d7450:	e0000000 	.word	0xe0000000
   d7454:	3feec709 	.word	0x3feec709
   d7458:	dc3a03fd 	.word	0xdc3a03fd
   d745c:	3feec709 	.word	0x3feec709
   d7460:	145b01f5 	.word	0x145b01f5
   d7464:	be3e2fe0 	.word	0xbe3e2fe0
   d7468:	7ff00000 	.word	0x7ff00000
   d746c:	43400000 	.word	0x43400000
   d7470:	0003988e 	.word	0x0003988e
   d7474:	000bb679 	.word	0x000bb679
   d7478:	3ff00000 	.word	0x3ff00000
   d747c:	40080000 	.word	0x40080000
   d7480:	9b03      	ldr	r3, [sp, #12]
   d7482:	9a06      	ldr	r2, [sp, #24]
   d7484:	3b01      	subs	r3, #1
   d7486:	4313      	orrs	r3, r2
   d7488:	f040 8178 	bne.w	d777c <__ieee754_pow+0x8bc>
   d748c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d77a0 <__ieee754_pow+0x8e0>
   d7490:	eeb0 9a47 	vmov.f32	s18, s14
   d7494:	eef0 9a67 	vmov.f32	s19, s15
   d7498:	2300      	movs	r3, #0
   d749a:	e9cd 6700 	strd	r6, r7, [sp]
   d749e:	9300      	str	r3, [sp, #0]
   d74a0:	e9dd 8900 	ldrd	r8, r9, [sp]
   d74a4:	4630      	mov	r0, r6
   d74a6:	4642      	mov	r2, r8
   d74a8:	4639      	mov	r1, r7
   d74aa:	464b      	mov	r3, r9
   d74ac:	f000 fdf2 	bl	d8094 <__aeabi_dsub>
   d74b0:	4622      	mov	r2, r4
   d74b2:	462b      	mov	r3, r5
   d74b4:	f000 ffa6 	bl	d8404 <__aeabi_dmul>
   d74b8:	4632      	mov	r2, r6
   d74ba:	463b      	mov	r3, r7
   d74bc:	4606      	mov	r6, r0
   d74be:	460f      	mov	r7, r1
   d74c0:	4650      	mov	r0, sl
   d74c2:	4659      	mov	r1, fp
   d74c4:	f000 ff9e 	bl	d8404 <__aeabi_dmul>
   d74c8:	4602      	mov	r2, r0
   d74ca:	460b      	mov	r3, r1
   d74cc:	4630      	mov	r0, r6
   d74ce:	4639      	mov	r1, r7
   d74d0:	f000 fde2 	bl	d8098 <__adddf3>
   d74d4:	4642      	mov	r2, r8
   d74d6:	4682      	mov	sl, r0
   d74d8:	468b      	mov	fp, r1
   d74da:	464b      	mov	r3, r9
   d74dc:	4620      	mov	r0, r4
   d74de:	4629      	mov	r1, r5
   d74e0:	f000 ff90 	bl	d8404 <__aeabi_dmul>
   d74e4:	4606      	mov	r6, r0
   d74e6:	460f      	mov	r7, r1
   d74e8:	463b      	mov	r3, r7
   d74ea:	4650      	mov	r0, sl
   d74ec:	4659      	mov	r1, fp
   d74ee:	4632      	mov	r2, r6
   d74f0:	f000 fdd2 	bl	d8098 <__adddf3>
   d74f4:	4bc4      	ldr	r3, [pc, #784]	; (d7808 <__ieee754_pow+0x948>)
   d74f6:	4299      	cmp	r1, r3
   d74f8:	4604      	mov	r4, r0
   d74fa:	460d      	mov	r5, r1
   d74fc:	4688      	mov	r8, r1
   d74fe:	f340 8117 	ble.w	d7730 <__ieee754_pow+0x870>
   d7502:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7506:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d750a:	4303      	orrs	r3, r0
   d750c:	f040 822a 	bne.w	d7964 <__ieee754_pow+0xaa4>
   d7510:	a3a5      	add	r3, pc, #660	; (adr r3, d77a8 <__ieee754_pow+0x8e8>)
   d7512:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7516:	4650      	mov	r0, sl
   d7518:	4659      	mov	r1, fp
   d751a:	f000 fdbd 	bl	d8098 <__adddf3>
   d751e:	4632      	mov	r2, r6
   d7520:	ec41 0b18 	vmov	d8, r0, r1
   d7524:	463b      	mov	r3, r7
   d7526:	4620      	mov	r0, r4
   d7528:	4629      	mov	r1, r5
   d752a:	f000 fdb3 	bl	d8094 <__aeabi_dsub>
   d752e:	4602      	mov	r2, r0
   d7530:	460b      	mov	r3, r1
   d7532:	ec51 0b18 	vmov	r0, r1, d8
   d7536:	f001 f9f5 	bl	d8924 <__aeabi_dcmpgt>
   d753a:	2800      	cmp	r0, #0
   d753c:	f040 8212 	bne.w	d7964 <__ieee754_pow+0xaa4>
   d7540:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d7544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7548:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d754c:	fa42 f303 	asr.w	r3, r2, r3
   d7550:	4443      	add	r3, r8
   d7552:	49ae      	ldr	r1, [pc, #696]	; (d780c <__ieee754_pow+0x94c>)
   d7554:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7558:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d755c:	fa41 fc02 	asr.w	ip, r1, r2
   d7560:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d7564:	ea23 010c 	bic.w	r1, r3, ip
   d7568:	f1c2 0414 	rsb	r4, r2, #20
   d756c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d7570:	f1b8 0f00 	cmp.w	r8, #0
   d7574:	460b      	mov	r3, r1
   d7576:	fa45 f104 	asr.w	r1, r5, r4
   d757a:	9103      	str	r1, [sp, #12]
   d757c:	f04f 0000 	mov.w	r0, #0
   d7580:	bfb8      	it	lt
   d7582:	4249      	neglt	r1, r1
   d7584:	4602      	mov	r2, r0
   d7586:	bfb8      	it	lt
   d7588:	9103      	strlt	r1, [sp, #12]
   d758a:	4630      	mov	r0, r6
   d758c:	4639      	mov	r1, r7
   d758e:	f000 fd81 	bl	d8094 <__aeabi_dsub>
   d7592:	4606      	mov	r6, r0
   d7594:	460f      	mov	r7, r1
   d7596:	463b      	mov	r3, r7
   d7598:	4650      	mov	r0, sl
   d759a:	4659      	mov	r1, fp
   d759c:	4632      	mov	r2, r6
   d759e:	f000 fd7b 	bl	d8098 <__adddf3>
   d75a2:	9b03      	ldr	r3, [sp, #12]
   d75a4:	051b      	lsls	r3, r3, #20
   d75a6:	9300      	str	r3, [sp, #0]
   d75a8:	460d      	mov	r5, r1
   d75aa:	2400      	movs	r4, #0
   d75ac:	a380      	add	r3, pc, #512	; (adr r3, d77b0 <__ieee754_pow+0x8f0>)
   d75ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75b2:	4620      	mov	r0, r4
   d75b4:	4629      	mov	r1, r5
   d75b6:	f000 ff25 	bl	d8404 <__aeabi_dmul>
   d75ba:	4632      	mov	r2, r6
   d75bc:	4680      	mov	r8, r0
   d75be:	4689      	mov	r9, r1
   d75c0:	463b      	mov	r3, r7
   d75c2:	4620      	mov	r0, r4
   d75c4:	4629      	mov	r1, r5
   d75c6:	f000 fd65 	bl	d8094 <__aeabi_dsub>
   d75ca:	4602      	mov	r2, r0
   d75cc:	460b      	mov	r3, r1
   d75ce:	4650      	mov	r0, sl
   d75d0:	4659      	mov	r1, fp
   d75d2:	f000 fd5f 	bl	d8094 <__aeabi_dsub>
   d75d6:	a378      	add	r3, pc, #480	; (adr r3, d77b8 <__ieee754_pow+0x8f8>)
   d75d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75dc:	f000 ff12 	bl	d8404 <__aeabi_dmul>
   d75e0:	a377      	add	r3, pc, #476	; (adr r3, d77c0 <__ieee754_pow+0x900>)
   d75e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75e6:	4606      	mov	r6, r0
   d75e8:	460f      	mov	r7, r1
   d75ea:	4620      	mov	r0, r4
   d75ec:	4629      	mov	r1, r5
   d75ee:	f000 ff09 	bl	d8404 <__aeabi_dmul>
   d75f2:	4602      	mov	r2, r0
   d75f4:	460b      	mov	r3, r1
   d75f6:	4630      	mov	r0, r6
   d75f8:	4639      	mov	r1, r7
   d75fa:	f000 fd4d 	bl	d8098 <__adddf3>
   d75fe:	4606      	mov	r6, r0
   d7600:	460f      	mov	r7, r1
   d7602:	4632      	mov	r2, r6
   d7604:	463b      	mov	r3, r7
   d7606:	4640      	mov	r0, r8
   d7608:	4649      	mov	r1, r9
   d760a:	f000 fd45 	bl	d8098 <__adddf3>
   d760e:	4642      	mov	r2, r8
   d7610:	464b      	mov	r3, r9
   d7612:	4604      	mov	r4, r0
   d7614:	460d      	mov	r5, r1
   d7616:	f000 fd3d 	bl	d8094 <__aeabi_dsub>
   d761a:	4602      	mov	r2, r0
   d761c:	460b      	mov	r3, r1
   d761e:	4630      	mov	r0, r6
   d7620:	4639      	mov	r1, r7
   d7622:	f000 fd37 	bl	d8094 <__aeabi_dsub>
   d7626:	4622      	mov	r2, r4
   d7628:	4682      	mov	sl, r0
   d762a:	468b      	mov	fp, r1
   d762c:	462b      	mov	r3, r5
   d762e:	4620      	mov	r0, r4
   d7630:	4629      	mov	r1, r5
   d7632:	f000 fee7 	bl	d8404 <__aeabi_dmul>
   d7636:	a364      	add	r3, pc, #400	; (adr r3, d77c8 <__ieee754_pow+0x908>)
   d7638:	e9d3 2300 	ldrd	r2, r3, [r3]
   d763c:	4606      	mov	r6, r0
   d763e:	460f      	mov	r7, r1
   d7640:	f000 fee0 	bl	d8404 <__aeabi_dmul>
   d7644:	a362      	add	r3, pc, #392	; (adr r3, d77d0 <__ieee754_pow+0x910>)
   d7646:	e9d3 2300 	ldrd	r2, r3, [r3]
   d764a:	f000 fd23 	bl	d8094 <__aeabi_dsub>
   d764e:	4632      	mov	r2, r6
   d7650:	463b      	mov	r3, r7
   d7652:	f000 fed7 	bl	d8404 <__aeabi_dmul>
   d7656:	a360      	add	r3, pc, #384	; (adr r3, d77d8 <__ieee754_pow+0x918>)
   d7658:	e9d3 2300 	ldrd	r2, r3, [r3]
   d765c:	f000 fd1c 	bl	d8098 <__adddf3>
   d7660:	4632      	mov	r2, r6
   d7662:	463b      	mov	r3, r7
   d7664:	f000 fece 	bl	d8404 <__aeabi_dmul>
   d7668:	a35d      	add	r3, pc, #372	; (adr r3, d77e0 <__ieee754_pow+0x920>)
   d766a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d766e:	f000 fd11 	bl	d8094 <__aeabi_dsub>
   d7672:	4632      	mov	r2, r6
   d7674:	463b      	mov	r3, r7
   d7676:	f000 fec5 	bl	d8404 <__aeabi_dmul>
   d767a:	a35b      	add	r3, pc, #364	; (adr r3, d77e8 <__ieee754_pow+0x928>)
   d767c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7680:	f000 fd0a 	bl	d8098 <__adddf3>
   d7684:	4632      	mov	r2, r6
   d7686:	463b      	mov	r3, r7
   d7688:	f000 febc 	bl	d8404 <__aeabi_dmul>
   d768c:	4602      	mov	r2, r0
   d768e:	460b      	mov	r3, r1
   d7690:	4620      	mov	r0, r4
   d7692:	4629      	mov	r1, r5
   d7694:	f000 fcfe 	bl	d8094 <__aeabi_dsub>
   d7698:	4606      	mov	r6, r0
   d769a:	460f      	mov	r7, r1
   d769c:	4632      	mov	r2, r6
   d769e:	463b      	mov	r3, r7
   d76a0:	4620      	mov	r0, r4
   d76a2:	4629      	mov	r1, r5
   d76a4:	f000 feae 	bl	d8404 <__aeabi_dmul>
   d76a8:	2200      	movs	r2, #0
   d76aa:	4680      	mov	r8, r0
   d76ac:	4689      	mov	r9, r1
   d76ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d76b2:	4630      	mov	r0, r6
   d76b4:	4639      	mov	r1, r7
   d76b6:	f000 fced 	bl	d8094 <__aeabi_dsub>
   d76ba:	4602      	mov	r2, r0
   d76bc:	460b      	mov	r3, r1
   d76be:	4640      	mov	r0, r8
   d76c0:	4649      	mov	r1, r9
   d76c2:	f000 ffc9 	bl	d8658 <__aeabi_ddiv>
   d76c6:	4652      	mov	r2, sl
   d76c8:	4606      	mov	r6, r0
   d76ca:	460f      	mov	r7, r1
   d76cc:	465b      	mov	r3, fp
   d76ce:	4620      	mov	r0, r4
   d76d0:	4629      	mov	r1, r5
   d76d2:	f000 fe97 	bl	d8404 <__aeabi_dmul>
   d76d6:	4652      	mov	r2, sl
   d76d8:	465b      	mov	r3, fp
   d76da:	f000 fcdd 	bl	d8098 <__adddf3>
   d76de:	4602      	mov	r2, r0
   d76e0:	460b      	mov	r3, r1
   d76e2:	4630      	mov	r0, r6
   d76e4:	4639      	mov	r1, r7
   d76e6:	f000 fcd5 	bl	d8094 <__aeabi_dsub>
   d76ea:	4622      	mov	r2, r4
   d76ec:	462b      	mov	r3, r5
   d76ee:	f000 fcd1 	bl	d8094 <__aeabi_dsub>
   d76f2:	4602      	mov	r2, r0
   d76f4:	460b      	mov	r3, r1
   d76f6:	2000      	movs	r0, #0
   d76f8:	4945      	ldr	r1, [pc, #276]	; (d7810 <__ieee754_pow+0x950>)
   d76fa:	f000 fccb 	bl	d8094 <__aeabi_dsub>
   d76fe:	460b      	mov	r3, r1
   d7700:	9900      	ldr	r1, [sp, #0]
   d7702:	4419      	add	r1, r3
   d7704:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7708:	4602      	mov	r2, r0
   d770a:	f2c0 8169 	blt.w	d79e0 <__ieee754_pow+0xb20>
   d770e:	4610      	mov	r0, r2
   d7710:	ec53 2b19 	vmov	r2, r3, d9
   d7714:	f000 fe76 	bl	d8404 <__aeabi_dmul>
   d7718:	e9cd 0100 	strd	r0, r1, [sp]
   d771c:	e41e      	b.n	d6f5c <__ieee754_pow+0x9c>
   d771e:	f1bb 0f00 	cmp.w	fp, #0
   d7722:	f6ff ac95 	blt.w	d7050 <__ieee754_pow+0x190>
   d7726:	ed9f 7b32 	vldr	d7, [pc, #200]	; d77f0 <__ieee754_pow+0x930>
   d772a:	ed8d 7b00 	vstr	d7, [sp]
   d772e:	e415      	b.n	d6f5c <__ieee754_pow+0x9c>
   d7730:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d7818 <__ieee754_pow+0x958>
   d7734:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7738:	4563      	cmp	r3, ip
   d773a:	f340 810b 	ble.w	d7954 <__ieee754_pow+0xa94>
   d773e:	4b35      	ldr	r3, [pc, #212]	; (d7814 <__ieee754_pow+0x954>)
   d7740:	440b      	add	r3, r1
   d7742:	4303      	orrs	r3, r0
   d7744:	d10a      	bne.n	d775c <__ieee754_pow+0x89c>
   d7746:	4632      	mov	r2, r6
   d7748:	463b      	mov	r3, r7
   d774a:	f000 fca3 	bl	d8094 <__aeabi_dsub>
   d774e:	4652      	mov	r2, sl
   d7750:	465b      	mov	r3, fp
   d7752:	f001 f8dd 	bl	d8910 <__aeabi_dcmpge>
   d7756:	2800      	cmp	r0, #0
   d7758:	f43f aef2 	beq.w	d7540 <__ieee754_pow+0x680>
   d775c:	a326      	add	r3, pc, #152	; (adr r3, d77f8 <__ieee754_pow+0x938>)
   d775e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7762:	ec51 0b19 	vmov	r0, r1, d9
   d7766:	f000 fe4d 	bl	d8404 <__aeabi_dmul>
   d776a:	a323      	add	r3, pc, #140	; (adr r3, d77f8 <__ieee754_pow+0x938>)
   d776c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7770:	f000 fe48 	bl	d8404 <__aeabi_dmul>
   d7774:	e9cd 0100 	strd	r0, r1, [sp]
   d7778:	f7ff bbf0 	b.w	d6f5c <__ieee754_pow+0x9c>
   d777c:	ed9f 7b20 	vldr	d7, [pc, #128]	; d7800 <__ieee754_pow+0x940>
   d7780:	eeb0 9a47 	vmov.f32	s18, s14
   d7784:	eef0 9a67 	vmov.f32	s19, s15
   d7788:	e686      	b.n	d7498 <__ieee754_pow+0x5d8>
   d778a:	f1bb 0f00 	cmp.w	fp, #0
   d778e:	daca      	bge.n	d7726 <__ieee754_pow+0x866>
   d7790:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7794:	9600      	str	r6, [sp, #0]
   d7796:	9301      	str	r3, [sp, #4]
   d7798:	f7ff bbe0 	b.w	d6f5c <__ieee754_pow+0x9c>
   d779c:	f3af 8000 	nop.w
   d77a0:	00000000 	.word	0x00000000
   d77a4:	bff00000 	.word	0xbff00000
   d77a8:	652b82fe 	.word	0x652b82fe
   d77ac:	3c971547 	.word	0x3c971547
   d77b0:	00000000 	.word	0x00000000
   d77b4:	3fe62e43 	.word	0x3fe62e43
   d77b8:	fefa39ef 	.word	0xfefa39ef
   d77bc:	3fe62e42 	.word	0x3fe62e42
   d77c0:	0ca86c39 	.word	0x0ca86c39
   d77c4:	be205c61 	.word	0xbe205c61
   d77c8:	72bea4d0 	.word	0x72bea4d0
   d77cc:	3e663769 	.word	0x3e663769
   d77d0:	c5d26bf1 	.word	0xc5d26bf1
   d77d4:	3ebbbd41 	.word	0x3ebbbd41
   d77d8:	af25de2c 	.word	0xaf25de2c
   d77dc:	3f11566a 	.word	0x3f11566a
   d77e0:	16bebd93 	.word	0x16bebd93
   d77e4:	3f66c16c 	.word	0x3f66c16c
   d77e8:	5555553e 	.word	0x5555553e
   d77ec:	3fc55555 	.word	0x3fc55555
	...
   d77f8:	c2f8f359 	.word	0xc2f8f359
   d77fc:	01a56e1f 	.word	0x01a56e1f
   d7800:	00000000 	.word	0x00000000
   d7804:	3ff00000 	.word	0x3ff00000
   d7808:	408fffff 	.word	0x408fffff
   d780c:	000fffff 	.word	0x000fffff
   d7810:	3ff00000 	.word	0x3ff00000
   d7814:	3f6f3400 	.word	0x3f6f3400
   d7818:	4090cbff 	.word	0x4090cbff
   d781c:	4598      	cmp	r8, r3
   d781e:	f6ff af7e 	blt.w	d771e <__ieee754_pow+0x85e>
   d7822:	4b91      	ldr	r3, [pc, #580]	; (d7a68 <__ieee754_pow+0xba8>)
   d7824:	4598      	cmp	r8, r3
   d7826:	f73f ac0f 	bgt.w	d7048 <__ieee754_pow+0x188>
   d782a:	4b8f      	ldr	r3, [pc, #572]	; (d7a68 <__ieee754_pow+0xba8>)
   d782c:	2200      	movs	r2, #0
   d782e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7832:	f000 fc2f 	bl	d8094 <__aeabi_dsub>
   d7836:	a378      	add	r3, pc, #480	; (adr r3, d7a18 <__ieee754_pow+0xb58>)
   d7838:	e9d3 2300 	ldrd	r2, r3, [r3]
   d783c:	4604      	mov	r4, r0
   d783e:	460d      	mov	r5, r1
   d7840:	f000 fde0 	bl	d8404 <__aeabi_dmul>
   d7844:	a376      	add	r3, pc, #472	; (adr r3, d7a20 <__ieee754_pow+0xb60>)
   d7846:	e9d3 2300 	ldrd	r2, r3, [r3]
   d784a:	4682      	mov	sl, r0
   d784c:	468b      	mov	fp, r1
   d784e:	4620      	mov	r0, r4
   d7850:	4629      	mov	r1, r5
   d7852:	f000 fdd7 	bl	d8404 <__aeabi_dmul>
   d7856:	4b85      	ldr	r3, [pc, #532]	; (d7a6c <__ieee754_pow+0xbac>)
   d7858:	4680      	mov	r8, r0
   d785a:	4689      	mov	r9, r1
   d785c:	2200      	movs	r2, #0
   d785e:	4620      	mov	r0, r4
   d7860:	4629      	mov	r1, r5
   d7862:	f000 fdcf 	bl	d8404 <__aeabi_dmul>
   d7866:	4602      	mov	r2, r0
   d7868:	460b      	mov	r3, r1
   d786a:	a16f      	add	r1, pc, #444	; (adr r1, d7a28 <__ieee754_pow+0xb68>)
   d786c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7870:	f000 fc10 	bl	d8094 <__aeabi_dsub>
   d7874:	4622      	mov	r2, r4
   d7876:	462b      	mov	r3, r5
   d7878:	f000 fdc4 	bl	d8404 <__aeabi_dmul>
   d787c:	4602      	mov	r2, r0
   d787e:	460b      	mov	r3, r1
   d7880:	2000      	movs	r0, #0
   d7882:	497b      	ldr	r1, [pc, #492]	; (d7a70 <__ieee754_pow+0xbb0>)
   d7884:	f000 fc06 	bl	d8094 <__aeabi_dsub>
   d7888:	4622      	mov	r2, r4
   d788a:	462b      	mov	r3, r5
   d788c:	4604      	mov	r4, r0
   d788e:	460d      	mov	r5, r1
   d7890:	4610      	mov	r0, r2
   d7892:	4619      	mov	r1, r3
   d7894:	f000 fdb6 	bl	d8404 <__aeabi_dmul>
   d7898:	4602      	mov	r2, r0
   d789a:	460b      	mov	r3, r1
   d789c:	4620      	mov	r0, r4
   d789e:	4629      	mov	r1, r5
   d78a0:	f000 fdb0 	bl	d8404 <__aeabi_dmul>
   d78a4:	a362      	add	r3, pc, #392	; (adr r3, d7a30 <__ieee754_pow+0xb70>)
   d78a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d78aa:	f000 fdab 	bl	d8404 <__aeabi_dmul>
   d78ae:	4602      	mov	r2, r0
   d78b0:	460b      	mov	r3, r1
   d78b2:	4640      	mov	r0, r8
   d78b4:	4649      	mov	r1, r9
   d78b6:	f000 fbed 	bl	d8094 <__aeabi_dsub>
   d78ba:	4680      	mov	r8, r0
   d78bc:	4689      	mov	r9, r1
   d78be:	4650      	mov	r0, sl
   d78c0:	4659      	mov	r1, fp
   d78c2:	4642      	mov	r2, r8
   d78c4:	464b      	mov	r3, r9
   d78c6:	f000 fbe7 	bl	d8098 <__adddf3>
   d78ca:	2400      	movs	r4, #0
   d78cc:	4652      	mov	r2, sl
   d78ce:	465b      	mov	r3, fp
   d78d0:	4620      	mov	r0, r4
   d78d2:	460d      	mov	r5, r1
   d78d4:	f000 fbde 	bl	d8094 <__aeabi_dsub>
   d78d8:	4602      	mov	r2, r0
   d78da:	460b      	mov	r3, r1
   d78dc:	4640      	mov	r0, r8
   d78de:	4649      	mov	r1, r9
   d78e0:	f000 fbd8 	bl	d8094 <__aeabi_dsub>
   d78e4:	4682      	mov	sl, r0
   d78e6:	468b      	mov	fp, r1
   d78e8:	e5ca      	b.n	d7480 <__ieee754_pow+0x5c0>
   d78ea:	ed9f 7b53 	vldr	d7, [pc, #332]	; d7a38 <__ieee754_pow+0xb78>
   d78ee:	eeb0 ba47 	vmov.f32	s22, s14
   d78f2:	eef0 ba67 	vmov.f32	s23, s15
   d78f6:	eeb0 ca47 	vmov.f32	s24, s14
   d78fa:	eef0 ca67 	vmov.f32	s25, s15
   d78fe:	ed9f 7b50 	vldr	d7, [pc, #320]	; d7a40 <__ieee754_pow+0xb80>
   d7902:	f04f 0900 	mov.w	r9, #0
   d7906:	ec54 3b17 	vmov	r3, r4, d7
   d790a:	e41d      	b.n	d7148 <__ieee754_pow+0x288>
   d790c:	2000      	movs	r0, #0
   d790e:	f7ff bbf3 	b.w	d70f8 <__ieee754_pow+0x238>
   d7912:	4955      	ldr	r1, [pc, #340]	; (d7a68 <__ieee754_pow+0xba8>)
   d7914:	4622      	mov	r2, r4
   d7916:	462b      	mov	r3, r5
   d7918:	2000      	movs	r0, #0
   d791a:	f000 fe9d 	bl	d8658 <__aeabi_ddiv>
   d791e:	e9cd 0100 	strd	r0, r1, [sp]
   d7922:	f7ff bb1b 	b.w	d6f5c <__ieee754_pow+0x9c>
   d7926:	4622      	mov	r2, r4
   d7928:	462b      	mov	r3, r5
   d792a:	4620      	mov	r0, r4
   d792c:	4629      	mov	r1, r5
   d792e:	f000 fd69 	bl	d8404 <__aeabi_dmul>
   d7932:	e9cd 0100 	strd	r0, r1, [sp]
   d7936:	f7ff bb11 	b.w	d6f5c <__ieee754_pow+0x9c>
   d793a:	2b00      	cmp	r3, #0
   d793c:	d142      	bne.n	d79c4 <__ieee754_pow+0xb04>
   d793e:	f1c1 0114 	rsb	r1, r1, #20
   d7942:	fa4a f001 	asr.w	r0, sl, r1
   d7946:	fa00 f101 	lsl.w	r1, r0, r1
   d794a:	4551      	cmp	r1, sl
   d794c:	d05a      	beq.n	d7a04 <__ieee754_pow+0xb44>
   d794e:	9303      	str	r3, [sp, #12]
   d7950:	f7ff bae0 	b.w	d6f14 <__ieee754_pow+0x54>
   d7954:	4a46      	ldr	r2, [pc, #280]	; (d7a70 <__ieee754_pow+0xbb0>)
   d7956:	4293      	cmp	r3, r2
   d7958:	dc5b      	bgt.n	d7a12 <__ieee754_pow+0xb52>
   d795a:	e9dd 1200 	ldrd	r1, r2, [sp]
   d795e:	9100      	str	r1, [sp, #0]
   d7960:	9103      	str	r1, [sp, #12]
   d7962:	e622      	b.n	d75aa <__ieee754_pow+0x6ea>
   d7964:	a338      	add	r3, pc, #224	; (adr r3, d7a48 <__ieee754_pow+0xb88>)
   d7966:	e9d3 2300 	ldrd	r2, r3, [r3]
   d796a:	ec51 0b19 	vmov	r0, r1, d9
   d796e:	f000 fd49 	bl	d8404 <__aeabi_dmul>
   d7972:	a335      	add	r3, pc, #212	; (adr r3, d7a48 <__ieee754_pow+0xb88>)
   d7974:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7978:	f000 fd44 	bl	d8404 <__aeabi_dmul>
   d797c:	e9cd 0100 	strd	r0, r1, [sp]
   d7980:	f7ff baec 	b.w	d6f5c <__ieee754_pow+0x9c>
   d7984:	9b03      	ldr	r3, [sp, #12]
   d7986:	2b01      	cmp	r3, #1
   d7988:	f47f aae8 	bne.w	d6f5c <__ieee754_pow+0x9c>
   d798c:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7994:	e9cd 2300 	strd	r2, r3, [sp]
   d7998:	f7ff bae0 	b.w	d6f5c <__ieee754_pow+0x9c>
   d799c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d7a50 <__ieee754_pow+0xb90>
   d79a0:	eeb0 ba47 	vmov.f32	s22, s14
   d79a4:	eef0 ba67 	vmov.f32	s23, s15
   d79a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d7a58 <__ieee754_pow+0xb98>
   d79ac:	eeb0 ca47 	vmov.f32	s24, s14
   d79b0:	eef0 ca67 	vmov.f32	s25, s15
   d79b4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d7a60 <__ieee754_pow+0xba0>
   d79b8:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d79bc:	ec54 3b17 	vmov	r3, r4, d7
   d79c0:	f7ff bbc2 	b.w	d7148 <__ieee754_pow+0x288>
   d79c4:	ec45 4b10 	vmov	d0, r4, r5
   d79c8:	9203      	str	r2, [sp, #12]
   d79ca:	f000 fa17 	bl	d7dfc <fabs>
   d79ce:	9a03      	ldr	r2, [sp, #12]
   d79d0:	ed8d 0b00 	vstr	d0, [sp]
   d79d4:	2a00      	cmp	r2, #0
   d79d6:	f47f ab61 	bne.w	d709c <__ieee754_pow+0x1dc>
   d79da:	9203      	str	r2, [sp, #12]
   d79dc:	f7ff baf5 	b.w	d6fca <__ieee754_pow+0x10a>
   d79e0:	9803      	ldr	r0, [sp, #12]
   d79e2:	ec43 2b10 	vmov	d0, r2, r3
   d79e6:	f000 fabf 	bl	d7f68 <scalbn>
   d79ea:	ec51 0b10 	vmov	r0, r1, d0
   d79ee:	e68f      	b.n	d7710 <__ieee754_pow+0x850>
   d79f0:	f000 0001 	and.w	r0, r0, #1
   d79f4:	f1c0 0102 	rsb	r1, r0, #2
   d79f8:	9103      	str	r1, [sp, #12]
   d79fa:	2b00      	cmp	r3, #0
   d79fc:	f43f aa8a 	beq.w	d6f14 <__ieee754_pow+0x54>
   d7a00:	f7ff bada 	b.w	d6fb8 <__ieee754_pow+0xf8>
   d7a04:	f000 0001 	and.w	r0, r0, #1
   d7a08:	f1c0 0302 	rsb	r3, r0, #2
   d7a0c:	9303      	str	r3, [sp, #12]
   d7a0e:	f7ff ba81 	b.w	d6f14 <__ieee754_pow+0x54>
   d7a12:	151b      	asrs	r3, r3, #20
   d7a14:	e596      	b.n	d7544 <__ieee754_pow+0x684>
   d7a16:	bf00      	nop
   d7a18:	60000000 	.word	0x60000000
   d7a1c:	3ff71547 	.word	0x3ff71547
   d7a20:	f85ddf44 	.word	0xf85ddf44
   d7a24:	3e54ae0b 	.word	0x3e54ae0b
   d7a28:	55555555 	.word	0x55555555
   d7a2c:	3fd55555 	.word	0x3fd55555
   d7a30:	652b82fe 	.word	0x652b82fe
   d7a34:	3ff71547 	.word	0x3ff71547
	...
   d7a44:	3ff00000 	.word	0x3ff00000
   d7a48:	8800759c 	.word	0x8800759c
   d7a4c:	7e37e43c 	.word	0x7e37e43c
   d7a50:	40000000 	.word	0x40000000
   d7a54:	3fe2b803 	.word	0x3fe2b803
   d7a58:	43cfd006 	.word	0x43cfd006
   d7a5c:	3e4cfdeb 	.word	0x3e4cfdeb
   d7a60:	00000000 	.word	0x00000000
   d7a64:	3ff80000 	.word	0x3ff80000
   d7a68:	3ff00000 	.word	0x3ff00000
   d7a6c:	3fd00000 	.word	0x3fd00000
   d7a70:	3fe00000 	.word	0x3fe00000

000d7a74 <__ieee754_sqrt>:
   d7a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a78:	4a5f      	ldr	r2, [pc, #380]	; (d7bf8 <__ieee754_sqrt+0x184>)
   d7a7a:	ec57 6b10 	vmov	r6, r7, d0
   d7a7e:	43ba      	bics	r2, r7
   d7a80:	f000 8098 	beq.w	d7bb4 <__ieee754_sqrt+0x140>
   d7a84:	2f00      	cmp	r7, #0
   d7a86:	ee10 4a10 	vmov	r4, s0
   d7a8a:	463b      	mov	r3, r7
   d7a8c:	dd4e      	ble.n	d7b2c <__ieee754_sqrt+0xb8>
   d7a8e:	1539      	asrs	r1, r7, #20
   d7a90:	d05b      	beq.n	d7b4a <__ieee754_sqrt+0xd6>
   d7a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7a96:	07ca      	lsls	r2, r1, #31
   d7a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7a9c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d7aa0:	d403      	bmi.n	d7aaa <__ieee754_sqrt+0x36>
   d7aa2:	005b      	lsls	r3, r3, #1
   d7aa4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7aa8:	0064      	lsls	r4, r4, #1
   d7aaa:	0fe2      	lsrs	r2, r4, #31
   d7aac:	f04f 0c00 	mov.w	ip, #0
   d7ab0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d7ab4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d7ab8:	0064      	lsls	r4, r4, #1
   d7aba:	4666      	mov	r6, ip
   d7abc:	2516      	movs	r5, #22
   d7abe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d7ac2:	18b1      	adds	r1, r6, r2
   d7ac4:	4299      	cmp	r1, r3
   d7ac6:	dc02      	bgt.n	d7ace <__ieee754_sqrt+0x5a>
   d7ac8:	1a5b      	subs	r3, r3, r1
   d7aca:	188e      	adds	r6, r1, r2
   d7acc:	4494      	add	ip, r2
   d7ace:	005b      	lsls	r3, r3, #1
   d7ad0:	3d01      	subs	r5, #1
   d7ad2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7ad6:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7ada:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7ade:	d1f0      	bne.n	d7ac2 <__ieee754_sqrt+0x4e>
   d7ae0:	462f      	mov	r7, r5
   d7ae2:	2020      	movs	r0, #32
   d7ae4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d7ae8:	e009      	b.n	d7afe <__ieee754_sqrt+0x8a>
   d7aea:	d03e      	beq.n	d7b6a <__ieee754_sqrt+0xf6>
   d7aec:	0fe1      	lsrs	r1, r4, #31
   d7aee:	3801      	subs	r0, #1
   d7af0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7af4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d7af8:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7afc:	d03e      	beq.n	d7b7c <__ieee754_sqrt+0x108>
   d7afe:	42b3      	cmp	r3, r6
   d7b00:	eb02 0105 	add.w	r1, r2, r5
   d7b04:	ddf1      	ble.n	d7aea <__ieee754_sqrt+0x76>
   d7b06:	2900      	cmp	r1, #0
   d7b08:	eb01 0502 	add.w	r5, r1, r2
   d7b0c:	db09      	blt.n	d7b22 <__ieee754_sqrt+0xae>
   d7b0e:	46b0      	mov	r8, r6
   d7b10:	1b9b      	subs	r3, r3, r6
   d7b12:	42a1      	cmp	r1, r4
   d7b14:	bf88      	it	hi
   d7b16:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d7b1a:	1a64      	subs	r4, r4, r1
   d7b1c:	4417      	add	r7, r2
   d7b1e:	4646      	mov	r6, r8
   d7b20:	e7e4      	b.n	d7aec <__ieee754_sqrt+0x78>
   d7b22:	2d00      	cmp	r5, #0
   d7b24:	dbf3      	blt.n	d7b0e <__ieee754_sqrt+0x9a>
   d7b26:	f106 0801 	add.w	r8, r6, #1
   d7b2a:	e7f1      	b.n	d7b10 <__ieee754_sqrt+0x9c>
   d7b2c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d7b30:	4332      	orrs	r2, r6
   d7b32:	d036      	beq.n	d7ba2 <__ieee754_sqrt+0x12e>
   d7b34:	2f00      	cmp	r7, #0
   d7b36:	d14d      	bne.n	d7bd4 <__ieee754_sqrt+0x160>
   d7b38:	4639      	mov	r1, r7
   d7b3a:	0ae2      	lsrs	r2, r4, #11
   d7b3c:	3915      	subs	r1, #21
   d7b3e:	0564      	lsls	r4, r4, #21
   d7b40:	4613      	mov	r3, r2
   d7b42:	2a00      	cmp	r2, #0
   d7b44:	d0f9      	beq.n	d7b3a <__ieee754_sqrt+0xc6>
   d7b46:	02d7      	lsls	r7, r2, #11
   d7b48:	d451      	bmi.n	d7bee <__ieee754_sqrt+0x17a>
   d7b4a:	2000      	movs	r0, #0
   d7b4c:	005b      	lsls	r3, r3, #1
   d7b4e:	02de      	lsls	r6, r3, #11
   d7b50:	4605      	mov	r5, r0
   d7b52:	f100 0001 	add.w	r0, r0, #1
   d7b56:	d5f9      	bpl.n	d7b4c <__ieee754_sqrt+0xd8>
   d7b58:	461a      	mov	r2, r3
   d7b5a:	4623      	mov	r3, r4
   d7b5c:	4084      	lsls	r4, r0
   d7b5e:	f1c0 0020 	rsb	r0, r0, #32
   d7b62:	40c3      	lsrs	r3, r0
   d7b64:	4313      	orrs	r3, r2
   d7b66:	1b49      	subs	r1, r1, r5
   d7b68:	e793      	b.n	d7a92 <__ieee754_sqrt+0x1e>
   d7b6a:	42a1      	cmp	r1, r4
   d7b6c:	d8be      	bhi.n	d7aec <__ieee754_sqrt+0x78>
   d7b6e:	2900      	cmp	r1, #0
   d7b70:	eb01 0502 	add.w	r5, r1, r2
   d7b74:	dbd5      	blt.n	d7b22 <__ieee754_sqrt+0xae>
   d7b76:	4698      	mov	r8, r3
   d7b78:	2300      	movs	r3, #0
   d7b7a:	e7ce      	b.n	d7b1a <__ieee754_sqrt+0xa6>
   d7b7c:	4323      	orrs	r3, r4
   d7b7e:	d112      	bne.n	d7ba6 <__ieee754_sqrt+0x132>
   d7b80:	0878      	lsrs	r0, r7, #1
   d7b82:	ea4f 016c 	mov.w	r1, ip, asr #1
   d7b86:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7b8a:	f01c 0f01 	tst.w	ip, #1
   d7b8e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d7b92:	bf18      	it	ne
   d7b94:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d7b98:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d7b9c:	4602      	mov	r2, r0
   d7b9e:	ec43 2b10 	vmov	d0, r2, r3
   d7ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ba6:	1c7b      	adds	r3, r7, #1
   d7ba8:	bf16      	itet	ne
   d7baa:	1c78      	addne	r0, r7, #1
   d7bac:	f10c 0c01 	addeq.w	ip, ip, #1
   d7bb0:	0840      	lsrne	r0, r0, #1
   d7bb2:	e7e6      	b.n	d7b82 <__ieee754_sqrt+0x10e>
   d7bb4:	ee10 2a10 	vmov	r2, s0
   d7bb8:	ee10 0a10 	vmov	r0, s0
   d7bbc:	463b      	mov	r3, r7
   d7bbe:	4639      	mov	r1, r7
   d7bc0:	f000 fc20 	bl	d8404 <__aeabi_dmul>
   d7bc4:	4632      	mov	r2, r6
   d7bc6:	463b      	mov	r3, r7
   d7bc8:	f000 fa66 	bl	d8098 <__adddf3>
   d7bcc:	ec41 0b10 	vmov	d0, r0, r1
   d7bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7bd4:	ee10 2a10 	vmov	r2, s0
   d7bd8:	4630      	mov	r0, r6
   d7bda:	4639      	mov	r1, r7
   d7bdc:	f000 fa5a 	bl	d8094 <__aeabi_dsub>
   d7be0:	4602      	mov	r2, r0
   d7be2:	460b      	mov	r3, r1
   d7be4:	f000 fd38 	bl	d8658 <__aeabi_ddiv>
   d7be8:	ec41 0b10 	vmov	d0, r0, r1
   d7bec:	e7d9      	b.n	d7ba2 <__ieee754_sqrt+0x12e>
   d7bee:	4623      	mov	r3, r4
   d7bf0:	2020      	movs	r0, #32
   d7bf2:	f04f 35ff 	mov.w	r5, #4294967295
   d7bf6:	e7b4      	b.n	d7b62 <__ieee754_sqrt+0xee>
   d7bf8:	7ff00000 	.word	0x7ff00000

000d7bfc <__ieee754_logf>:
   d7bfc:	ee10 3a10 	vmov	r3, s0
   d7c00:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   d7c04:	d02d      	beq.n	d7c62 <__ieee754_logf+0x66>
   d7c06:	2b00      	cmp	r3, #0
   d7c08:	db32      	blt.n	d7c70 <__ieee754_logf+0x74>
   d7c0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   d7c0e:	da3f      	bge.n	d7c90 <__ieee754_logf+0x94>
   d7c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   d7c14:	b430      	push	{r4, r5}
   d7c16:	db32      	blt.n	d7c7e <__ieee754_logf+0x82>
   d7c18:	2500      	movs	r5, #0
   d7c1a:	4868      	ldr	r0, [pc, #416]	; (d7dbc <__ieee754_logf+0x1c0>)
   d7c1c:	4c68      	ldr	r4, [pc, #416]	; (d7dc0 <__ieee754_logf+0x1c4>)
   d7c1e:	f3c3 0116 	ubfx	r1, r3, #0, #23
   d7c22:	4408      	add	r0, r1
   d7c24:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   d7c28:	15db      	asrs	r3, r3, #23
   d7c2a:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   d7c2e:	3b7f      	subs	r3, #127	; 0x7f
   d7c30:	430a      	orrs	r2, r1
   d7c32:	442b      	add	r3, r5
   d7c34:	ee00 2a10 	vmov	s0, r2
   d7c38:	f101 050f 	add.w	r5, r1, #15
   d7c3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d7c40:	402c      	ands	r4, r5
   d7c42:	ee30 0a67 	vsub.f32	s0, s0, s15
   d7c46:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   d7c4a:	bb24      	cbnz	r4, d7c96 <__ieee754_logf+0x9a>
   d7c4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d7c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7c54:	d161      	bne.n	d7d1a <__ieee754_logf+0x11e>
   d7c56:	2b00      	cmp	r3, #0
   d7c58:	f040 8093 	bne.w	d7d82 <__ieee754_logf+0x186>
   d7c5c:	ed9f 0a59 	vldr	s0, [pc, #356]	; d7dc4 <__ieee754_logf+0x1c8>
   d7c60:	e059      	b.n	d7d16 <__ieee754_logf+0x11a>
   d7c62:	ed9f 7a59 	vldr	s14, [pc, #356]	; d7dc8 <__ieee754_logf+0x1cc>
   d7c66:	eddf 7a57 	vldr	s15, [pc, #348]	; d7dc4 <__ieee754_logf+0x1c8>
   d7c6a:	ee87 0a27 	vdiv.f32	s0, s14, s15
   d7c6e:	4770      	bx	lr
   d7c70:	ee70 7a40 	vsub.f32	s15, s0, s0
   d7c74:	ed9f 7a53 	vldr	s14, [pc, #332]	; d7dc4 <__ieee754_logf+0x1c8>
   d7c78:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7c7c:	4770      	bx	lr
   d7c7e:	eddf 7a53 	vldr	s15, [pc, #332]	; d7dcc <__ieee754_logf+0x1d0>
   d7c82:	ee60 7a27 	vmul.f32	s15, s0, s15
   d7c86:	f06f 0518 	mvn.w	r5, #24
   d7c8a:	ee17 3a90 	vmov	r3, s15
   d7c8e:	e7c4      	b.n	d7c1a <__ieee754_logf+0x1e>
   d7c90:	ee30 0a00 	vadd.f32	s0, s0, s0
   d7c94:	4770      	bx	lr
   d7c96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d7c9a:	ee30 7a07 	vadd.f32	s14, s0, s14
   d7c9e:	ed9f 3a4c 	vldr	s6, [pc, #304]	; d7dd0 <__ieee754_logf+0x1d4>
   d7ca2:	eddf 4a4c 	vldr	s9, [pc, #304]	; d7dd4 <__ieee754_logf+0x1d8>
   d7ca6:	eddf 5a4c 	vldr	s11, [pc, #304]	; d7dd8 <__ieee754_logf+0x1dc>
   d7caa:	eddf 3a4c 	vldr	s7, [pc, #304]	; d7ddc <__ieee754_logf+0x1e0>
   d7cae:	ed9f 5a4c 	vldr	s10, [pc, #304]	; d7de0 <__ieee754_logf+0x1e4>
   d7cb2:	eddf 7a4c 	vldr	s15, [pc, #304]	; d7de4 <__ieee754_logf+0x1e8>
   d7cb6:	eddf 6a4c 	vldr	s13, [pc, #304]	; d7de8 <__ieee754_logf+0x1ec>
   d7cba:	484c      	ldr	r0, [pc, #304]	; (d7dec <__ieee754_logf+0x1f0>)
   d7cbc:	ee80 4a07 	vdiv.f32	s8, s0, s14
   d7cc0:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   d7cc4:	4408      	add	r0, r1
   d7cc6:	f502 7222 	add.w	r2, r2, #648	; 0x288
   d7cca:	4302      	orrs	r2, r0
   d7ccc:	2a00      	cmp	r2, #0
   d7cce:	ee07 3a10 	vmov	s14, r3
   d7cd2:	ee24 6a04 	vmul.f32	s12, s8, s8
   d7cd6:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   d7cda:	ee26 7a06 	vmul.f32	s14, s12, s12
   d7cde:	eee7 4a03 	vfma.f32	s9, s14, s6
   d7ce2:	eea7 5a23 	vfma.f32	s10, s14, s7
   d7ce6:	eee4 5a87 	vfma.f32	s11, s9, s14
   d7cea:	eee5 6a07 	vfma.f32	s13, s10, s14
   d7cee:	eee5 7a87 	vfma.f32	s15, s11, s14
   d7cf2:	ee67 7a86 	vmul.f32	s15, s15, s12
   d7cf6:	eee6 7a87 	vfma.f32	s15, s13, s14
   d7cfa:	dd2b      	ble.n	d7d54 <__ieee754_logf+0x158>
   d7cfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d7d00:	ee20 7a07 	vmul.f32	s14, s0, s14
   d7d04:	ee27 7a00 	vmul.f32	s14, s14, s0
   d7d08:	bb53      	cbnz	r3, d7d60 <__ieee754_logf+0x164>
   d7d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
   d7d0e:	eea7 7ac4 	vfms.f32	s14, s15, s8
   d7d12:	ee30 0a47 	vsub.f32	s0, s0, s14
   d7d16:	bc30      	pop	{r4, r5}
   d7d18:	4770      	bx	lr
   d7d1a:	eddf 7a35 	vldr	s15, [pc, #212]	; d7df0 <__ieee754_logf+0x1f4>
   d7d1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   d7d22:	eea0 7a67 	vfms.f32	s14, s0, s15
   d7d26:	eef0 7a47 	vmov.f32	s15, s14
   d7d2a:	ee20 7a00 	vmul.f32	s14, s0, s0
   d7d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
   d7d32:	2b00      	cmp	r3, #0
   d7d34:	d0ed      	beq.n	d7d12 <__ieee754_logf+0x116>
   d7d36:	ee07 3a90 	vmov	s15, r3
   d7d3a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; d7df4 <__ieee754_logf+0x1f8>
   d7d3e:	eddf 6a2e 	vldr	s13, [pc, #184]	; d7df8 <__ieee754_logf+0x1fc>
   d7d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d46:	eea7 7ac6 	vfms.f32	s14, s15, s12
   d7d4a:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7d4e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   d7d52:	e7e0      	b.n	d7d16 <__ieee754_logf+0x11a>
   d7d54:	bb13      	cbnz	r3, d7d9c <__ieee754_logf+0x1a0>
   d7d56:	ee70 7a67 	vsub.f32	s15, s0, s15
   d7d5a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   d7d5e:	e7da      	b.n	d7d16 <__ieee754_logf+0x11a>
   d7d60:	eddf 6a24 	vldr	s13, [pc, #144]	; d7df4 <__ieee754_logf+0x1f8>
   d7d64:	ed9f 6a24 	vldr	s12, [pc, #144]	; d7df8 <__ieee754_logf+0x1fc>
   d7d68:	ee77 7a87 	vadd.f32	s15, s15, s14
   d7d6c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   d7d70:	eee7 6a84 	vfma.f32	s13, s15, s8
   d7d74:	ee37 7a66 	vsub.f32	s14, s14, s13
   d7d78:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7d7c:	ee92 0a86 	vfnms.f32	s0, s5, s12
   d7d80:	e7c9      	b.n	d7d16 <__ieee754_logf+0x11a>
   d7d82:	ee07 3a90 	vmov	s15, r3
   d7d86:	ed9f 0a1b 	vldr	s0, [pc, #108]	; d7df4 <__ieee754_logf+0x1f8>
   d7d8a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d7df8 <__ieee754_logf+0x1fc>
   d7d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d92:	ee27 0a80 	vmul.f32	s0, s15, s0
   d7d96:	eea7 0a87 	vfma.f32	s0, s15, s14
   d7d9a:	e7bc      	b.n	d7d16 <__ieee754_logf+0x11a>
   d7d9c:	ed9f 7a15 	vldr	s14, [pc, #84]	; d7df4 <__ieee754_logf+0x1f8>
   d7da0:	eddf 6a15 	vldr	s13, [pc, #84]	; d7df8 <__ieee754_logf+0x1fc>
   d7da4:	ee70 7a67 	vsub.f32	s15, s0, s15
   d7da8:	ee27 7a62 	vnmul.f32	s14, s14, s5
   d7dac:	eea7 7a84 	vfma.f32	s14, s15, s8
   d7db0:	ee37 0a40 	vsub.f32	s0, s14, s0
   d7db4:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   d7db8:	e7ad      	b.n	d7d16 <__ieee754_logf+0x11a>
   d7dba:	bf00      	nop
   d7dbc:	004afb20 	.word	0x004afb20
   d7dc0:	007ffff0 	.word	0x007ffff0
   d7dc4:	00000000 	.word	0x00000000
   d7dc8:	cc000000 	.word	0xcc000000
   d7dcc:	4c000000 	.word	0x4c000000
   d7dd0:	3e178897 	.word	0x3e178897
   d7dd4:	3e3a3325 	.word	0x3e3a3325
   d7dd8:	3e924925 	.word	0x3e924925
   d7ddc:	3e1cd04f 	.word	0x3e1cd04f
   d7de0:	3e638e29 	.word	0x3e638e29
   d7de4:	3f2aaaab 	.word	0x3f2aaaab
   d7de8:	3ecccccd 	.word	0x3ecccccd
   d7dec:	ffcf5c30 	.word	0xffcf5c30
   d7df0:	3eaaaaab 	.word	0x3eaaaaab
   d7df4:	3717f7d1 	.word	0x3717f7d1
   d7df8:	3f317180 	.word	0x3f317180

000d7dfc <fabs>:
   d7dfc:	ec51 0b10 	vmov	r0, r1, d0
   d7e00:	ee10 2a10 	vmov	r2, s0
   d7e04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7e08:	ec43 2b10 	vmov	d0, r2, r3
   d7e0c:	4770      	bx	lr
   d7e0e:	bf00      	nop

000d7e10 <finite>:
   d7e10:	b082      	sub	sp, #8
   d7e12:	ed8d 0b00 	vstr	d0, [sp]
   d7e16:	9801      	ldr	r0, [sp, #4]
   d7e18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d7e1c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d7e20:	0fc0      	lsrs	r0, r0, #31
   d7e22:	b002      	add	sp, #8
   d7e24:	4770      	bx	lr
   d7e26:	bf00      	nop

000d7e28 <matherr>:
   d7e28:	2000      	movs	r0, #0
   d7e2a:	4770      	bx	lr
   d7e2c:	0000      	movs	r0, r0
	...

000d7e30 <nan>:
   d7e30:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7e38 <nan+0x8>
   d7e34:	4770      	bx	lr
   d7e36:	bf00      	nop
   d7e38:	00000000 	.word	0x00000000
   d7e3c:	7ff80000 	.word	0x7ff80000

000d7e40 <rint>:
   d7e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e42:	ec53 2b10 	vmov	r2, r3, d0
   d7e46:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d7e4a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d7e4e:	2813      	cmp	r0, #19
   d7e50:	ee10 5a10 	vmov	r5, s0
   d7e54:	b083      	sub	sp, #12
   d7e56:	4619      	mov	r1, r3
   d7e58:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d7e5c:	dc31      	bgt.n	d7ec2 <rint+0x82>
   d7e5e:	2800      	cmp	r0, #0
   d7e60:	db4c      	blt.n	d7efc <rint+0xbc>
   d7e62:	4e3e      	ldr	r6, [pc, #248]	; (d7f5c <rint+0x11c>)
   d7e64:	4106      	asrs	r6, r0
   d7e66:	ea03 0706 	and.w	r7, r3, r6
   d7e6a:	4317      	orrs	r7, r2
   d7e6c:	d02e      	beq.n	d7ecc <rint+0x8c>
   d7e6e:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d7e72:	431d      	orrs	r5, r3
   d7e74:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d7e78:	d00c      	beq.n	d7e94 <rint+0x54>
   d7e7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d7e7e:	2813      	cmp	r0, #19
   d7e80:	ea21 0606 	bic.w	r6, r1, r6
   d7e84:	fa43 f100 	asr.w	r1, r3, r0
   d7e88:	ea41 0106 	orr.w	r1, r1, r6
   d7e8c:	bf0c      	ite	eq
   d7e8e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d7e92:	2500      	movne	r5, #0
   d7e94:	4832      	ldr	r0, [pc, #200]	; (d7f60 <rint+0x120>)
   d7e96:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d7e9a:	462a      	mov	r2, r5
   d7e9c:	e9d4 4500 	ldrd	r4, r5, [r4]
   d7ea0:	460b      	mov	r3, r1
   d7ea2:	4620      	mov	r0, r4
   d7ea4:	4629      	mov	r1, r5
   d7ea6:	f000 f8f7 	bl	d8098 <__adddf3>
   d7eaa:	e9cd 0100 	strd	r0, r1, [sp]
   d7eae:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7eb2:	4622      	mov	r2, r4
   d7eb4:	462b      	mov	r3, r5
   d7eb6:	f000 f8ed 	bl	d8094 <__aeabi_dsub>
   d7eba:	ec41 0b10 	vmov	d0, r0, r1
   d7ebe:	b003      	add	sp, #12
   d7ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ec2:	2833      	cmp	r0, #51	; 0x33
   d7ec4:	dd06      	ble.n	d7ed4 <rint+0x94>
   d7ec6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7eca:	d040      	beq.n	d7f4e <rint+0x10e>
   d7ecc:	ec43 2b10 	vmov	d0, r2, r3
   d7ed0:	b003      	add	sp, #12
   d7ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ed4:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7ed8:	f04f 30ff 	mov.w	r0, #4294967295
   d7edc:	40f0      	lsrs	r0, r6
   d7ede:	4202      	tst	r2, r0
   d7ee0:	d0f4      	beq.n	d7ecc <rint+0x8c>
   d7ee2:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d7ee6:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7eea:	d0d3      	beq.n	d7e94 <rint+0x54>
   d7eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d7ef0:	ea25 0503 	bic.w	r5, r5, r3
   d7ef4:	fa42 f606 	asr.w	r6, r2, r6
   d7ef8:	4335      	orrs	r5, r6
   d7efa:	e7cb      	b.n	d7e94 <rint+0x54>
   d7efc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7f00:	4310      	orrs	r0, r2
   d7f02:	d0e3      	beq.n	d7ecc <rint+0x8c>
   d7f04:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d7f08:	4310      	orrs	r0, r2
   d7f0a:	4245      	negs	r5, r0
   d7f0c:	4305      	orrs	r5, r0
   d7f0e:	4814      	ldr	r0, [pc, #80]	; (d7f60 <rint+0x120>)
   d7f10:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d7f14:	e9d0 6700 	ldrd	r6, r7, [r0]
   d7f18:	0c59      	lsrs	r1, r3, #17
   d7f1a:	0b2d      	lsrs	r5, r5, #12
   d7f1c:	0449      	lsls	r1, r1, #17
   d7f1e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d7f22:	ea45 0301 	orr.w	r3, r5, r1
   d7f26:	4630      	mov	r0, r6
   d7f28:	4639      	mov	r1, r7
   d7f2a:	f000 f8b5 	bl	d8098 <__adddf3>
   d7f2e:	e9cd 0100 	strd	r0, r1, [sp]
   d7f32:	463b      	mov	r3, r7
   d7f34:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7f38:	4632      	mov	r2, r6
   d7f3a:	f000 f8ab 	bl	d8094 <__aeabi_dsub>
   d7f3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7f42:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d7f46:	ec41 0b10 	vmov	d0, r0, r1
   d7f4a:	b003      	add	sp, #12
   d7f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f4e:	ee10 0a10 	vmov	r0, s0
   d7f52:	f000 f8a1 	bl	d8098 <__adddf3>
   d7f56:	ec41 0b10 	vmov	d0, r0, r1
   d7f5a:	e7b9      	b.n	d7ed0 <rint+0x90>
   d7f5c:	000fffff 	.word	0x000fffff
   d7f60:	000d8fe0 	.word	0x000d8fe0
   d7f64:	00000000 	.word	0x00000000

000d7f68 <scalbn>:
   d7f68:	b538      	push	{r3, r4, r5, lr}
   d7f6a:	ec53 2b10 	vmov	r2, r3, d0
   d7f6e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d7f72:	461c      	mov	r4, r3
   d7f74:	4605      	mov	r5, r0
   d7f76:	bb81      	cbnz	r1, d7fda <scalbn+0x72>
   d7f78:	ee10 1a10 	vmov	r1, s0
   d7f7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d7f80:	4321      	orrs	r1, r4
   d7f82:	d029      	beq.n	d7fd8 <scalbn+0x70>
   d7f84:	4619      	mov	r1, r3
   d7f86:	2200      	movs	r2, #0
   d7f88:	4b3d      	ldr	r3, [pc, #244]	; (d8080 <scalbn+0x118>)
   d7f8a:	4c3e      	ldr	r4, [pc, #248]	; (d8084 <scalbn+0x11c>)
   d7f8c:	ee10 0a10 	vmov	r0, s0
   d7f90:	f000 fa38 	bl	d8404 <__aeabi_dmul>
   d7f94:	42a5      	cmp	r5, r4
   d7f96:	4602      	mov	r2, r0
   d7f98:	460b      	mov	r3, r1
   d7f9a:	db16      	blt.n	d7fca <scalbn+0x62>
   d7f9c:	460c      	mov	r4, r1
   d7f9e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d7fa2:	3936      	subs	r1, #54	; 0x36
   d7fa4:	4429      	add	r1, r5
   d7fa6:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7faa:	4281      	cmp	r1, r0
   d7fac:	dc21      	bgt.n	d7ff2 <scalbn+0x8a>
   d7fae:	2900      	cmp	r1, #0
   d7fb0:	dc47      	bgt.n	d8042 <scalbn+0xda>
   d7fb2:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d7fb6:	da34      	bge.n	d8022 <scalbn+0xba>
   d7fb8:	f24c 3150 	movw	r1, #50000	; 0xc350
   d7fbc:	428d      	cmp	r5, r1
   d7fbe:	dc18      	bgt.n	d7ff2 <scalbn+0x8a>
   d7fc0:	2b00      	cmp	r3, #0
   d7fc2:	a127      	add	r1, pc, #156	; (adr r1, d8060 <scalbn+0xf8>)
   d7fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7fc8:	db44      	blt.n	d8054 <scalbn+0xec>
   d7fca:	a325      	add	r3, pc, #148	; (adr r3, d8060 <scalbn+0xf8>)
   d7fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd0:	f000 fa18 	bl	d8404 <__aeabi_dmul>
   d7fd4:	ec41 0b10 	vmov	d0, r0, r1
   d7fd8:	bd38      	pop	{r3, r4, r5, pc}
   d7fda:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7fde:	4281      	cmp	r1, r0
   d7fe0:	d1e0      	bne.n	d7fa4 <scalbn+0x3c>
   d7fe2:	ee10 0a10 	vmov	r0, s0
   d7fe6:	4619      	mov	r1, r3
   d7fe8:	f000 f856 	bl	d8098 <__adddf3>
   d7fec:	ec41 0b10 	vmov	d0, r0, r1
   d7ff0:	bd38      	pop	{r3, r4, r5, pc}
   d7ff2:	2b00      	cmp	r3, #0
   d7ff4:	a11c      	add	r1, pc, #112	; (adr r1, d8068 <scalbn+0x100>)
   d7ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7ffa:	db07      	blt.n	d800c <scalbn+0xa4>
   d7ffc:	a31a      	add	r3, pc, #104	; (adr r3, d8068 <scalbn+0x100>)
   d7ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8002:	f000 f9ff 	bl	d8404 <__aeabi_dmul>
   d8006:	ec41 0b10 	vmov	d0, r0, r1
   d800a:	bd38      	pop	{r3, r4, r5, pc}
   d800c:	a118      	add	r1, pc, #96	; (adr r1, d8070 <scalbn+0x108>)
   d800e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8012:	a315      	add	r3, pc, #84	; (adr r3, d8068 <scalbn+0x100>)
   d8014:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8018:	f000 f9f4 	bl	d8404 <__aeabi_dmul>
   d801c:	ec41 0b10 	vmov	d0, r0, r1
   d8020:	e7f3      	b.n	d800a <scalbn+0xa2>
   d8022:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8026:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d802a:	3136      	adds	r1, #54	; 0x36
   d802c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8030:	4610      	mov	r0, r2
   d8032:	4619      	mov	r1, r3
   d8034:	2200      	movs	r2, #0
   d8036:	4b14      	ldr	r3, [pc, #80]	; (d8088 <scalbn+0x120>)
   d8038:	f000 f9e4 	bl	d8404 <__aeabi_dmul>
   d803c:	ec41 0b10 	vmov	d0, r0, r1
   d8040:	bd38      	pop	{r3, r4, r5, pc}
   d8042:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8046:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d804a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d804e:	ec43 2b10 	vmov	d0, r2, r3
   d8052:	bd38      	pop	{r3, r4, r5, pc}
   d8054:	a108      	add	r1, pc, #32	; (adr r1, d8078 <scalbn+0x110>)
   d8056:	e9d1 0100 	ldrd	r0, r1, [r1]
   d805a:	e7b6      	b.n	d7fca <scalbn+0x62>
   d805c:	f3af 8000 	nop.w
   d8060:	c2f8f359 	.word	0xc2f8f359
   d8064:	01a56e1f 	.word	0x01a56e1f
   d8068:	8800759c 	.word	0x8800759c
   d806c:	7e37e43c 	.word	0x7e37e43c
   d8070:	8800759c 	.word	0x8800759c
   d8074:	fe37e43c 	.word	0xfe37e43c
   d8078:	c2f8f359 	.word	0xc2f8f359
   d807c:	81a56e1f 	.word	0x81a56e1f
   d8080:	43500000 	.word	0x43500000
   d8084:	ffff3cb0 	.word	0xffff3cb0
   d8088:	3c900000 	.word	0x3c900000

000d808c <__aeabi_drsub>:
   d808c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8090:	e002      	b.n	d8098 <__adddf3>
   d8092:	bf00      	nop

000d8094 <__aeabi_dsub>:
   d8094:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8098 <__adddf3>:
   d8098:	b530      	push	{r4, r5, lr}
   d809a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d809e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d80a2:	ea94 0f05 	teq	r4, r5
   d80a6:	bf08      	it	eq
   d80a8:	ea90 0f02 	teqeq	r0, r2
   d80ac:	bf1f      	itttt	ne
   d80ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d80b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d80b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d80ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d80be:	f000 80e2 	beq.w	d8286 <__adddf3+0x1ee>
   d80c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d80c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d80ca:	bfb8      	it	lt
   d80cc:	426d      	neglt	r5, r5
   d80ce:	dd0c      	ble.n	d80ea <__adddf3+0x52>
   d80d0:	442c      	add	r4, r5
   d80d2:	ea80 0202 	eor.w	r2, r0, r2
   d80d6:	ea81 0303 	eor.w	r3, r1, r3
   d80da:	ea82 0000 	eor.w	r0, r2, r0
   d80de:	ea83 0101 	eor.w	r1, r3, r1
   d80e2:	ea80 0202 	eor.w	r2, r0, r2
   d80e6:	ea81 0303 	eor.w	r3, r1, r3
   d80ea:	2d36      	cmp	r5, #54	; 0x36
   d80ec:	bf88      	it	hi
   d80ee:	bd30      	pophi	{r4, r5, pc}
   d80f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d80f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d80f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d80fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8100:	d002      	beq.n	d8108 <__adddf3+0x70>
   d8102:	4240      	negs	r0, r0
   d8104:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8108:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d810c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8110:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8114:	d002      	beq.n	d811c <__adddf3+0x84>
   d8116:	4252      	negs	r2, r2
   d8118:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d811c:	ea94 0f05 	teq	r4, r5
   d8120:	f000 80a7 	beq.w	d8272 <__adddf3+0x1da>
   d8124:	f1a4 0401 	sub.w	r4, r4, #1
   d8128:	f1d5 0e20 	rsbs	lr, r5, #32
   d812c:	db0d      	blt.n	d814a <__adddf3+0xb2>
   d812e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8132:	fa22 f205 	lsr.w	r2, r2, r5
   d8136:	1880      	adds	r0, r0, r2
   d8138:	f141 0100 	adc.w	r1, r1, #0
   d813c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8140:	1880      	adds	r0, r0, r2
   d8142:	fa43 f305 	asr.w	r3, r3, r5
   d8146:	4159      	adcs	r1, r3
   d8148:	e00e      	b.n	d8168 <__adddf3+0xd0>
   d814a:	f1a5 0520 	sub.w	r5, r5, #32
   d814e:	f10e 0e20 	add.w	lr, lr, #32
   d8152:	2a01      	cmp	r2, #1
   d8154:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8158:	bf28      	it	cs
   d815a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d815e:	fa43 f305 	asr.w	r3, r3, r5
   d8162:	18c0      	adds	r0, r0, r3
   d8164:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d816c:	d507      	bpl.n	d817e <__adddf3+0xe6>
   d816e:	f04f 0e00 	mov.w	lr, #0
   d8172:	f1dc 0c00 	rsbs	ip, ip, #0
   d8176:	eb7e 0000 	sbcs.w	r0, lr, r0
   d817a:	eb6e 0101 	sbc.w	r1, lr, r1
   d817e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8182:	d31b      	bcc.n	d81bc <__adddf3+0x124>
   d8184:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8188:	d30c      	bcc.n	d81a4 <__adddf3+0x10c>
   d818a:	0849      	lsrs	r1, r1, #1
   d818c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8190:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8194:	f104 0401 	add.w	r4, r4, #1
   d8198:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d819c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d81a0:	f080 809a 	bcs.w	d82d8 <__adddf3+0x240>
   d81a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d81a8:	bf08      	it	eq
   d81aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d81ae:	f150 0000 	adcs.w	r0, r0, #0
   d81b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d81b6:	ea41 0105 	orr.w	r1, r1, r5
   d81ba:	bd30      	pop	{r4, r5, pc}
   d81bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d81c0:	4140      	adcs	r0, r0
   d81c2:	eb41 0101 	adc.w	r1, r1, r1
   d81c6:	3c01      	subs	r4, #1
   d81c8:	bf28      	it	cs
   d81ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d81ce:	d2e9      	bcs.n	d81a4 <__adddf3+0x10c>
   d81d0:	f091 0f00 	teq	r1, #0
   d81d4:	bf04      	itt	eq
   d81d6:	4601      	moveq	r1, r0
   d81d8:	2000      	moveq	r0, #0
   d81da:	fab1 f381 	clz	r3, r1
   d81de:	bf08      	it	eq
   d81e0:	3320      	addeq	r3, #32
   d81e2:	f1a3 030b 	sub.w	r3, r3, #11
   d81e6:	f1b3 0220 	subs.w	r2, r3, #32
   d81ea:	da0c      	bge.n	d8206 <__adddf3+0x16e>
   d81ec:	320c      	adds	r2, #12
   d81ee:	dd08      	ble.n	d8202 <__adddf3+0x16a>
   d81f0:	f102 0c14 	add.w	ip, r2, #20
   d81f4:	f1c2 020c 	rsb	r2, r2, #12
   d81f8:	fa01 f00c 	lsl.w	r0, r1, ip
   d81fc:	fa21 f102 	lsr.w	r1, r1, r2
   d8200:	e00c      	b.n	d821c <__adddf3+0x184>
   d8202:	f102 0214 	add.w	r2, r2, #20
   d8206:	bfd8      	it	le
   d8208:	f1c2 0c20 	rsble	ip, r2, #32
   d820c:	fa01 f102 	lsl.w	r1, r1, r2
   d8210:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8214:	bfdc      	itt	le
   d8216:	ea41 010c 	orrle.w	r1, r1, ip
   d821a:	4090      	lslle	r0, r2
   d821c:	1ae4      	subs	r4, r4, r3
   d821e:	bfa2      	ittt	ge
   d8220:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8224:	4329      	orrge	r1, r5
   d8226:	bd30      	popge	{r4, r5, pc}
   d8228:	ea6f 0404 	mvn.w	r4, r4
   d822c:	3c1f      	subs	r4, #31
   d822e:	da1c      	bge.n	d826a <__adddf3+0x1d2>
   d8230:	340c      	adds	r4, #12
   d8232:	dc0e      	bgt.n	d8252 <__adddf3+0x1ba>
   d8234:	f104 0414 	add.w	r4, r4, #20
   d8238:	f1c4 0220 	rsb	r2, r4, #32
   d823c:	fa20 f004 	lsr.w	r0, r0, r4
   d8240:	fa01 f302 	lsl.w	r3, r1, r2
   d8244:	ea40 0003 	orr.w	r0, r0, r3
   d8248:	fa21 f304 	lsr.w	r3, r1, r4
   d824c:	ea45 0103 	orr.w	r1, r5, r3
   d8250:	bd30      	pop	{r4, r5, pc}
   d8252:	f1c4 040c 	rsb	r4, r4, #12
   d8256:	f1c4 0220 	rsb	r2, r4, #32
   d825a:	fa20 f002 	lsr.w	r0, r0, r2
   d825e:	fa01 f304 	lsl.w	r3, r1, r4
   d8262:	ea40 0003 	orr.w	r0, r0, r3
   d8266:	4629      	mov	r1, r5
   d8268:	bd30      	pop	{r4, r5, pc}
   d826a:	fa21 f004 	lsr.w	r0, r1, r4
   d826e:	4629      	mov	r1, r5
   d8270:	bd30      	pop	{r4, r5, pc}
   d8272:	f094 0f00 	teq	r4, #0
   d8276:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d827a:	bf06      	itte	eq
   d827c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8280:	3401      	addeq	r4, #1
   d8282:	3d01      	subne	r5, #1
   d8284:	e74e      	b.n	d8124 <__adddf3+0x8c>
   d8286:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d828a:	bf18      	it	ne
   d828c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8290:	d029      	beq.n	d82e6 <__adddf3+0x24e>
   d8292:	ea94 0f05 	teq	r4, r5
   d8296:	bf08      	it	eq
   d8298:	ea90 0f02 	teqeq	r0, r2
   d829c:	d005      	beq.n	d82aa <__adddf3+0x212>
   d829e:	ea54 0c00 	orrs.w	ip, r4, r0
   d82a2:	bf04      	itt	eq
   d82a4:	4619      	moveq	r1, r3
   d82a6:	4610      	moveq	r0, r2
   d82a8:	bd30      	pop	{r4, r5, pc}
   d82aa:	ea91 0f03 	teq	r1, r3
   d82ae:	bf1e      	ittt	ne
   d82b0:	2100      	movne	r1, #0
   d82b2:	2000      	movne	r0, #0
   d82b4:	bd30      	popne	{r4, r5, pc}
   d82b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d82ba:	d105      	bne.n	d82c8 <__adddf3+0x230>
   d82bc:	0040      	lsls	r0, r0, #1
   d82be:	4149      	adcs	r1, r1
   d82c0:	bf28      	it	cs
   d82c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d82c6:	bd30      	pop	{r4, r5, pc}
   d82c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d82cc:	bf3c      	itt	cc
   d82ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d82d2:	bd30      	popcc	{r4, r5, pc}
   d82d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d82d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d82dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d82e0:	f04f 0000 	mov.w	r0, #0
   d82e4:	bd30      	pop	{r4, r5, pc}
   d82e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d82ea:	bf1a      	itte	ne
   d82ec:	4619      	movne	r1, r3
   d82ee:	4610      	movne	r0, r2
   d82f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d82f4:	bf1c      	itt	ne
   d82f6:	460b      	movne	r3, r1
   d82f8:	4602      	movne	r2, r0
   d82fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d82fe:	bf06      	itte	eq
   d8300:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8304:	ea91 0f03 	teqeq	r1, r3
   d8308:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d830c:	bd30      	pop	{r4, r5, pc}
   d830e:	bf00      	nop

000d8310 <__aeabi_ui2d>:
   d8310:	f090 0f00 	teq	r0, #0
   d8314:	bf04      	itt	eq
   d8316:	2100      	moveq	r1, #0
   d8318:	4770      	bxeq	lr
   d831a:	b530      	push	{r4, r5, lr}
   d831c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8320:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8324:	f04f 0500 	mov.w	r5, #0
   d8328:	f04f 0100 	mov.w	r1, #0
   d832c:	e750      	b.n	d81d0 <__adddf3+0x138>
   d832e:	bf00      	nop

000d8330 <__aeabi_i2d>:
   d8330:	f090 0f00 	teq	r0, #0
   d8334:	bf04      	itt	eq
   d8336:	2100      	moveq	r1, #0
   d8338:	4770      	bxeq	lr
   d833a:	b530      	push	{r4, r5, lr}
   d833c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8340:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8344:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8348:	bf48      	it	mi
   d834a:	4240      	negmi	r0, r0
   d834c:	f04f 0100 	mov.w	r1, #0
   d8350:	e73e      	b.n	d81d0 <__adddf3+0x138>
   d8352:	bf00      	nop

000d8354 <__aeabi_f2d>:
   d8354:	0042      	lsls	r2, r0, #1
   d8356:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d835a:	ea4f 0131 	mov.w	r1, r1, rrx
   d835e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8362:	bf1f      	itttt	ne
   d8364:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8368:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d836c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8370:	4770      	bxne	lr
   d8372:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8376:	bf08      	it	eq
   d8378:	4770      	bxeq	lr
   d837a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d837e:	bf04      	itt	eq
   d8380:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8384:	4770      	bxeq	lr
   d8386:	b530      	push	{r4, r5, lr}
   d8388:	f44f 7460 	mov.w	r4, #896	; 0x380
   d838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8390:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8394:	e71c      	b.n	d81d0 <__adddf3+0x138>
   d8396:	bf00      	nop

000d8398 <__aeabi_ul2d>:
   d8398:	ea50 0201 	orrs.w	r2, r0, r1
   d839c:	bf08      	it	eq
   d839e:	4770      	bxeq	lr
   d83a0:	b530      	push	{r4, r5, lr}
   d83a2:	f04f 0500 	mov.w	r5, #0
   d83a6:	e00a      	b.n	d83be <__aeabi_l2d+0x16>

000d83a8 <__aeabi_l2d>:
   d83a8:	ea50 0201 	orrs.w	r2, r0, r1
   d83ac:	bf08      	it	eq
   d83ae:	4770      	bxeq	lr
   d83b0:	b530      	push	{r4, r5, lr}
   d83b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d83b6:	d502      	bpl.n	d83be <__aeabi_l2d+0x16>
   d83b8:	4240      	negs	r0, r0
   d83ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d83be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d83ca:	f43f aed8 	beq.w	d817e <__adddf3+0xe6>
   d83ce:	f04f 0203 	mov.w	r2, #3
   d83d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83d6:	bf18      	it	ne
   d83d8:	3203      	addne	r2, #3
   d83da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d83de:	bf18      	it	ne
   d83e0:	3203      	addne	r2, #3
   d83e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d83e6:	f1c2 0320 	rsb	r3, r2, #32
   d83ea:	fa00 fc03 	lsl.w	ip, r0, r3
   d83ee:	fa20 f002 	lsr.w	r0, r0, r2
   d83f2:	fa01 fe03 	lsl.w	lr, r1, r3
   d83f6:	ea40 000e 	orr.w	r0, r0, lr
   d83fa:	fa21 f102 	lsr.w	r1, r1, r2
   d83fe:	4414      	add	r4, r2
   d8400:	e6bd      	b.n	d817e <__adddf3+0xe6>
   d8402:	bf00      	nop

000d8404 <__aeabi_dmul>:
   d8404:	b570      	push	{r4, r5, r6, lr}
   d8406:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d840a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d840e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8412:	bf1d      	ittte	ne
   d8414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8418:	ea94 0f0c 	teqne	r4, ip
   d841c:	ea95 0f0c 	teqne	r5, ip
   d8420:	f000 f8de 	bleq	d85e0 <__aeabi_dmul+0x1dc>
   d8424:	442c      	add	r4, r5
   d8426:	ea81 0603 	eor.w	r6, r1, r3
   d842a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d842e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8432:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8436:	bf18      	it	ne
   d8438:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d843c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8444:	d038      	beq.n	d84b8 <__aeabi_dmul+0xb4>
   d8446:	fba0 ce02 	umull	ip, lr, r0, r2
   d844a:	f04f 0500 	mov.w	r5, #0
   d844e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8452:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8456:	fbe0 e503 	umlal	lr, r5, r0, r3
   d845a:	f04f 0600 	mov.w	r6, #0
   d845e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8462:	f09c 0f00 	teq	ip, #0
   d8466:	bf18      	it	ne
   d8468:	f04e 0e01 	orrne.w	lr, lr, #1
   d846c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8470:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8474:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8478:	d204      	bcs.n	d8484 <__aeabi_dmul+0x80>
   d847a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d847e:	416d      	adcs	r5, r5
   d8480:	eb46 0606 	adc.w	r6, r6, r6
   d8484:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8488:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d848c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8490:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8494:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8498:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d849c:	bf88      	it	hi
   d849e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d84a2:	d81e      	bhi.n	d84e2 <__aeabi_dmul+0xde>
   d84a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d84a8:	bf08      	it	eq
   d84aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d84ae:	f150 0000 	adcs.w	r0, r0, #0
   d84b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d84b6:	bd70      	pop	{r4, r5, r6, pc}
   d84b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d84bc:	ea46 0101 	orr.w	r1, r6, r1
   d84c0:	ea40 0002 	orr.w	r0, r0, r2
   d84c4:	ea81 0103 	eor.w	r1, r1, r3
   d84c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d84cc:	bfc2      	ittt	gt
   d84ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d84d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d84d6:	bd70      	popgt	{r4, r5, r6, pc}
   d84d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84dc:	f04f 0e00 	mov.w	lr, #0
   d84e0:	3c01      	subs	r4, #1
   d84e2:	f300 80ab 	bgt.w	d863c <__aeabi_dmul+0x238>
   d84e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d84ea:	bfde      	ittt	le
   d84ec:	2000      	movle	r0, #0
   d84ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d84f2:	bd70      	pople	{r4, r5, r6, pc}
   d84f4:	f1c4 0400 	rsb	r4, r4, #0
   d84f8:	3c20      	subs	r4, #32
   d84fa:	da35      	bge.n	d8568 <__aeabi_dmul+0x164>
   d84fc:	340c      	adds	r4, #12
   d84fe:	dc1b      	bgt.n	d8538 <__aeabi_dmul+0x134>
   d8500:	f104 0414 	add.w	r4, r4, #20
   d8504:	f1c4 0520 	rsb	r5, r4, #32
   d8508:	fa00 f305 	lsl.w	r3, r0, r5
   d850c:	fa20 f004 	lsr.w	r0, r0, r4
   d8510:	fa01 f205 	lsl.w	r2, r1, r5
   d8514:	ea40 0002 	orr.w	r0, r0, r2
   d8518:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d851c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8520:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8524:	fa21 f604 	lsr.w	r6, r1, r4
   d8528:	eb42 0106 	adc.w	r1, r2, r6
   d852c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8530:	bf08      	it	eq
   d8532:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8536:	bd70      	pop	{r4, r5, r6, pc}
   d8538:	f1c4 040c 	rsb	r4, r4, #12
   d853c:	f1c4 0520 	rsb	r5, r4, #32
   d8540:	fa00 f304 	lsl.w	r3, r0, r4
   d8544:	fa20 f005 	lsr.w	r0, r0, r5
   d8548:	fa01 f204 	lsl.w	r2, r1, r4
   d854c:	ea40 0002 	orr.w	r0, r0, r2
   d8550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8554:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8558:	f141 0100 	adc.w	r1, r1, #0
   d855c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8560:	bf08      	it	eq
   d8562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8566:	bd70      	pop	{r4, r5, r6, pc}
   d8568:	f1c4 0520 	rsb	r5, r4, #32
   d856c:	fa00 f205 	lsl.w	r2, r0, r5
   d8570:	ea4e 0e02 	orr.w	lr, lr, r2
   d8574:	fa20 f304 	lsr.w	r3, r0, r4
   d8578:	fa01 f205 	lsl.w	r2, r1, r5
   d857c:	ea43 0302 	orr.w	r3, r3, r2
   d8580:	fa21 f004 	lsr.w	r0, r1, r4
   d8584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8588:	fa21 f204 	lsr.w	r2, r1, r4
   d858c:	ea20 0002 	bic.w	r0, r0, r2
   d8590:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8594:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8598:	bf08      	it	eq
   d859a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d859e:	bd70      	pop	{r4, r5, r6, pc}
   d85a0:	f094 0f00 	teq	r4, #0
   d85a4:	d10f      	bne.n	d85c6 <__aeabi_dmul+0x1c2>
   d85a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d85aa:	0040      	lsls	r0, r0, #1
   d85ac:	eb41 0101 	adc.w	r1, r1, r1
   d85b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d85b4:	bf08      	it	eq
   d85b6:	3c01      	subeq	r4, #1
   d85b8:	d0f7      	beq.n	d85aa <__aeabi_dmul+0x1a6>
   d85ba:	ea41 0106 	orr.w	r1, r1, r6
   d85be:	f095 0f00 	teq	r5, #0
   d85c2:	bf18      	it	ne
   d85c4:	4770      	bxne	lr
   d85c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d85ca:	0052      	lsls	r2, r2, #1
   d85cc:	eb43 0303 	adc.w	r3, r3, r3
   d85d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d85d4:	bf08      	it	eq
   d85d6:	3d01      	subeq	r5, #1
   d85d8:	d0f7      	beq.n	d85ca <__aeabi_dmul+0x1c6>
   d85da:	ea43 0306 	orr.w	r3, r3, r6
   d85de:	4770      	bx	lr
   d85e0:	ea94 0f0c 	teq	r4, ip
   d85e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85e8:	bf18      	it	ne
   d85ea:	ea95 0f0c 	teqne	r5, ip
   d85ee:	d00c      	beq.n	d860a <__aeabi_dmul+0x206>
   d85f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d85f4:	bf18      	it	ne
   d85f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d85fa:	d1d1      	bne.n	d85a0 <__aeabi_dmul+0x19c>
   d85fc:	ea81 0103 	eor.w	r1, r1, r3
   d8600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8604:	f04f 0000 	mov.w	r0, #0
   d8608:	bd70      	pop	{r4, r5, r6, pc}
   d860a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d860e:	bf06      	itte	eq
   d8610:	4610      	moveq	r0, r2
   d8612:	4619      	moveq	r1, r3
   d8614:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8618:	d019      	beq.n	d864e <__aeabi_dmul+0x24a>
   d861a:	ea94 0f0c 	teq	r4, ip
   d861e:	d102      	bne.n	d8626 <__aeabi_dmul+0x222>
   d8620:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8624:	d113      	bne.n	d864e <__aeabi_dmul+0x24a>
   d8626:	ea95 0f0c 	teq	r5, ip
   d862a:	d105      	bne.n	d8638 <__aeabi_dmul+0x234>
   d862c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8630:	bf1c      	itt	ne
   d8632:	4610      	movne	r0, r2
   d8634:	4619      	movne	r1, r3
   d8636:	d10a      	bne.n	d864e <__aeabi_dmul+0x24a>
   d8638:	ea81 0103 	eor.w	r1, r1, r3
   d863c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8640:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8648:	f04f 0000 	mov.w	r0, #0
   d864c:	bd70      	pop	{r4, r5, r6, pc}
   d864e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8652:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8656:	bd70      	pop	{r4, r5, r6, pc}

000d8658 <__aeabi_ddiv>:
   d8658:	b570      	push	{r4, r5, r6, lr}
   d865a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d865e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8666:	bf1d      	ittte	ne
   d8668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d866c:	ea94 0f0c 	teqne	r4, ip
   d8670:	ea95 0f0c 	teqne	r5, ip
   d8674:	f000 f8a7 	bleq	d87c6 <__aeabi_ddiv+0x16e>
   d8678:	eba4 0405 	sub.w	r4, r4, r5
   d867c:	ea81 0e03 	eor.w	lr, r1, r3
   d8680:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8684:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8688:	f000 8088 	beq.w	d879c <__aeabi_ddiv+0x144>
   d868c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8690:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8694:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8698:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d869c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d86a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d86a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d86a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d86ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d86b0:	429d      	cmp	r5, r3
   d86b2:	bf08      	it	eq
   d86b4:	4296      	cmpeq	r6, r2
   d86b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d86ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d86be:	d202      	bcs.n	d86c6 <__aeabi_ddiv+0x6e>
   d86c0:	085b      	lsrs	r3, r3, #1
   d86c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d86c6:	1ab6      	subs	r6, r6, r2
   d86c8:	eb65 0503 	sbc.w	r5, r5, r3
   d86cc:	085b      	lsrs	r3, r3, #1
   d86ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d86d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d86d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d86da:	ebb6 0e02 	subs.w	lr, r6, r2
   d86de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86e2:	bf22      	ittt	cs
   d86e4:	1ab6      	subcs	r6, r6, r2
   d86e6:	4675      	movcs	r5, lr
   d86e8:	ea40 000c 	orrcs.w	r0, r0, ip
   d86ec:	085b      	lsrs	r3, r3, #1
   d86ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d86f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d86f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86fa:	bf22      	ittt	cs
   d86fc:	1ab6      	subcs	r6, r6, r2
   d86fe:	4675      	movcs	r5, lr
   d8700:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8704:	085b      	lsrs	r3, r3, #1
   d8706:	ea4f 0232 	mov.w	r2, r2, rrx
   d870a:	ebb6 0e02 	subs.w	lr, r6, r2
   d870e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8712:	bf22      	ittt	cs
   d8714:	1ab6      	subcs	r6, r6, r2
   d8716:	4675      	movcs	r5, lr
   d8718:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d871c:	085b      	lsrs	r3, r3, #1
   d871e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8722:	ebb6 0e02 	subs.w	lr, r6, r2
   d8726:	eb75 0e03 	sbcs.w	lr, r5, r3
   d872a:	bf22      	ittt	cs
   d872c:	1ab6      	subcs	r6, r6, r2
   d872e:	4675      	movcs	r5, lr
   d8730:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8734:	ea55 0e06 	orrs.w	lr, r5, r6
   d8738:	d018      	beq.n	d876c <__aeabi_ddiv+0x114>
   d873a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d873e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8742:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8746:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d874a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d874e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8752:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8756:	d1c0      	bne.n	d86da <__aeabi_ddiv+0x82>
   d8758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d875c:	d10b      	bne.n	d8776 <__aeabi_ddiv+0x11e>
   d875e:	ea41 0100 	orr.w	r1, r1, r0
   d8762:	f04f 0000 	mov.w	r0, #0
   d8766:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d876a:	e7b6      	b.n	d86da <__aeabi_ddiv+0x82>
   d876c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8770:	bf04      	itt	eq
   d8772:	4301      	orreq	r1, r0
   d8774:	2000      	moveq	r0, #0
   d8776:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d877a:	bf88      	it	hi
   d877c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8780:	f63f aeaf 	bhi.w	d84e2 <__aeabi_dmul+0xde>
   d8784:	ebb5 0c03 	subs.w	ip, r5, r3
   d8788:	bf04      	itt	eq
   d878a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d878e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8792:	f150 0000 	adcs.w	r0, r0, #0
   d8796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d879a:	bd70      	pop	{r4, r5, r6, pc}
   d879c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d87a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d87a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d87a8:	bfc2      	ittt	gt
   d87aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d87ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d87b2:	bd70      	popgt	{r4, r5, r6, pc}
   d87b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87b8:	f04f 0e00 	mov.w	lr, #0
   d87bc:	3c01      	subs	r4, #1
   d87be:	e690      	b.n	d84e2 <__aeabi_dmul+0xde>
   d87c0:	ea45 0e06 	orr.w	lr, r5, r6
   d87c4:	e68d      	b.n	d84e2 <__aeabi_dmul+0xde>
   d87c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d87ca:	ea94 0f0c 	teq	r4, ip
   d87ce:	bf08      	it	eq
   d87d0:	ea95 0f0c 	teqeq	r5, ip
   d87d4:	f43f af3b 	beq.w	d864e <__aeabi_dmul+0x24a>
   d87d8:	ea94 0f0c 	teq	r4, ip
   d87dc:	d10a      	bne.n	d87f4 <__aeabi_ddiv+0x19c>
   d87de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d87e2:	f47f af34 	bne.w	d864e <__aeabi_dmul+0x24a>
   d87e6:	ea95 0f0c 	teq	r5, ip
   d87ea:	f47f af25 	bne.w	d8638 <__aeabi_dmul+0x234>
   d87ee:	4610      	mov	r0, r2
   d87f0:	4619      	mov	r1, r3
   d87f2:	e72c      	b.n	d864e <__aeabi_dmul+0x24a>
   d87f4:	ea95 0f0c 	teq	r5, ip
   d87f8:	d106      	bne.n	d8808 <__aeabi_ddiv+0x1b0>
   d87fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d87fe:	f43f aefd 	beq.w	d85fc <__aeabi_dmul+0x1f8>
   d8802:	4610      	mov	r0, r2
   d8804:	4619      	mov	r1, r3
   d8806:	e722      	b.n	d864e <__aeabi_dmul+0x24a>
   d8808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d880c:	bf18      	it	ne
   d880e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8812:	f47f aec5 	bne.w	d85a0 <__aeabi_dmul+0x19c>
   d8816:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d881a:	f47f af0d 	bne.w	d8638 <__aeabi_dmul+0x234>
   d881e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8822:	f47f aeeb 	bne.w	d85fc <__aeabi_dmul+0x1f8>
   d8826:	e712      	b.n	d864e <__aeabi_dmul+0x24a>

000d8828 <__gedf2>:
   d8828:	f04f 3cff 	mov.w	ip, #4294967295
   d882c:	e006      	b.n	d883c <__cmpdf2+0x4>
   d882e:	bf00      	nop

000d8830 <__ledf2>:
   d8830:	f04f 0c01 	mov.w	ip, #1
   d8834:	e002      	b.n	d883c <__cmpdf2+0x4>
   d8836:	bf00      	nop

000d8838 <__cmpdf2>:
   d8838:	f04f 0c01 	mov.w	ip, #1
   d883c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d884c:	bf18      	it	ne
   d884e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8852:	d01b      	beq.n	d888c <__cmpdf2+0x54>
   d8854:	b001      	add	sp, #4
   d8856:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d885a:	bf0c      	ite	eq
   d885c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8860:	ea91 0f03 	teqne	r1, r3
   d8864:	bf02      	ittt	eq
   d8866:	ea90 0f02 	teqeq	r0, r2
   d886a:	2000      	moveq	r0, #0
   d886c:	4770      	bxeq	lr
   d886e:	f110 0f00 	cmn.w	r0, #0
   d8872:	ea91 0f03 	teq	r1, r3
   d8876:	bf58      	it	pl
   d8878:	4299      	cmppl	r1, r3
   d887a:	bf08      	it	eq
   d887c:	4290      	cmpeq	r0, r2
   d887e:	bf2c      	ite	cs
   d8880:	17d8      	asrcs	r0, r3, #31
   d8882:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8886:	f040 0001 	orr.w	r0, r0, #1
   d888a:	4770      	bx	lr
   d888c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8894:	d102      	bne.n	d889c <__cmpdf2+0x64>
   d8896:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d889a:	d107      	bne.n	d88ac <__cmpdf2+0x74>
   d889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88a4:	d1d6      	bne.n	d8854 <__cmpdf2+0x1c>
   d88a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d88aa:	d0d3      	beq.n	d8854 <__cmpdf2+0x1c>
   d88ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   d88b0:	4770      	bx	lr
   d88b2:	bf00      	nop

000d88b4 <__aeabi_cdrcmple>:
   d88b4:	4684      	mov	ip, r0
   d88b6:	4610      	mov	r0, r2
   d88b8:	4662      	mov	r2, ip
   d88ba:	468c      	mov	ip, r1
   d88bc:	4619      	mov	r1, r3
   d88be:	4663      	mov	r3, ip
   d88c0:	e000      	b.n	d88c4 <__aeabi_cdcmpeq>
   d88c2:	bf00      	nop

000d88c4 <__aeabi_cdcmpeq>:
   d88c4:	b501      	push	{r0, lr}
   d88c6:	f7ff ffb7 	bl	d8838 <__cmpdf2>
   d88ca:	2800      	cmp	r0, #0
   d88cc:	bf48      	it	mi
   d88ce:	f110 0f00 	cmnmi.w	r0, #0
   d88d2:	bd01      	pop	{r0, pc}

000d88d4 <__aeabi_dcmpeq>:
   d88d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88d8:	f7ff fff4 	bl	d88c4 <__aeabi_cdcmpeq>
   d88dc:	bf0c      	ite	eq
   d88de:	2001      	moveq	r0, #1
   d88e0:	2000      	movne	r0, #0
   d88e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d88e6:	bf00      	nop

000d88e8 <__aeabi_dcmplt>:
   d88e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88ec:	f7ff ffea 	bl	d88c4 <__aeabi_cdcmpeq>
   d88f0:	bf34      	ite	cc
   d88f2:	2001      	movcc	r0, #1
   d88f4:	2000      	movcs	r0, #0
   d88f6:	f85d fb08 	ldr.w	pc, [sp], #8
   d88fa:	bf00      	nop

000d88fc <__aeabi_dcmple>:
   d88fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8900:	f7ff ffe0 	bl	d88c4 <__aeabi_cdcmpeq>
   d8904:	bf94      	ite	ls
   d8906:	2001      	movls	r0, #1
   d8908:	2000      	movhi	r0, #0
   d890a:	f85d fb08 	ldr.w	pc, [sp], #8
   d890e:	bf00      	nop

000d8910 <__aeabi_dcmpge>:
   d8910:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8914:	f7ff ffce 	bl	d88b4 <__aeabi_cdrcmple>
   d8918:	bf94      	ite	ls
   d891a:	2001      	movls	r0, #1
   d891c:	2000      	movhi	r0, #0
   d891e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8922:	bf00      	nop

000d8924 <__aeabi_dcmpgt>:
   d8924:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8928:	f7ff ffc4 	bl	d88b4 <__aeabi_cdrcmple>
   d892c:	bf34      	ite	cc
   d892e:	2001      	movcc	r0, #1
   d8930:	2000      	movcs	r0, #0
   d8932:	f85d fb08 	ldr.w	pc, [sp], #8
   d8936:	bf00      	nop

000d8938 <__aeabi_dcmpun>:
   d8938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d893c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8940:	d102      	bne.n	d8948 <__aeabi_dcmpun+0x10>
   d8942:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8946:	d10a      	bne.n	d895e <__aeabi_dcmpun+0x26>
   d8948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d894c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8950:	d102      	bne.n	d8958 <__aeabi_dcmpun+0x20>
   d8952:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8956:	d102      	bne.n	d895e <__aeabi_dcmpun+0x26>
   d8958:	f04f 0000 	mov.w	r0, #0
   d895c:	4770      	bx	lr
   d895e:	f04f 0001 	mov.w	r0, #1
   d8962:	4770      	bx	lr

000d8964 <__aeabi_d2iz>:
   d8964:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d896c:	d215      	bcs.n	d899a <__aeabi_d2iz+0x36>
   d896e:	d511      	bpl.n	d8994 <__aeabi_d2iz+0x30>
   d8970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8978:	d912      	bls.n	d89a0 <__aeabi_d2iz+0x3c>
   d897a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d897e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d898a:	fa23 f002 	lsr.w	r0, r3, r2
   d898e:	bf18      	it	ne
   d8990:	4240      	negne	r0, r0
   d8992:	4770      	bx	lr
   d8994:	f04f 0000 	mov.w	r0, #0
   d8998:	4770      	bx	lr
   d899a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d899e:	d105      	bne.n	d89ac <__aeabi_d2iz+0x48>
   d89a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d89a4:	bf08      	it	eq
   d89a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d89aa:	4770      	bx	lr
   d89ac:	f04f 0000 	mov.w	r0, #0
   d89b0:	4770      	bx	lr
   d89b2:	bf00      	nop

000d89b4 <__aeabi_d2f>:
   d89b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d89b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d89bc:	bf24      	itt	cs
   d89be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d89c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d89c6:	d90d      	bls.n	d89e4 <__aeabi_d2f+0x30>
   d89c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d89cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d89d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d89d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d89d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d89dc:	bf08      	it	eq
   d89de:	f020 0001 	biceq.w	r0, r0, #1
   d89e2:	4770      	bx	lr
   d89e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d89e8:	d121      	bne.n	d8a2e <__aeabi_d2f+0x7a>
   d89ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d89ee:	bfbc      	itt	lt
   d89f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d89f4:	4770      	bxlt	lr
   d89f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d89fe:	f1c2 0218 	rsb	r2, r2, #24
   d8a02:	f1c2 0c20 	rsb	ip, r2, #32
   d8a06:	fa10 f30c 	lsls.w	r3, r0, ip
   d8a0a:	fa20 f002 	lsr.w	r0, r0, r2
   d8a0e:	bf18      	it	ne
   d8a10:	f040 0001 	orrne.w	r0, r0, #1
   d8a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8a20:	ea40 000c 	orr.w	r0, r0, ip
   d8a24:	fa23 f302 	lsr.w	r3, r3, r2
   d8a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8a2c:	e7cc      	b.n	d89c8 <__aeabi_d2f+0x14>
   d8a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8a32:	d107      	bne.n	d8a44 <__aeabi_d2f+0x90>
   d8a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8a38:	bf1e      	ittt	ne
   d8a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8a42:	4770      	bxne	lr
   d8a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8a50:	4770      	bx	lr
   d8a52:	bf00      	nop

000d8a54 <atexit>:
   d8a54:	2300      	movs	r3, #0
   d8a56:	4601      	mov	r1, r0
   d8a58:	461a      	mov	r2, r3
   d8a5a:	4618      	mov	r0, r3
   d8a5c:	f000 b8f2 	b.w	d8c44 <__register_exitproc>

000d8a60 <memcpy>:
   d8a60:	440a      	add	r2, r1
   d8a62:	4291      	cmp	r1, r2
   d8a64:	f100 33ff 	add.w	r3, r0, #4294967295
   d8a68:	d100      	bne.n	d8a6c <memcpy+0xc>
   d8a6a:	4770      	bx	lr
   d8a6c:	b510      	push	{r4, lr}
   d8a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8a72:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8a76:	4291      	cmp	r1, r2
   d8a78:	d1f9      	bne.n	d8a6e <memcpy+0xe>
   d8a7a:	bd10      	pop	{r4, pc}

000d8a7c <memmove>:
   d8a7c:	4288      	cmp	r0, r1
   d8a7e:	b510      	push	{r4, lr}
   d8a80:	eb01 0402 	add.w	r4, r1, r2
   d8a84:	d902      	bls.n	d8a8c <memmove+0x10>
   d8a86:	4284      	cmp	r4, r0
   d8a88:	4623      	mov	r3, r4
   d8a8a:	d807      	bhi.n	d8a9c <memmove+0x20>
   d8a8c:	1e43      	subs	r3, r0, #1
   d8a8e:	42a1      	cmp	r1, r4
   d8a90:	d008      	beq.n	d8aa4 <memmove+0x28>
   d8a92:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8a96:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8a9a:	e7f8      	b.n	d8a8e <memmove+0x12>
   d8a9c:	4402      	add	r2, r0
   d8a9e:	4601      	mov	r1, r0
   d8aa0:	428a      	cmp	r2, r1
   d8aa2:	d100      	bne.n	d8aa6 <memmove+0x2a>
   d8aa4:	bd10      	pop	{r4, pc}
   d8aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8aae:	e7f7      	b.n	d8aa0 <memmove+0x24>

000d8ab0 <memset>:
   d8ab0:	4402      	add	r2, r0
   d8ab2:	4603      	mov	r3, r0
   d8ab4:	4293      	cmp	r3, r2
   d8ab6:	d100      	bne.n	d8aba <memset+0xa>
   d8ab8:	4770      	bx	lr
   d8aba:	f803 1b01 	strb.w	r1, [r3], #1
   d8abe:	e7f9      	b.n	d8ab4 <memset+0x4>

000d8ac0 <srand>:
   d8ac0:	b538      	push	{r3, r4, r5, lr}
   d8ac2:	4b0d      	ldr	r3, [pc, #52]	; (d8af8 <srand+0x38>)
   d8ac4:	681d      	ldr	r5, [r3, #0]
   d8ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8ac8:	4604      	mov	r4, r0
   d8aca:	b97b      	cbnz	r3, d8aec <srand+0x2c>
   d8acc:	2018      	movs	r0, #24
   d8ace:	f7fc fe7f 	bl	d57d0 <malloc>
   d8ad2:	4a0a      	ldr	r2, [pc, #40]	; (d8afc <srand+0x3c>)
   d8ad4:	4b0a      	ldr	r3, [pc, #40]	; (d8b00 <srand+0x40>)
   d8ad6:	63a8      	str	r0, [r5, #56]	; 0x38
   d8ad8:	e9c0 2300 	strd	r2, r3, [r0]
   d8adc:	4b09      	ldr	r3, [pc, #36]	; (d8b04 <srand+0x44>)
   d8ade:	6083      	str	r3, [r0, #8]
   d8ae0:	230b      	movs	r3, #11
   d8ae2:	8183      	strh	r3, [r0, #12]
   d8ae4:	2201      	movs	r2, #1
   d8ae6:	2300      	movs	r3, #0
   d8ae8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8aec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8aee:	2200      	movs	r2, #0
   d8af0:	611c      	str	r4, [r3, #16]
   d8af2:	615a      	str	r2, [r3, #20]
   d8af4:	bd38      	pop	{r3, r4, r5, pc}
   d8af6:	bf00      	nop
   d8af8:	2003e47c 	.word	0x2003e47c
   d8afc:	abcd330e 	.word	0xabcd330e
   d8b00:	e66d1234 	.word	0xe66d1234
   d8b04:	0005deec 	.word	0x0005deec

000d8b08 <strcmp>:
   d8b08:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8b10:	2a01      	cmp	r2, #1
   d8b12:	bf28      	it	cs
   d8b14:	429a      	cmpcs	r2, r3
   d8b16:	d0f7      	beq.n	d8b08 <strcmp>
   d8b18:	1ad0      	subs	r0, r2, r3
   d8b1a:	4770      	bx	lr

000d8b1c <strcpy>:
   d8b1c:	4603      	mov	r3, r0
   d8b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8b22:	f803 2b01 	strb.w	r2, [r3], #1
   d8b26:	2a00      	cmp	r2, #0
   d8b28:	d1f9      	bne.n	d8b1e <strcpy+0x2>
   d8b2a:	4770      	bx	lr

000d8b2c <strlen>:
   d8b2c:	4603      	mov	r3, r0
   d8b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8b32:	2a00      	cmp	r2, #0
   d8b34:	d1fb      	bne.n	d8b2e <strlen+0x2>
   d8b36:	1a18      	subs	r0, r3, r0
   d8b38:	3801      	subs	r0, #1
   d8b3a:	4770      	bx	lr

000d8b3c <_strtol_l.isra.0>:
   d8b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8b40:	4e3a      	ldr	r6, [pc, #232]	; (d8c2c <_strtol_l.isra.0+0xf0>)
   d8b42:	4686      	mov	lr, r0
   d8b44:	468c      	mov	ip, r1
   d8b46:	4660      	mov	r0, ip
   d8b48:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8b4c:	5da5      	ldrb	r5, [r4, r6]
   d8b4e:	f015 0508 	ands.w	r5, r5, #8
   d8b52:	d1f8      	bne.n	d8b46 <_strtol_l.isra.0+0xa>
   d8b54:	2c2d      	cmp	r4, #45	; 0x2d
   d8b56:	d133      	bne.n	d8bc0 <_strtol_l.isra.0+0x84>
   d8b58:	f89c 4000 	ldrb.w	r4, [ip]
   d8b5c:	f04f 0801 	mov.w	r8, #1
   d8b60:	f100 0c02 	add.w	ip, r0, #2
   d8b64:	2b00      	cmp	r3, #0
   d8b66:	d05c      	beq.n	d8c22 <_strtol_l.isra.0+0xe6>
   d8b68:	2b10      	cmp	r3, #16
   d8b6a:	d10c      	bne.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8b6c:	2c30      	cmp	r4, #48	; 0x30
   d8b6e:	d10a      	bne.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8b70:	f89c 0000 	ldrb.w	r0, [ip]
   d8b74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8b78:	2858      	cmp	r0, #88	; 0x58
   d8b7a:	d14d      	bne.n	d8c18 <_strtol_l.isra.0+0xdc>
   d8b7c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8b80:	2310      	movs	r3, #16
   d8b82:	f10c 0c02 	add.w	ip, ip, #2
   d8b86:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8b8a:	3f01      	subs	r7, #1
   d8b8c:	2600      	movs	r6, #0
   d8b8e:	fbb7 f9f3 	udiv	r9, r7, r3
   d8b92:	4630      	mov	r0, r6
   d8b94:	fb03 7a19 	mls	sl, r3, r9, r7
   d8b98:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8b9c:	2d09      	cmp	r5, #9
   d8b9e:	d818      	bhi.n	d8bd2 <_strtol_l.isra.0+0x96>
   d8ba0:	462c      	mov	r4, r5
   d8ba2:	42a3      	cmp	r3, r4
   d8ba4:	dd24      	ble.n	d8bf0 <_strtol_l.isra.0+0xb4>
   d8ba6:	1c75      	adds	r5, r6, #1
   d8ba8:	d007      	beq.n	d8bba <_strtol_l.isra.0+0x7e>
   d8baa:	4581      	cmp	r9, r0
   d8bac:	d31d      	bcc.n	d8bea <_strtol_l.isra.0+0xae>
   d8bae:	d101      	bne.n	d8bb4 <_strtol_l.isra.0+0x78>
   d8bb0:	45a2      	cmp	sl, r4
   d8bb2:	db1a      	blt.n	d8bea <_strtol_l.isra.0+0xae>
   d8bb4:	fb00 4003 	mla	r0, r0, r3, r4
   d8bb8:	2601      	movs	r6, #1
   d8bba:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8bbe:	e7eb      	b.n	d8b98 <_strtol_l.isra.0+0x5c>
   d8bc0:	2c2b      	cmp	r4, #43	; 0x2b
   d8bc2:	bf08      	it	eq
   d8bc4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8bc8:	46a8      	mov	r8, r5
   d8bca:	bf08      	it	eq
   d8bcc:	f100 0c02 	addeq.w	ip, r0, #2
   d8bd0:	e7c8      	b.n	d8b64 <_strtol_l.isra.0+0x28>
   d8bd2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8bd6:	2d19      	cmp	r5, #25
   d8bd8:	d801      	bhi.n	d8bde <_strtol_l.isra.0+0xa2>
   d8bda:	3c37      	subs	r4, #55	; 0x37
   d8bdc:	e7e1      	b.n	d8ba2 <_strtol_l.isra.0+0x66>
   d8bde:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8be2:	2d19      	cmp	r5, #25
   d8be4:	d804      	bhi.n	d8bf0 <_strtol_l.isra.0+0xb4>
   d8be6:	3c57      	subs	r4, #87	; 0x57
   d8be8:	e7db      	b.n	d8ba2 <_strtol_l.isra.0+0x66>
   d8bea:	f04f 36ff 	mov.w	r6, #4294967295
   d8bee:	e7e4      	b.n	d8bba <_strtol_l.isra.0+0x7e>
   d8bf0:	1c73      	adds	r3, r6, #1
   d8bf2:	d106      	bne.n	d8c02 <_strtol_l.isra.0+0xc6>
   d8bf4:	2322      	movs	r3, #34	; 0x22
   d8bf6:	f8ce 3000 	str.w	r3, [lr]
   d8bfa:	4638      	mov	r0, r7
   d8bfc:	b942      	cbnz	r2, d8c10 <_strtol_l.isra.0+0xd4>
   d8bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c02:	f1b8 0f00 	cmp.w	r8, #0
   d8c06:	d000      	beq.n	d8c0a <_strtol_l.isra.0+0xce>
   d8c08:	4240      	negs	r0, r0
   d8c0a:	2a00      	cmp	r2, #0
   d8c0c:	d0f7      	beq.n	d8bfe <_strtol_l.isra.0+0xc2>
   d8c0e:	b10e      	cbz	r6, d8c14 <_strtol_l.isra.0+0xd8>
   d8c10:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8c14:	6011      	str	r1, [r2, #0]
   d8c16:	e7f2      	b.n	d8bfe <_strtol_l.isra.0+0xc2>
   d8c18:	2430      	movs	r4, #48	; 0x30
   d8c1a:	2b00      	cmp	r3, #0
   d8c1c:	d1b3      	bne.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8c1e:	2308      	movs	r3, #8
   d8c20:	e7b1      	b.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8c22:	2c30      	cmp	r4, #48	; 0x30
   d8c24:	d0a4      	beq.n	d8b70 <_strtol_l.isra.0+0x34>
   d8c26:	230a      	movs	r3, #10
   d8c28:	e7ad      	b.n	d8b86 <_strtol_l.isra.0+0x4a>
   d8c2a:	bf00      	nop
   d8c2c:	000d8ff1 	.word	0x000d8ff1

000d8c30 <strtol>:
   d8c30:	4613      	mov	r3, r2
   d8c32:	460a      	mov	r2, r1
   d8c34:	4601      	mov	r1, r0
   d8c36:	4802      	ldr	r0, [pc, #8]	; (d8c40 <strtol+0x10>)
   d8c38:	6800      	ldr	r0, [r0, #0]
   d8c3a:	f7ff bf7f 	b.w	d8b3c <_strtol_l.isra.0>
   d8c3e:	bf00      	nop
   d8c40:	2003e47c 	.word	0x2003e47c

000d8c44 <__register_exitproc>:
   d8c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8c48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d8d04 <__register_exitproc+0xc0>
   d8c4c:	4606      	mov	r6, r0
   d8c4e:	f8d8 0000 	ldr.w	r0, [r8]
   d8c52:	461f      	mov	r7, r3
   d8c54:	460d      	mov	r5, r1
   d8c56:	4691      	mov	r9, r2
   d8c58:	f000 f856 	bl	d8d08 <__retarget_lock_acquire_recursive>
   d8c5c:	4b25      	ldr	r3, [pc, #148]	; (d8cf4 <__register_exitproc+0xb0>)
   d8c5e:	681c      	ldr	r4, [r3, #0]
   d8c60:	b934      	cbnz	r4, d8c70 <__register_exitproc+0x2c>
   d8c62:	4c25      	ldr	r4, [pc, #148]	; (d8cf8 <__register_exitproc+0xb4>)
   d8c64:	601c      	str	r4, [r3, #0]
   d8c66:	4b25      	ldr	r3, [pc, #148]	; (d8cfc <__register_exitproc+0xb8>)
   d8c68:	b113      	cbz	r3, d8c70 <__register_exitproc+0x2c>
   d8c6a:	681b      	ldr	r3, [r3, #0]
   d8c6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8c70:	6863      	ldr	r3, [r4, #4]
   d8c72:	2b1f      	cmp	r3, #31
   d8c74:	dd07      	ble.n	d8c86 <__register_exitproc+0x42>
   d8c76:	f8d8 0000 	ldr.w	r0, [r8]
   d8c7a:	f000 f847 	bl	d8d0c <__retarget_lock_release_recursive>
   d8c7e:	f04f 30ff 	mov.w	r0, #4294967295
   d8c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8c86:	b34e      	cbz	r6, d8cdc <__register_exitproc+0x98>
   d8c88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d8c8c:	b988      	cbnz	r0, d8cb2 <__register_exitproc+0x6e>
   d8c8e:	4b1c      	ldr	r3, [pc, #112]	; (d8d00 <__register_exitproc+0xbc>)
   d8c90:	b923      	cbnz	r3, d8c9c <__register_exitproc+0x58>
   d8c92:	f8d8 0000 	ldr.w	r0, [r8]
   d8c96:	f000 f838 	bl	d8d0a <__retarget_lock_release>
   d8c9a:	e7f0      	b.n	d8c7e <__register_exitproc+0x3a>
   d8c9c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d8ca0:	f7fc fd96 	bl	d57d0 <malloc>
   d8ca4:	2800      	cmp	r0, #0
   d8ca6:	d0f4      	beq.n	d8c92 <__register_exitproc+0x4e>
   d8ca8:	2300      	movs	r3, #0
   d8caa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d8cae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d8cb2:	6863      	ldr	r3, [r4, #4]
   d8cb4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d8cb8:	2201      	movs	r2, #1
   d8cba:	409a      	lsls	r2, r3
   d8cbc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d8cc0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d8cc4:	4313      	orrs	r3, r2
   d8cc6:	2e02      	cmp	r6, #2
   d8cc8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d8ccc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d8cd0:	bf02      	ittt	eq
   d8cd2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d8cd6:	431a      	orreq	r2, r3
   d8cd8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d8cdc:	6863      	ldr	r3, [r4, #4]
   d8cde:	f8d8 0000 	ldr.w	r0, [r8]
   d8ce2:	1c5a      	adds	r2, r3, #1
   d8ce4:	3302      	adds	r3, #2
   d8ce6:	6062      	str	r2, [r4, #4]
   d8ce8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d8cec:	f000 f80e 	bl	d8d0c <__retarget_lock_release_recursive>
   d8cf0:	2000      	movs	r0, #0
   d8cf2:	e7c6      	b.n	d8c82 <__register_exitproc+0x3e>
   d8cf4:	2003e7e0 	.word	0x2003e7e0
   d8cf8:	2003e754 	.word	0x2003e754
   d8cfc:	00000000 	.word	0x00000000
   d8d00:	000d57d1 	.word	0x000d57d1
   d8d04:	2003e4e0 	.word	0x2003e4e0

000d8d08 <__retarget_lock_acquire_recursive>:
   d8d08:	4770      	bx	lr

000d8d0a <__retarget_lock_release>:
   d8d0a:	4770      	bx	lr

000d8d0c <__retarget_lock_release_recursive>:
   d8d0c:	4770      	bx	lr

000d8d0e <link_code_end>:
	...

000d8d10 <dynalib_user>:
   d8d10:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8d20:	0000 0000 7d7b 7b00 7422 3a22 6425 222c     ....{}.{"t":%d,"
   d8d30:	2270 253a 2c64 7322 3a22 6425 222c 2268     p":%d,"s":%d,"h"
   d8d40:	253a 7d64 6600 6572 7571 6e65 7963 7300     :%d}.frequency.s
   d8d50:	616d 7472 696c 6867 0074 656c 0064 227b     martlight.led.{"
   d8d60:	2274 253a 2c64 6c22 6769 7468 3a22 7325     t":%d,"light":%s
   d8d70:	222c 656c 2264 253a 2c73 7422 6568 6d72     ,"led":%s,"therm
   d8d80:	736f 6174 2274 253a 2c73 6422 6f6f 2272     ostat":%s,"door"
   d8d90:	253a 2c73 6322 2274 253a 646c 007d 227b     :%s,"ct":%ld}.{"
   d8da0:	304c 3a22 6425 222c 314c 3a22 6425 222c     L0":%d,"L1":%d,"
   d8db0:	2262 253a 2c64 7322 3a22 6425 222c 226d     b":%d,"s":%d,"m"
   d8dc0:	253a 2c64 4d22 3a22 6425 007d 6e6f 6100     :%d,"M":%d}.on.a
   d8dd0:	7475 006f 7262 6769 7468 656e 7373 6d00     uto.brightness.m
   d8de0:	6e69 6d00 7861 7b00 7422 3a22 6625 222c     in.max.{"t":%f,"
   d8df0:	2263 253a 2c66 6822 3a22 6625 222c 6968     c":%f,"h":%f,"hi
   d8e00:	3a22 6625 222c 7064 3a22 6625 222c 226b     ":%f,"dp":%f,"k"
   d8e10:	253a 7d66 7b00 6422 3a22 6322 6f6c 6573     :%f}.{"d":"close
   d8e20:	2264 007d 227b 2264 223a 706f 6e65 7d22     d"}.{"d":"open"}
   d8e30:	0000 0000                                   ....

000d8e34 <_ZTVN5spark13EthernetClassE>:
	...
   d8e3c:	588f 000d 5885 000d 587b 000d 5871 000d     .X...X..{X..qX..
   d8e4c:	5865 000d 5859 000d 6271 000d 6279 000d     eX..YX..qb..yb..
   d8e5c:	584d 000d 5845 000d 583b 000d 5831 000d     MX..EX..;X..1X..
   d8e6c:	62a9 000d 7061 0070 5925 252d 2d6d 6425     .b..app.%Y-%m-%d
   d8e7c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8e8c:	6d69 0065                                   ime.

000d8e90 <_ZTV9IPAddress>:
	...
   d8e98:	5e61 000d 5e51 000d 5e53 000d               a^..Q^..S^..

000d8ea4 <_ZTV9USBSerial>:
	...
   d8eac:	5f39 000d 5fa1 000d 5f77 000d 5afd 000d     9_..._..w_...Z..
   d8ebc:	5f69 000d 5f3b 000d 5f4b 000d 5f9b 000d     i_..;_..K_..._..
   d8ecc:	5f5b 000d 5f33 000d                         [_..3_..

000d8ed4 <_ZTV11USARTSerial>:
	...
   d8edc:	6045 000d 60b3 000d 608b 000d 5afd 000d     E`...`...`...Z..
   d8eec:	605b 000d 6077 000d 6069 000d 6085 000d     [`..w`..i`...`..
   d8efc:	6047 000d 604d 000d                         G`..M`..

000d8f04 <_ZTV7TwoWire>:
	...
   d8f0c:	6139 000d 6183 000d 615b 000d 613b 000d     9a...a..[a..;a..
   d8f1c:	6163 000d 616b 000d 6173 000d 617b 000d     ca..ka..sa..{a..

000d8f2c <_ZTVN5spark9WiFiClassE>:
	...
   d8f34:	6213 000d 6209 000d 61ff 000d 61b5 000d     .b...b...a...a..
   d8f44:	61f3 000d 61e7 000d 6271 000d 6279 000d     .a...a..qb..yb..
   d8f54:	61db 000d 61d3 000d 61c9 000d 61bf 000d     .a...a...a...a..
   d8f64:	62a9 000d                                   .b..

000d8f68 <_ZTVN5spark12NetworkClassE>:
	...
   d8f70:	6231 000d 623b 000d 6245 000d 624f 000d     1b..;b..Eb..Ob..
   d8f80:	6259 000d 6265 000d 6271 000d 6279 000d     Yb..eb..qb..yb..
   d8f90:	6281 000d 628d 000d 6295 000d 629f 000d     .b...b...b...b..
   d8fa0:	62a9 000d 2e30 0030 6166 736c 0065 0000     .b..0.0.false...

000d8fb0 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8fb8:	63bf 000d 63c5 000d 63db 000d 63d3 000d     .c...c...c...c..
   d8fc8:	63c1 000d                                   .c..

000d8fcc <_ZSt7nothrow>:
   d8fcc:	0000 0000 6f70 0077 6f6c 6667 0000 0000     ....pow.logf....
   d8fdc:	0000 0000                                   ....

000d8fe0 <TWO52>:
   d8fe0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d8ff0 <_ctype_>:
   d8ff0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9000:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9010:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9020:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9030:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9040:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9050:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9060:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9070:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d90f1 <link_const_variable_data_end>:
   d90f1:	00          	.byte	0x00
	...

000d90f4 <link_constructors_location>:
   d90f4:	000d45bd 	.word	0x000d45bd
   d90f8:	000d527d 	.word	0x000d527d
   d90fc:	000d5899 	.word	0x000d5899
   d9100:	000d58c1 	.word	0x000d58c1
   d9104:	000d5aed 	.word	0x000d5aed
   d9108:	000d5c09 	.word	0x000d5c09
   d910c:	000d5c8d 	.word	0x000d5c8d
   d9110:	000d5d0d 	.word	0x000d5d0d
   d9114:	000d621d 	.word	0x000d621d
   d9118:	000d637d 	.word	0x000d637d

000d911c <link_constructors_end>:
   d911c:	00000000 	.word	0x00000000
